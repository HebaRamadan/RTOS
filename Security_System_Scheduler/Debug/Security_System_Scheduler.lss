
Security_System_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e8  00800060  000036b4  00003748  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013d  00800248  00800248  00003930  2**0
                  ALLOC
  3 .stab         00004164  00000000  00000000  00003930  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001dcb  00000000  00000000  00007a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000985f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b4  00000000  00000000  000099bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0e  00000000  00000000  00009b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010c3  00000000  00000000  0000ba81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001032  00000000  00000000  0000cb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000db78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e3  00000000  00000000  0000dcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000956  00000000  00000000  0000dfdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__vector_4>
      14:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__vector_5>
      18:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__vector_6>
      1c:	0c 94 95 13 	jmp	0x272a	; 0x272a <__vector_7>
      20:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__vector_8>
      24:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__vector_9>
      28:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__vector_10>
      2c:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 14 	call	0x2978	; 0x2978 <main>
      8a:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e3       	ldi	r26, 0x3A	; 58
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e3       	ldi	r24, 0x3A	; 58
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e3       	ldi	r22, 0x3A	; 58
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 43 06 	call	0xc86	; 0xc86 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 a7 04 	call	0x94e	; 0x94e <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 46 1b 	jmp	0x368c	; 0x368c <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 cb 05 	call	0xb96	; 0xb96 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__epilogue_restores__+0x20>

0000094e <__clzsi2>:
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	7b 01       	movw	r14, r22
     958:	8c 01       	movw	r16, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	e8 16       	cp	r14, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	f8 06       	cpc	r15, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	08 07       	cpc	r16, r24
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	18 07       	cpc	r17, r24
     96a:	88 f4       	brcc	.+34     	; 0x98e <__clzsi2+0x40>
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	e8 16       	cp	r14, r24
     970:	f1 04       	cpc	r15, r1
     972:	01 05       	cpc	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	31 f0       	breq	.+12     	; 0x984 <__clzsi2+0x36>
     978:	28 f0       	brcs	.+10     	; 0x984 <__clzsi2+0x36>
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	17 c0       	rjmp	.+46     	; 0x9b2 <__clzsi2+0x64>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <__clzsi2+0x64>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	e8 16       	cp	r14, r24
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	f8 06       	cpc	r15, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	08 07       	cpc	r16, r24
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	18 07       	cpc	r17, r24
     99e:	28 f0       	brcs	.+10     	; 0x9aa <__clzsi2+0x5c>
     9a0:	88 e1       	ldi	r24, 0x18	; 24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__clzsi2+0x64>
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	20 e2       	ldi	r18, 0x20	; 32
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	28 1b       	sub	r18, r24
     9bc:	39 0b       	sbc	r19, r25
     9be:	4a 0b       	sbc	r20, r26
     9c0:	5b 0b       	sbc	r21, r27
     9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__clzsi2+0x7e>
     9c4:	16 95       	lsr	r17
     9c6:	07 95       	ror	r16
     9c8:	f7 94       	ror	r15
     9ca:	e7 94       	ror	r14
     9cc:	8a 95       	dec	r24
     9ce:	d2 f7       	brpl	.-12     	; 0x9c4 <__clzsi2+0x76>
     9d0:	f7 01       	movw	r30, r14
     9d2:	ee 5b       	subi	r30, 0xBE	; 190
     9d4:	fe 4f       	sbci	r31, 0xFE	; 254
     9d6:	80 81       	ld	r24, Z
     9d8:	28 1b       	sub	r18, r24
     9da:	31 09       	sbc	r19, r1
     9dc:	41 09       	sbc	r20, r1
     9de:	51 09       	sbc	r21, r1
     9e0:	c9 01       	movw	r24, r18
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	08 95       	ret

000009ec <__pack_f>:
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	fc 01       	movw	r30, r24
     9f8:	e4 80       	ldd	r14, Z+4	; 0x04
     9fa:	f5 80       	ldd	r15, Z+5	; 0x05
     9fc:	06 81       	ldd	r16, Z+6	; 0x06
     9fe:	17 81       	ldd	r17, Z+7	; 0x07
     a00:	d1 80       	ldd	r13, Z+1	; 0x01
     a02:	80 81       	ld	r24, Z
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	48 f4       	brcc	.+18     	; 0xa1a <__pack_f+0x2e>
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e1       	ldi	r26, 0x10	; 16
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e8 2a       	or	r14, r24
     a12:	f9 2a       	or	r15, r25
     a14:	0a 2b       	or	r16, r26
     a16:	1b 2b       	or	r17, r27
     a18:	a5 c0       	rjmp	.+330    	; 0xb64 <__pack_f+0x178>
     a1a:	84 30       	cpi	r24, 0x04	; 4
     a1c:	09 f4       	brne	.+2      	; 0xa20 <__pack_f+0x34>
     a1e:	9f c0       	rjmp	.+318    	; 0xb5e <__pack_f+0x172>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	21 f4       	brne	.+8      	; 0xa2c <__pack_f+0x40>
     a24:	ee 24       	eor	r14, r14
     a26:	ff 24       	eor	r15, r15
     a28:	87 01       	movw	r16, r14
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <__pack_f+0x4a>
     a2c:	e1 14       	cp	r14, r1
     a2e:	f1 04       	cpc	r15, r1
     a30:	01 05       	cpc	r16, r1
     a32:	11 05       	cpc	r17, r1
     a34:	19 f4       	brne	.+6      	; 0xa3c <__pack_f+0x50>
     a36:	e0 e0       	ldi	r30, 0x00	; 0
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	96 c0       	rjmp	.+300    	; 0xb68 <__pack_f+0x17c>
     a3c:	62 81       	ldd	r22, Z+2	; 0x02
     a3e:	73 81       	ldd	r23, Z+3	; 0x03
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	62 38       	cpi	r22, 0x82	; 130
     a44:	79 07       	cpc	r23, r25
     a46:	0c f0       	brlt	.+2      	; 0xa4a <__pack_f+0x5e>
     a48:	5b c0       	rjmp	.+182    	; 0xb00 <__pack_f+0x114>
     a4a:	22 e8       	ldi	r18, 0x82	; 130
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	26 1b       	sub	r18, r22
     a50:	37 0b       	sbc	r19, r23
     a52:	2a 31       	cpi	r18, 0x1A	; 26
     a54:	31 05       	cpc	r19, r1
     a56:	2c f0       	brlt	.+10     	; 0xa62 <__pack_f+0x76>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	2a c0       	rjmp	.+84     	; 0xab6 <__pack_f+0xca>
     a62:	b8 01       	movw	r22, r16
     a64:	a7 01       	movw	r20, r14
     a66:	02 2e       	mov	r0, r18
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__pack_f+0x86>
     a6a:	76 95       	lsr	r23
     a6c:	67 95       	ror	r22
     a6e:	57 95       	ror	r21
     a70:	47 95       	ror	r20
     a72:	0a 94       	dec	r0
     a74:	d2 f7       	brpl	.-12     	; 0xa6a <__pack_f+0x7e>
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__pack_f+0x9c>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	aa 1f       	adc	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	2a 95       	dec	r18
     a8a:	d2 f7       	brpl	.-12     	; 0xa80 <__pack_f+0x94>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	a1 09       	sbc	r26, r1
     a90:	b1 09       	sbc	r27, r1
     a92:	8e 21       	and	r24, r14
     a94:	9f 21       	and	r25, r15
     a96:	a0 23       	and	r26, r16
     a98:	b1 23       	and	r27, r17
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	a1 05       	cpc	r26, r1
     a9e:	b1 05       	cpc	r27, r1
     aa0:	21 f0       	breq	.+8      	; 0xaaa <__pack_f+0xbe>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	a0 e0       	ldi	r26, 0x00	; 0
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	9a 01       	movw	r18, r20
     aac:	ab 01       	movw	r20, r22
     aae:	28 2b       	or	r18, r24
     ab0:	39 2b       	or	r19, r25
     ab2:	4a 2b       	or	r20, r26
     ab4:	5b 2b       	or	r21, r27
     ab6:	da 01       	movw	r26, r20
     ab8:	c9 01       	movw	r24, r18
     aba:	8f 77       	andi	r24, 0x7F	; 127
     abc:	90 70       	andi	r25, 0x00	; 0
     abe:	a0 70       	andi	r26, 0x00	; 0
     ac0:	b0 70       	andi	r27, 0x00	; 0
     ac2:	80 34       	cpi	r24, 0x40	; 64
     ac4:	91 05       	cpc	r25, r1
     ac6:	a1 05       	cpc	r26, r1
     ac8:	b1 05       	cpc	r27, r1
     aca:	39 f4       	brne	.+14     	; 0xada <__pack_f+0xee>
     acc:	27 ff       	sbrs	r18, 7
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <__pack_f+0xf6>
     ad0:	20 5c       	subi	r18, 0xC0	; 192
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	4f 4f       	sbci	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0xf6>
     ada:	21 5c       	subi	r18, 0xC1	; 193
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	4f 4f       	sbci	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	20 30       	cpi	r18, 0x00	; 0
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	3a 07       	cpc	r19, r26
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	4a 07       	cpc	r20, r26
     af0:	a0 e4       	ldi	r26, 0x40	; 64
     af2:	5a 07       	cpc	r21, r26
     af4:	10 f0       	brcs	.+4      	; 0xafa <__pack_f+0x10e>
     af6:	e1 e0       	ldi	r30, 0x01	; 1
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	79 01       	movw	r14, r18
     afc:	8a 01       	movw	r16, r20
     afe:	27 c0       	rjmp	.+78     	; 0xb4e <__pack_f+0x162>
     b00:	60 38       	cpi	r22, 0x80	; 128
     b02:	71 05       	cpc	r23, r1
     b04:	64 f5       	brge	.+88     	; 0xb5e <__pack_f+0x172>
     b06:	fb 01       	movw	r30, r22
     b08:	e1 58       	subi	r30, 0x81	; 129
     b0a:	ff 4f       	sbci	r31, 0xFF	; 255
     b0c:	d8 01       	movw	r26, r16
     b0e:	c7 01       	movw	r24, r14
     b10:	8f 77       	andi	r24, 0x7F	; 127
     b12:	90 70       	andi	r25, 0x00	; 0
     b14:	a0 70       	andi	r26, 0x00	; 0
     b16:	b0 70       	andi	r27, 0x00	; 0
     b18:	80 34       	cpi	r24, 0x40	; 64
     b1a:	91 05       	cpc	r25, r1
     b1c:	a1 05       	cpc	r26, r1
     b1e:	b1 05       	cpc	r27, r1
     b20:	39 f4       	brne	.+14     	; 0xb30 <__pack_f+0x144>
     b22:	e7 fe       	sbrs	r14, 7
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__pack_f+0x154>
     b26:	80 e4       	ldi	r24, 0x40	; 64
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x14c>
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e8 0e       	add	r14, r24
     b3a:	f9 1e       	adc	r15, r25
     b3c:	0a 1f       	adc	r16, r26
     b3e:	1b 1f       	adc	r17, r27
     b40:	17 ff       	sbrs	r17, 7
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <__pack_f+0x162>
     b44:	16 95       	lsr	r17
     b46:	07 95       	ror	r16
     b48:	f7 94       	ror	r15
     b4a:	e7 94       	ror	r14
     b4c:	31 96       	adiw	r30, 0x01	; 1
     b4e:	87 e0       	ldi	r24, 0x07	; 7
     b50:	16 95       	lsr	r17
     b52:	07 95       	ror	r16
     b54:	f7 94       	ror	r15
     b56:	e7 94       	ror	r14
     b58:	8a 95       	dec	r24
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__pack_f+0x164>
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__pack_f+0x17c>
     b5e:	ee 24       	eor	r14, r14
     b60:	ff 24       	eor	r15, r15
     b62:	87 01       	movw	r16, r14
     b64:	ef ef       	ldi	r30, 0xFF	; 255
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	6e 2f       	mov	r22, r30
     b6a:	67 95       	ror	r22
     b6c:	66 27       	eor	r22, r22
     b6e:	67 95       	ror	r22
     b70:	90 2f       	mov	r25, r16
     b72:	9f 77       	andi	r25, 0x7F	; 127
     b74:	d7 94       	ror	r13
     b76:	dd 24       	eor	r13, r13
     b78:	d7 94       	ror	r13
     b7a:	8e 2f       	mov	r24, r30
     b7c:	86 95       	lsr	r24
     b7e:	49 2f       	mov	r20, r25
     b80:	46 2b       	or	r20, r22
     b82:	58 2f       	mov	r21, r24
     b84:	5d 29       	or	r21, r13
     b86:	b7 01       	movw	r22, r14
     b88:	ca 01       	movw	r24, r20
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	08 95       	ret

00000b96 <__unpack_f>:
     b96:	fc 01       	movw	r30, r24
     b98:	db 01       	movw	r26, r22
     b9a:	40 81       	ld	r20, Z
     b9c:	51 81       	ldd	r21, Z+1	; 0x01
     b9e:	22 81       	ldd	r18, Z+2	; 0x02
     ba0:	62 2f       	mov	r22, r18
     ba2:	6f 77       	andi	r22, 0x7F	; 127
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	22 1f       	adc	r18, r18
     ba8:	22 27       	eor	r18, r18
     baa:	22 1f       	adc	r18, r18
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	89 2f       	mov	r24, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	82 2b       	or	r24, r18
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	99 1f       	adc	r25, r25
     bba:	99 27       	eor	r25, r25
     bbc:	99 1f       	adc	r25, r25
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	9c 93       	st	X, r25
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	21 15       	cp	r18, r1
     bc6:	31 05       	cpc	r19, r1
     bc8:	a9 f5       	brne	.+106    	; 0xc34 <__unpack_f+0x9e>
     bca:	41 15       	cp	r20, r1
     bcc:	51 05       	cpc	r21, r1
     bce:	61 05       	cpc	r22, r1
     bd0:	71 05       	cpc	r23, r1
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <__unpack_f+0x42>
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	37 c0       	rjmp	.+110    	; 0xc46 <__unpack_f+0xb0>
     bd8:	82 e8       	ldi	r24, 0x82	; 130
     bda:	9f ef       	ldi	r25, 0xFF	; 255
     bdc:	13 96       	adiw	r26, 0x03	; 3
     bde:	9c 93       	st	X, r25
     be0:	8e 93       	st	-X, r24
     be2:	12 97       	sbiw	r26, 0x02	; 2
     be4:	9a 01       	movw	r18, r20
     be6:	ab 01       	movw	r20, r22
     be8:	67 e0       	ldi	r22, 0x07	; 7
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	44 1f       	adc	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	6a 95       	dec	r22
     bf4:	d1 f7       	brne	.-12     	; 0xbea <__unpack_f+0x54>
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	8c 93       	st	X, r24
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <__unpack_f+0x80>
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	44 1f       	adc	r20, r20
     c02:	55 1f       	adc	r21, r21
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	8d 91       	ld	r24, X+
     c08:	9c 91       	ld	r25, X
     c0a:	13 97       	sbiw	r26, 0x03	; 3
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	9c 93       	st	X, r25
     c12:	8e 93       	st	-X, r24
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	20 30       	cpi	r18, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	38 07       	cpc	r19, r24
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	48 07       	cpc	r20, r24
     c20:	80 e4       	ldi	r24, 0x40	; 64
     c22:	58 07       	cpc	r21, r24
     c24:	58 f3       	brcs	.-42     	; 0xbfc <__unpack_f+0x66>
     c26:	14 96       	adiw	r26, 0x04	; 4
     c28:	2d 93       	st	X+, r18
     c2a:	3d 93       	st	X+, r19
     c2c:	4d 93       	st	X+, r20
     c2e:	5c 93       	st	X, r21
     c30:	17 97       	sbiw	r26, 0x07	; 7
     c32:	08 95       	ret
     c34:	2f 3f       	cpi	r18, 0xFF	; 255
     c36:	31 05       	cpc	r19, r1
     c38:	79 f4       	brne	.+30     	; 0xc58 <__unpack_f+0xc2>
     c3a:	41 15       	cp	r20, r1
     c3c:	51 05       	cpc	r21, r1
     c3e:	61 05       	cpc	r22, r1
     c40:	71 05       	cpc	r23, r1
     c42:	19 f4       	brne	.+6      	; 0xc4a <__unpack_f+0xb4>
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	8c 93       	st	X, r24
     c48:	08 95       	ret
     c4a:	64 ff       	sbrs	r22, 4
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <__unpack_f+0xbe>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	8c 93       	st	X, r24
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <__unpack_f+0xe2>
     c54:	1c 92       	st	X, r1
     c56:	10 c0       	rjmp	.+32     	; 0xc78 <__unpack_f+0xe2>
     c58:	2f 57       	subi	r18, 0x7F	; 127
     c5a:	30 40       	sbci	r19, 0x00	; 0
     c5c:	13 96       	adiw	r26, 0x03	; 3
     c5e:	3c 93       	st	X, r19
     c60:	2e 93       	st	-X, r18
     c62:	12 97       	sbiw	r26, 0x02	; 2
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	8c 93       	st	X, r24
     c68:	87 e0       	ldi	r24, 0x07	; 7
     c6a:	44 0f       	add	r20, r20
     c6c:	55 1f       	adc	r21, r21
     c6e:	66 1f       	adc	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	8a 95       	dec	r24
     c74:	d1 f7       	brne	.-12     	; 0xc6a <__unpack_f+0xd4>
     c76:	70 64       	ori	r23, 0x40	; 64
     c78:	14 96       	adiw	r26, 0x04	; 4
     c7a:	4d 93       	st	X+, r20
     c7c:	5d 93       	st	X+, r21
     c7e:	6d 93       	st	X+, r22
     c80:	7c 93       	st	X, r23
     c82:	17 97       	sbiw	r26, 0x07	; 7
     c84:	08 95       	ret

00000c86 <__fpcmp_parts_f>:
     c86:	1f 93       	push	r17
     c88:	dc 01       	movw	r26, r24
     c8a:	fb 01       	movw	r30, r22
     c8c:	9c 91       	ld	r25, X
     c8e:	92 30       	cpi	r25, 0x02	; 2
     c90:	08 f4       	brcc	.+2      	; 0xc94 <__fpcmp_parts_f+0xe>
     c92:	47 c0       	rjmp	.+142    	; 0xd22 <__fpcmp_parts_f+0x9c>
     c94:	80 81       	ld	r24, Z
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	08 f4       	brcc	.+2      	; 0xc9c <__fpcmp_parts_f+0x16>
     c9a:	43 c0       	rjmp	.+134    	; 0xd22 <__fpcmp_parts_f+0x9c>
     c9c:	94 30       	cpi	r25, 0x04	; 4
     c9e:	51 f4       	brne	.+20     	; 0xcb4 <__fpcmp_parts_f+0x2e>
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	1c 91       	ld	r17, X
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	99 f5       	brne	.+102    	; 0xd0e <__fpcmp_parts_f+0x88>
     ca8:	81 81       	ldd	r24, Z+1	; 0x01
     caa:	68 2f       	mov	r22, r24
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	61 1b       	sub	r22, r17
     cb0:	71 09       	sbc	r23, r1
     cb2:	3f c0       	rjmp	.+126    	; 0xd32 <__fpcmp_parts_f+0xac>
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <__fpcmp_parts_f+0x3a>
     cb8:	92 30       	cpi	r25, 0x02	; 2
     cba:	31 f4       	brne	.+12     	; 0xcc8 <__fpcmp_parts_f+0x42>
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	b9 f1       	breq	.+110    	; 0xd2e <__fpcmp_parts_f+0xa8>
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	88 23       	and	r24, r24
     cc4:	89 f1       	breq	.+98     	; 0xd28 <__fpcmp_parts_f+0xa2>
     cc6:	2d c0       	rjmp	.+90     	; 0xd22 <__fpcmp_parts_f+0x9c>
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	1c 91       	ld	r17, X
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	f1 f0       	breq	.+60     	; 0xd0e <__fpcmp_parts_f+0x88>
     cd2:	81 81       	ldd	r24, Z+1	; 0x01
     cd4:	18 17       	cp	r17, r24
     cd6:	d9 f4       	brne	.+54     	; 0xd0e <__fpcmp_parts_f+0x88>
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	2d 91       	ld	r18, X+
     cdc:	3c 91       	ld	r19, X
     cde:	13 97       	sbiw	r26, 0x03	; 3
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	82 17       	cp	r24, r18
     ce6:	93 07       	cpc	r25, r19
     ce8:	94 f0       	brlt	.+36     	; 0xd0e <__fpcmp_parts_f+0x88>
     cea:	28 17       	cp	r18, r24
     cec:	39 07       	cpc	r19, r25
     cee:	bc f0       	brlt	.+46     	; 0xd1e <__fpcmp_parts_f+0x98>
     cf0:	14 96       	adiw	r26, 0x04	; 4
     cf2:	8d 91       	ld	r24, X+
     cf4:	9d 91       	ld	r25, X+
     cf6:	0d 90       	ld	r0, X+
     cf8:	bc 91       	ld	r27, X
     cfa:	a0 2d       	mov	r26, r0
     cfc:	24 81       	ldd	r18, Z+4	; 0x04
     cfe:	35 81       	ldd	r19, Z+5	; 0x05
     d00:	46 81       	ldd	r20, Z+6	; 0x06
     d02:	57 81       	ldd	r21, Z+7	; 0x07
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	4a 07       	cpc	r20, r26
     d0a:	5b 07       	cpc	r21, r27
     d0c:	18 f4       	brcc	.+6      	; 0xd14 <__fpcmp_parts_f+0x8e>
     d0e:	11 23       	and	r17, r17
     d10:	41 f0       	breq	.+16     	; 0xd22 <__fpcmp_parts_f+0x9c>
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <__fpcmp_parts_f+0xa2>
     d14:	82 17       	cp	r24, r18
     d16:	93 07       	cpc	r25, r19
     d18:	a4 07       	cpc	r26, r20
     d1a:	b5 07       	cpc	r27, r21
     d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fpcmp_parts_f+0xa8>
     d1e:	11 23       	and	r17, r17
     d20:	19 f0       	breq	.+6      	; 0xd28 <__fpcmp_parts_f+0xa2>
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <__fpcmp_parts_f+0xac>
     d28:	6f ef       	ldi	r22, 0xFF	; 255
     d2a:	7f ef       	ldi	r23, 0xFF	; 255
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__fpcmp_parts_f+0xac>
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	cb 01       	movw	r24, r22
     d34:	1f 91       	pop	r17
     d36:	08 95       	ret

00000d38 <Buzzer_vidInit>:
#include "Dio_int.h"
#include "Buzzer_cfg.h"
#include "Buzzer_int.h"

void Buzzer_vidInit(void)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(BUZZER_PIN , DIO_u8OUTPUT);
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
}
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <Buzzer_vidTurnOn>:

void Buzzer_vidTurnOn(void)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(BUZZER_PIN , DIO_u8HIGH);
     d56:	87 e0       	ldi	r24, 0x07	; 7
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <Buzzer_vidTurnOff>:

void Buzzer_vidTurnOff(void)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(BUZZER_PIN , DIO_u8LOW);
     d6c:	87 e0       	ldi	r24, 0x07	; 7
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <DC_vidInit>:
#include "DC_Motor_cfg.h"
#include "DC_Motor_int.h"


void DC_vidInit(void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(DC_MOTOR_u8PIN , DIO_u8OUTPUT);
     d82:	85 e0       	ldi	r24, 0x05	; 5
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <DC_vidTurnOn>:

void DC_vidTurnOn(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(DC_MOTOR_u8PIN , DIO_u8HIGH);
     d98:	85 e0       	ldi	r24, 0x05	; 5
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <DC_vidTurnOff>:


void DC_vidTurnOff(void)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(DC_MOTOR_u8PIN , DIO_u8LOW);
     dae:	85 e0       	ldi	r24, 0x05	; 5
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <Dio_vidSetPinDir>:
#include "../Lib/Bit_math.h"
#include "Dio_priv.h"
#include "Dio_int.h"

void Dio_vidSetPinDir(u8 Pin , u8 Dir)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <Dio_vidSetPinDir+0x6>
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <Dio_vidSetPinDir+0x8>
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <Dio_vidSetPinDir+0xa>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	86 95       	lsr	r24
     dd2:	86 95       	lsr	r24
     dd4:	86 95       	lsr	r24
     dd6:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	87 70       	andi	r24, 0x07	; 7
     ddc:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3e 83       	std	Y+6, r19	; 0x06
     de6:	2d 83       	std	Y+5, r18	; 0x05
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <Dio_vidSetPinDir+0x38>
     df2:	43 c0       	rjmp	.+134    	; 0xe7a <Dio_vidSetPinDir+0xbe>
     df4:	2d 81       	ldd	r18, Y+5	; 0x05
     df6:	3e 81       	ldd	r19, Y+6	; 0x06
     df8:	22 30       	cpi	r18, 0x02	; 2
     dfa:	31 05       	cpc	r19, r1
     dfc:	2c f4       	brge	.+10     	; 0xe08 <Dio_vidSetPinDir+0x4c>
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	71 f0       	breq	.+28     	; 0xe22 <Dio_vidSetPinDir+0x66>
     e06:	bc c0       	rjmp	.+376    	; 0xf80 <Dio_vidSetPinDir+0x1c4>
     e08:	2d 81       	ldd	r18, Y+5	; 0x05
     e0a:	3e 81       	ldd	r19, Y+6	; 0x06
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	31 05       	cpc	r19, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <Dio_vidSetPinDir+0x58>
     e12:	5f c0       	rjmp	.+190    	; 0xed2 <Dio_vidSetPinDir+0x116>
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <Dio_vidSetPinDir+0x64>
     e1e:	85 c0       	rjmp	.+266    	; 0xf2a <Dio_vidSetPinDir+0x16e>
     e20:	af c0       	rjmp	.+350    	; 0xf80 <Dio_vidSetPinDir+0x1c4>
		case 0: //DDRA
			if(Dir ==1)
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	a1 f4       	brne	.+40     	; 0xe50 <Dio_vidSetPinDir+0x94>
				{
				SET_BIT(DDRA.Byte , PinLoc);
     e28:	aa e3       	ldi	r26, 0x3A	; 58
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ea e3       	ldi	r30, 0x3A	; 58
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <Dio_vidSetPinDir+0x8a>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <Dio_vidSetPinDir+0x86>
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	98 c0       	rjmp	.+304    	; 0xf80 <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRA.Byte , PinLoc);
     e50:	aa e3       	ldi	r26, 0x3A	; 58
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ea e3       	ldi	r30, 0x3A	; 58
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <Dio_vidSetPinDir+0xb2>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <Dio_vidSetPinDir+0xae>
     e72:	80 95       	com	r24
     e74:	84 23       	and	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	83 c0       	rjmp	.+262    	; 0xf80 <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 1: //DDRB
			if(Dir ==1)
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	a1 f4       	brne	.+40     	; 0xea8 <Dio_vidSetPinDir+0xec>
				{
				SET_BIT(DDRB.Byte , PinLoc);
     e80:	a7 e3       	ldi	r26, 0x37	; 55
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e7 e3       	ldi	r30, 0x37	; 55
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <Dio_vidSetPinDir+0xe2>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <Dio_vidSetPinDir+0xde>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	6c c0       	rjmp	.+216    	; 0xf80 <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRB.Byte , PinLoc);
     ea8:	a7 e3       	ldi	r26, 0x37	; 55
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e7 e3       	ldi	r30, 0x37	; 55
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <Dio_vidSetPinDir+0x10a>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <Dio_vidSetPinDir+0x106>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	57 c0       	rjmp	.+174    	; 0xf80 <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 2: //DDRC
			if(Dir ==1)
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	a1 f4       	brne	.+40     	; 0xf00 <Dio_vidSetPinDir+0x144>
				{
				SET_BIT(DDRC.Byte , PinLoc);
     ed8:	a4 e3       	ldi	r26, 0x34	; 52
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e4 e3       	ldi	r30, 0x34	; 52
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <Dio_vidSetPinDir+0x13a>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <Dio_vidSetPinDir+0x136>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	40 c0       	rjmp	.+128    	; 0xf80 <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRC.Byte , PinLoc);
     f00:	a4 e3       	ldi	r26, 0x34	; 52
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e4 e3       	ldi	r30, 0x34	; 52
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <Dio_vidSetPinDir+0x162>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <Dio_vidSetPinDir+0x15e>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	2b c0       	rjmp	.+86     	; 0xf80 <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 3: //DDRD
			if(Dir ==1)
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	a1 f4       	brne	.+40     	; 0xf58 <Dio_vidSetPinDir+0x19c>
				{
				SET_BIT(DDRD.Byte , PinLoc);
     f30:	a1 e3       	ldi	r26, 0x31	; 49
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e1 e3       	ldi	r30, 0x31	; 49
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <Dio_vidSetPinDir+0x192>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <Dio_vidSetPinDir+0x18e>
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRD.Byte , PinLoc);
     f58:	a1 e3       	ldi	r26, 0x31	; 49
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e1 e3       	ldi	r30, 0x31	; 49
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <Dio_vidSetPinDir+0x1ba>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <Dio_vidSetPinDir+0x1b6>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
				}
			break;
	}
}
     f80:	26 96       	adiw	r28, 0x06	; 6
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin , u8 val)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <Dio_vidSetPinVal+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <Dio_vidSetPinVal+0x8>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <Dio_vidSetPinVal+0xa>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	8b 83       	std	Y+3, r24	; 0x03
     fa2:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	86 95       	lsr	r24
     fa8:	86 95       	lsr	r24
     faa:	86 95       	lsr	r24
     fac:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	87 70       	andi	r24, 0x07	; 7
     fb2:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	3e 83       	std	Y+6, r19	; 0x06
     fbc:	2d 83       	std	Y+5, r18	; 0x05
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	91 05       	cpc	r25, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <Dio_vidSetPinVal+0x38>
     fc8:	43 c0       	rjmp	.+134    	; 0x1050 <Dio_vidSetPinVal+0xbe>
     fca:	2d 81       	ldd	r18, Y+5	; 0x05
     fcc:	3e 81       	ldd	r19, Y+6	; 0x06
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	2c f4       	brge	.+10     	; 0xfde <Dio_vidSetPinVal+0x4c>
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	9e 81       	ldd	r25, Y+6	; 0x06
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	71 f0       	breq	.+28     	; 0xff8 <Dio_vidSetPinVal+0x66>
     fdc:	bc c0       	rjmp	.+376    	; 0x1156 <Dio_vidSetPinVal+0x1c4>
     fde:	2d 81       	ldd	r18, Y+5	; 0x05
     fe0:	3e 81       	ldd	r19, Y+6	; 0x06
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <Dio_vidSetPinVal+0x58>
     fe8:	5f c0       	rjmp	.+190    	; 0x10a8 <Dio_vidSetPinVal+0x116>
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <Dio_vidSetPinVal+0x64>
     ff4:	85 c0       	rjmp	.+266    	; 0x1100 <Dio_vidSetPinVal+0x16e>
     ff6:	af c0       	rjmp	.+350    	; 0x1156 <Dio_vidSetPinVal+0x1c4>
		case 0: //PORTA
			if(val ==1)
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	a1 f4       	brne	.+40     	; 0x1026 <Dio_vidSetPinVal+0x94>
				{
				SET_BIT(PORTA.Byte , PinLoc);
     ffe:	ab e3       	ldi	r26, 0x3B	; 59
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	eb e3       	ldi	r30, 0x3B	; 59
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <Dio_vidSetPinVal+0x8a>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <Dio_vidSetPinVal+0x86>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	98 c0       	rjmp	.+304    	; 0x1156 <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTA.Byte , PinLoc);
    1026:	ab e3       	ldi	r26, 0x3B	; 59
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	eb e3       	ldi	r30, 0x3B	; 59
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <Dio_vidSetPinVal+0xb2>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <Dio_vidSetPinVal+0xae>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	83 c0       	rjmp	.+262    	; 0x1156 <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 1: //PORTB
			if(val ==1)
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	a1 f4       	brne	.+40     	; 0x107e <Dio_vidSetPinVal+0xec>
				{
				SET_BIT(PORTB.Byte , PinLoc);
    1056:	a8 e3       	ldi	r26, 0x38	; 56
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e8 e3       	ldi	r30, 0x38	; 56
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <Dio_vidSetPinVal+0xe2>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <Dio_vidSetPinVal+0xde>
    1078:	84 2b       	or	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	6c c0       	rjmp	.+216    	; 0x1156 <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTB.Byte , PinLoc);
    107e:	a8 e3       	ldi	r26, 0x38	; 56
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e8 e3       	ldi	r30, 0x38	; 56
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <Dio_vidSetPinVal+0x10a>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <Dio_vidSetPinVal+0x106>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	57 c0       	rjmp	.+174    	; 0x1156 <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 2: //PORTC
			if(val ==1)
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	a1 f4       	brne	.+40     	; 0x10d6 <Dio_vidSetPinVal+0x144>
				{
				SET_BIT(PORTC.Byte , PinLoc);
    10ae:	a5 e3       	ldi	r26, 0x35	; 53
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e3       	ldi	r30, 0x35	; 53
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <Dio_vidSetPinVal+0x13a>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <Dio_vidSetPinVal+0x136>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	40 c0       	rjmp	.+128    	; 0x1156 <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTC.Byte , PinLoc);
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <Dio_vidSetPinVal+0x162>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <Dio_vidSetPinVal+0x15e>
    10f8:	80 95       	com	r24
    10fa:	84 23       	and	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	2b c0       	rjmp	.+86     	; 0x1156 <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 3: //PORTD
			if(val ==1)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	a1 f4       	brne	.+40     	; 0x112e <Dio_vidSetPinVal+0x19c>
				{
				SET_BIT(PORTD.Byte , PinLoc);
    1106:	a2 e3       	ldi	r26, 0x32	; 50
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <Dio_vidSetPinVal+0x192>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <Dio_vidSetPinVal+0x18e>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	14 c0       	rjmp	.+40     	; 0x1156 <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTD.Byte , PinLoc);
    112e:	a2 e3       	ldi	r26, 0x32	; 50
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <Dio_vidSetPinVal+0x1ba>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <Dio_vidSetPinVal+0x1b6>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
				}
			break;
	}
}
    1156:	26 96       	adiw	r28, 0x06	; 6
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <Dio_u8GetPinVal>:

u8 Dio_u8GetPinVal(u8 pin)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <Dio_u8GetPinVal+0x6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <Dio_u8GetPinVal+0x8>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <Dio_u8GetPinVal+0xa>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	8c 83       	std	Y+4, r24	; 0x04
	u8 PortId;
	u8 PinLoc;
	u8 PinVal = 0;
    1178:	19 82       	std	Y+1, r1	; 0x01

	if (pin > 31)
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	80 32       	cpi	r24, 0x20	; 32
    117e:	18 f0       	brcs	.+6      	; 0x1186 <Dio_u8GetPinVal+0x1e>
	{
		PinVal = DIO_u8INVALED_PIN_NUM;
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	6f c0       	rjmp	.+222    	; 0x1264 <Dio_u8GetPinVal+0xfc>
	}
	else
	{
		PortId = pin/8;
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	86 95       	lsr	r24
    118a:	86 95       	lsr	r24
    118c:	86 95       	lsr	r24
    118e:	8b 83       	std	Y+3, r24	; 0x03
		PinLoc = pin%8;
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	87 70       	andi	r24, 0x07	; 7
    1194:	8a 83       	std	Y+2, r24	; 0x02
		switch(PortId)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3e 83       	std	Y+6, r19	; 0x06
    119e:	2d 83       	std	Y+5, r18	; 0x05
    11a0:	4d 81       	ldd	r20, Y+5	; 0x05
    11a2:	5e 81       	ldd	r21, Y+6	; 0x06
    11a4:	41 30       	cpi	r20, 0x01	; 1
    11a6:	51 05       	cpc	r21, r1
    11a8:	41 f1       	breq	.+80     	; 0x11fa <Dio_u8GetPinVal+0x92>
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	91 05       	cpc	r25, r1
    11b2:	34 f4       	brge	.+12     	; 0x11c0 <Dio_u8GetPinVal+0x58>
    11b4:	2d 81       	ldd	r18, Y+5	; 0x05
    11b6:	3e 81       	ldd	r19, Y+6	; 0x06
    11b8:	21 15       	cp	r18, r1
    11ba:	31 05       	cpc	r19, r1
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <Dio_u8GetPinVal+0x6e>
    11be:	52 c0       	rjmp	.+164    	; 0x1264 <Dio_u8GetPinVal+0xfc>
    11c0:	4d 81       	ldd	r20, Y+5	; 0x05
    11c2:	5e 81       	ldd	r21, Y+6	; 0x06
    11c4:	42 30       	cpi	r20, 0x02	; 2
    11c6:	51 05       	cpc	r21, r1
    11c8:	51 f1       	breq	.+84     	; 0x121e <Dio_u8GetPinVal+0xb6>
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	91 05       	cpc	r25, r1
    11d2:	b9 f1       	breq	.+110    	; 0x1242 <Dio_u8GetPinVal+0xda>
    11d4:	47 c0       	rjmp	.+142    	; 0x1264 <Dio_u8GetPinVal+0xfc>
		{
			case 0: //PINA
				PinVal = GET_BIT(PINA.Byte , PinLoc);
    11d6:	e9 e3       	ldi	r30, 0x39	; 57
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a9 01       	movw	r20, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <Dio_u8GetPinVal+0x86>
    11ea:	55 95       	asr	r21
    11ec:	47 95       	ror	r20
    11ee:	8a 95       	dec	r24
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <Dio_u8GetPinVal+0x82>
    11f2:	ca 01       	movw	r24, r20
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	35 c0       	rjmp	.+106    	; 0x1264 <Dio_u8GetPinVal+0xfc>
			break;

			case 1: //PINB
				PinVal = GET_BIT(PINB.Byte , PinLoc);
    11fa:	e6 e3       	ldi	r30, 0x36	; 54
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <Dio_u8GetPinVal+0xaa>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <Dio_u8GetPinVal+0xa6>
    1216:	ca 01       	movw	r24, r20
    1218:	81 70       	andi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	23 c0       	rjmp	.+70     	; 0x1264 <Dio_u8GetPinVal+0xfc>
			break;

			case 2: //PINC
				PinVal = GET_BIT(PINC.Byte , PinLoc);
    121e:	e3 e3       	ldi	r30, 0x33	; 51
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a9 01       	movw	r20, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <Dio_u8GetPinVal+0xce>
    1232:	55 95       	asr	r21
    1234:	47 95       	ror	r20
    1236:	8a 95       	dec	r24
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <Dio_u8GetPinVal+0xca>
    123a:	ca 01       	movw	r24, r20
    123c:	81 70       	andi	r24, 0x01	; 1
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	11 c0       	rjmp	.+34     	; 0x1264 <Dio_u8GetPinVal+0xfc>
			break;

			case 3: //PIND
				PinVal = GET_BIT(PIND.Byte , PinLoc);
    1242:	e0 e3       	ldi	r30, 0x30	; 48
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	a9 01       	movw	r20, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <Dio_u8GetPinVal+0xf2>
    1256:	55 95       	asr	r21
    1258:	47 95       	ror	r20
    125a:	8a 95       	dec	r24
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <Dio_u8GetPinVal+0xee>
    125e:	ca 01       	movw	r24, r20
    1260:	81 70       	andi	r24, 0x01	; 1
    1262:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PinVal;
    1264:	89 81       	ldd	r24, Y+1	; 0x01

}
    1266:	26 96       	adiw	r28, 0x06	; 6
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <Keypad_vidInit>:
#include "Dio_int.h"
#include "Keypad_int.h"


void Keypad_vidInit(void)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(KEYPAD_u8R1_PIN , DIO_u8OUTPUT);
    1280:	80 e1       	ldi	r24, 0x10	; 16
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R2_PIN , DIO_u8OUTPUT);
    1288:	81 e1       	ldi	r24, 0x11	; 17
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R3_PIN , DIO_u8OUTPUT);
    1290:	82 e1       	ldi	r24, 0x12	; 18
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R4_PIN , DIO_u8OUTPUT);
    1298:	83 e1       	ldi	r24, 0x13	; 19
    129a:	61 e0       	ldi	r22, 0x01	; 1
    129c:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C1_PIN , DIO_u8INPUT);
    12a0:	84 e1       	ldi	r24, 0x14	; 20
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C2_PIN , DIO_u8INPUT);
    12a8:	85 e1       	ldi	r24, 0x15	; 21
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C3_PIN , DIO_u8INPUT);
    12b0:	86 e1       	ldi	r24, 0x16	; 22
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C4_PIN , DIO_u8INPUT);
    12b8:	87 e1       	ldi	r24, 0x17	; 23
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8HIGH);
    12c0:	80 e1       	ldi	r24, 0x10	; 16
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8HIGH);
    12c8:	81 e1       	ldi	r24, 0x11	; 17
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8HIGH);
    12d0:	82 e1       	ldi	r24, 0x12	; 18
    12d2:	61 e0       	ldi	r22, 0x01	; 1
    12d4:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8HIGH);
    12d8:	83 e1       	ldi	r24, 0x13	; 19
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C1_PIN , DIO_u8HIGH);
    12e0:	84 e1       	ldi	r24, 0x14	; 20
    12e2:	61 e0       	ldi	r22, 0x01	; 1
    12e4:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C2_PIN , DIO_u8HIGH);
    12e8:	85 e1       	ldi	r24, 0x15	; 21
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C3_PIN , DIO_u8HIGH);
    12f0:	86 e1       	ldi	r24, 0x16	; 22
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C4_PIN , DIO_u8HIGH);
    12f8:	87 e1       	ldi	r24, 0x17	; 23
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>

}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	2e 97       	sbiw	r28, 0x0e	; 14
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
	u8 pin_c2;
	u8 pin_c3;
	u8 pin_c4;
	u8 temp;

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8LOW);
    131a:	80 e1       	ldi	r24, 0x10	; 16
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8HIGH);
    1322:	81 e1       	ldi	r24, 0x11	; 17
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8HIGH);
    132a:	82 e1       	ldi	r24, 0x12	; 18
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8HIGH);
    1332:	83 e1       	ldi	r24, 0x13	; 19
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>

	//create mask to get value of pins
	pin_c1 = Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    133a:	84 e1       	ldi	r24, 0x14	; 20
    133c:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1340:	8d 83       	std	Y+5, r24	; 0x05
	pin_c2 = Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    1342:	85 e1       	ldi	r24, 0x15	; 21
    1344:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1348:	8c 83       	std	Y+4, r24	; 0x04
	pin_c3 = Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    134a:	86 e1       	ldi	r24, 0x16	; 22
    134c:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1350:	8b 83       	std	Y+3, r24	; 0x03
	pin_c4 = Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    1352:	87 e1       	ldi	r24, 0x17	; 23
    1354:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1358:	8a 83       	std	Y+2, r24	; 0x02

	temp = 0;
    135a:	19 82       	std	Y+1, r1	; 0x01
	temp |= (pin_c1 <<4);
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	82 95       	swap	r24
    1364:	92 95       	swap	r25
    1366:	90 7f       	andi	r25, 0xF0	; 240
    1368:	98 27       	eor	r25, r24
    136a:	80 7f       	andi	r24, 0xF0	; 240
    136c:	98 27       	eor	r25, r24
    136e:	98 2f       	mov	r25, r24
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	89 2b       	or	r24, r25
    1374:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c2 <<5);
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	82 95       	swap	r24
    1382:	92 95       	swap	r25
    1384:	90 7f       	andi	r25, 0xF0	; 240
    1386:	98 27       	eor	r25, r24
    1388:	80 7f       	andi	r24, 0xF0	; 240
    138a:	98 27       	eor	r25, r24
    138c:	98 2f       	mov	r25, r24
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	89 2b       	or	r24, r25
    1392:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c3 <<6);
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	00 24       	eor	r0, r0
    139c:	96 95       	lsr	r25
    139e:	87 95       	ror	r24
    13a0:	07 94       	ror	r0
    13a2:	96 95       	lsr	r25
    13a4:	87 95       	ror	r24
    13a6:	07 94       	ror	r0
    13a8:	98 2f       	mov	r25, r24
    13aa:	80 2d       	mov	r24, r0
    13ac:	98 2f       	mov	r25, r24
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	89 2b       	or	r24, r25
    13b2:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c4 <<7);
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	96 95       	lsr	r25
    13bc:	98 2f       	mov	r25, r24
    13be:	88 27       	eor	r24, r24
    13c0:	97 95       	ror	r25
    13c2:	87 95       	ror	r24
    13c4:	98 2f       	mov	r25, r24
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	89 2b       	or	r24, r25
    13ca:	89 83       	std	Y+1, r24	; 0x01

	switch(temp)
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3e 87       	std	Y+14, r19	; 0x0e
    13d4:	2d 87       	std	Y+13, r18	; 0x0d
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	80 3b       	cpi	r24, 0xB0	; 176
    13dc:	91 05       	cpc	r25, r1
    13de:	d9 f0       	breq	.+54     	; 0x1416 <Keypad_u8GetKey+0x110>
    13e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    13e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    13e4:	21 3b       	cpi	r18, 0xB1	; 177
    13e6:	31 05       	cpc	r19, r1
    13e8:	34 f4       	brge	.+12     	; 0x13f6 <Keypad_u8GetKey+0xf0>
    13ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ee:	80 37       	cpi	r24, 0x70	; 112
    13f0:	91 05       	cpc	r25, r1
    13f2:	a1 f0       	breq	.+40     	; 0x141c <Keypad_u8GetKey+0x116>
    13f4:	16 c0       	rjmp	.+44     	; 0x1422 <Keypad_u8GetKey+0x11c>
    13f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    13f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    13fa:	20 3d       	cpi	r18, 0xD0	; 208
    13fc:	31 05       	cpc	r19, r1
    13fe:	41 f0       	breq	.+16     	; 0x1410 <Keypad_u8GetKey+0x10a>
    1400:	8d 85       	ldd	r24, Y+13	; 0x0d
    1402:	9e 85       	ldd	r25, Y+14	; 0x0e
    1404:	80 3e       	cpi	r24, 0xE0	; 224
    1406:	91 05       	cpc	r25, r1
    1408:	61 f4       	brne	.+24     	; 0x1422 <Keypad_u8GetKey+0x11c>
	{
		case 0b11100000:
			return KEYPAD_u8R1C1_KEY;
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	9c 87       	std	Y+12, r25	; 0x0c
    140e:	96 c1       	rjmp	.+812    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b11010000:
			return KEYPAD_u8R1C2_KEY;
    1410:	22 e0       	ldi	r18, 0x02	; 2
    1412:	2c 87       	std	Y+12, r18	; 0x0c
    1414:	93 c1       	rjmp	.+806    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b10110000:
			return KEYPAD_u8R1C3_KEY;
    1416:	33 e0       	ldi	r19, 0x03	; 3
    1418:	3c 87       	std	Y+12, r19	; 0x0c
    141a:	90 c1       	rjmp	.+800    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b01110000:
			return KEYPAD_u8R1C4_KEY;
    141c:	8b e2       	ldi	r24, 0x2B	; 43
    141e:	8c 87       	std	Y+12, r24	; 0x0c
    1420:	8d c1       	rjmp	.+794    	; 0x173c <Keypad_u8GetKey+0x436>
	}


	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8HIGH);
    1422:	80 e1       	ldi	r24, 0x10	; 16
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8LOW);
    142a:	81 e1       	ldi	r24, 0x11	; 17
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8HIGH);
    1432:	82 e1       	ldi	r24, 0x12	; 18
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8HIGH);
    143a:	83 e1       	ldi	r24, 0x13	; 19
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>


	pin_c1 = Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    1442:	84 e1       	ldi	r24, 0x14	; 20
    1444:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1448:	8d 83       	std	Y+5, r24	; 0x05
	pin_c2 = Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    144a:	85 e1       	ldi	r24, 0x15	; 21
    144c:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1450:	8c 83       	std	Y+4, r24	; 0x04
	pin_c3 = Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    1452:	86 e1       	ldi	r24, 0x16	; 22
    1454:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1458:	8b 83       	std	Y+3, r24	; 0x03
	pin_c4 = Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    145a:	87 e1       	ldi	r24, 0x17	; 23
    145c:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1460:	8a 83       	std	Y+2, r24	; 0x02

	temp = 0;
    1462:	19 82       	std	Y+1, r1	; 0x01
	temp |= (pin_c1 <<4);
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	82 95       	swap	r24
    146c:	92 95       	swap	r25
    146e:	90 7f       	andi	r25, 0xF0	; 240
    1470:	98 27       	eor	r25, r24
    1472:	80 7f       	andi	r24, 0xF0	; 240
    1474:	98 27       	eor	r25, r24
    1476:	98 2f       	mov	r25, r24
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	89 2b       	or	r24, r25
    147c:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c2 <<5);
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	82 95       	swap	r24
    148a:	92 95       	swap	r25
    148c:	90 7f       	andi	r25, 0xF0	; 240
    148e:	98 27       	eor	r25, r24
    1490:	80 7f       	andi	r24, 0xF0	; 240
    1492:	98 27       	eor	r25, r24
    1494:	98 2f       	mov	r25, r24
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	89 2b       	or	r24, r25
    149a:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c3 <<6);
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	00 24       	eor	r0, r0
    14a4:	96 95       	lsr	r25
    14a6:	87 95       	ror	r24
    14a8:	07 94       	ror	r0
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	07 94       	ror	r0
    14b0:	98 2f       	mov	r25, r24
    14b2:	80 2d       	mov	r24, r0
    14b4:	98 2f       	mov	r25, r24
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	89 2b       	or	r24, r25
    14ba:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c4 <<7);
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	96 95       	lsr	r25
    14c4:	98 2f       	mov	r25, r24
    14c6:	88 27       	eor	r24, r24
    14c8:	97 95       	ror	r25
    14ca:	87 95       	ror	r24
    14cc:	98 2f       	mov	r25, r24
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	89 2b       	or	r24, r25
    14d2:	89 83       	std	Y+1, r24	; 0x01

	switch(temp)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3b 87       	std	Y+11, r19	; 0x0b
    14dc:	2a 87       	std	Y+10, r18	; 0x0a
    14de:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e2:	80 3b       	cpi	r24, 0xB0	; 176
    14e4:	91 05       	cpc	r25, r1
    14e6:	d9 f0       	breq	.+54     	; 0x151e <Keypad_u8GetKey+0x218>
    14e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    14ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    14ec:	21 3b       	cpi	r18, 0xB1	; 177
    14ee:	31 05       	cpc	r19, r1
    14f0:	34 f4       	brge	.+12     	; 0x14fe <Keypad_u8GetKey+0x1f8>
    14f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f6:	80 37       	cpi	r24, 0x70	; 112
    14f8:	91 05       	cpc	r25, r1
    14fa:	a1 f0       	breq	.+40     	; 0x1524 <Keypad_u8GetKey+0x21e>
    14fc:	16 c0       	rjmp	.+44     	; 0x152a <Keypad_u8GetKey+0x224>
    14fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1500:	3b 85       	ldd	r19, Y+11	; 0x0b
    1502:	20 3d       	cpi	r18, 0xD0	; 208
    1504:	31 05       	cpc	r19, r1
    1506:	41 f0       	breq	.+16     	; 0x1518 <Keypad_u8GetKey+0x212>
    1508:	8a 85       	ldd	r24, Y+10	; 0x0a
    150a:	9b 85       	ldd	r25, Y+11	; 0x0b
    150c:	80 3e       	cpi	r24, 0xE0	; 224
    150e:	91 05       	cpc	r25, r1
    1510:	61 f4       	brne	.+24     	; 0x152a <Keypad_u8GetKey+0x224>
	{
		case 0b11100000:
			return KEYPAD_u8R2C1_KEY;
    1512:	94 e0       	ldi	r25, 0x04	; 4
    1514:	9c 87       	std	Y+12, r25	; 0x0c
    1516:	12 c1       	rjmp	.+548    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b11010000:
			return KEYPAD_u8R2C2_KEY;
    1518:	25 e0       	ldi	r18, 0x05	; 5
    151a:	2c 87       	std	Y+12, r18	; 0x0c
    151c:	0f c1       	rjmp	.+542    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b10110000:
			return KEYPAD_u8R2C3_KEY;
    151e:	36 e0       	ldi	r19, 0x06	; 6
    1520:	3c 87       	std	Y+12, r19	; 0x0c
    1522:	0c c1       	rjmp	.+536    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b01110000:
			return KEYPAD_u8R2C4_KEY;
    1524:	8d e2       	ldi	r24, 0x2D	; 45
    1526:	8c 87       	std	Y+12, r24	; 0x0c
    1528:	09 c1       	rjmp	.+530    	; 0x173c <Keypad_u8GetKey+0x436>
	}


	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8HIGH);
    152a:	80 e1       	ldi	r24, 0x10	; 16
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8HIGH);
    1532:	81 e1       	ldi	r24, 0x11	; 17
    1534:	61 e0       	ldi	r22, 0x01	; 1
    1536:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8LOW);
    153a:	82 e1       	ldi	r24, 0x12	; 18
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8HIGH);
    1542:	83 e1       	ldi	r24, 0x13	; 19
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>


	pin_c1 = Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    154a:	84 e1       	ldi	r24, 0x14	; 20
    154c:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1550:	8d 83       	std	Y+5, r24	; 0x05
	pin_c2 = Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    1552:	85 e1       	ldi	r24, 0x15	; 21
    1554:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1558:	8c 83       	std	Y+4, r24	; 0x04
	pin_c3 = Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    155a:	86 e1       	ldi	r24, 0x16	; 22
    155c:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1560:	8b 83       	std	Y+3, r24	; 0x03
	pin_c4 = Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    1562:	87 e1       	ldi	r24, 0x17	; 23
    1564:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1568:	8a 83       	std	Y+2, r24	; 0x02

	temp = 0;
    156a:	19 82       	std	Y+1, r1	; 0x01
	temp |= (pin_c1 <<4);
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	82 95       	swap	r24
    1574:	92 95       	swap	r25
    1576:	90 7f       	andi	r25, 0xF0	; 240
    1578:	98 27       	eor	r25, r24
    157a:	80 7f       	andi	r24, 0xF0	; 240
    157c:	98 27       	eor	r25, r24
    157e:	98 2f       	mov	r25, r24
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	89 2b       	or	r24, r25
    1584:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c2 <<5);
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	82 95       	swap	r24
    1592:	92 95       	swap	r25
    1594:	90 7f       	andi	r25, 0xF0	; 240
    1596:	98 27       	eor	r25, r24
    1598:	80 7f       	andi	r24, 0xF0	; 240
    159a:	98 27       	eor	r25, r24
    159c:	98 2f       	mov	r25, r24
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	89 2b       	or	r24, r25
    15a2:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c3 <<6);
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	00 24       	eor	r0, r0
    15ac:	96 95       	lsr	r25
    15ae:	87 95       	ror	r24
    15b0:	07 94       	ror	r0
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	07 94       	ror	r0
    15b8:	98 2f       	mov	r25, r24
    15ba:	80 2d       	mov	r24, r0
    15bc:	98 2f       	mov	r25, r24
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	89 2b       	or	r24, r25
    15c2:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c4 <<7);
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	96 95       	lsr	r25
    15cc:	98 2f       	mov	r25, r24
    15ce:	88 27       	eor	r24, r24
    15d0:	97 95       	ror	r25
    15d2:	87 95       	ror	r24
    15d4:	98 2f       	mov	r25, r24
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	89 2b       	or	r24, r25
    15da:	89 83       	std	Y+1, r24	; 0x01

	switch(temp)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	39 87       	std	Y+9, r19	; 0x09
    15e4:	28 87       	std	Y+8, r18	; 0x08
    15e6:	88 85       	ldd	r24, Y+8	; 0x08
    15e8:	99 85       	ldd	r25, Y+9	; 0x09
    15ea:	80 3b       	cpi	r24, 0xB0	; 176
    15ec:	91 05       	cpc	r25, r1
    15ee:	d9 f0       	breq	.+54     	; 0x1626 <Keypad_u8GetKey+0x320>
    15f0:	28 85       	ldd	r18, Y+8	; 0x08
    15f2:	39 85       	ldd	r19, Y+9	; 0x09
    15f4:	21 3b       	cpi	r18, 0xB1	; 177
    15f6:	31 05       	cpc	r19, r1
    15f8:	34 f4       	brge	.+12     	; 0x1606 <Keypad_u8GetKey+0x300>
    15fa:	88 85       	ldd	r24, Y+8	; 0x08
    15fc:	99 85       	ldd	r25, Y+9	; 0x09
    15fe:	80 37       	cpi	r24, 0x70	; 112
    1600:	91 05       	cpc	r25, r1
    1602:	a1 f0       	breq	.+40     	; 0x162c <Keypad_u8GetKey+0x326>
    1604:	16 c0       	rjmp	.+44     	; 0x1632 <Keypad_u8GetKey+0x32c>
    1606:	28 85       	ldd	r18, Y+8	; 0x08
    1608:	39 85       	ldd	r19, Y+9	; 0x09
    160a:	20 3d       	cpi	r18, 0xD0	; 208
    160c:	31 05       	cpc	r19, r1
    160e:	41 f0       	breq	.+16     	; 0x1620 <Keypad_u8GetKey+0x31a>
    1610:	88 85       	ldd	r24, Y+8	; 0x08
    1612:	99 85       	ldd	r25, Y+9	; 0x09
    1614:	80 3e       	cpi	r24, 0xE0	; 224
    1616:	91 05       	cpc	r25, r1
    1618:	61 f4       	brne	.+24     	; 0x1632 <Keypad_u8GetKey+0x32c>
	{
		case 0b11100000:
			return KEYPAD_u8R3C1_KEY;
    161a:	97 e0       	ldi	r25, 0x07	; 7
    161c:	9c 87       	std	Y+12, r25	; 0x0c
    161e:	8e c0       	rjmp	.+284    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b11010000:
			return KEYPAD_u8R3C2_KEY;
    1620:	28 e0       	ldi	r18, 0x08	; 8
    1622:	2c 87       	std	Y+12, r18	; 0x0c
    1624:	8b c0       	rjmp	.+278    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b10110000:
			return KEYPAD_u8R3C3_KEY;
    1626:	39 e0       	ldi	r19, 0x09	; 9
    1628:	3c 87       	std	Y+12, r19	; 0x0c
    162a:	88 c0       	rjmp	.+272    	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b01110000:
			return KEYPAD_u8R3C4_KEY;
    162c:	8a e2       	ldi	r24, 0x2A	; 42
    162e:	8c 87       	std	Y+12, r24	; 0x0c
    1630:	85 c0       	rjmp	.+266    	; 0x173c <Keypad_u8GetKey+0x436>
	}


	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8HIGH);
    1632:	80 e1       	ldi	r24, 0x10	; 16
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8HIGH);
    163a:	81 e1       	ldi	r24, 0x11	; 17
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8HIGH);
    1642:	82 e1       	ldi	r24, 0x12	; 18
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8LOW);
    164a:	83 e1       	ldi	r24, 0x13	; 19
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>


	pin_c1 = Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    1652:	84 e1       	ldi	r24, 0x14	; 20
    1654:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1658:	8d 83       	std	Y+5, r24	; 0x05
	pin_c2 = Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    165a:	85 e1       	ldi	r24, 0x15	; 21
    165c:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1660:	8c 83       	std	Y+4, r24	; 0x04
	pin_c3 = Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    1662:	86 e1       	ldi	r24, 0x16	; 22
    1664:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1668:	8b 83       	std	Y+3, r24	; 0x03
	pin_c4 = Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    166a:	87 e1       	ldi	r24, 0x17	; 23
    166c:	0e 94 b4 08 	call	0x1168	; 0x1168 <Dio_u8GetPinVal>
    1670:	8a 83       	std	Y+2, r24	; 0x02

	temp = 0;
    1672:	19 82       	std	Y+1, r1	; 0x01
	temp |= (pin_c1 <<4);
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	82 95       	swap	r24
    167c:	92 95       	swap	r25
    167e:	90 7f       	andi	r25, 0xF0	; 240
    1680:	98 27       	eor	r25, r24
    1682:	80 7f       	andi	r24, 0xF0	; 240
    1684:	98 27       	eor	r25, r24
    1686:	98 2f       	mov	r25, r24
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	89 2b       	or	r24, r25
    168c:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c2 <<5);
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	82 95       	swap	r24
    169a:	92 95       	swap	r25
    169c:	90 7f       	andi	r25, 0xF0	; 240
    169e:	98 27       	eor	r25, r24
    16a0:	80 7f       	andi	r24, 0xF0	; 240
    16a2:	98 27       	eor	r25, r24
    16a4:	98 2f       	mov	r25, r24
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	89 2b       	or	r24, r25
    16aa:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c3 <<6);
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	00 24       	eor	r0, r0
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	07 94       	ror	r0
    16ba:	96 95       	lsr	r25
    16bc:	87 95       	ror	r24
    16be:	07 94       	ror	r0
    16c0:	98 2f       	mov	r25, r24
    16c2:	80 2d       	mov	r24, r0
    16c4:	98 2f       	mov	r25, r24
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	89 2b       	or	r24, r25
    16ca:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c4 <<7);
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	96 95       	lsr	r25
    16d4:	98 2f       	mov	r25, r24
    16d6:	88 27       	eor	r24, r24
    16d8:	97 95       	ror	r25
    16da:	87 95       	ror	r24
    16dc:	98 2f       	mov	r25, r24
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	89 2b       	or	r24, r25
    16e2:	89 83       	std	Y+1, r24	; 0x01

	switch(temp)
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3f 83       	std	Y+7, r19	; 0x07
    16ec:	2e 83       	std	Y+6, r18	; 0x06
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	80 3b       	cpi	r24, 0xB0	; 176
    16f4:	91 05       	cpc	r25, r1
    16f6:	d1 f0       	breq	.+52     	; 0x172c <Keypad_u8GetKey+0x426>
    16f8:	2e 81       	ldd	r18, Y+6	; 0x06
    16fa:	3f 81       	ldd	r19, Y+7	; 0x07
    16fc:	21 3b       	cpi	r18, 0xB1	; 177
    16fe:	31 05       	cpc	r19, r1
    1700:	34 f4       	brge	.+12     	; 0x170e <Keypad_u8GetKey+0x408>
    1702:	8e 81       	ldd	r24, Y+6	; 0x06
    1704:	9f 81       	ldd	r25, Y+7	; 0x07
    1706:	80 37       	cpi	r24, 0x70	; 112
    1708:	91 05       	cpc	r25, r1
    170a:	99 f0       	breq	.+38     	; 0x1732 <Keypad_u8GetKey+0x42c>
    170c:	15 c0       	rjmp	.+42     	; 0x1738 <Keypad_u8GetKey+0x432>
    170e:	2e 81       	ldd	r18, Y+6	; 0x06
    1710:	3f 81       	ldd	r19, Y+7	; 0x07
    1712:	20 3d       	cpi	r18, 0xD0	; 208
    1714:	31 05       	cpc	r19, r1
    1716:	41 f0       	breq	.+16     	; 0x1728 <Keypad_u8GetKey+0x422>
    1718:	8e 81       	ldd	r24, Y+6	; 0x06
    171a:	9f 81       	ldd	r25, Y+7	; 0x07
    171c:	80 3e       	cpi	r24, 0xE0	; 224
    171e:	91 05       	cpc	r25, r1
    1720:	59 f4       	brne	.+22     	; 0x1738 <Keypad_u8GetKey+0x432>
	{
		case 0b11100000:
			return KEYPAD_u8R4C1_KEY;
    1722:	93 e2       	ldi	r25, 0x23	; 35
    1724:	9c 87       	std	Y+12, r25	; 0x0c
    1726:	0a c0       	rjmp	.+20     	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b11010000:
			return KEYPAD_u8R4C2_KEY;
    1728:	1c 86       	std	Y+12, r1	; 0x0c
    172a:	08 c0       	rjmp	.+16     	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b10110000:
			return KEYPAD_u8R4C3_KEY;
    172c:	2d e3       	ldi	r18, 0x3D	; 61
    172e:	2c 87       	std	Y+12, r18	; 0x0c
    1730:	05 c0       	rjmp	.+10     	; 0x173c <Keypad_u8GetKey+0x436>
		case 0b01110000:
			return KEYPAD_u8R4C4_KEY;
    1732:	3f e2       	ldi	r19, 0x2F	; 47
    1734:	3c 87       	std	Y+12, r19	; 0x0c
    1736:	02 c0       	rjmp	.+4      	; 0x173c <Keypad_u8GetKey+0x436>
	}


	return KEYPAD_u8NO_KEY;
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	8c 87       	std	Y+12, r24	; 0x0c
    173c:	8c 85       	ldd	r24, Y+12	; 0x0c
	}
    173e:	2e 96       	adiw	r28, 0x0e	; 14
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <Lcd_vidSendCommand>:
u8  arr_State[MAXIMUM_ELEMENT_IN_QUEUE] ;
u8 Queue_Write_Counter = 0;
u8 Queue_Read_Counter  = 0;

void Lcd_vidSendCommand(u8 Cmd)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	0f 92       	push	r0
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
	//Start to change in LCD control Reg to indicate it that you will receive command
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8LOW);  //make RS->0 to indicate LCD "you will receive command not data"
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);  //make RW->0 to indicate LCD "you will write in command Register"
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH); //make EN->1 to indicate LCD "Please LCD don't save any thing in your buffer until be sure all data sent "
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>

	//Make Data Ready To Sent
	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Cmd,0));
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	98 2f       	mov	r25, r24
    1778:	91 70       	andi	r25, 0x01	; 1
    177a:	88 e1       	ldi	r24, 0x18	; 24
    177c:	69 2f       	mov	r22, r25
    177e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Cmd,1));
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	86 95       	lsr	r24
    1786:	98 2f       	mov	r25, r24
    1788:	91 70       	andi	r25, 0x01	; 1
    178a:	89 e1       	ldi	r24, 0x19	; 25
    178c:	69 2f       	mov	r22, r25
    178e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Cmd,2));
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	86 95       	lsr	r24
    1796:	86 95       	lsr	r24
    1798:	98 2f       	mov	r25, r24
    179a:	91 70       	andi	r25, 0x01	; 1
    179c:	8a e1       	ldi	r24, 0x1A	; 26
    179e:	69 2f       	mov	r22, r25
    17a0:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Cmd,3));
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	86 95       	lsr	r24
    17a8:	86 95       	lsr	r24
    17aa:	86 95       	lsr	r24
    17ac:	98 2f       	mov	r25, r24
    17ae:	91 70       	andi	r25, 0x01	; 1
    17b0:	8b e1       	ldi	r24, 0x1B	; 27
    17b2:	69 2f       	mov	r22, r25
    17b4:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Cmd,4));
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	82 95       	swap	r24
    17bc:	8f 70       	andi	r24, 0x0F	; 15
    17be:	98 2f       	mov	r25, r24
    17c0:	91 70       	andi	r25, 0x01	; 1
    17c2:	8c e1       	ldi	r24, 0x1C	; 28
    17c4:	69 2f       	mov	r22, r25
    17c6:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Cmd,5));
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	82 95       	swap	r24
    17ce:	86 95       	lsr	r24
    17d0:	87 70       	andi	r24, 0x07	; 7
    17d2:	98 2f       	mov	r25, r24
    17d4:	91 70       	andi	r25, 0x01	; 1
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	69 2f       	mov	r22, r25
    17da:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Cmd,6));
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	82 95       	swap	r24
    17e2:	86 95       	lsr	r24
    17e4:	86 95       	lsr	r24
    17e6:	83 70       	andi	r24, 0x03	; 3
    17e8:	98 2f       	mov	r25, r24
    17ea:	91 70       	andi	r25, 0x01	; 1
    17ec:	8e e1       	ldi	r24, 0x1E	; 30
    17ee:	69 2f       	mov	r22, r25
    17f0:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Cmd,7));
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	98 2f       	mov	r25, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	99 27       	eor	r25, r25
    17fc:	99 1f       	adc	r25, r25
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	69 2f       	mov	r22, r25
    1802:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>

}
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <Lcd_vidInit>:


void Lcd_vidInit(void)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
	 Dio_vidSetPinDir(LCD_u8RS_PIN , DIO_u8OUTPUT);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8RW_PIN , DIO_u8OUTPUT);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	61 e0       	ldi	r22, 0x01	; 1
    1824:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8EN_PIN , DIO_u8OUTPUT);
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>

	 Dio_vidSetPinDir(LCD_u8D0_PIN , DIO_u8OUTPUT);
    1830:	88 e1       	ldi	r24, 0x18	; 24
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D1_PIN , DIO_u8OUTPUT);
    1838:	89 e1       	ldi	r24, 0x19	; 25
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D2_PIN , DIO_u8OUTPUT);
    1840:	8a e1       	ldi	r24, 0x1A	; 26
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D3_PIN , DIO_u8OUTPUT);
    1848:	8b e1       	ldi	r24, 0x1B	; 27
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D4_PIN , DIO_u8OUTPUT);
    1850:	8c e1       	ldi	r24, 0x1C	; 28
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D5_PIN , DIO_u8OUTPUT);
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D6_PIN , DIO_u8OUTPUT);
    1860:	8e e1       	ldi	r24, 0x1E	; 30
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D7_PIN , DIO_u8OUTPUT);
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>


	 arr_Queue[Queue_Write_Counter]  = LCD_u8CMD_8_BIT_2x16_5x7;
    1870:	80 91 48 02 	lds	r24, 0x0248
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	fc 01       	movw	r30, r24
    187a:	ef 56       	subi	r30, 0x6F	; 111
    187c:	fd 4f       	sbci	r31, 0xFD	; 253
    187e:	88 e3       	ldi	r24, 0x38	; 56
    1880:	80 83       	st	Z, r24
	 arr_State[Queue_Write_Counter]  = COMMAND;
    1882:	80 91 48 02 	lds	r24, 0x0248
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	fc 01       	movw	r30, r24
    188c:	e1 5a       	subi	r30, 0xA1	; 161
    188e:	fd 4f       	sbci	r31, 0xFD	; 253
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 83       	st	Z, r24
	 Queue_Write_Counter++;
    1894:	80 91 48 02 	lds	r24, 0x0248
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	80 93 48 02 	sts	0x0248, r24

	 arr_Queue[Queue_Write_Counter]  = LCD_u8CMD_DISP_ON_CURS_OFF;
    189e:	80 91 48 02 	lds	r24, 0x0248
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	fc 01       	movw	r30, r24
    18a8:	ef 56       	subi	r30, 0x6F	; 111
    18aa:	fd 4f       	sbci	r31, 0xFD	; 253
    18ac:	8c e0       	ldi	r24, 0x0C	; 12
    18ae:	80 83       	st	Z, r24
	 arr_State[Queue_Write_Counter]  = COMMAND;
    18b0:	80 91 48 02 	lds	r24, 0x0248
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	fc 01       	movw	r30, r24
    18ba:	e1 5a       	subi	r30, 0xA1	; 161
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	80 83       	st	Z, r24
	 Queue_Write_Counter++;
    18c2:	80 91 48 02 	lds	r24, 0x0248
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	80 93 48 02 	sts	0x0248, r24

	 arr_Queue[Queue_Write_Counter]  = LCD_u8CMD_CLR_Display;
    18cc:	80 91 48 02 	lds	r24, 0x0248
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	fc 01       	movw	r30, r24
    18d6:	ef 56       	subi	r30, 0x6F	; 111
    18d8:	fd 4f       	sbci	r31, 0xFD	; 253
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	80 83       	st	Z, r24
	 arr_State[Queue_Write_Counter]  = COMMAND;
    18de:	80 91 48 02 	lds	r24, 0x0248
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	fc 01       	movw	r30, r24
    18e8:	e1 5a       	subi	r30, 0xA1	; 161
    18ea:	fd 4f       	sbci	r31, 0xFD	; 253
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	80 83       	st	Z, r24
	 Queue_Write_Counter++;
    18f0:	80 91 48 02 	lds	r24, 0x0248
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	80 93 48 02 	sts	0x0248, r24

	 u8 i;

	 for( i=3; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	13 c0       	rjmp	.+38     	; 0x1926 <Lcd_vidInit+0x118>
	 {
		 arr_Queue[i]  = LCD_QUEUE_NULL;
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	fc 01       	movw	r30, r24
    1908:	ef 56       	subi	r30, 0x6F	; 111
    190a:	fd 4f       	sbci	r31, 0xFD	; 253
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	80 83       	st	Z, r24
		 arr_State[i]  = LCD_QUEUE_NULL;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	fc 01       	movw	r30, r24
    1918:	e1 5a       	subi	r30, 0xA1	; 161
    191a:	fd 4f       	sbci	r31, 0xFD	; 253
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	80 83       	st	Z, r24
	 arr_State[Queue_Write_Counter]  = COMMAND;
	 Queue_Write_Counter++;

	 u8 i;

	 for( i=3; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	8f 5f       	subi	r24, 0xFF	; 255
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	82 33       	cpi	r24, 0x32	; 50
    192a:	50 f3       	brcs	.-44     	; 0x1900 <Lcd_vidInit+0xf2>
	 {
		 arr_Queue[i]  = LCD_QUEUE_NULL;
		 arr_State[i]  = LCD_QUEUE_NULL;
	 }

}
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <Lcd_vidWriteChar>:


void Lcd_vidWriteChar(u8 Char)

{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8HIGH);  //RS
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);   //RW
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH);  //EN
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>


	//Make Data Ready To Sent
	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Char,0));
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	98 2f       	mov	r25, r24
    195c:	91 70       	andi	r25, 0x01	; 1
    195e:	88 e1       	ldi	r24, 0x18	; 24
    1960:	69 2f       	mov	r22, r25
    1962:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Char,1));
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	86 95       	lsr	r24
    196a:	98 2f       	mov	r25, r24
    196c:	91 70       	andi	r25, 0x01	; 1
    196e:	89 e1       	ldi	r24, 0x19	; 25
    1970:	69 2f       	mov	r22, r25
    1972:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Char,2));
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	86 95       	lsr	r24
    197a:	86 95       	lsr	r24
    197c:	98 2f       	mov	r25, r24
    197e:	91 70       	andi	r25, 0x01	; 1
    1980:	8a e1       	ldi	r24, 0x1A	; 26
    1982:	69 2f       	mov	r22, r25
    1984:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Char,3));
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	86 95       	lsr	r24
    198c:	86 95       	lsr	r24
    198e:	86 95       	lsr	r24
    1990:	98 2f       	mov	r25, r24
    1992:	91 70       	andi	r25, 0x01	; 1
    1994:	8b e1       	ldi	r24, 0x1B	; 27
    1996:	69 2f       	mov	r22, r25
    1998:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Char,4));
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	82 95       	swap	r24
    19a0:	8f 70       	andi	r24, 0x0F	; 15
    19a2:	98 2f       	mov	r25, r24
    19a4:	91 70       	andi	r25, 0x01	; 1
    19a6:	8c e1       	ldi	r24, 0x1C	; 28
    19a8:	69 2f       	mov	r22, r25
    19aa:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Char,5));
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	82 95       	swap	r24
    19b2:	86 95       	lsr	r24
    19b4:	87 70       	andi	r24, 0x07	; 7
    19b6:	98 2f       	mov	r25, r24
    19b8:	91 70       	andi	r25, 0x01	; 1
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	69 2f       	mov	r22, r25
    19be:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Char,6));
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	82 95       	swap	r24
    19c6:	86 95       	lsr	r24
    19c8:	86 95       	lsr	r24
    19ca:	83 70       	andi	r24, 0x03	; 3
    19cc:	98 2f       	mov	r25, r24
    19ce:	91 70       	andi	r25, 0x01	; 1
    19d0:	8e e1       	ldi	r24, 0x1E	; 30
    19d2:	69 2f       	mov	r22, r25
    19d4:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Char,7));
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	98 2f       	mov	r25, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	99 27       	eor	r25, r25
    19e0:	99 1f       	adc	r25, r25
    19e2:	84 e0       	ldi	r24, 0x04	; 4
    19e4:	69 2f       	mov	r22, r25
    19e6:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>

}
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <Lcd_vidEnableTrigger>:


void Lcd_vidEnableTrigger(void)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62

	//make EN->0 to indicate LCD "NOW you can save bits in your buffer all data sent"
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>

}
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <Lcd_vidDisableTrigger>:


void Lcd_vidDisableTrigger(void)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH);
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	61 e0       	ldi	r22, 0x01	; 1
    1a14:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <Lcd_vidQueueChar>:


void Lcd_vidQueueChar(u8 Char)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	89 83       	std	Y+1, r24	; 0x01
	arr_Queue[Queue_Write_Counter] = Char;
    1a2a:	80 91 48 02 	lds	r24, 0x0248
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	fc 01       	movw	r30, r24
    1a34:	ef 56       	subi	r30, 0x6F	; 111
    1a36:	fd 4f       	sbci	r31, 0xFD	; 253
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	80 83       	st	Z, r24
	arr_State[Queue_Write_Counter] = CHAR;
    1a3c:	80 91 48 02 	lds	r24, 0x0248
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	fc 01       	movw	r30, r24
    1a46:	e1 5a       	subi	r30, 0xA1	; 161
    1a48:	fd 4f       	sbci	r31, 0xFD	; 253
    1a4a:	10 82       	st	Z, r1
	Queue_Write_Counter++;
    1a4c:	80 91 48 02 	lds	r24, 0x0248
    1a50:	8f 5f       	subi	r24, 0xFF	; 255
    1a52:	80 93 48 02 	sts	0x0248, r24
}
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <Lcd_vidQueueCommand>:


void Lcd_vidQueueCommand(u8 Command)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
	arr_Queue[Queue_Write_Counter] = Command;
    1a6a:	80 91 48 02 	lds	r24, 0x0248
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	fc 01       	movw	r30, r24
    1a74:	ef 56       	subi	r30, 0x6F	; 111
    1a76:	fd 4f       	sbci	r31, 0xFD	; 253
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	80 83       	st	Z, r24
	arr_State[Queue_Write_Counter] = COMMAND;
    1a7c:	80 91 48 02 	lds	r24, 0x0248
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	fc 01       	movw	r30, r24
    1a86:	e1 5a       	subi	r30, 0xA1	; 161
    1a88:	fd 4f       	sbci	r31, 0xFD	; 253
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	80 83       	st	Z, r24
	Queue_Write_Counter++;
    1a8e:	80 91 48 02 	lds	r24, 0x0248
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	80 93 48 02 	sts	0x0248, r24
}
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <Lcd_vidQueueString>:


void Lcd_vidQueueString(u8 *Str)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <Lcd_vidQueueString+0x6>
    1aa6:	0f 92       	push	r0
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	9b 83       	std	Y+3, r25	; 0x03
    1aae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Index = 0 ;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
    1ab2:	21 c0       	rjmp	.+66     	; 0x1af6 <Lcd_vidQueueString+0x56>

	while( Str[Index] != '\0' )
	{
		arr_Queue[Queue_Write_Counter] = Str[Index];
    1ab4:	80 91 48 02 	lds	r24, 0x0248
    1ab8:	48 2f       	mov	r20, r24
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
    1acc:	80 81       	ld	r24, Z
    1ace:	fa 01       	movw	r30, r20
    1ad0:	ef 56       	subi	r30, 0x6F	; 111
    1ad2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad4:	80 83       	st	Z, r24
		arr_State[Queue_Write_Counter] = CHAR;
    1ad6:	80 91 48 02 	lds	r24, 0x0248
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e1 5a       	subi	r30, 0xA1	; 161
    1ae2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ae4:	10 82       	st	Z, r1
		Index++;
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	8f 5f       	subi	r24, 0xFF	; 255
    1aea:	89 83       	std	Y+1, r24	; 0x01
		Queue_Write_Counter++;
    1aec:	80 91 48 02 	lds	r24, 0x0248
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	80 93 48 02 	sts	0x0248, r24

void Lcd_vidQueueString(u8 *Str)
{
	u8 Index = 0 ;

	while( Str[Index] != '\0' )
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	9b 81       	ldd	r25, Y+3	; 0x03
    1b00:	fc 01       	movw	r30, r24
    1b02:	e2 0f       	add	r30, r18
    1b04:	f3 1f       	adc	r31, r19
    1b06:	80 81       	ld	r24, Z
    1b08:	88 23       	and	r24, r24
    1b0a:	a1 f6       	brne	.-88     	; 0x1ab4 <Lcd_vidQueueString+0x14>
		arr_Queue[Queue_Write_Counter] = Str[Index];
		arr_State[Queue_Write_Counter] = CHAR;
		Index++;
		Queue_Write_Counter++;
	}
}
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <Lcd_vidClearQueue>:


void Lcd_vidClearQueue(void)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	 u8 i;

	 for( i=0; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    1b22:	19 82       	std	Y+1, r1	; 0x01
    1b24:	13 c0       	rjmp	.+38     	; 0x1b4c <Lcd_vidClearQueue+0x34>
	 {
		 arr_Queue[i]  = LCD_QUEUE_NULL;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	ef 56       	subi	r30, 0x6F	; 111
    1b30:	fd 4f       	sbci	r31, 0xFD	; 253
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	80 83       	st	Z, r24
		 arr_State[i]  = LCD_QUEUE_NULL;
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	e1 5a       	subi	r30, 0xA1	; 161
    1b40:	fd 4f       	sbci	r31, 0xFD	; 253
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	80 83       	st	Z, r24

void Lcd_vidClearQueue(void)
{
	 u8 i;

	 for( i=0; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	82 33       	cpi	r24, 0x32	; 50
    1b50:	50 f3       	brcs	.-44     	; 0x1b26 <Lcd_vidClearQueue+0xe>
	 {
		 arr_Queue[i]  = LCD_QUEUE_NULL;
		 arr_State[i]  = LCD_QUEUE_NULL;
	 }
	 Queue_Write_Counter = 0;
    1b52:	10 92 48 02 	sts	0x0248, r1
}
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <Lcd_u8ReadQueue>:


u8 Lcd_u8ReadQueue(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <Lcd_u8ReadQueue+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <Lcd_u8ReadQueue+0x8>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <Lcd_u8ReadQueue+0xa>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
	u8 State_Value;
	u8 Byte;

	State_Value = arr_State[Queue_Read_Counter];
    1b6c:	80 91 49 02 	lds	r24, 0x0249
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	fc 01       	movw	r30, r24
    1b76:	e1 5a       	subi	r30, 0xA1	; 161
    1b78:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8b 83       	std	Y+3, r24	; 0x03


	if( State_Value != LCD_QUEUE_NULL )
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	8f 3f       	cpi	r24, 0xFF	; 255
    1b82:	a9 f1       	breq	.+106    	; 0x1bee <Lcd_u8ReadQueue+0x90>
	{
		switch(State_Value)
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	3e 83       	std	Y+6, r19	; 0x06
    1b8c:	2d 83       	std	Y+5, r18	; 0x05
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	31 f0       	breq	.+12     	; 0x1ba2 <Lcd_u8ReadQueue+0x44>
    1b96:	2d 81       	ldd	r18, Y+5	; 0x05
    1b98:	3e 81       	ldd	r19, Y+6	; 0x06
    1b9a:	21 30       	cpi	r18, 0x01	; 1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	99 f0       	breq	.+38     	; 0x1bc6 <Lcd_u8ReadQueue+0x68>
    1ba0:	23 c0       	rjmp	.+70     	; 0x1be8 <Lcd_u8ReadQueue+0x8a>
		{
		case CHAR:
			Byte = arr_Queue[Queue_Read_Counter];
    1ba2:	80 91 49 02 	lds	r24, 0x0249
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	fc 01       	movw	r30, r24
    1bac:	ef 56       	subi	r30, 0x6F	; 111
    1bae:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_vidWriteChar( Byte );
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Lcd_vidWriteChar>
			Queue_Read_Counter++;
    1bba:	80 91 49 02 	lds	r24, 0x0249
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	80 93 49 02 	sts	0x0249, r24
    1bc4:	11 c0       	rjmp	.+34     	; 0x1be8 <Lcd_u8ReadQueue+0x8a>
			break;

		case COMMAND:
			Byte = arr_Queue[Queue_Read_Counter];
    1bc6:	80 91 49 02 	lds	r24, 0x0249
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	fc 01       	movw	r30, r24
    1bd0:	ef 56       	subi	r30, 0x6F	; 111
    1bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_vidSendCommand( Byte );
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Lcd_vidSendCommand>
			Queue_Read_Counter++;
    1bde:	80 91 49 02 	lds	r24, 0x0249
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	80 93 49 02 	sts	0x0249, r24
			break;
		}
		return 1;
    1be8:	31 e0       	ldi	r19, 0x01	; 1
    1bea:	3c 83       	std	Y+4, r19	; 0x04
    1bec:	1e c0       	rjmp	.+60     	; 0x1c2a <Lcd_u8ReadQueue+0xcc>
	}
	else
	{
		 u8 i;

		 for( i=0; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    1bee:	19 82       	std	Y+1, r1	; 0x01
    1bf0:	13 c0       	rjmp	.+38     	; 0x1c18 <Lcd_u8ReadQueue+0xba>
		 {
			 arr_Queue[i]  = LCD_QUEUE_NULL;
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	ef 56       	subi	r30, 0x6F	; 111
    1bfc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	80 83       	st	Z, r24
			 arr_State[i]  = LCD_QUEUE_NULL;
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	fc 01       	movw	r30, r24
    1c0a:	e1 5a       	subi	r30, 0xA1	; 161
    1c0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	80 83       	st	Z, r24
	}
	else
	{
		 u8 i;

		 for( i=0; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	82 33       	cpi	r24, 0x32	; 50
    1c1c:	50 f3       	brcs	.-44     	; 0x1bf2 <Lcd_u8ReadQueue+0x94>
		 {
			 arr_Queue[i]  = LCD_QUEUE_NULL;
			 arr_State[i]  = LCD_QUEUE_NULL;
		 }
		 Queue_Write_Counter = 0;
    1c1e:	10 92 48 02 	sts	0x0248, r1
		 Queue_Read_Counter  = 0;
    1c22:	10 92 49 02 	sts	0x0249, r1

		 return LCD_QUEUE_NULL;
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	8c 83       	std	Y+4, r24	; 0x04
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1c2c:	26 96       	adiw	r28, 0x06	; 6
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <Led_vidInit>:
#include "Dio_int.h"
#include "Led_int.h"
#include "Led_cfg.h"

void Led_vidInit(u8 LedId)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <Led_vidInit+0x6>
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	3b 83       	std	Y+3, r19	; 0x03
    1c54:	2a 83       	std	Y+2, r18	; 0x02
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	84 30       	cpi	r24, 0x04	; 4
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	c9 f1       	breq	.+114    	; 0x1cd2 <Led_vidInit+0x94>
    1c60:	2a 81       	ldd	r18, Y+2	; 0x02
    1c62:	3b 81       	ldd	r19, Y+3	; 0x03
    1c64:	25 30       	cpi	r18, 0x05	; 5
    1c66:	31 05       	cpc	r19, r1
    1c68:	84 f4       	brge	.+32     	; 0x1c8a <Led_vidInit+0x4c>
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	91 05       	cpc	r25, r1
    1c72:	29 f1       	breq	.+74     	; 0x1cbe <Led_vidInit+0x80>
    1c74:	2a 81       	ldd	r18, Y+2	; 0x02
    1c76:	3b 81       	ldd	r19, Y+3	; 0x03
    1c78:	23 30       	cpi	r18, 0x03	; 3
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	2c f5       	brge	.+74     	; 0x1cc8 <Led_vidInit+0x8a>
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	b1 f0       	breq	.+44     	; 0x1cb4 <Led_vidInit+0x76>
    1c88:	3c c0       	rjmp	.+120    	; 0x1d02 <Led_vidInit+0xc4>
    1c8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c8e:	26 30       	cpi	r18, 0x06	; 6
    1c90:	31 05       	cpc	r19, r1
    1c92:	49 f1       	breq	.+82     	; 0x1ce6 <Led_vidInit+0xa8>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	86 30       	cpi	r24, 0x06	; 6
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	fc f0       	brlt	.+62     	; 0x1cdc <Led_vidInit+0x9e>
    1c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca2:	27 30       	cpi	r18, 0x07	; 7
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	21 f1       	breq	.+72     	; 0x1cf0 <Led_vidInit+0xb2>
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cac:	88 30       	cpi	r24, 0x08	; 8
    1cae:	91 05       	cpc	r25, r1
    1cb0:	21 f1       	breq	.+72     	; 0x1cfa <Led_vidInit+0xbc>
    1cb2:	27 c0       	rjmp	.+78     	; 0x1d02 <Led_vidInit+0xc4>
	{
		case 1: Dio_vidSetPinDir(LED_8ID_1 , DIO_u8OUTPUT); break;
    1cb4:	86 e0       	ldi	r24, 0x06	; 6
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
    1cbc:	22 c0       	rjmp	.+68     	; 0x1d02 <Led_vidInit+0xc4>
		case 2: Dio_vidSetPinDir(LED_8ID_2 , DIO_u8OUTPUT); break;
    1cbe:	81 e1       	ldi	r24, 0x11	; 17
    1cc0:	61 e0       	ldi	r22, 0x01	; 1
    1cc2:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
    1cc6:	1d c0       	rjmp	.+58     	; 0x1d02 <Led_vidInit+0xc4>
		case 3: Dio_vidSetPinDir(LED_8ID_3 , DIO_u8OUTPUT); break;
    1cc8:	82 e1       	ldi	r24, 0x12	; 18
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
    1cd0:	18 c0       	rjmp	.+48     	; 0x1d02 <Led_vidInit+0xc4>
		case 4: Dio_vidSetPinDir(LED_8ID_4 , DIO_u8OUTPUT); break;
    1cd2:	83 e1       	ldi	r24, 0x13	; 19
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
    1cda:	13 c0       	rjmp	.+38     	; 0x1d02 <Led_vidInit+0xc4>
		case 5: Dio_vidSetPinDir(LED_8ID_5 , DIO_u8OUTPUT); break;
    1cdc:	88 e1       	ldi	r24, 0x18	; 24
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
    1ce4:	0e c0       	rjmp	.+28     	; 0x1d02 <Led_vidInit+0xc4>
		case 6: Dio_vidSetPinDir(LED_8ID_6 , DIO_u8OUTPUT); break;
    1ce6:	85 e1       	ldi	r24, 0x15	; 21
    1ce8:	61 e0       	ldi	r22, 0x01	; 1
    1cea:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <Led_vidInit+0xc4>
		case 7: Dio_vidSetPinDir(LED_8ID_7 , DIO_u8OUTPUT); break;
    1cf0:	86 e1       	ldi	r24, 0x16	; 22
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
    1cf8:	04 c0       	rjmp	.+8      	; 0x1d02 <Led_vidInit+0xc4>
		case 8: Dio_vidSetPinDir(LED_8ID_8 , DIO_u8OUTPUT); break;
    1cfa:	87 e1       	ldi	r24, 0x17	; 23
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	}

}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <Led_vidTurnOn>:

void Led_vidTurnOn(u8 LedId)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <Led_vidTurnOn+0x6>
    1d14:	0f 92       	push	r0
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	3b 83       	std	Y+3, r19	; 0x03
    1d24:	2a 83       	std	Y+2, r18	; 0x02
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	c9 f1       	breq	.+114    	; 0x1da2 <Led_vidTurnOn+0x94>
    1d30:	2a 81       	ldd	r18, Y+2	; 0x02
    1d32:	3b 81       	ldd	r19, Y+3	; 0x03
    1d34:	25 30       	cpi	r18, 0x05	; 5
    1d36:	31 05       	cpc	r19, r1
    1d38:	84 f4       	brge	.+32     	; 0x1d5a <Led_vidTurnOn+0x4c>
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 05       	cpc	r25, r1
    1d42:	29 f1       	breq	.+74     	; 0x1d8e <Led_vidTurnOn+0x80>
    1d44:	2a 81       	ldd	r18, Y+2	; 0x02
    1d46:	3b 81       	ldd	r19, Y+3	; 0x03
    1d48:	23 30       	cpi	r18, 0x03	; 3
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	2c f5       	brge	.+74     	; 0x1d98 <Led_vidTurnOn+0x8a>
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	9b 81       	ldd	r25, Y+3	; 0x03
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	91 05       	cpc	r25, r1
    1d56:	b1 f0       	breq	.+44     	; 0x1d84 <Led_vidTurnOn+0x76>
    1d58:	3c c0       	rjmp	.+120    	; 0x1dd2 <Led_vidTurnOn+0xc4>
    1d5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d5e:	26 30       	cpi	r18, 0x06	; 6
    1d60:	31 05       	cpc	r19, r1
    1d62:	49 f1       	breq	.+82     	; 0x1db6 <Led_vidTurnOn+0xa8>
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	86 30       	cpi	r24, 0x06	; 6
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	fc f0       	brlt	.+62     	; 0x1dac <Led_vidTurnOn+0x9e>
    1d6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d70:	3b 81       	ldd	r19, Y+3	; 0x03
    1d72:	27 30       	cpi	r18, 0x07	; 7
    1d74:	31 05       	cpc	r19, r1
    1d76:	21 f1       	breq	.+72     	; 0x1dc0 <Led_vidTurnOn+0xb2>
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	88 30       	cpi	r24, 0x08	; 8
    1d7e:	91 05       	cpc	r25, r1
    1d80:	21 f1       	breq	.+72     	; 0x1dca <Led_vidTurnOn+0xbc>
    1d82:	27 c0       	rjmp	.+78     	; 0x1dd2 <Led_vidTurnOn+0xc4>
	{
		case 1: Dio_vidSetPinVal(LED_8ID_1 , DIO_u8HIGH); break;
    1d84:	86 e0       	ldi	r24, 0x06	; 6
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1d8c:	22 c0       	rjmp	.+68     	; 0x1dd2 <Led_vidTurnOn+0xc4>
		case 2: Dio_vidSetPinVal(LED_8ID_2 , DIO_u8HIGH); break;
    1d8e:	81 e1       	ldi	r24, 0x11	; 17
    1d90:	61 e0       	ldi	r22, 0x01	; 1
    1d92:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1d96:	1d c0       	rjmp	.+58     	; 0x1dd2 <Led_vidTurnOn+0xc4>
		case 3: Dio_vidSetPinVal(LED_8ID_3 , DIO_u8HIGH); break;
    1d98:	82 e1       	ldi	r24, 0x12	; 18
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1da0:	18 c0       	rjmp	.+48     	; 0x1dd2 <Led_vidTurnOn+0xc4>
		case 4: Dio_vidSetPinVal(LED_8ID_4 , DIO_u8HIGH); break;
    1da2:	83 e1       	ldi	r24, 0x13	; 19
    1da4:	61 e0       	ldi	r22, 0x01	; 1
    1da6:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1daa:	13 c0       	rjmp	.+38     	; 0x1dd2 <Led_vidTurnOn+0xc4>
		case 5: Dio_vidSetPinVal(LED_8ID_5 , DIO_u8HIGH); break;
    1dac:	88 e1       	ldi	r24, 0x18	; 24
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <Led_vidTurnOn+0xc4>
		case 6: Dio_vidSetPinVal(LED_8ID_6 , DIO_u8HIGH); break;
    1db6:	85 e1       	ldi	r24, 0x15	; 21
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <Led_vidTurnOn+0xc4>
		case 7: Dio_vidSetPinVal(LED_8ID_7 , DIO_u8HIGH); break;
    1dc0:	86 e1       	ldi	r24, 0x16	; 22
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <Led_vidTurnOn+0xc4>
		case 8: Dio_vidSetPinVal(LED_8ID_8 , DIO_u8HIGH); break;
    1dca:	87 e1       	ldi	r24, 0x17	; 23
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	}
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <Led_vidTurnOff>:

void Led_vidTurnOff(u8 LedId)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <Led_vidTurnOff+0x6>
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	3b 83       	std	Y+3, r19	; 0x03
    1df4:	2a 83       	std	Y+2, r18	; 0x02
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	c9 f1       	breq	.+114    	; 0x1e72 <Led_vidTurnOff+0x94>
    1e00:	2a 81       	ldd	r18, Y+2	; 0x02
    1e02:	3b 81       	ldd	r19, Y+3	; 0x03
    1e04:	25 30       	cpi	r18, 0x05	; 5
    1e06:	31 05       	cpc	r19, r1
    1e08:	84 f4       	brge	.+32     	; 0x1e2a <Led_vidTurnOff+0x4c>
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	91 05       	cpc	r25, r1
    1e12:	29 f1       	breq	.+74     	; 0x1e5e <Led_vidTurnOff+0x80>
    1e14:	2a 81       	ldd	r18, Y+2	; 0x02
    1e16:	3b 81       	ldd	r19, Y+3	; 0x03
    1e18:	23 30       	cpi	r18, 0x03	; 3
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	2c f5       	brge	.+74     	; 0x1e68 <Led_vidTurnOff+0x8a>
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	9b 81       	ldd	r25, Y+3	; 0x03
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	91 05       	cpc	r25, r1
    1e26:	b1 f0       	breq	.+44     	; 0x1e54 <Led_vidTurnOff+0x76>
    1e28:	3c c0       	rjmp	.+120    	; 0x1ea2 <Led_vidTurnOff+0xc4>
    1e2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e2c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e2e:	26 30       	cpi	r18, 0x06	; 6
    1e30:	31 05       	cpc	r19, r1
    1e32:	49 f1       	breq	.+82     	; 0x1e86 <Led_vidTurnOff+0xa8>
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	9b 81       	ldd	r25, Y+3	; 0x03
    1e38:	86 30       	cpi	r24, 0x06	; 6
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	fc f0       	brlt	.+62     	; 0x1e7c <Led_vidTurnOff+0x9e>
    1e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e40:	3b 81       	ldd	r19, Y+3	; 0x03
    1e42:	27 30       	cpi	r18, 0x07	; 7
    1e44:	31 05       	cpc	r19, r1
    1e46:	21 f1       	breq	.+72     	; 0x1e90 <Led_vidTurnOff+0xb2>
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	91 05       	cpc	r25, r1
    1e50:	21 f1       	breq	.+72     	; 0x1e9a <Led_vidTurnOff+0xbc>
    1e52:	27 c0       	rjmp	.+78     	; 0x1ea2 <Led_vidTurnOff+0xc4>
	{
		case 1: Dio_vidSetPinVal(LED_8ID_1 , DIO_u8LOW); break;
    1e54:	86 e0       	ldi	r24, 0x06	; 6
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1e5c:	22 c0       	rjmp	.+68     	; 0x1ea2 <Led_vidTurnOff+0xc4>
		case 2: Dio_vidSetPinVal(LED_8ID_2 , DIO_u8LOW); break;
    1e5e:	81 e1       	ldi	r24, 0x11	; 17
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1e66:	1d c0       	rjmp	.+58     	; 0x1ea2 <Led_vidTurnOff+0xc4>
		case 3: Dio_vidSetPinVal(LED_8ID_3 , DIO_u8LOW); break;
    1e68:	82 e1       	ldi	r24, 0x12	; 18
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1e70:	18 c0       	rjmp	.+48     	; 0x1ea2 <Led_vidTurnOff+0xc4>
		case 4: Dio_vidSetPinVal(LED_8ID_4 , DIO_u8LOW); break;
    1e72:	83 e1       	ldi	r24, 0x13	; 19
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1e7a:	13 c0       	rjmp	.+38     	; 0x1ea2 <Led_vidTurnOff+0xc4>
		case 5: Dio_vidSetPinVal(LED_8ID_5 , DIO_u8LOW); break;
    1e7c:	88 e1       	ldi	r24, 0x18	; 24
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1e84:	0e c0       	rjmp	.+28     	; 0x1ea2 <Led_vidTurnOff+0xc4>
		case 6: Dio_vidSetPinVal(LED_8ID_6 , DIO_u8LOW); break;
    1e86:	85 e1       	ldi	r24, 0x15	; 21
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <Led_vidTurnOff+0xc4>
		case 7: Dio_vidSetPinVal(LED_8ID_7 , DIO_u8LOW); break;
    1e90:	86 e1       	ldi	r24, 0x16	; 22
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
    1e98:	04 c0       	rjmp	.+8      	; 0x1ea2 <Led_vidTurnOff+0xc4>
		case 8: Dio_vidSetPinVal(LED_8ID_8 , DIO_u8LOW); break;
    1e9a:	87 e1       	ldi	r24, 0x17	; 23
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	}
}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <PWM_vidInit>:
#include "Timer2_int.h"
#include "PWM_cfg.h"
#include "PWM_int.h"

void PWM_vidInit(void)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir( PWM_u8PIN , DIO_u8OUTPUT );
    1eb6:	8f e1       	ldi	r24, 0x1F	; 31
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Timer2_vidInit();
    1ebe:	0e 94 ef 13 	call	0x27de	; 0x27de <Timer2_vidInit>
}
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <PWM_vidSetDutyCycle>:



void PWM_vidSetDutyCycle(u8 Duty_Cycle)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <PWM_vidSetDutyCycle+0x6>
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	8a 83       	std	Y+2, r24	; 0x02
	u8 OCR2_Val;

	OCR2_Val = (u8)(Duty_Cycle * (255/100));
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	89 83       	std	Y+1, r24	; 0x01

	Timer2_vidSetCompareRegisterValue(OCR2_Val);
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	0e 94 30 14 	call	0x2860	; 0x2860 <Timer2_vidSetCompareRegisterValue>
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <RTO_vidInit>:
/* Create Array Of Pointer To Struct To Refer For Our Tasks */
Task_Type* apstrTaskArray[MAXIMUM_TASKS];


void RTO_vidInit(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	0f 92       	push	r0
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	for(i=0; i<MAXIMUM_TASKS; i++)
    1efa:	19 82       	std	Y+1, r1	; 0x01
    1efc:	0d c0       	rjmp	.+26     	; 0x1f18 <RTO_vidInit+0x28>
	{
		apstrTaskArray[i] = RTO_NULL;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	fc 01       	movw	r30, r24
    1f0a:	ed 53       	subi	r30, 0x3D	; 61
    1f0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f0e:	11 82       	std	Z+1, r1	; 0x01
    1f10:	10 82       	st	Z, r1


void RTO_vidInit(void)
{
	u8 i;
	for(i=0; i<MAXIMUM_TASKS; i++)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	8e 31       	cpi	r24, 0x1E	; 30
    1f1c:	80 f3       	brcs	.-32     	; 0x1efe <RTO_vidInit+0xe>
	{
		apstrTaskArray[i] = RTO_NULL;
	}

	/* Set Overflow Call Back Function */
	OVF_vidSetCB( TimerTick );
    1f1e:	8f e3       	ldi	r24, 0x3F	; 63
    1f20:	90 e1       	ldi	r25, 0x10	; 16
    1f22:	0e 94 ce 11 	call	0x239c	; 0x239c <OVF_vidSetCB>

	/* Initialize Counter Register */
	Timer0_vidSetCounterRegisterValue( 192 );
    1f26:	80 ec       	ldi	r24, 0xC0	; 192
    1f28:	0e 94 a0 11 	call	0x2340	; 0x2340 <Timer0_vidSetCounterRegisterValue>

	/* Initialize Timer_0 */
	Timer0_vidInit();
    1f2c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <Timer0_vidInit>
}
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <RTO_vidCreateQueueOfTasks>:



void RTO_vidCreateQueueOfTasks( Task_Type* TaskPointer , u8 Priorty_Of_Task)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <RTO_vidCreateQueueOfTasks+0x6>
    1f3e:	0f 92       	push	r0
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	6b 83       	std	Y+3, r22	; 0x03
	apstrTaskArray[ Priorty_Of_Task ] = TaskPointer ;
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	fc 01       	movw	r30, r24
    1f56:	ed 53       	subi	r30, 0x3D	; 61
    1f58:	fd 4f       	sbci	r31, 0xFD	; 253
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <RTO_vidScheduler>:



void RTO_vidScheduler(void)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62

	u8 u8TaskCounter ;
	for( u8TaskCounter = 0; u8TaskCounter < MAXIMUM_TASKS; u8TaskCounter++)
    1f78:	19 82       	std	Y+1, r1	; 0x01
    1f7a:	79 c0       	rjmp	.+242    	; 0x206e <RTO_vidScheduler+0x100>
	{
		if( apstrTaskArray[u8TaskCounter] != RTO_NULL )
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	fc 01       	movw	r30, r24
    1f88:	ed 53       	subi	r30, 0x3D	; 61
    1f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <RTO_vidScheduler+0x28>
    1f94:	69 c0       	rjmp	.+210    	; 0x2068 <RTO_vidScheduler+0xfa>
		{
			if( apstrTaskArray[u8TaskCounter]->u8TaskState == TASK_RUNNING_STATE)
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	ed 53       	subi	r30, 0x3D	; 61
    1fa4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa6:	01 90       	ld	r0, Z+
    1fa8:	f0 81       	ld	r31, Z
    1faa:	e0 2d       	mov	r30, r0
    1fac:	82 85       	ldd	r24, Z+10	; 0x0a
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <RTO_vidScheduler+0x46>
    1fb2:	5a c0       	rjmp	.+180    	; 0x2068 <RTO_vidScheduler+0xfa>
			{
				if( apstrTaskArray[u8TaskCounter]->u32FirstDelay == 0 )
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	88 2f       	mov	r24, r24
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	ed 53       	subi	r30, 0x3D	; 61
    1fc2:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc4:	01 90       	ld	r0, Z+
    1fc6:	f0 81       	ld	r31, Z
    1fc8:	e0 2d       	mov	r30, r0
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	a2 81       	ldd	r26, Z+2	; 0x02
    1fd0:	b3 81       	ldd	r27, Z+3	; 0x03
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	a1 05       	cpc	r26, r1
    1fd6:	b1 05       	cpc	r27, r1
    1fd8:	89 f5       	brne	.+98     	; 0x203c <RTO_vidScheduler+0xce>
				{
					apstrTaskArray[u8TaskCounter]->pfTaskCode();
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	ed 53       	subi	r30, 0x3D	; 61
    1fe8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fea:	01 90       	ld	r0, Z+
    1fec:	f0 81       	ld	r31, Z
    1fee:	e0 2d       	mov	r30, r0
    1ff0:	00 84       	ldd	r0, Z+8	; 0x08
    1ff2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ff4:	e0 2d       	mov	r30, r0
    1ff6:	09 95       	icall
					apstrTaskArray[u8TaskCounter]->u32FirstDelay = apstrTaskArray[u8TaskCounter]->u32Periodicity - 1;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	fc 01       	movw	r30, r24
    2004:	ed 53       	subi	r30, 0x3D	; 61
    2006:	fd 4f       	sbci	r31, 0xFD	; 253
    2008:	20 81       	ld	r18, Z
    200a:	31 81       	ldd	r19, Z+1	; 0x01
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	fc 01       	movw	r30, r24
    2018:	ed 53       	subi	r30, 0x3D	; 61
    201a:	fd 4f       	sbci	r31, 0xFD	; 253
    201c:	01 90       	ld	r0, Z+
    201e:	f0 81       	ld	r31, Z
    2020:	e0 2d       	mov	r30, r0
    2022:	84 81       	ldd	r24, Z+4	; 0x04
    2024:	95 81       	ldd	r25, Z+5	; 0x05
    2026:	a6 81       	ldd	r26, Z+6	; 0x06
    2028:	b7 81       	ldd	r27, Z+7	; 0x07
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	a1 09       	sbc	r26, r1
    202e:	b1 09       	sbc	r27, r1
    2030:	f9 01       	movw	r30, r18
    2032:	80 83       	st	Z, r24
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	a2 83       	std	Z+2, r26	; 0x02
    2038:	b3 83       	std	Z+3, r27	; 0x03
    203a:	16 c0       	rjmp	.+44     	; 0x2068 <RTO_vidScheduler+0xfa>
				}
				else
				{
					apstrTaskArray[u8TaskCounter]->u32FirstDelay--;
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	88 2f       	mov	r24, r24
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	fc 01       	movw	r30, r24
    2048:	ed 53       	subi	r30, 0x3D	; 61
    204a:	fd 4f       	sbci	r31, 0xFD	; 253
    204c:	01 90       	ld	r0, Z+
    204e:	f0 81       	ld	r31, Z
    2050:	e0 2d       	mov	r30, r0
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	a2 81       	ldd	r26, Z+2	; 0x02
    2058:	b3 81       	ldd	r27, Z+3	; 0x03
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	a1 09       	sbc	r26, r1
    205e:	b1 09       	sbc	r27, r1
    2060:	80 83       	st	Z, r24
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	a2 83       	std	Z+2, r26	; 0x02
    2066:	b3 83       	std	Z+3, r27	; 0x03

void RTO_vidScheduler(void)
{

	u8 u8TaskCounter ;
	for( u8TaskCounter = 0; u8TaskCounter < MAXIMUM_TASKS; u8TaskCounter++)
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	8f 5f       	subi	r24, 0xFF	; 255
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	8e 31       	cpi	r24, 0x1E	; 30
    2072:	08 f4       	brcc	.+2      	; 0x2076 <RTO_vidScheduler+0x108>
    2074:	83 cf       	rjmp	.-250    	; 0x1f7c <RTO_vidScheduler+0xe>
				}
			}

		}
	}
}
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <TimerTick>:



void TimerTick(void)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	Ovf_Count ++;
    2086:	80 91 4a 02 	lds	r24, 0x024A
    208a:	90 91 4b 02 	lds	r25, 0x024B
    208e:	a0 91 4c 02 	lds	r26, 0x024C
    2092:	b0 91 4d 02 	lds	r27, 0x024D
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	a1 1d       	adc	r26, r1
    209a:	b1 1d       	adc	r27, r1
    209c:	80 93 4a 02 	sts	0x024A, r24
    20a0:	90 93 4b 02 	sts	0x024B, r25
    20a4:	a0 93 4c 02 	sts	0x024C, r26
    20a8:	b0 93 4d 02 	sts	0x024D, r27

	/* 32 overflow Mean 1msec -> (1 Tick) */

	if( Ovf_Count == 32 )
    20ac:	80 91 4a 02 	lds	r24, 0x024A
    20b0:	90 91 4b 02 	lds	r25, 0x024B
    20b4:	a0 91 4c 02 	lds	r26, 0x024C
    20b8:	b0 91 4d 02 	lds	r27, 0x024D
    20bc:	80 32       	cpi	r24, 0x20	; 32
    20be:	91 05       	cpc	r25, r1
    20c0:	a1 05       	cpc	r26, r1
    20c2:	b1 05       	cpc	r27, r1
    20c4:	69 f4       	brne	.+26     	; 0x20e0 <TimerTick+0x62>
	{
		/* Reinitialize Overflow Counter */
		Ovf_Count = 0;
    20c6:	10 92 4a 02 	sts	0x024A, r1
    20ca:	10 92 4b 02 	sts	0x024B, r1
    20ce:	10 92 4c 02 	sts	0x024C, r1
    20d2:	10 92 4d 02 	sts	0x024D, r1

		/* Initialize Counter Register */
		Timer0_vidSetCounterRegisterValue( 192 );
    20d6:	80 ec       	ldi	r24, 0xC0	; 192
    20d8:	0e 94 a0 11 	call	0x2340	; 0x2340 <Timer0_vidSetCounterRegisterValue>

		/* Scheduler Will Excute Every 1msec  */
		RTO_vidScheduler();
    20dc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <RTO_vidScheduler>
	}

}
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <Servo_vidInit>:
#include "Dio_int.h"
#include "Servo_cfg.h"
#include "Servo_int.h"

void Servo_vidInit(void)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(TIMER_1_PIN, DIO_u8OUTPUT);
    20ee:	8d e1       	ldi	r24, 0x1D	; 29
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>

	/* Initialize Timer */
	Timer1_vidInit();
    20f6:	0e 94 3a 12 	call	0x2474	; 0x2474 <Timer1_vidInit>

	/* Set Value In ICR Register To Make Freq = 20HZ  */
	Timer1_vidSetICR1Val(20000);
    20fa:	80 e2       	ldi	r24, 0x20	; 32
    20fc:	9e e4       	ldi	r25, 0x4E	; 78
    20fe:	0e 94 87 12 	call	0x250e	; 0x250e <Timer1_vidSetICR1Val>

}
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <Servo_vidSetDegree>:

void Servo_vidSetDegree(u8 degree)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	27 97       	sbiw	r28, 0x07	; 7
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	8f 83       	std	Y+7, r24	; 0x07
	f32 time_of_degree;
	u16 val_of_register;

	/* Convert Degree To TIME And Counts */
	time_of_degree = ((degree * TIME_OF_FULL_DEGREE)/FULL_DEGREE)+INITIAL_TIME;
    211e:	8f 81       	ldd	r24, Y+7	; 0x07
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	aa 27       	eor	r26, r26
    2126:	97 fd       	sbrc	r25, 7
    2128:	a0 95       	com	r26
    212a:	ba 2f       	mov	r27, r26
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	26 e6       	ldi	r18, 0x66	; 102
    213e:	36 e6       	ldi	r19, 0x66	; 102
    2140:	46 e0       	ldi	r20, 0x06	; 6
    2142:	50 e4       	ldi	r21, 0x40	; 64
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	44 e3       	ldi	r20, 0x34	; 52
    2156:	53 e4       	ldi	r21, 0x43	; 67
    2158:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	2d ec       	ldi	r18, 0xCD	; 205
    2166:	3c ec       	ldi	r19, 0xCC	; 204
    2168:	4c ec       	ldi	r20, 0xCC	; 204
    216a:	5e e3       	ldi	r21, 0x3E	; 62
    216c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	9c 83       	std	Y+4, r25	; 0x04
    2178:	ad 83       	std	Y+5, r26	; 0x05
    217a:	be 83       	std	Y+6, r27	; 0x06
	val_of_register = (u16)(time_of_degree *1000) ;
    217c:	6b 81       	ldd	r22, Y+3	; 0x03
    217e:	7c 81       	ldd	r23, Y+4	; 0x04
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a e7       	ldi	r20, 0x7A	; 122
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare Register Value */
	Timer1_vidSetOCR1AVal(val_of_register);
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	0e 94 ab 12 	call	0x2556	; 0x2556 <Timer1_vidSetOCR1AVal>
}
    21ac:	27 96       	adiw	r28, 0x07	; 7
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <Stepper_vidInit>:
#include "Dio_int.h"
#include "Stepper_cfg.h"
#include "Stepper_int.h"

void Stepper_vidInit(void)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(STEPPER_ORANGE_COIL , DIO_u8OUTPUT);
    21c6:	88 e0       	ldi	r24, 0x08	; 8
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(STEPPER_YELLOW_COIL , DIO_u8OUTPUT);
    21ce:	89 e0       	ldi	r24, 0x09	; 9
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(STEPPER_PINK_COIL   , DIO_u8OUTPUT);
    21d6:	8a e0       	ldi	r24, 0x0A	; 10
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
	Dio_vidSetPinDir(STEPPER_BLUE_COIL   , DIO_u8OUTPUT);
    21de:	8b e0       	ldi	r24, 0x0B	; 11
    21e0:	61 e0       	ldi	r22, 0x01	; 1
    21e2:	0e 94 de 06 	call	0xdbc	; 0xdbc <Dio_vidSetPinDir>
}
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <Stepper_vidPattern_1>:


void Stepper_vidPattern_1(void)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(STEPPER_ORANGE_COIL , DIO_u8HIGH);
    21f4:	88 e0       	ldi	r24, 0x08	; 8
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_YELLOW_COIL , DIO_u8LOW );
    21fc:	89 e0       	ldi	r24, 0x09	; 9
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_PINK_COIL   , DIO_u8LOW );
    2204:	8a e0       	ldi	r24, 0x0A	; 10
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_BLUE_COIL   , DIO_u8LOW );
    220c:	8b e0       	ldi	r24, 0x0B	; 11
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <Stepper_vidPattern_2>:


void Stepper_vidPattern_2(void)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(STEPPER_ORANGE_COIL , DIO_u8LOW );
    2222:	88 e0       	ldi	r24, 0x08	; 8
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_YELLOW_COIL , DIO_u8HIGH);
    222a:	89 e0       	ldi	r24, 0x09	; 9
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_PINK_COIL   , DIO_u8LOW );
    2232:	8a e0       	ldi	r24, 0x0A	; 10
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_BLUE_COIL   , DIO_u8LOW );
    223a:	8b e0       	ldi	r24, 0x0B	; 11
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <Stepper_vidPattern_3>:


void Stepper_vidPattern_3(void)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(STEPPER_ORANGE_COIL , DIO_u8LOW );
    2250:	88 e0       	ldi	r24, 0x08	; 8
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_YELLOW_COIL , DIO_u8LOW );
    2258:	89 e0       	ldi	r24, 0x09	; 9
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_PINK_COIL   , DIO_u8HIGH);
    2260:	8a e0       	ldi	r24, 0x0A	; 10
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_BLUE_COIL   , DIO_u8LOW );
    2268:	8b e0       	ldi	r24, 0x0B	; 11
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <Stepper_vidPattern_4>:


void Stepper_vidPattern_4(void)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(STEPPER_ORANGE_COIL , DIO_u8LOW );
    227e:	88 e0       	ldi	r24, 0x08	; 8
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_YELLOW_COIL , DIO_u8LOW );
    2286:	89 e0       	ldi	r24, 0x09	; 9
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_PINK_COIL   , DIO_u8LOW );
    228e:	8a e0       	ldi	r24, 0x0A	; 10
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_BLUE_COIL   , DIO_u8HIGH);
    2296:	8b e0       	ldi	r24, 0x0B	; 11
    2298:	61 e0       	ldi	r22, 0x01	; 1
    229a:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <Stepper_vidStopMotor>:

void Stepper_vidStopMotor(void)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(STEPPER_ORANGE_COIL , DIO_u8LOW );
    22ac:	88 e0       	ldi	r24, 0x08	; 8
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_YELLOW_COIL , DIO_u8LOW );
    22b4:	89 e0       	ldi	r24, 0x09	; 9
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_PINK_COIL   , DIO_u8LOW );
    22bc:	8a e0       	ldi	r24, 0x0A	; 10
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(STEPPER_BLUE_COIL   , DIO_u8LOW );
    22c4:	8b e0       	ldi	r24, 0x0B	; 11
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	0e 94 c9 07 	call	0xf92	; 0xf92 <Dio_vidSetPinVal>
}
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <Timer0_vidInit>:

void(*Pfun_OVF)(void);
void(*Pfun_CMP)(void);

void Timer0_vidInit(void)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_u8WFG_MODE == TIMER0_u8NORMAL_MODE
	//Select Normal Mode
	TCCR0.Bits.WGM00 = 0;
    22da:	e3 e5       	ldi	r30, 0x53	; 83
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8f 7b       	andi	r24, 0xBF	; 191
    22e2:	80 83       	st	Z, r24
	TCCR0.Bits.WGM01 = 0;
    22e4:	e3 e5       	ldi	r30, 0x53	; 83
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	87 7f       	andi	r24, 0xF7	; 247
    22ec:	80 83       	st	Z, r24
#endif


#if TIMER0_u8COMPARE_MATCH_OUTPUT_MODE == TIMER0_u8OC0_DISCONNECTED
	//Select OCR0 disconnected (NO_COMPARE_MATCH)
	TCCR0.Bits.COM = 0;
    22ee:	e3 e5       	ldi	r30, 0x53	; 83
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	8f 7c       	andi	r24, 0xCF	; 207
    22f6:	80 83       	st	Z, r24
	TCCR0.Bits.COM = 3;
#endif

#if TIMER0_u8PRESCALLER_VALU == TIMER0_u8FCPU_1
	//Select No Pre_scalling
	TCCR0.Bits.CS = 1;
    22f8:	e3 e5       	ldi	r30, 0x53	; 83
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	88 7f       	andi	r24, 0xF8	; 248
    2300:	81 60       	ori	r24, 0x01	; 1
    2302:	80 83       	st	Z, r24
	TCCR0.Bits.CS = 7;
#endif

#if TIMER0_u8OVF_INTERRUPT == TIMER0_u8OVF_INTERRUPT_ENABLE
	//PIE of TIMER0 at overflow of counter register
	SREG.Bits.I_bit  =  1;
    2304:	ef e5       	ldi	r30, 0x5F	; 95
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	80 68       	ori	r24, 0x80	; 128
    230c:	80 83       	st	Z, r24
	TIMSK.Bits.TOIE0 =  1;
    230e:	e9 e5       	ldi	r30, 0x59	; 89
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	81 60       	ori	r24, 0x01	; 1
    2316:	80 83       	st	Z, r24
	//PIE of TIMER0 at Compare Match Output Register
	SREG.Bits.I_bit  =  1;
	TIMSK.Bits.OCIE0 =  1;
#elif TIMER0_u8CMP_INTERRUPT == TIMER0_u8CMP_INTERRUPT_DISABLE
	//disable interrupt timer0 at Compare Match Output Register
	TIMSK.Bits.OCIE0 =  0;
    2318:	e9 e5       	ldi	r30, 0x59	; 89
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	8d 7f       	andi	r24, 0xFD	; 253
    2320:	80 83       	st	Z, r24
#endif
}
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <Timer0_vidStopTimer>:

void Timer0_vidStopTimer(void)
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
	//Stop Timer (NO Clock Source)
	TCCR0.Bits.CS = 0;
    2330:	e3 e5       	ldi	r30, 0x53	; 83
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	88 7f       	andi	r24, 0xF8	; 248
    2338:	80 83       	st	Z, r24
}
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <Timer0_vidSetCounterRegisterValue>:

void Timer0_vidSetCounterRegisterValue(u8 Val)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	0f 92       	push	r0
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	89 83       	std	Y+1, r24	; 0x01
	//Set Value In Timer Counter Register	 (TCNT0)
	TCNT0.Byte = Val;
    234c:	e2 e5       	ldi	r30, 0x52	; 82
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	80 83       	st	Z, r24
}
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <Timer0_vidSetCompareRegisterValue>:

void Timer0_vidSetCompareRegisterValue(u8 Val)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	89 83       	std	Y+1, r24	; 0x01
	//Set Value Of Timer Compare Match Register (OCR0)
	OCR0.Byte = Val;
    2368:	ec e5       	ldi	r30, 0x5C	; 92
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	80 83       	st	Z, r24
}
    2370:	0f 90       	pop	r0
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <CMP_vidSetCB>:


void CMP_vidSetCB(void(*pf)(void))
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	00 d0       	rcall	.+0      	; 0x237e <CMP_vidSetCB+0x6>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMP = pf;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	90 93 00 03 	sts	0x0300, r25
    238e:	80 93 ff 02 	sts	0x02FF, r24
}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <OVF_vidSetCB>:


void OVF_vidSetCB(void(*pf)(void))
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <OVF_vidSetCB+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
	Pfun_OVF = pf;
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	90 93 02 03 	sts	0x0302, r25
    23b2:	80 93 01 03 	sts	0x0301, r24
}
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <__vector_10>:


void __vector_10 (void)
{
    23c0:	1f 92       	push	r1
    23c2:	0f 92       	push	r0
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	0f 92       	push	r0
    23c8:	11 24       	eor	r1, r1
    23ca:	2f 93       	push	r18
    23cc:	3f 93       	push	r19
    23ce:	4f 93       	push	r20
    23d0:	5f 93       	push	r21
    23d2:	6f 93       	push	r22
    23d4:	7f 93       	push	r23
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMP();
    23ea:	e0 91 ff 02 	lds	r30, 0x02FF
    23ee:	f0 91 00 03 	lds	r31, 0x0300
    23f2:	09 95       	icall
}
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	ff 91       	pop	r31
    23fa:	ef 91       	pop	r30
    23fc:	bf 91       	pop	r27
    23fe:	af 91       	pop	r26
    2400:	9f 91       	pop	r25
    2402:	8f 91       	pop	r24
    2404:	7f 91       	pop	r23
    2406:	6f 91       	pop	r22
    2408:	5f 91       	pop	r21
    240a:	4f 91       	pop	r20
    240c:	3f 91       	pop	r19
    240e:	2f 91       	pop	r18
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	0f 90       	pop	r0
    2416:	1f 90       	pop	r1
    2418:	18 95       	reti

0000241a <__vector_11>:

void __vector_11 (void)
{
    241a:	1f 92       	push	r1
    241c:	0f 92       	push	r0
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	0f 92       	push	r0
    2422:	11 24       	eor	r1, r1
    2424:	2f 93       	push	r18
    2426:	3f 93       	push	r19
    2428:	4f 93       	push	r20
    242a:	5f 93       	push	r21
    242c:	6f 93       	push	r22
    242e:	7f 93       	push	r23
    2430:	8f 93       	push	r24
    2432:	9f 93       	push	r25
    2434:	af 93       	push	r26
    2436:	bf 93       	push	r27
    2438:	ef 93       	push	r30
    243a:	ff 93       	push	r31
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
	Pfun_OVF();
    2444:	e0 91 01 03 	lds	r30, 0x0301
    2448:	f0 91 02 03 	lds	r31, 0x0302
    244c:	09 95       	icall
}
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	ff 91       	pop	r31
    2454:	ef 91       	pop	r30
    2456:	bf 91       	pop	r27
    2458:	af 91       	pop	r26
    245a:	9f 91       	pop	r25
    245c:	8f 91       	pop	r24
    245e:	7f 91       	pop	r23
    2460:	6f 91       	pop	r22
    2462:	5f 91       	pop	r21
    2464:	4f 91       	pop	r20
    2466:	3f 91       	pop	r19
    2468:	2f 91       	pop	r18
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	0f 90       	pop	r0
    2470:	1f 90       	pop	r1
    2472:	18 95       	reti

00002474 <Timer1_vidInit>:
void(*Pfun_CMPB)(void);
void(*Pfun_CAPT)(void);


void Timer1_vidInit(void)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B.Bits.WGM12 = 1;
	TCCR1B.Bits.WGM13 = 0;

#elif TIMER1_u8WFG_MODE == TIMER1_u8FAST_PWM_MODE_TOP_ICR1
	//Select Fast PWM Mode With ICR1 AS TOP Register
	TCCR1A.Bits.WGM10 = 0;
    247c:	ef e4       	ldi	r30, 0x4F	; 79
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8e 7f       	andi	r24, 0xFE	; 254
    2484:	80 83       	st	Z, r24
	TCCR1A.Bits.WGM11 = 1;
    2486:	ef e4       	ldi	r30, 0x4F	; 79
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	82 60       	ori	r24, 0x02	; 2
    248e:	80 83       	st	Z, r24
	TCCR1B.Bits.WGM12 = 1;
    2490:	ee e4       	ldi	r30, 0x4E	; 78
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	88 60       	ori	r24, 0x08	; 8
    2498:	80 83       	st	Z, r24
	TCCR1B.Bits.WGM13 = 1;
    249a:	ee e4       	ldi	r30, 0x4E	; 78
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	80 61       	ori	r24, 0x10	; 16
    24a2:	80 83       	st	Z, r24
	#elif TIMER1_u8COMPARE_MATCH_OUTPUT_MODE == TIMER1_u8PWM_TOGGLE_OC1_ON_CM
		//Toggle OC1A on Compare Match, OC1B disconnected
		TCCR1A.Bits.COM1A = 1;
	#elif TIMER1_u8COMPARE_MATCH_OUTPUT_MODE == TIMER1_u8PWMCLEAR_OC1_ON_CM_SET_ON_TOP
		//Clear OC1 on compare match, set OC1 at TOP
		TCCR1A.Bits.COM1A = 2;
    24a4:	ef e4       	ldi	r30, 0x4F	; 79
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	8f 73       	andi	r24, 0x3F	; 63
    24ac:	80 68       	ori	r24, 0x80	; 128
    24ae:	80 83       	st	Z, r24
#if TIMER1_u8PRESCALLER_VALU == TIMER1_u8FCPU_1
	//Select No Pre_scalling
	TCCR1B.Bits.CS = 1;
#elif TIMER1_u8PRESCALLER_VALU == TIMER1_u8FCPU_8
	//Select Pre_scaller with 8
	TCCR1B.Bits.CS = 2;
    24b0:	ee e4       	ldi	r30, 0x4E	; 78
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	88 7f       	andi	r24, 0xF8	; 248
    24b8:	82 60       	ori	r24, 0x02	; 2
    24ba:	80 83       	st	Z, r24
	//PIE of TIMER1 at overflow of counter register
	SREG.Bits.I_bit  =  1;
	TIMSK.Bits.TOIE1 =  1;
#elif TIMER1_u8OVF_INTERRUPT_CFG == TIMER1_u8OVF_INTERRUPT_DISABLE
	//disable Interrupt TIMER1 at overflow of counter register
	TIMSK.Bits.TOIE1 =  0;
    24bc:	e9 e5       	ldi	r30, 0x59	; 89
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	8b 7f       	andi	r24, 0xFB	; 251
    24c4:	80 83       	st	Z, r24
	//PIE of TIMER1 at Compare Match Output Register for Channel_A (OCR1A)
	SREG.Bits.I_bit   =  1;
	TIMSK.Bits.OCIE1A =  1;
#elif TIMER1_u8CMP_A_INTERRUPT_CFG == TIMER1_u8CMP_A_INTERRUPT_DISABLE
	//disable Interrupt TIMER1 at Compare Match Output Register for Channel_A (OCR1A)
	TIMSK.Bits.OCIE1A =  0;
    24c6:	e9 e5       	ldi	r30, 0x59	; 89
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	8f 7e       	andi	r24, 0xEF	; 239
    24ce:	80 83       	st	Z, r24
	//PIE of TIMER1 at Compare Match Output Register for Channel_B (OCR1B)
	SREG.Bits.I_bit   =  1;
	TIMSK.Bits.OCIE1B =  1;
#elif TIMER1_u8CMP_A_INTERRUPT_CFG == TIMER1_u8CMP_A_INTERRUPT_DISABLE
	//disable Interrupt TIMER1 at Compare Match Output Register for Channel_B (OCR1B)
	TIMSK.Bits.OCIE1B =  0;
    24d0:	e9 e5       	ldi	r30, 0x59	; 89
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	87 7f       	andi	r24, 0xF7	; 247
    24d8:	80 83       	st	Z, r24
	//PIE of TIMER1 Input Capture
	SREG.Bits.I_bit   =  1;
	TIMSK.Bits.TICIE1 =  1;
#elif TIMER1_u8INPUT_CAPTUER_INTERRUPT_CFG == TIMER1_u8INPUT_CAPTUER_INTERRUPT_DISABLE
	//disable Interrupt TIMER1 Input Capture
	TIMSK.Bits.TICIE1 =  0;
    24da:	e9 e5       	ldi	r30, 0x59	; 89
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 7d       	andi	r24, 0xDF	; 223
    24e2:	80 83       	st	Z, r24
#endif
}
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <Timer1_vidSetTCNT1Val>:

void Timer1_vidSetTCNT1Val(u16 Val)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <Timer1_vidSetTCNT1Val+0x6>
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
	//Set Value In Counter Register (TCNT1)
	TCNT1.Byte = Val;
    24f8:	ec e4       	ldi	r30, 0x4C	; 76
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	80 83       	st	Z, r24
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <Timer1_vidSetICR1Val>:

void Timer1_vidSetICR1Val(u16 Val)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <Timer1_vidSetICR1Val+0x6>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
	//Set Value In Input Capture Register (ICR1)
	ICR1.Byte = Val;
    251c:	e6 e4       	ldi	r30, 0x46	; 70
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <Timer1_u16GetICR1Val>:

u16 Timer1_u16GetICR1Val(void)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <Timer1_u16GetICR1Val+0x6>
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	//Read Value From Input Capture Register (ICR1)
	u16 Ret_Val;
	Ret_Val = ICR1.Byte;
    253c:	e6 e4       	ldi	r30, 0x46	; 70
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	89 83       	std	Y+1, r24	; 0x01
	return Ret_Val;
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <Timer1_vidSetOCR1AVal>:

void Timer1_vidSetOCR1AVal(u16 Val)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <Timer1_vidSetOCR1AVal+0x6>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
	//Set Value Output Compare Register Channel_A (OCR1A)
	OCR1A.Byte = Val;
    2564:	ea e4       	ldi	r30, 0x4A	; 74
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <Timer1_vidSetOCR1BVal>:

void Timer1_vidSetOCR1BVal(u16 Val)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <Timer1_vidSetOCR1BVal+0x6>
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
	//Set Value Output Compare Register Channel_B (OCR1B)
	OCR1B.Byte = Val;
    2588:	e8 e4       	ldi	r30, 0x48	; 72
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	80 83       	st	Z, r24
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <Timer1_vidInputCapRisingEdge>:

void Timer1_vidInputCapRisingEdge(void)
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
	//Select Input Capture At Rising Edge
	TCCR1B.Bits.ICES1 = 1;
    25a6:	ee e4       	ldi	r30, 0x4E	; 78
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	80 64       	ori	r24, 0x40	; 64
    25ae:	80 83       	st	Z, r24
}
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <Timer1_vidInputCapFallingEdge>:

void Timer1_vidInputCapFallingEdge(void)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
	//Select Input Capture At Falling Edge
	TCCR1B.Bits.ICES1 = 0;
    25be:	ee e4       	ldi	r30, 0x4E	; 78
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 7b       	andi	r24, 0xBF	; 191
    25c6:	80 83       	st	Z, r24
}
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <Timer1_vidStopTimer>:

void Timer1_vidStopTimer(void)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
	//Stop Timer1
	TCCR1B.Bits.CS = 0;
    25d6:	ee e4       	ldi	r30, 0x4E	; 78
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	88 7f       	andi	r24, 0xF8	; 248
    25de:	80 83       	st	Z, r24
}
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <Timer1_vidSetCallBackOVF>:

void Timer1_vidSetCallBackOVF(void(*pf)(void))
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <Timer1_vidSetCallBackOVF+0x6>
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
	Pfun_OVF = pf;
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	9a 81       	ldd	r25, Y+2	; 0x02
    25f8:	90 93 02 03 	sts	0x0302, r25
    25fc:	80 93 01 03 	sts	0x0301, r24
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <Timer1_vidSetCallBackCMP_A>:

void Timer1_vidSetCallBackCMP_A(void(*pf)(void))
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	00 d0       	rcall	.+0      	; 0x2610 <Timer1_vidSetCallBackCMP_A+0x6>
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMPA = pf;
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	90 93 08 03 	sts	0x0308, r25
    2620:	80 93 07 03 	sts	0x0307, r24
}
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <Timer1_vidSetCallBackCMP_B>:

void Timer1_vidSetCallBackCMP_B(void(*pf)(void))
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <Timer1_vidSetCallBackCMP_B+0x6>
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMPB = pf;
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	90 93 06 03 	sts	0x0306, r25
    2644:	80 93 05 03 	sts	0x0305, r24
}
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <Timer1_vidSetCallBackInputCAP>:

void Timer1_vidSetCallBackInputCAP(void(*pf)(void))
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	00 d0       	rcall	.+0      	; 0x2658 <Timer1_vidSetCallBackInputCAP+0x6>
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CAPT = pf;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	90 93 04 03 	sts	0x0304, r25
    2668:	80 93 03 03 	sts	0x0303, r24
}
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <__vector_9>:

void __vector_9 (void)
{
    2676:	1f 92       	push	r1
    2678:	0f 92       	push	r0
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	0f 92       	push	r0
    267e:	11 24       	eor	r1, r1
    2680:	2f 93       	push	r18
    2682:	3f 93       	push	r19
    2684:	4f 93       	push	r20
    2686:	5f 93       	push	r21
    2688:	6f 93       	push	r22
    268a:	7f 93       	push	r23
    268c:	8f 93       	push	r24
    268e:	9f 93       	push	r25
    2690:	af 93       	push	r26
    2692:	bf 93       	push	r27
    2694:	ef 93       	push	r30
    2696:	ff 93       	push	r31
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
	Pfun_OVF();
    26a0:	e0 91 01 03 	lds	r30, 0x0301
    26a4:	f0 91 02 03 	lds	r31, 0x0302
    26a8:	09 95       	icall
}
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	ff 91       	pop	r31
    26b0:	ef 91       	pop	r30
    26b2:	bf 91       	pop	r27
    26b4:	af 91       	pop	r26
    26b6:	9f 91       	pop	r25
    26b8:	8f 91       	pop	r24
    26ba:	7f 91       	pop	r23
    26bc:	6f 91       	pop	r22
    26be:	5f 91       	pop	r21
    26c0:	4f 91       	pop	r20
    26c2:	3f 91       	pop	r19
    26c4:	2f 91       	pop	r18
    26c6:	0f 90       	pop	r0
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	0f 90       	pop	r0
    26cc:	1f 90       	pop	r1
    26ce:	18 95       	reti

000026d0 <__vector_8>:

void __vector_8 (void)
{
    26d0:	1f 92       	push	r1
    26d2:	0f 92       	push	r0
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	0f 92       	push	r0
    26d8:	11 24       	eor	r1, r1
    26da:	2f 93       	push	r18
    26dc:	3f 93       	push	r19
    26de:	4f 93       	push	r20
    26e0:	5f 93       	push	r21
    26e2:	6f 93       	push	r22
    26e4:	7f 93       	push	r23
    26e6:	8f 93       	push	r24
    26e8:	9f 93       	push	r25
    26ea:	af 93       	push	r26
    26ec:	bf 93       	push	r27
    26ee:	ef 93       	push	r30
    26f0:	ff 93       	push	r31
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMPB();
    26fa:	e0 91 05 03 	lds	r30, 0x0305
    26fe:	f0 91 06 03 	lds	r31, 0x0306
    2702:	09 95       	icall
}
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	ff 91       	pop	r31
    270a:	ef 91       	pop	r30
    270c:	bf 91       	pop	r27
    270e:	af 91       	pop	r26
    2710:	9f 91       	pop	r25
    2712:	8f 91       	pop	r24
    2714:	7f 91       	pop	r23
    2716:	6f 91       	pop	r22
    2718:	5f 91       	pop	r21
    271a:	4f 91       	pop	r20
    271c:	3f 91       	pop	r19
    271e:	2f 91       	pop	r18
    2720:	0f 90       	pop	r0
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	0f 90       	pop	r0
    2726:	1f 90       	pop	r1
    2728:	18 95       	reti

0000272a <__vector_7>:

void __vector_7 (void)
{
    272a:	1f 92       	push	r1
    272c:	0f 92       	push	r0
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	0f 92       	push	r0
    2732:	11 24       	eor	r1, r1
    2734:	2f 93       	push	r18
    2736:	3f 93       	push	r19
    2738:	4f 93       	push	r20
    273a:	5f 93       	push	r21
    273c:	6f 93       	push	r22
    273e:	7f 93       	push	r23
    2740:	8f 93       	push	r24
    2742:	9f 93       	push	r25
    2744:	af 93       	push	r26
    2746:	bf 93       	push	r27
    2748:	ef 93       	push	r30
    274a:	ff 93       	push	r31
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMPA();
    2754:	e0 91 07 03 	lds	r30, 0x0307
    2758:	f0 91 08 03 	lds	r31, 0x0308
    275c:	09 95       	icall
}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	ff 91       	pop	r31
    2764:	ef 91       	pop	r30
    2766:	bf 91       	pop	r27
    2768:	af 91       	pop	r26
    276a:	9f 91       	pop	r25
    276c:	8f 91       	pop	r24
    276e:	7f 91       	pop	r23
    2770:	6f 91       	pop	r22
    2772:	5f 91       	pop	r21
    2774:	4f 91       	pop	r20
    2776:	3f 91       	pop	r19
    2778:	2f 91       	pop	r18
    277a:	0f 90       	pop	r0
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	0f 90       	pop	r0
    2780:	1f 90       	pop	r1
    2782:	18 95       	reti

00002784 <__vector_6>:

void __vector_6 (void)
{
    2784:	1f 92       	push	r1
    2786:	0f 92       	push	r0
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	0f 92       	push	r0
    278c:	11 24       	eor	r1, r1
    278e:	2f 93       	push	r18
    2790:	3f 93       	push	r19
    2792:	4f 93       	push	r20
    2794:	5f 93       	push	r21
    2796:	6f 93       	push	r22
    2798:	7f 93       	push	r23
    279a:	8f 93       	push	r24
    279c:	9f 93       	push	r25
    279e:	af 93       	push	r26
    27a0:	bf 93       	push	r27
    27a2:	ef 93       	push	r30
    27a4:	ff 93       	push	r31
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
	Pfun_CAPT();
    27ae:	e0 91 03 03 	lds	r30, 0x0303
    27b2:	f0 91 04 03 	lds	r31, 0x0304
    27b6:	09 95       	icall
}
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	ff 91       	pop	r31
    27be:	ef 91       	pop	r30
    27c0:	bf 91       	pop	r27
    27c2:	af 91       	pop	r26
    27c4:	9f 91       	pop	r25
    27c6:	8f 91       	pop	r24
    27c8:	7f 91       	pop	r23
    27ca:	6f 91       	pop	r22
    27cc:	5f 91       	pop	r21
    27ce:	4f 91       	pop	r20
    27d0:	3f 91       	pop	r19
    27d2:	2f 91       	pop	r18
    27d4:	0f 90       	pop	r0
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	0f 90       	pop	r0
    27da:	1f 90       	pop	r1
    27dc:	18 95       	reti

000027de <Timer2_vidInit>:

void(*Pfun_OVF)(void);
void(*Pfun_CMP)(void);

void Timer2_vidInit(void)
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
	//Select compare timer
	TCCR2.Bits.WGM20 = 0;
	TCCR2.Bits.WGM21 = 1;
#elif TIMER2_u8WFG_MODE == TIMER2_u8FAST_PWM_MODE
	//Select compare fast PWM mode
	TCCR2.Bits.WGM20 = 1;
    27e6:	e5 e4       	ldi	r30, 0x45	; 69
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	80 64       	ori	r24, 0x40	; 64
    27ee:	80 83       	st	Z, r24
	TCCR2.Bits.WGM21 = 1;
    27f0:	e5 e4       	ldi	r30, 0x45	; 69
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	88 60       	ori	r24, 0x08	; 8
    27f8:	80 83       	st	Z, r24
#elif TIMER2_u8COMPARE_MATCH_OUTPUT_MODE == TIMER2_u8SET_OC2_ON_CM
	//Select set output at OCR2 compare match value
	TCCR2.Bits.COM = 3;
#elif TIMER2_u8COMPARE_MATCH_OUTPUT_MODE == TIMER2_u8CLEAR_OC2_ON_CM_SET_ON_TOP
	//Select clear output at OCR2 compare match value and set at register overflow
	TCCR2.Bits.COM = 2;
    27fa:	e5 e4       	ldi	r30, 0x45	; 69
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	8f 7c       	andi	r24, 0xCF	; 207
    2802:	80 62       	ori	r24, 0x20	; 32
    2804:	80 83       	st	Z, r24
	TCCR2.Bits.COM = 3;
#endif

#if TIMER2_u8PRESCALLER_VALU == TIMER2_u8FCPU_1
	//Select No Pre_scalling
	TCCR2.Bits.CS = 1;
    2806:	e5 e4       	ldi	r30, 0x45	; 69
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	88 7f       	andi	r24, 0xF8	; 248
    280e:	81 60       	ori	r24, 0x01	; 1
    2810:	80 83       	st	Z, r24
	//PIE of TIMER2 at overflow of counter register
	SREG.Bits.I_bit  =  1;
	TIMSK.Bits.TOIE2 =  1;
#elif TIMER2_u8OVF_INTERRUPT == TIMER2_u8OVF_INTERRUPT_DISABLE
	//disable interrupt TIMER2 at overflow of counter register
	TIMSK.Bits.TOIE2 =  0;
    2812:	e9 e5       	ldi	r30, 0x59	; 89
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8f 7b       	andi	r24, 0xBF	; 191
    281a:	80 83       	st	Z, r24
	//PIE of TIMER2 at Compare Match Output Register
	SREG.Bits.I_bit  =  1;
	TIMSK.Bits.OCIE2 =  1;
#elif TIMER2_u8CMP_INTERRUPT == TIMER2_u8CMP_INTERRUPT_DISABLE
	//disable interrupt TIMER2 at Compare Match Output Register
	TIMSK.Bits.OCIE2 =  0;
    281c:	e9 e5       	ldi	r30, 0x59	; 89
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	8f 77       	andi	r24, 0x7F	; 127
    2824:	80 83       	st	Z, r24
#endif
}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <Timer2_vidStopTimer>:

void Timer2_vidStopTimer(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
	//Stop Timer (NO Clock Source)
	TCCR2.Bits.CS = 0;
    2834:	e5 e4       	ldi	r30, 0x45	; 69
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	88 7f       	andi	r24, 0xF8	; 248
    283c:	80 83       	st	Z, r24
}
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <Timer2_vidSetCounterRegisterValue>:

void Timer2_vidSetCounterRegisterValue(u8 Val)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	0f 92       	push	r0
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	89 83       	std	Y+1, r24	; 0x01
	//Set Value In Timer Counter Register	 (TCNT2)
	TCNT2.Byte = Val;
    2850:	e4 e4       	ldi	r30, 0x44	; 68
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	80 83       	st	Z, r24
}
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <Timer2_vidSetCompareRegisterValue>:

void Timer2_vidSetCompareRegisterValue(u8 Val)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	0f 92       	push	r0
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	89 83       	std	Y+1, r24	; 0x01
	//Set Value Of Timer Compare Match Register (OCR2)
	OCR2.Byte = Val;
    286c:	e3 e4       	ldi	r30, 0x43	; 67
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	80 83       	st	Z, r24
}
    2874:	0f 90       	pop	r0
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <CMP_vidTimer2SetCB>:


void CMP_vidTimer2SetCB(void(*pf)(void))
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <CMP_vidTimer2SetCB+0x6>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMP = pf;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	9a 81       	ldd	r25, Y+2	; 0x02
    288e:	90 93 00 03 	sts	0x0300, r25
    2892:	80 93 ff 02 	sts	0x02FF, r24
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <OVF_vidTimer2SetCB>:


void OVF_vidTimer2SetCB(void(*pf)(void))
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <OVF_vidTimer2SetCB+0x6>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
	Pfun_OVF = pf;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	90 93 02 03 	sts	0x0302, r25
    28b6:	80 93 01 03 	sts	0x0301, r24
}
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <__vector_4>:


void __vector_4 (void)
{
    28c4:	1f 92       	push	r1
    28c6:	0f 92       	push	r0
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	0f 92       	push	r0
    28cc:	11 24       	eor	r1, r1
    28ce:	2f 93       	push	r18
    28d0:	3f 93       	push	r19
    28d2:	4f 93       	push	r20
    28d4:	5f 93       	push	r21
    28d6:	6f 93       	push	r22
    28d8:	7f 93       	push	r23
    28da:	8f 93       	push	r24
    28dc:	9f 93       	push	r25
    28de:	af 93       	push	r26
    28e0:	bf 93       	push	r27
    28e2:	ef 93       	push	r30
    28e4:	ff 93       	push	r31
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMP();
    28ee:	e0 91 ff 02 	lds	r30, 0x02FF
    28f2:	f0 91 00 03 	lds	r31, 0x0300
    28f6:	09 95       	icall
}
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	ff 91       	pop	r31
    28fe:	ef 91       	pop	r30
    2900:	bf 91       	pop	r27
    2902:	af 91       	pop	r26
    2904:	9f 91       	pop	r25
    2906:	8f 91       	pop	r24
    2908:	7f 91       	pop	r23
    290a:	6f 91       	pop	r22
    290c:	5f 91       	pop	r21
    290e:	4f 91       	pop	r20
    2910:	3f 91       	pop	r19
    2912:	2f 91       	pop	r18
    2914:	0f 90       	pop	r0
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	0f 90       	pop	r0
    291a:	1f 90       	pop	r1
    291c:	18 95       	reti

0000291e <__vector_5>:

void __vector_5 (void)
{
    291e:	1f 92       	push	r1
    2920:	0f 92       	push	r0
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	0f 92       	push	r0
    2926:	11 24       	eor	r1, r1
    2928:	2f 93       	push	r18
    292a:	3f 93       	push	r19
    292c:	4f 93       	push	r20
    292e:	5f 93       	push	r21
    2930:	6f 93       	push	r22
    2932:	7f 93       	push	r23
    2934:	8f 93       	push	r24
    2936:	9f 93       	push	r25
    2938:	af 93       	push	r26
    293a:	bf 93       	push	r27
    293c:	ef 93       	push	r30
    293e:	ff 93       	push	r31
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
	Pfun_OVF();
    2948:	e0 91 01 03 	lds	r30, 0x0301
    294c:	f0 91 02 03 	lds	r31, 0x0302
    2950:	09 95       	icall
}
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	ff 91       	pop	r31
    2958:	ef 91       	pop	r30
    295a:	bf 91       	pop	r27
    295c:	af 91       	pop	r26
    295e:	9f 91       	pop	r25
    2960:	8f 91       	pop	r24
    2962:	7f 91       	pop	r23
    2964:	6f 91       	pop	r22
    2966:	5f 91       	pop	r21
    2968:	4f 91       	pop	r20
    296a:	3f 91       	pop	r19
    296c:	2f 91       	pop	r18
    296e:	0f 90       	pop	r0
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	0f 90       	pop	r0
    2974:	1f 90       	pop	r1
    2976:	18 95       	reti

00002978 <main>:
u8 SaveVal[3] ;
u8 Save_Key    = KEYPAD_u8NO_KEY;
u8 Exit_Door_Flag = 0;

int main(void)
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
	Lcd_vidInit();
    2980:	0e 94 07 0c 	call	0x180e	; 0x180e <Lcd_vidInit>
	Keypad_vidInit();
    2984:	0e 94 3c 09 	call	0x1278	; 0x1278 <Keypad_vidInit>
	Stepper_vidInit();
    2988:	0e 94 df 10 	call	0x21be	; 0x21be <Stepper_vidInit>
	Servo_vidInit();
    298c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <Servo_vidInit>
	PWM_vidInit();
    2990:	0e 94 57 0f 	call	0x1eae	; 0x1eae <PWM_vidInit>
	DC_vidInit();
    2994:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DC_vidInit>
	Led_vidInit(LED_1);
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <Led_vidInit>
	Buzzer_vidInit();
    299e:	0e 94 9c 06 	call	0xd38	; 0xd38 <Buzzer_vidInit>
	RTO_vidInit();
    29a2:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <RTO_vidInit>


	KeyPad_Task.u32FirstDelay       = 0;
    29a6:	10 92 14 03 	sts	0x0314, r1
    29aa:	10 92 15 03 	sts	0x0315, r1
    29ae:	10 92 16 03 	sts	0x0316, r1
    29b2:	10 92 17 03 	sts	0x0317, r1
	KeyPad_Task.u32Periodicity      = 50;
    29b6:	82 e3       	ldi	r24, 0x32	; 50
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a0 e0       	ldi	r26, 0x00	; 0
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	80 93 18 03 	sts	0x0318, r24
    29c2:	90 93 19 03 	sts	0x0319, r25
    29c6:	a0 93 1a 03 	sts	0x031A, r26
    29ca:	b0 93 1b 03 	sts	0x031B, r27
	KeyPad_Task.pfTaskCode          = KeyPad_Task_Fun    ;
    29ce:	82 e4       	ldi	r24, 0x42	; 66
    29d0:	96 e1       	ldi	r25, 0x16	; 22
    29d2:	90 93 1d 03 	sts	0x031D, r25
    29d6:	80 93 1c 03 	sts	0x031C, r24
	KeyPad_Task.u8TaskState         = TASK_RUNNING_STATE ;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	80 93 1e 03 	sts	0x031E, r24

	LCD_Task.u32FirstDelay          = 0;
    29e0:	10 92 6c 03 	sts	0x036C, r1
    29e4:	10 92 6d 03 	sts	0x036D, r1
    29e8:	10 92 6e 03 	sts	0x036E, r1
    29ec:	10 92 6f 03 	sts	0x036F, r1
	LCD_Task.u32Periodicity         = 10;
    29f0:	8a e0       	ldi	r24, 0x0A	; 10
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a0 e0       	ldi	r26, 0x00	; 0
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	80 93 70 03 	sts	0x0370, r24
    29fc:	90 93 71 03 	sts	0x0371, r25
    2a00:	a0 93 72 03 	sts	0x0372, r26
    2a04:	b0 93 73 03 	sts	0x0373, r27
	LCD_Task.pfTaskCode             = LCD_Task_Fun       ;
    2a08:	8f ef       	ldi	r24, 0xFF	; 255
    2a0a:	9a e1       	ldi	r25, 0x1A	; 26
    2a0c:	90 93 75 03 	sts	0x0375, r25
    2a10:	80 93 74 03 	sts	0x0374, r24
	LCD_Task.u8TaskState            = TASK_RUNNING_STATE ;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	80 93 76 03 	sts	0x0376, r24

	LCD_Trigger_Task.u32FirstDelay  = 0;
    2a1a:	10 92 2a 03 	sts	0x032A, r1
    2a1e:	10 92 2b 03 	sts	0x032B, r1
    2a22:	10 92 2c 03 	sts	0x032C, r1
    2a26:	10 92 2d 03 	sts	0x032D, r1
	LCD_Trigger_Task.u32Periodicity = 3;
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	a0 e0       	ldi	r26, 0x00	; 0
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	80 93 2e 03 	sts	0x032E, r24
    2a36:	90 93 2f 03 	sts	0x032F, r25
    2a3a:	a0 93 30 03 	sts	0x0330, r26
    2a3e:	b0 93 31 03 	sts	0x0331, r27
	LCD_Trigger_Task.pfTaskCode     = LCD_Trigger_Task_Fun;
    2a42:	86 e1       	ldi	r24, 0x16	; 22
    2a44:	9b e1       	ldi	r25, 0x1B	; 27
    2a46:	90 93 33 03 	sts	0x0333, r25
    2a4a:	80 93 32 03 	sts	0x0332, r24
	LCD_Trigger_Task.u8TaskState    = TASK_WAITING_STATE  ;
    2a4e:	10 92 34 03 	sts	0x0334, r1

	/* Initialize Password Task  */
	Password_Task.u32FirstDelay  = 0 ;
    2a52:	10 92 7a 03 	sts	0x037A, r1
    2a56:	10 92 7b 03 	sts	0x037B, r1
    2a5a:	10 92 7c 03 	sts	0x037C, r1
    2a5e:	10 92 7d 03 	sts	0x037D, r1
	Password_Task.u32Periodicity = 100;
    2a62:	84 e6       	ldi	r24, 0x64	; 100
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a0 e0       	ldi	r26, 0x00	; 0
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	80 93 7e 03 	sts	0x037E, r24
    2a6e:	90 93 7f 03 	sts	0x037F, r25
    2a72:	a0 93 80 03 	sts	0x0380, r26
    2a76:	b0 93 81 03 	sts	0x0381, r27
	Password_Task.pfTaskCode     = Password_Task_Func ;
    2a7a:	83 e6       	ldi	r24, 0x63	; 99
    2a7c:	96 e1       	ldi	r25, 0x16	; 22
    2a7e:	90 93 83 03 	sts	0x0383, r25
    2a82:	80 93 82 03 	sts	0x0382, r24
	Password_Task.u8TaskState    = TASK_RUNNING_STATE ;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	80 93 84 03 	sts	0x0384, r24

	/* Initialize Door Task  */
	Door_Task.u32FirstDelay  = 0 ;
    2a8c:	10 92 35 03 	sts	0x0335, r1
    2a90:	10 92 36 03 	sts	0x0336, r1
    2a94:	10 92 37 03 	sts	0x0337, r1
    2a98:	10 92 38 03 	sts	0x0338, r1
	Door_Task.u32Periodicity = 2;
    2a9c:	82 e0       	ldi	r24, 0x02	; 2
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	a0 e0       	ldi	r26, 0x00	; 0
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	80 93 39 03 	sts	0x0339, r24
    2aa8:	90 93 3a 03 	sts	0x033A, r25
    2aac:	a0 93 3b 03 	sts	0x033B, r26
    2ab0:	b0 93 3c 03 	sts	0x033C, r27
	Door_Task.pfTaskCode     = Door_Task_Func         ;
    2ab4:	84 e0       	ldi	r24, 0x04	; 4
    2ab6:	97 e1       	ldi	r25, 0x17	; 23
    2ab8:	90 93 3e 03 	sts	0x033E, r25
    2abc:	80 93 3d 03 	sts	0x033D, r24
	Door_Task.u8TaskState    = TASK_WAITING_STATE     ;
    2ac0:	10 92 3f 03 	sts	0x033F, r1

	/* Initialize Control Task  */
	Control_Task.u32FirstDelay  = 0 ;
    2ac4:	10 92 56 03 	sts	0x0356, r1
    2ac8:	10 92 57 03 	sts	0x0357, r1
    2acc:	10 92 58 03 	sts	0x0358, r1
    2ad0:	10 92 59 03 	sts	0x0359, r1
	Control_Task.u32Periodicity = 100;
    2ad4:	84 e6       	ldi	r24, 0x64	; 100
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e0       	ldi	r26, 0x00	; 0
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	80 93 5a 03 	sts	0x035A, r24
    2ae0:	90 93 5b 03 	sts	0x035B, r25
    2ae4:	a0 93 5c 03 	sts	0x035C, r26
    2ae8:	b0 93 5d 03 	sts	0x035D, r27
	Control_Task.pfTaskCode     = Control_Task_Func   ;
    2aec:	85 ef       	ldi	r24, 0xF5	; 245
    2aee:	97 e1       	ldi	r25, 0x17	; 23
    2af0:	90 93 5f 03 	sts	0x035F, r25
    2af4:	80 93 5e 03 	sts	0x035E, r24
	Control_Task.u8TaskState    = TASK_WAITING_STATE  ;
    2af8:	10 92 60 03 	sts	0x0360, r1


	/* Initialize Window Task  */
	Window_Task.u32FirstDelay  = 0 ;
    2afc:	10 92 4b 03 	sts	0x034B, r1
    2b00:	10 92 4c 03 	sts	0x034C, r1
    2b04:	10 92 4d 03 	sts	0x034D, r1
    2b08:	10 92 4e 03 	sts	0x034E, r1
	Window_Task.u32Periodicity = 100;
    2b0c:	84 e6       	ldi	r24, 0x64	; 100
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 e0       	ldi	r26, 0x00	; 0
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	80 93 4f 03 	sts	0x034F, r24
    2b18:	90 93 50 03 	sts	0x0350, r25
    2b1c:	a0 93 51 03 	sts	0x0351, r26
    2b20:	b0 93 52 03 	sts	0x0352, r27
	Window_Task.pfTaskCode     = Window_Task_Func     ;
    2b24:	8e e8       	ldi	r24, 0x8E	; 142
    2b26:	98 e1       	ldi	r25, 0x18	; 24
    2b28:	90 93 54 03 	sts	0x0354, r25
    2b2c:	80 93 53 03 	sts	0x0353, r24
	Window_Task.u8TaskState    = TASK_WAITING_STATE   ;
    2b30:	10 92 55 03 	sts	0x0355, r1


	/* Initialize Light Task  */
	Light_Task.u32FirstDelay  = 0 ;
    2b34:	10 92 40 03 	sts	0x0340, r1
    2b38:	10 92 41 03 	sts	0x0341, r1
    2b3c:	10 92 42 03 	sts	0x0342, r1
    2b40:	10 92 43 03 	sts	0x0343, r1
	Light_Task.u32Periodicity = 100;
    2b44:	84 e6       	ldi	r24, 0x64	; 100
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a0 e0       	ldi	r26, 0x00	; 0
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	80 93 44 03 	sts	0x0344, r24
    2b50:	90 93 45 03 	sts	0x0345, r25
    2b54:	a0 93 46 03 	sts	0x0346, r26
    2b58:	b0 93 47 03 	sts	0x0347, r27
	Light_Task.pfTaskCode     = Light_Task_Func      ;
    2b5c:	8d e6       	ldi	r24, 0x6D	; 109
    2b5e:	99 e1       	ldi	r25, 0x19	; 25
    2b60:	90 93 49 03 	sts	0x0349, r25
    2b64:	80 93 48 03 	sts	0x0348, r24
	Light_Task.u8TaskState    = TASK_WAITING_STATE   ;
    2b68:	10 92 4a 03 	sts	0x034A, r1

	/* Initialize Fan Task  */
	Fan_Task.u32FirstDelay  = 0 ;
    2b6c:	10 92 61 03 	sts	0x0361, r1
    2b70:	10 92 62 03 	sts	0x0362, r1
    2b74:	10 92 63 03 	sts	0x0363, r1
    2b78:	10 92 64 03 	sts	0x0364, r1
	Fan_Task.u32Periodicity = 100;
    2b7c:	84 e6       	ldi	r24, 0x64	; 100
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	80 93 65 03 	sts	0x0365, r24
    2b88:	90 93 66 03 	sts	0x0366, r25
    2b8c:	a0 93 67 03 	sts	0x0367, r26
    2b90:	b0 93 68 03 	sts	0x0368, r27
	Fan_Task.pfTaskCode     = Fan_Task_Func          ;
    2b94:	8c e4       	ldi	r24, 0x4C	; 76
    2b96:	9a e1       	ldi	r25, 0x1A	; 26
    2b98:	90 93 6a 03 	sts	0x036A, r25
    2b9c:	80 93 69 03 	sts	0x0369, r24
	Fan_Task.u8TaskState    = TASK_WAITING_STATE     ;
    2ba0:	10 92 6b 03 	sts	0x036B, r1

	/* Initialize Exit Task  */
	Exit_Task.u32FirstDelay  = 0 ;
    2ba4:	10 92 1f 03 	sts	0x031F, r1
    2ba8:	10 92 20 03 	sts	0x0320, r1
    2bac:	10 92 21 03 	sts	0x0321, r1
    2bb0:	10 92 22 03 	sts	0x0322, r1
	Exit_Task.u32Periodicity = 100;
    2bb4:	84 e6       	ldi	r24, 0x64	; 100
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	80 93 23 03 	sts	0x0323, r24
    2bc0:	90 93 24 03 	sts	0x0324, r25
    2bc4:	a0 93 25 03 	sts	0x0325, r26
    2bc8:	b0 93 26 03 	sts	0x0326, r27
	Exit_Task.pfTaskCode     = Exit_Task_Func         ;
    2bcc:	80 ec       	ldi	r24, 0xC0	; 192
    2bce:	9a e1       	ldi	r25, 0x1A	; 26
    2bd0:	90 93 28 03 	sts	0x0328, r25
    2bd4:	80 93 27 03 	sts	0x0327, r24
	Exit_Task.u8TaskState    = TASK_WAITING_STATE     ;
    2bd8:	10 92 29 03 	sts	0x0329, r1

	/* Initialize Alarm Task  */
	Alarm_Task.u32FirstDelay  = 0 ;
    2bdc:	10 92 09 03 	sts	0x0309, r1
    2be0:	10 92 0a 03 	sts	0x030A, r1
    2be4:	10 92 0b 03 	sts	0x030B, r1
    2be8:	10 92 0c 03 	sts	0x030C, r1
	Alarm_Task.u32Periodicity = 100;
    2bec:	84 e6       	ldi	r24, 0x64	; 100
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e0       	ldi	r26, 0x00	; 0
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	80 93 0d 03 	sts	0x030D, r24
    2bf8:	90 93 0e 03 	sts	0x030E, r25
    2bfc:	a0 93 0f 03 	sts	0x030F, r26
    2c00:	b0 93 10 03 	sts	0x0310, r27
	Alarm_Task.pfTaskCode     = Alarm_Task_Func        ;
    2c04:	83 ef       	ldi	r24, 0xF3	; 243
    2c06:	9a e1       	ldi	r25, 0x1A	; 26
    2c08:	90 93 12 03 	sts	0x0312, r25
    2c0c:	80 93 11 03 	sts	0x0311, r24
	Alarm_Task.u8TaskState    = TASK_WAITING_STATE     ;
    2c10:	10 92 13 03 	sts	0x0313, r1


	RTO_vidCreateQueueOfTasks( &KeyPad_Task      , 0 );
    2c14:	84 e1       	ldi	r24, 0x14	; 20
    2c16:	93 e0       	ldi	r25, 0x03	; 3
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &LCD_Task         , 1 );
    2c1e:	8c e6       	ldi	r24, 0x6C	; 108
    2c20:	93 e0       	ldi	r25, 0x03	; 3
    2c22:	61 e0       	ldi	r22, 0x01	; 1
    2c24:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &LCD_Trigger_Task , 2 );
    2c28:	8a e2       	ldi	r24, 0x2A	; 42
    2c2a:	93 e0       	ldi	r25, 0x03	; 3
    2c2c:	62 e0       	ldi	r22, 0x02	; 2
    2c2e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &Password_Task    , 3 );
    2c32:	8a e7       	ldi	r24, 0x7A	; 122
    2c34:	93 e0       	ldi	r25, 0x03	; 3
    2c36:	63 e0       	ldi	r22, 0x03	; 3
    2c38:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &Door_Task        , 4 );
    2c3c:	85 e3       	ldi	r24, 0x35	; 53
    2c3e:	93 e0       	ldi	r25, 0x03	; 3
    2c40:	64 e0       	ldi	r22, 0x04	; 4
    2c42:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &Control_Task     , 5 );
    2c46:	86 e5       	ldi	r24, 0x56	; 86
    2c48:	93 e0       	ldi	r25, 0x03	; 3
    2c4a:	65 e0       	ldi	r22, 0x05	; 5
    2c4c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &Window_Task      , 6 );
    2c50:	8b e4       	ldi	r24, 0x4B	; 75
    2c52:	93 e0       	ldi	r25, 0x03	; 3
    2c54:	66 e0       	ldi	r22, 0x06	; 6
    2c56:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &Light_Task       , 7 );
    2c5a:	80 e4       	ldi	r24, 0x40	; 64
    2c5c:	93 e0       	ldi	r25, 0x03	; 3
    2c5e:	67 e0       	ldi	r22, 0x07	; 7
    2c60:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &Fan_Task         , 8 );
    2c64:	81 e6       	ldi	r24, 0x61	; 97
    2c66:	93 e0       	ldi	r25, 0x03	; 3
    2c68:	68 e0       	ldi	r22, 0x08	; 8
    2c6a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &Exit_Task        , 9 );
    2c6e:	8f e1       	ldi	r24, 0x1F	; 31
    2c70:	93 e0       	ldi	r25, 0x03	; 3
    2c72:	69 e0       	ldi	r22, 0x09	; 9
    2c74:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
	RTO_vidCreateQueueOfTasks( &Alarm_Task       , 10);
    2c78:	89 e0       	ldi	r24, 0x09	; 9
    2c7a:	93 e0       	ldi	r25, 0x03	; 3
    2c7c:	6a e0       	ldi	r22, 0x0A	; 10
    2c7e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <RTO_vidCreateQueueOfTasks>
    2c82:	ff cf       	rjmp	.-2      	; 0x2c82 <main+0x30a>

00002c84 <KeyPad_Task_Fun>:
	return 0;
}


void KeyPad_Task_Fun(void)
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	0f 92       	push	r0
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
	static u8 Key_Counter = 0;
	u8 Key;

	Key = Keypad_u8GetKey();
    2c8e:	0e 94 83 09 	call	0x1306	; 0x1306 <Keypad_u8GetKey>
    2c92:	89 83       	std	Y+1, r24	; 0x01

	if(Key != KEYPAD_u8NO_KEY)
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	8f 3f       	cpi	r24, 0xFF	; 255
    2c98:	39 f0       	breq	.+14     	; 0x2ca8 <KeyPad_Task_Fun+0x24>
	{
		if(Key_Counter == 2)
    2c9a:	80 91 4f 02 	lds	r24, 0x024F
    2c9e:	82 30       	cpi	r24, 0x02	; 2
    2ca0:	19 f4       	brne	.+6      	; 0x2ca8 <KeyPad_Task_Fun+0x24>
		{
			Save_Key = Key;
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	80 93 46 02 	sts	0x0246, r24
		}
	}

	Key_Counter++;
    2ca8:	80 91 4f 02 	lds	r24, 0x024F
    2cac:	8f 5f       	subi	r24, 0xFF	; 255
    2cae:	80 93 4f 02 	sts	0x024F, r24

	if(Key_Counter == 3)
    2cb2:	80 91 4f 02 	lds	r24, 0x024F
    2cb6:	83 30       	cpi	r24, 0x03	; 3
    2cb8:	11 f4       	brne	.+4      	; 0x2cbe <KeyPad_Task_Fun+0x3a>
	{
		Key_Counter = 0;
    2cba:	10 92 4f 02 	sts	0x024F, r1
	}
}
    2cbe:	0f 90       	pop	r0
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	08 95       	ret

00002cc6 <Password_Task_Func>:


void Password_Task_Func(void)
{
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
	static u8 PassArray_Counter  = 0;
	static u8 Enter_Error_Pass   = 0;
	static u8 Error_Flag   = 0;
	static u8 flag         = 0;

	if(flag == 0)
    2cce:	80 91 50 02 	lds	r24, 0x0250
    2cd2:	88 23       	and	r24, r24
    2cd4:	d9 f4       	brne	.+54     	; 0x2d0c <Password_Task_Func+0x46>
	{
		Lcd_vidQueueCommand( 0x01 );
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Password_Task.u32Periodicity = 100;
    2cdc:	84 e6       	ldi	r24, 0x64	; 100
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 e0       	ldi	r26, 0x00	; 0
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	80 93 7e 03 	sts	0x037E, r24
    2ce8:	90 93 7f 03 	sts	0x037F, r25
    2cec:	a0 93 80 03 	sts	0x0380, r26
    2cf0:	b0 93 81 03 	sts	0x0381, r27
		Lcd_vidQueueString( "Enter Password : ");
    2cf4:	80 e6       	ldi	r24, 0x60	; 96
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Lcd_vidQueueCommand(0xc0);
    2cfc:	80 ec       	ldi	r24, 0xC0	; 192
    2cfe:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		flag++;
    2d02:	80 91 50 02 	lds	r24, 0x0250
    2d06:	8f 5f       	subi	r24, 0xFF	; 255
    2d08:	80 93 50 02 	sts	0x0250, r24
	}

	if( (Save_Key != '#') && (Save_Key != KEYPAD_u8NO_KEY) )
    2d0c:	80 91 46 02 	lds	r24, 0x0246
    2d10:	83 32       	cpi	r24, 0x23	; 35
    2d12:	09 f1       	breq	.+66     	; 0x2d56 <Password_Task_Func+0x90>
    2d14:	80 91 46 02 	lds	r24, 0x0246
    2d18:	8f 3f       	cpi	r24, 0xFF	; 255
    2d1a:	e9 f0       	breq	.+58     	; 0x2d56 <Password_Task_Func+0x90>
	{
		Lcd_vidQueueChar( Save_Key + '0');
    2d1c:	80 91 46 02 	lds	r24, 0x0246
    2d20:	80 5d       	subi	r24, 0xD0	; 208
    2d22:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <Lcd_vidQueueChar>

		if( Pass_Arr[PassArray_Counter] != Save_Key )
    2d26:	80 91 53 02 	lds	r24, 0x0253
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	fc 01       	movw	r30, r24
    2d30:	ee 5b       	subi	r30, 0xBE	; 190
    2d32:	fd 4f       	sbci	r31, 0xFD	; 253
    2d34:	90 81       	ld	r25, Z
    2d36:	80 91 46 02 	lds	r24, 0x0246
    2d3a:	98 17       	cp	r25, r24
    2d3c:	19 f0       	breq	.+6      	; 0x2d44 <Password_Task_Func+0x7e>
		{
			Error_Flag = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	80 93 51 02 	sts	0x0251, r24
		}

		Save_Key = KEYPAD_u8NO_KEY;
    2d44:	8f ef       	ldi	r24, 0xFF	; 255
    2d46:	80 93 46 02 	sts	0x0246, r24
		PassArray_Counter++;
    2d4a:	80 91 53 02 	lds	r24, 0x0253
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	80 93 53 02 	sts	0x0253, r24
    2d54:	56 c0       	rjmp	.+172    	; 0x2e02 <Password_Task_Func+0x13c>
	}
	else if(Save_Key == '#')
    2d56:	80 91 46 02 	lds	r24, 0x0246
    2d5a:	83 32       	cpi	r24, 0x23	; 35
    2d5c:	09 f0       	breq	.+2      	; 0x2d60 <Password_Task_Func+0x9a>
    2d5e:	51 c0       	rjmp	.+162    	; 0x2e02 <Password_Task_Func+0x13c>
	{
		Save_Key = KEYPAD_u8NO_KEY;
    2d60:	8f ef       	ldi	r24, 0xFF	; 255
    2d62:	80 93 46 02 	sts	0x0246, r24


		if( (Error_Flag == 0)  && (PassArray_Counter == 4))
    2d66:	80 91 51 02 	lds	r24, 0x0251
    2d6a:	88 23       	and	r24, r24
    2d6c:	c9 f4       	brne	.+50     	; 0x2da0 <Password_Task_Func+0xda>
    2d6e:	80 91 53 02 	lds	r24, 0x0253
    2d72:	84 30       	cpi	r24, 0x04	; 4
    2d74:	a9 f4       	brne	.+42     	; 0x2da0 <Password_Task_Func+0xda>
		{
			Lcd_vidQueueCommand( 0x01 );
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
			Lcd_vidQueueString( "Welcome Home...");
    2d7c:	82 e7       	ldi	r24, 0x72	; 114
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>

			Password_Task.u8TaskState = TASK_WAITING_STATE;
    2d84:	10 92 84 03 	sts	0x0384, r1
			KeyPad_Task.u8TaskState   = TASK_WAITING_STATE;
    2d88:	10 92 1e 03 	sts	0x031E, r1
			Door_Task.u8TaskState     = TASK_RUNNING_STATE;
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	80 93 3f 03 	sts	0x033F, r24

			flag = 0;
    2d92:	10 92 50 02 	sts	0x0250, r1
			Enter_Error_Pass = 0;
    2d96:	10 92 52 02 	sts	0x0252, r1
			PassArray_Counter   = 0;
    2d9a:	10 92 53 02 	sts	0x0253, r1
    2d9e:	31 c0       	rjmp	.+98     	; 0x2e02 <Password_Task_Func+0x13c>
		}

		else
		{

			if( Enter_Error_Pass == 2)
    2da0:	80 91 52 02 	lds	r24, 0x0252
    2da4:	82 30       	cpi	r24, 0x02	; 2
    2da6:	79 f4       	brne	.+30     	; 0x2dc6 <Password_Task_Func+0x100>
			{
				Lcd_vidQueueCommand( 0x01 );
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
				Lcd_vidQueueString("System Blocked");
    2dae:	82 e8       	ldi	r24, 0x82	; 130
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>

				Password_Task.u8TaskState = TASK_WAITING_STATE;
    2db6:	10 92 84 03 	sts	0x0384, r1
				KeyPad_Task.u8TaskState   = TASK_WAITING_STATE;
    2dba:	10 92 1e 03 	sts	0x031E, r1
				Alarm_Task.u8TaskState    = TASK_RUNNING_STATE;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	80 93 13 03 	sts	0x0313, r24
    2dc4:	1e c0       	rjmp	.+60     	; 0x2e02 <Password_Task_Func+0x13c>

			}
			else
			{
				Enter_Error_Pass++;
    2dc6:	80 91 52 02 	lds	r24, 0x0252
    2dca:	8f 5f       	subi	r24, 0xFF	; 255
    2dcc:	80 93 52 02 	sts	0x0252, r24
				Lcd_vidQueueCommand( 0x01 );
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
				flag = 0;
    2dd6:	10 92 50 02 	sts	0x0250, r1
				Error_Flag = 0;
    2dda:	10 92 51 02 	sts	0x0251, r1
				Password_Task.u32Periodicity = 1500;
    2dde:	8c ed       	ldi	r24, 0xDC	; 220
    2de0:	95 e0       	ldi	r25, 0x05	; 5
    2de2:	a0 e0       	ldi	r26, 0x00	; 0
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	80 93 7e 03 	sts	0x037E, r24
    2dea:	90 93 7f 03 	sts	0x037F, r25
    2dee:	a0 93 80 03 	sts	0x0380, r26
    2df2:	b0 93 81 03 	sts	0x0381, r27
				Lcd_vidQueueString( "  Not Valid  ");
    2df6:	81 e9       	ldi	r24, 0x91	; 145
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
				PassArray_Counter   = 0;
    2dfe:	10 92 53 02 	sts	0x0253, r1
			}
		}

	}
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <Door_Task_Func>:


void Door_Task_Func(void)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <Door_Task_Func+0x6>
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <Door_Task_Func+0x8>
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
	static u16 Num_Of_Iteration = 0;
	static u8  Pattern = 0;
	static u8  StepFlag    = 0;

	if( (StepFlag == 0) && (Num_Of_Iteration <= 256))
    2e14:	80 91 54 02 	lds	r24, 0x0254
    2e18:	88 23       	and	r24, r24
    2e1a:	09 f0       	breq	.+2      	; 0x2e1e <Door_Task_Func+0x16>
    2e1c:	65 c0       	rjmp	.+202    	; 0x2ee8 <Door_Task_Func+0xe0>
    2e1e:	80 91 56 02 	lds	r24, 0x0256
    2e22:	90 91 57 02 	lds	r25, 0x0257
    2e26:	21 e0       	ldi	r18, 0x01	; 1
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	92 07       	cpc	r25, r18
    2e2c:	08 f0       	brcs	.+2      	; 0x2e30 <Door_Task_Func+0x28>
    2e2e:	5c c0       	rjmp	.+184    	; 0x2ee8 <Door_Task_Func+0xe0>
	{
		switch(Pattern)
    2e30:	80 91 55 02 	lds	r24, 0x0255
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	3c 83       	std	Y+4, r19	; 0x04
    2e3a:	2b 83       	std	Y+3, r18	; 0x03
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	81 30       	cpi	r24, 0x01	; 1
    2e42:	91 05       	cpc	r25, r1
    2e44:	c1 f0       	breq	.+48     	; 0x2e76 <Door_Task_Func+0x6e>
    2e46:	2b 81       	ldd	r18, Y+3	; 0x03
    2e48:	3c 81       	ldd	r19, Y+4	; 0x04
    2e4a:	22 30       	cpi	r18, 0x02	; 2
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <Door_Task_Func+0x52>
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	9c 81       	ldd	r25, Y+4	; 0x04
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	61 f0       	breq	.+24     	; 0x2e70 <Door_Task_Func+0x68>
    2e58:	1f c0       	rjmp	.+62     	; 0x2e98 <Door_Task_Func+0x90>
    2e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e5e:	22 30       	cpi	r18, 0x02	; 2
    2e60:	31 05       	cpc	r19, r1
    2e62:	61 f0       	breq	.+24     	; 0x2e7c <Door_Task_Func+0x74>
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	9c 81       	ldd	r25, Y+4	; 0x04
    2e68:	83 30       	cpi	r24, 0x03	; 3
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	51 f0       	breq	.+20     	; 0x2e82 <Door_Task_Func+0x7a>
    2e6e:	14 c0       	rjmp	.+40     	; 0x2e98 <Door_Task_Func+0x90>
		{
		case 0:
			Stepper_vidPattern_1();
    2e70:	0e 94 f6 10 	call	0x21ec	; 0x21ec <Stepper_vidPattern_1>
    2e74:	11 c0       	rjmp	.+34     	; 0x2e98 <Door_Task_Func+0x90>
			break;

		case 1:
			Stepper_vidPattern_2();
    2e76:	0e 94 0d 11 	call	0x221a	; 0x221a <Stepper_vidPattern_2>
    2e7a:	0e c0       	rjmp	.+28     	; 0x2e98 <Door_Task_Func+0x90>
			break;

		case 2:
			Stepper_vidPattern_3();
    2e7c:	0e 94 24 11 	call	0x2248	; 0x2248 <Stepper_vidPattern_3>
    2e80:	0b c0       	rjmp	.+22     	; 0x2e98 <Door_Task_Func+0x90>
			break;

		case 3:
			Stepper_vidPattern_4();
    2e82:	0e 94 3b 11 	call	0x2276	; 0x2276 <Stepper_vidPattern_4>
			Num_Of_Iteration++;
    2e86:	80 91 56 02 	lds	r24, 0x0256
    2e8a:	90 91 57 02 	lds	r25, 0x0257
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	90 93 57 02 	sts	0x0257, r25
    2e94:	80 93 56 02 	sts	0x0256, r24
			break;
		}

		Pattern++;
    2e98:	80 91 55 02 	lds	r24, 0x0255
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	80 93 55 02 	sts	0x0255, r24
		if(Pattern == 4)
    2ea2:	80 91 55 02 	lds	r24, 0x0255
    2ea6:	84 30       	cpi	r24, 0x04	; 4
    2ea8:	11 f4       	brne	.+4      	; 0x2eae <Door_Task_Func+0xa6>
		{
			Pattern = 0;
    2eaa:	10 92 55 02 	sts	0x0255, r1
		}

		if( Num_Of_Iteration == 257)
    2eae:	80 91 56 02 	lds	r24, 0x0256
    2eb2:	90 91 57 02 	lds	r25, 0x0257
    2eb6:	21 e0       	ldi	r18, 0x01	; 1
    2eb8:	81 30       	cpi	r24, 0x01	; 1
    2eba:	92 07       	cpc	r25, r18
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <Door_Task_Func+0xb8>
    2ebe:	8e c0       	rjmp	.+284    	; 0x2fdc <Door_Task_Func+0x1d4>
		{
			Door_Task.u32Periodicity = 1000;
    2ec0:	88 ee       	ldi	r24, 0xE8	; 232
    2ec2:	93 e0       	ldi	r25, 0x03	; 3
    2ec4:	a0 e0       	ldi	r26, 0x00	; 0
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	80 93 39 03 	sts	0x0339, r24
    2ecc:	90 93 3a 03 	sts	0x033A, r25
    2ed0:	a0 93 3b 03 	sts	0x033B, r26
    2ed4:	b0 93 3c 03 	sts	0x033C, r27
			Num_Of_Iteration = 0;
    2ed8:	10 92 57 02 	sts	0x0257, r1
    2edc:	10 92 56 02 	sts	0x0256, r1
			StepFlag = 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	80 93 54 02 	sts	0x0254, r24
    2ee6:	7a c0       	rjmp	.+244    	; 0x2fdc <Door_Task_Func+0x1d4>
		}
	}
	else if( (StepFlag == 1) && (Num_Of_Iteration <= 256))
    2ee8:	80 91 54 02 	lds	r24, 0x0254
    2eec:	81 30       	cpi	r24, 0x01	; 1
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <Door_Task_Func+0xea>
    2ef0:	75 c0       	rjmp	.+234    	; 0x2fdc <Door_Task_Func+0x1d4>
    2ef2:	80 91 56 02 	lds	r24, 0x0256
    2ef6:	90 91 57 02 	lds	r25, 0x0257
    2efa:	31 e0       	ldi	r19, 0x01	; 1
    2efc:	81 30       	cpi	r24, 0x01	; 1
    2efe:	93 07       	cpc	r25, r19
    2f00:	08 f0       	brcs	.+2      	; 0x2f04 <Door_Task_Func+0xfc>
    2f02:	6c c0       	rjmp	.+216    	; 0x2fdc <Door_Task_Func+0x1d4>
	{
		Door_Task.u32Periodicity = 2;
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	a0 e0       	ldi	r26, 0x00	; 0
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	80 93 39 03 	sts	0x0339, r24
    2f10:	90 93 3a 03 	sts	0x033A, r25
    2f14:	a0 93 3b 03 	sts	0x033B, r26
    2f18:	b0 93 3c 03 	sts	0x033C, r27
		switch(Pattern)
    2f1c:	80 91 55 02 	lds	r24, 0x0255
    2f20:	28 2f       	mov	r18, r24
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	3a 83       	std	Y+2, r19	; 0x02
    2f26:	29 83       	std	Y+1, r18	; 0x01
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	91 05       	cpc	r25, r1
    2f30:	c1 f0       	breq	.+48     	; 0x2f62 <Door_Task_Func+0x15a>
    2f32:	29 81       	ldd	r18, Y+1	; 0x01
    2f34:	3a 81       	ldd	r19, Y+2	; 0x02
    2f36:	22 30       	cpi	r18, 0x02	; 2
    2f38:	31 05       	cpc	r19, r1
    2f3a:	2c f4       	brge	.+10     	; 0x2f46 <Door_Task_Func+0x13e>
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	61 f0       	breq	.+24     	; 0x2f5c <Door_Task_Func+0x154>
    2f44:	1f c0       	rjmp	.+62     	; 0x2f84 <Door_Task_Func+0x17c>
    2f46:	29 81       	ldd	r18, Y+1	; 0x01
    2f48:	3a 81       	ldd	r19, Y+2	; 0x02
    2f4a:	22 30       	cpi	r18, 0x02	; 2
    2f4c:	31 05       	cpc	r19, r1
    2f4e:	61 f0       	breq	.+24     	; 0x2f68 <Door_Task_Func+0x160>
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	83 30       	cpi	r24, 0x03	; 3
    2f56:	91 05       	cpc	r25, r1
    2f58:	51 f0       	breq	.+20     	; 0x2f6e <Door_Task_Func+0x166>
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <Door_Task_Func+0x17c>
		{
		case 0:
			Stepper_vidPattern_4();
    2f5c:	0e 94 3b 11 	call	0x2276	; 0x2276 <Stepper_vidPattern_4>
    2f60:	11 c0       	rjmp	.+34     	; 0x2f84 <Door_Task_Func+0x17c>
			break;

		case 1:
			Stepper_vidPattern_3();
    2f62:	0e 94 24 11 	call	0x2248	; 0x2248 <Stepper_vidPattern_3>
    2f66:	0e c0       	rjmp	.+28     	; 0x2f84 <Door_Task_Func+0x17c>
			break;

		case 2:
			Stepper_vidPattern_2();
    2f68:	0e 94 0d 11 	call	0x221a	; 0x221a <Stepper_vidPattern_2>
    2f6c:	0b c0       	rjmp	.+22     	; 0x2f84 <Door_Task_Func+0x17c>
			break;

		case 3:
			Stepper_vidPattern_1();
    2f6e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <Stepper_vidPattern_1>
			Num_Of_Iteration++;
    2f72:	80 91 56 02 	lds	r24, 0x0256
    2f76:	90 91 57 02 	lds	r25, 0x0257
    2f7a:	01 96       	adiw	r24, 0x01	; 1
    2f7c:	90 93 57 02 	sts	0x0257, r25
    2f80:	80 93 56 02 	sts	0x0256, r24
			break;
		}

		Pattern++;
    2f84:	80 91 55 02 	lds	r24, 0x0255
    2f88:	8f 5f       	subi	r24, 0xFF	; 255
    2f8a:	80 93 55 02 	sts	0x0255, r24
		if(Pattern == 4)
    2f8e:	80 91 55 02 	lds	r24, 0x0255
    2f92:	84 30       	cpi	r24, 0x04	; 4
    2f94:	11 f4       	brne	.+4      	; 0x2f9a <Door_Task_Func+0x192>
		{
			Pattern = 0;
    2f96:	10 92 55 02 	sts	0x0255, r1
		}

		if( Num_Of_Iteration == 257)
    2f9a:	80 91 56 02 	lds	r24, 0x0256
    2f9e:	90 91 57 02 	lds	r25, 0x0257
    2fa2:	21 e0       	ldi	r18, 0x01	; 1
    2fa4:	81 30       	cpi	r24, 0x01	; 1
    2fa6:	92 07       	cpc	r25, r18
    2fa8:	c9 f4       	brne	.+50     	; 0x2fdc <Door_Task_Func+0x1d4>
		{
			if( Exit_Door_Flag == 1)
    2faa:	80 91 4e 02 	lds	r24, 0x024E
    2fae:	81 30       	cpi	r24, 0x01	; 1
    2fb0:	21 f4       	brne	.+8      	; 0x2fba <Door_Task_Func+0x1b2>
			{
				Exit_Task.u8TaskState = TASK_RUNNING_STATE;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	80 93 29 03 	sts	0x0329, r24
    2fb8:	09 c0       	rjmp	.+18     	; 0x2fcc <Door_Task_Func+0x1c4>
			}
			else
			{
				Lcd_vidQueueCommand( 0x01);
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
				KeyPad_Task.u8TaskState   = TASK_RUNNING_STATE;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	80 93 1e 03 	sts	0x031E, r24
				Control_Task.u8TaskState  = TASK_RUNNING_STATE;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	80 93 60 03 	sts	0x0360, r24
			}

			Door_Task.u8TaskState     = TASK_WAITING_STATE;
    2fcc:	10 92 3f 03 	sts	0x033F, r1
			Num_Of_Iteration = 0;
    2fd0:	10 92 57 02 	sts	0x0257, r1
    2fd4:	10 92 56 02 	sts	0x0256, r1
			StepFlag = 0;
    2fd8:	10 92 54 02 	sts	0x0254, r1
		}
	}
}
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <Control_Task_Func>:


void Control_Task_Func(void)
{
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <Control_Task_Func+0x6>
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62

	static u8 ControlFlag = 0;

	if(ControlFlag == 0)
    2ff4:	80 91 58 02 	lds	r24, 0x0258
    2ff8:	88 23       	and	r24, r24
    2ffa:	69 f5       	brne	.+90     	; 0x3056 <Control_Task_Func+0x6c>
	{
		Lcd_vidQueueCommand( 0x01 );
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("1-Window");
    3002:	8f e9       	ldi	r24, 0x9F	; 159
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Lcd_vidQueueCommand(0xc0);
    300a:	80 ec       	ldi	r24, 0xC0	; 192
    300c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("2-Light");
    3010:	88 ea       	ldi	r24, 0xA8	; 168
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Lcd_vidQueueCommand(0x89);
    3018:	89 e8       	ldi	r24, 0x89	; 137
    301a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("3-Fan");
    301e:	80 eb       	ldi	r24, 0xB0	; 176
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Lcd_vidQueueCommand(0xc9);
    3026:	89 ec       	ldi	r24, 0xC9	; 201
    3028:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("4-Exit");
    302c:	86 eb       	ldi	r24, 0xB6	; 182
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>

		Control_Task.u32Periodicity = 100;
    3034:	84 e6       	ldi	r24, 0x64	; 100
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e0       	ldi	r26, 0x00	; 0
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	80 93 5a 03 	sts	0x035A, r24
    3040:	90 93 5b 03 	sts	0x035B, r25
    3044:	a0 93 5c 03 	sts	0x035C, r26
    3048:	b0 93 5d 03 	sts	0x035D, r27
		ControlFlag++;
    304c:	80 91 58 02 	lds	r24, 0x0258
    3050:	8f 5f       	subi	r24, 0xFF	; 255
    3052:	80 93 58 02 	sts	0x0258, r24
	}

	if( Save_Key != KEYPAD_u8NO_KEY )
    3056:	80 91 46 02 	lds	r24, 0x0246
    305a:	8f 3f       	cpi	r24, 0xFF	; 255
    305c:	09 f4       	brne	.+2      	; 0x3060 <Control_Task_Func+0x76>
    305e:	59 c0       	rjmp	.+178    	; 0x3112 <Control_Task_Func+0x128>
	{
		switch(Save_Key)
    3060:	80 91 46 02 	lds	r24, 0x0246
    3064:	28 2f       	mov	r18, r24
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	3a 83       	std	Y+2, r19	; 0x02
    306a:	29 83       	std	Y+1, r18	; 0x01
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	9a 81       	ldd	r25, Y+2	; 0x02
    3070:	82 30       	cpi	r24, 0x02	; 2
    3072:	91 05       	cpc	r25, r1
    3074:	f1 f0       	breq	.+60     	; 0x30b2 <Control_Task_Func+0xc8>
    3076:	29 81       	ldd	r18, Y+1	; 0x01
    3078:	3a 81       	ldd	r19, Y+2	; 0x02
    307a:	23 30       	cpi	r18, 0x03	; 3
    307c:	31 05       	cpc	r19, r1
    307e:	34 f4       	brge	.+12     	; 0x308c <Control_Task_Func+0xa2>
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	9a 81       	ldd	r25, Y+2	; 0x02
    3084:	81 30       	cpi	r24, 0x01	; 1
    3086:	91 05       	cpc	r25, r1
    3088:	61 f0       	breq	.+24     	; 0x30a2 <Control_Task_Func+0xb8>
    308a:	2b c0       	rjmp	.+86     	; 0x30e2 <Control_Task_Func+0xf8>
    308c:	29 81       	ldd	r18, Y+1	; 0x01
    308e:	3a 81       	ldd	r19, Y+2	; 0x02
    3090:	23 30       	cpi	r18, 0x03	; 3
    3092:	31 05       	cpc	r19, r1
    3094:	b1 f0       	breq	.+44     	; 0x30c2 <Control_Task_Func+0xd8>
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	9a 81       	ldd	r25, Y+2	; 0x02
    309a:	84 30       	cpi	r24, 0x04	; 4
    309c:	91 05       	cpc	r25, r1
    309e:	c9 f0       	breq	.+50     	; 0x30d2 <Control_Task_Func+0xe8>
    30a0:	20 c0       	rjmp	.+64     	; 0x30e2 <Control_Task_Func+0xf8>
		{
		case 1:
			Window_Task.u8TaskState   = TASK_RUNNING_STATE;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	80 93 55 03 	sts	0x0355, r24
			Control_Task.u8TaskState  = TASK_WAITING_STATE;
    30a8:	10 92 60 03 	sts	0x0360, r1
			ControlFlag = 0;
    30ac:	10 92 58 02 	sts	0x0258, r1
    30b0:	2d c0       	rjmp	.+90     	; 0x310c <Control_Task_Func+0x122>
			break;

		case 2:
			Light_Task.u8TaskState    = TASK_RUNNING_STATE;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	80 93 4a 03 	sts	0x034A, r24
			Control_Task.u8TaskState  = TASK_WAITING_STATE;
    30b8:	10 92 60 03 	sts	0x0360, r1
			ControlFlag = 0;
    30bc:	10 92 58 02 	sts	0x0258, r1
    30c0:	25 c0       	rjmp	.+74     	; 0x310c <Control_Task_Func+0x122>
			break;

		case 3:
			Fan_Task.u8TaskState      = TASK_RUNNING_STATE;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	80 93 6b 03 	sts	0x036B, r24
			Control_Task.u8TaskState  = TASK_WAITING_STATE;
    30c8:	10 92 60 03 	sts	0x0360, r1
			ControlFlag = 0;
    30cc:	10 92 58 02 	sts	0x0258, r1
    30d0:	1d c0       	rjmp	.+58     	; 0x310c <Control_Task_Func+0x122>
			break;

		case 4:
			Exit_Task.u8TaskState      = TASK_RUNNING_STATE;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	80 93 29 03 	sts	0x0329, r24
			Control_Task.u8TaskState  = TASK_WAITING_STATE;
    30d8:	10 92 60 03 	sts	0x0360, r1
			ControlFlag = 0;
    30dc:	10 92 58 02 	sts	0x0258, r1
    30e0:	15 c0       	rjmp	.+42     	; 0x310c <Control_Task_Func+0x122>
			break;

		default :
			Lcd_vidQueueCommand( 0x01 );
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
			Lcd_vidQueueString("Not Valid InPut");
    30e8:	8d eb       	ldi	r24, 0xBD	; 189
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
			Control_Task.u32Periodicity = 1500;
    30f0:	8c ed       	ldi	r24, 0xDC	; 220
    30f2:	95 e0       	ldi	r25, 0x05	; 5
    30f4:	a0 e0       	ldi	r26, 0x00	; 0
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	80 93 5a 03 	sts	0x035A, r24
    30fc:	90 93 5b 03 	sts	0x035B, r25
    3100:	a0 93 5c 03 	sts	0x035C, r26
    3104:	b0 93 5d 03 	sts	0x035D, r27
			ControlFlag = 0;
    3108:	10 92 58 02 	sts	0x0258, r1
			break;
		}
		Save_Key = KEYPAD_u8NO_KEY;
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	80 93 46 02 	sts	0x0246, r24
	}
}
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <Window_Task_Func>:



void Window_Task_Func(void)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	00 d0       	rcall	.+0      	; 0x3122 <Window_Task_Func+0x6>
    3122:	0f 92       	push	r0
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
	static u8 ServoFlag   = 0;
	static u8 Arr_Counter = 0;

	u16 ServoAngle;

	if( ServoFlag == 0 )
    3128:	80 91 5a 02 	lds	r24, 0x025A
    312c:	88 23       	and	r24, r24
    312e:	71 f5       	brne	.+92     	; 0x318c <Window_Task_Func+0x70>
	{
		Lcd_vidQueueCommand(0x01);
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("Window : ");
    3136:	8d ec       	ldi	r24, 0xCD	; 205
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Lcd_vidQueueCommand(0xC0);
    313e:	80 ec       	ldi	r24, 0xC0	; 192
    3140:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("Angle = ");
    3144:	87 ed       	ldi	r24, 0xD7	; 215
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Window_Task.u32Periodicity = 100;
    314c:	84 e6       	ldi	r24, 0x64	; 100
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	a0 e0       	ldi	r26, 0x00	; 0
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	80 93 4f 03 	sts	0x034F, r24
    3158:	90 93 50 03 	sts	0x0350, r25
    315c:	a0 93 51 03 	sts	0x0351, r26
    3160:	b0 93 52 03 	sts	0x0352, r27
		u8 i;

		for( i=0; i<3; i++ )
    3164:	19 82       	std	Y+1, r1	; 0x01
    3166:	0a c0       	rjmp	.+20     	; 0x317c <Window_Task_Func+0x60>
		{
			SaveVal[i] = 0;
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	88 2f       	mov	r24, r24
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	fc 01       	movw	r30, r24
    3170:	e9 58       	subi	r30, 0x89	; 137
    3172:	fc 4f       	sbci	r31, 0xFC	; 252
    3174:	10 82       	st	Z, r1
		Lcd_vidQueueCommand(0xC0);
		Lcd_vidQueueString("Angle = ");
		Window_Task.u32Periodicity = 100;
		u8 i;

		for( i=0; i<3; i++ )
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	8f 5f       	subi	r24, 0xFF	; 255
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	83 30       	cpi	r24, 0x03	; 3
    3180:	98 f3       	brcs	.-26     	; 0x3168 <Window_Task_Func+0x4c>
		{
			SaveVal[i] = 0;
		}
		ServoFlag++;
    3182:	80 91 5a 02 	lds	r24, 0x025A
    3186:	8f 5f       	subi	r24, 0xFF	; 255
    3188:	80 93 5a 02 	sts	0x025A, r24
	}

	if( (Save_Key >= 0) && (Save_Key <=9))
    318c:	80 91 46 02 	lds	r24, 0x0246
    3190:	8a 30       	cpi	r24, 0x0A	; 10
    3192:	c0 f4       	brcc	.+48     	; 0x31c4 <Window_Task_Func+0xa8>
	{

		Lcd_vidQueueChar( Save_Key + '0');
    3194:	80 91 46 02 	lds	r24, 0x0246
    3198:	80 5d       	subi	r24, 0xD0	; 208
    319a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <Lcd_vidQueueChar>
		SaveVal[Arr_Counter]  = Save_Key;
    319e:	80 91 59 02 	lds	r24, 0x0259
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	20 91 46 02 	lds	r18, 0x0246
    31aa:	fc 01       	movw	r30, r24
    31ac:	e9 58       	subi	r30, 0x89	; 137
    31ae:	fc 4f       	sbci	r31, 0xFC	; 252
    31b0:	20 83       	st	Z, r18
		Save_Key = KEYPAD_u8NO_KEY;
    31b2:	8f ef       	ldi	r24, 0xFF	; 255
    31b4:	80 93 46 02 	sts	0x0246, r24
		Arr_Counter++;
    31b8:	80 91 59 02 	lds	r24, 0x0259
    31bc:	8f 5f       	subi	r24, 0xFF	; 255
    31be:	80 93 59 02 	sts	0x0259, r24
    31c2:	85 c0       	rjmp	.+266    	; 0x32ce <Window_Task_Func+0x1b2>

	}
	else if( Save_Key == '#' )
    31c4:	80 91 46 02 	lds	r24, 0x0246
    31c8:	83 32       	cpi	r24, 0x23	; 35
    31ca:	09 f0       	breq	.+2      	; 0x31ce <Window_Task_Func+0xb2>
    31cc:	80 c0       	rjmp	.+256    	; 0x32ce <Window_Task_Func+0x1b2>
	{
		Save_Key = KEYPAD_u8NO_KEY;
    31ce:	8f ef       	ldi	r24, 0xFF	; 255
    31d0:	80 93 46 02 	sts	0x0246, r24

		if( Arr_Counter == 1 )
    31d4:	80 91 59 02 	lds	r24, 0x0259
    31d8:	81 30       	cpi	r24, 0x01	; 1
    31da:	39 f4       	brne	.+14     	; 0x31ea <Window_Task_Func+0xce>
		{
			ServoAngle = SaveVal[0];
    31dc:	80 91 77 03 	lds	r24, 0x0377
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9b 83       	std	Y+3, r25	; 0x03
    31e6:	8a 83       	std	Y+2, r24	; 0x02
    31e8:	45 c0       	rjmp	.+138    	; 0x3274 <Window_Task_Func+0x158>
		}
		else if(  Arr_Counter == 2 )
    31ea:	80 91 59 02 	lds	r24, 0x0259
    31ee:	82 30       	cpi	r24, 0x02	; 2
    31f0:	b9 f4       	brne	.+46     	; 0x3220 <Window_Task_Func+0x104>
		{
			ServoAngle = (SaveVal[0] * 10) + SaveVal[1];
    31f2:	80 91 77 03 	lds	r24, 0x0377
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9c 01       	movw	r18, r24
    31fc:	22 0f       	add	r18, r18
    31fe:	33 1f       	adc	r19, r19
    3200:	c9 01       	movw	r24, r18
    3202:	88 0f       	add	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	28 0f       	add	r18, r24
    320c:	39 1f       	adc	r19, r25
    320e:	80 91 78 03 	lds	r24, 0x0378
    3212:	88 2f       	mov	r24, r24
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	82 0f       	add	r24, r18
    3218:	93 1f       	adc	r25, r19
    321a:	9b 83       	std	Y+3, r25	; 0x03
    321c:	8a 83       	std	Y+2, r24	; 0x02
    321e:	2a c0       	rjmp	.+84     	; 0x3274 <Window_Task_Func+0x158>
		}
		else if(  Arr_Counter == 3 )
    3220:	80 91 59 02 	lds	r24, 0x0259
    3224:	83 30       	cpi	r24, 0x03	; 3
    3226:	31 f5       	brne	.+76     	; 0x3274 <Window_Task_Func+0x158>
		{
			ServoAngle = (SaveVal[0] * 100) + (SaveVal[1] * 10) + SaveVal[2];
    3228:	80 91 77 03 	lds	r24, 0x0377
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	84 e6       	ldi	r24, 0x64	; 100
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	28 9f       	mul	r18, r24
    3236:	a0 01       	movw	r20, r0
    3238:	29 9f       	mul	r18, r25
    323a:	50 0d       	add	r21, r0
    323c:	38 9f       	mul	r19, r24
    323e:	50 0d       	add	r21, r0
    3240:	11 24       	eor	r1, r1
    3242:	80 91 78 03 	lds	r24, 0x0378
    3246:	88 2f       	mov	r24, r24
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	9c 01       	movw	r18, r24
    324c:	22 0f       	add	r18, r18
    324e:	33 1f       	adc	r19, r19
    3250:	c9 01       	movw	r24, r18
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	82 0f       	add	r24, r18
    325c:	93 1f       	adc	r25, r19
    325e:	9a 01       	movw	r18, r20
    3260:	28 0f       	add	r18, r24
    3262:	39 1f       	adc	r19, r25
    3264:	80 91 79 03 	lds	r24, 0x0379
    3268:	88 2f       	mov	r24, r24
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	82 0f       	add	r24, r18
    326e:	93 1f       	adc	r25, r19
    3270:	9b 83       	std	Y+3, r25	; 0x03
    3272:	8a 83       	std	Y+2, r24	; 0x02
		}

		if( (ServoAngle >= 0) && (ServoAngle <= 180) && (Arr_Counter <=3))
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	85 3b       	cpi	r24, 0xB5	; 181
    327a:	91 05       	cpc	r25, r1
    327c:	88 f4       	brcc	.+34     	; 0x32a0 <Window_Task_Func+0x184>
    327e:	80 91 59 02 	lds	r24, 0x0259
    3282:	84 30       	cpi	r24, 0x04	; 4
    3284:	68 f4       	brcc	.+26     	; 0x32a0 <Window_Task_Func+0x184>
		{
			Servo_vidSetDegree( (u8)ServoAngle );
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	0e 94 84 10 	call	0x2108	; 0x2108 <Servo_vidSetDegree>

			Control_Task.u8TaskState = TASK_RUNNING_STATE;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	80 93 60 03 	sts	0x0360, r24
			Window_Task.u8TaskState  = TASK_WAITING_STATE;
    3292:	10 92 55 03 	sts	0x0355, r1

			Arr_Counter = 0;
    3296:	10 92 59 02 	sts	0x0259, r1
			ServoFlag   = 0;
    329a:	10 92 5a 02 	sts	0x025A, r1
    329e:	17 c0       	rjmp	.+46     	; 0x32ce <Window_Task_Func+0x1b2>
		}
		else
		{
			Lcd_vidQueueCommand(0x01);
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
			Lcd_vidQueueString(" Not Valid Angle ");
    32a6:	80 ee       	ldi	r24, 0xE0	; 224
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
			Window_Task.u32Periodicity = 1500;
    32ae:	8c ed       	ldi	r24, 0xDC	; 220
    32b0:	95 e0       	ldi	r25, 0x05	; 5
    32b2:	a0 e0       	ldi	r26, 0x00	; 0
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	80 93 4f 03 	sts	0x034F, r24
    32ba:	90 93 50 03 	sts	0x0350, r25
    32be:	a0 93 51 03 	sts	0x0351, r26
    32c2:	b0 93 52 03 	sts	0x0352, r27
			Arr_Counter = 0;
    32c6:	10 92 59 02 	sts	0x0259, r1
			ServoFlag   = 0;
    32ca:	10 92 5a 02 	sts	0x025A, r1
		}
	}
}
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	cf 91       	pop	r28
    32d6:	df 91       	pop	r29
    32d8:	08 95       	ret

000032da <Light_Task_Func>:



void Light_Task_Func(void)
{
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <Light_Task_Func+0x6>
    32e0:	0f 92       	push	r0
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
	static u8 LightFlag   = 0;
	static u8 Arr_Counter = 0;

	u16 LightsIntensity;

	if( LightFlag == 0 )
    32e6:	80 91 5c 02 	lds	r24, 0x025C
    32ea:	88 23       	and	r24, r24
    32ec:	71 f5       	brne	.+92     	; 0x334a <Light_Task_Func+0x70>
	{
		Lcd_vidQueueCommand(0x01);
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("Light : ");
    32f4:	82 ef       	ldi	r24, 0xF2	; 242
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Lcd_vidQueueCommand(0xC0);
    32fc:	80 ec       	ldi	r24, 0xC0	; 192
    32fe:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("Intensity = ");
    3302:	8b ef       	ldi	r24, 0xFB	; 251
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Light_Task.u32Periodicity = 100;
    330a:	84 e6       	ldi	r24, 0x64	; 100
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	a0 e0       	ldi	r26, 0x00	; 0
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	80 93 44 03 	sts	0x0344, r24
    3316:	90 93 45 03 	sts	0x0345, r25
    331a:	a0 93 46 03 	sts	0x0346, r26
    331e:	b0 93 47 03 	sts	0x0347, r27
		u8 i;

		for( i=0; i<3; i++ )
    3322:	19 82       	std	Y+1, r1	; 0x01
    3324:	0a c0       	rjmp	.+20     	; 0x333a <Light_Task_Func+0x60>
		{
			SaveVal[i] = 0;
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	88 2f       	mov	r24, r24
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	fc 01       	movw	r30, r24
    332e:	e9 58       	subi	r30, 0x89	; 137
    3330:	fc 4f       	sbci	r31, 0xFC	; 252
    3332:	10 82       	st	Z, r1
		Lcd_vidQueueCommand(0xC0);
		Lcd_vidQueueString("Intensity = ");
		Light_Task.u32Periodicity = 100;
		u8 i;

		for( i=0; i<3; i++ )
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	83 30       	cpi	r24, 0x03	; 3
    333e:	98 f3       	brcs	.-26     	; 0x3326 <Light_Task_Func+0x4c>
		{
			SaveVal[i] = 0;
		}
		LightFlag++;
    3340:	80 91 5c 02 	lds	r24, 0x025C
    3344:	8f 5f       	subi	r24, 0xFF	; 255
    3346:	80 93 5c 02 	sts	0x025C, r24
	}

	if( (Save_Key >= 0) && (Save_Key <=9))
    334a:	80 91 46 02 	lds	r24, 0x0246
    334e:	8a 30       	cpi	r24, 0x0A	; 10
    3350:	c0 f4       	brcc	.+48     	; 0x3382 <Light_Task_Func+0xa8>
	{

		Lcd_vidQueueChar( Save_Key + '0');
    3352:	80 91 46 02 	lds	r24, 0x0246
    3356:	80 5d       	subi	r24, 0xD0	; 208
    3358:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <Lcd_vidQueueChar>
		SaveVal[Arr_Counter]  = Save_Key;
    335c:	80 91 5b 02 	lds	r24, 0x025B
    3360:	88 2f       	mov	r24, r24
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	20 91 46 02 	lds	r18, 0x0246
    3368:	fc 01       	movw	r30, r24
    336a:	e9 58       	subi	r30, 0x89	; 137
    336c:	fc 4f       	sbci	r31, 0xFC	; 252
    336e:	20 83       	st	Z, r18
		Save_Key = KEYPAD_u8NO_KEY;
    3370:	8f ef       	ldi	r24, 0xFF	; 255
    3372:	80 93 46 02 	sts	0x0246, r24
		Arr_Counter++;
    3376:	80 91 5b 02 	lds	r24, 0x025B
    337a:	8f 5f       	subi	r24, 0xFF	; 255
    337c:	80 93 5b 02 	sts	0x025B, r24
    3380:	85 c0       	rjmp	.+266    	; 0x348c <Light_Task_Func+0x1b2>

	}
	else if( Save_Key == '#' )
    3382:	80 91 46 02 	lds	r24, 0x0246
    3386:	83 32       	cpi	r24, 0x23	; 35
    3388:	09 f0       	breq	.+2      	; 0x338c <Light_Task_Func+0xb2>
    338a:	80 c0       	rjmp	.+256    	; 0x348c <Light_Task_Func+0x1b2>
	{
		Save_Key = KEYPAD_u8NO_KEY;
    338c:	8f ef       	ldi	r24, 0xFF	; 255
    338e:	80 93 46 02 	sts	0x0246, r24

		if( Arr_Counter == 1 )
    3392:	80 91 5b 02 	lds	r24, 0x025B
    3396:	81 30       	cpi	r24, 0x01	; 1
    3398:	39 f4       	brne	.+14     	; 0x33a8 <Light_Task_Func+0xce>
		{
			LightsIntensity = SaveVal[0];
    339a:	80 91 77 03 	lds	r24, 0x0377
    339e:	88 2f       	mov	r24, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	9b 83       	std	Y+3, r25	; 0x03
    33a4:	8a 83       	std	Y+2, r24	; 0x02
    33a6:	45 c0       	rjmp	.+138    	; 0x3432 <Light_Task_Func+0x158>
		}
		else if(  Arr_Counter == 2 )
    33a8:	80 91 5b 02 	lds	r24, 0x025B
    33ac:	82 30       	cpi	r24, 0x02	; 2
    33ae:	b9 f4       	brne	.+46     	; 0x33de <Light_Task_Func+0x104>
		{
			LightsIntensity = (SaveVal[0] * 10) + SaveVal[1];
    33b0:	80 91 77 03 	lds	r24, 0x0377
    33b4:	88 2f       	mov	r24, r24
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9c 01       	movw	r18, r24
    33ba:	22 0f       	add	r18, r18
    33bc:	33 1f       	adc	r19, r19
    33be:	c9 01       	movw	r24, r18
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	28 0f       	add	r18, r24
    33ca:	39 1f       	adc	r19, r25
    33cc:	80 91 78 03 	lds	r24, 0x0378
    33d0:	88 2f       	mov	r24, r24
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	82 0f       	add	r24, r18
    33d6:	93 1f       	adc	r25, r19
    33d8:	9b 83       	std	Y+3, r25	; 0x03
    33da:	8a 83       	std	Y+2, r24	; 0x02
    33dc:	2a c0       	rjmp	.+84     	; 0x3432 <Light_Task_Func+0x158>
		}
		else if(  Arr_Counter == 3 )
    33de:	80 91 5b 02 	lds	r24, 0x025B
    33e2:	83 30       	cpi	r24, 0x03	; 3
    33e4:	31 f5       	brne	.+76     	; 0x3432 <Light_Task_Func+0x158>
		{
			LightsIntensity = (SaveVal[0] * 100) + (SaveVal[1] * 10) + SaveVal[2];
    33e6:	80 91 77 03 	lds	r24, 0x0377
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	84 e6       	ldi	r24, 0x64	; 100
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	28 9f       	mul	r18, r24
    33f4:	a0 01       	movw	r20, r0
    33f6:	29 9f       	mul	r18, r25
    33f8:	50 0d       	add	r21, r0
    33fa:	38 9f       	mul	r19, r24
    33fc:	50 0d       	add	r21, r0
    33fe:	11 24       	eor	r1, r1
    3400:	80 91 78 03 	lds	r24, 0x0378
    3404:	88 2f       	mov	r24, r24
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	9c 01       	movw	r18, r24
    340a:	22 0f       	add	r18, r18
    340c:	33 1f       	adc	r19, r19
    340e:	c9 01       	movw	r24, r18
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	82 0f       	add	r24, r18
    341a:	93 1f       	adc	r25, r19
    341c:	9a 01       	movw	r18, r20
    341e:	28 0f       	add	r18, r24
    3420:	39 1f       	adc	r19, r25
    3422:	80 91 79 03 	lds	r24, 0x0379
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	82 0f       	add	r24, r18
    342c:	93 1f       	adc	r25, r19
    342e:	9b 83       	std	Y+3, r25	; 0x03
    3430:	8a 83       	std	Y+2, r24	; 0x02
		}

		if( (LightsIntensity >= 0) && (LightsIntensity <= 100) && (Arr_Counter <=3))
    3432:	8a 81       	ldd	r24, Y+2	; 0x02
    3434:	9b 81       	ldd	r25, Y+3	; 0x03
    3436:	85 36       	cpi	r24, 0x65	; 101
    3438:	91 05       	cpc	r25, r1
    343a:	88 f4       	brcc	.+34     	; 0x345e <Light_Task_Func+0x184>
    343c:	80 91 5b 02 	lds	r24, 0x025B
    3440:	84 30       	cpi	r24, 0x04	; 4
    3442:	68 f4       	brcc	.+26     	; 0x345e <Light_Task_Func+0x184>
		{
			PWM_vidSetDutyCycle( (u8)LightsIntensity );
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <PWM_vidSetDutyCycle>

			Control_Task.u8TaskState = TASK_RUNNING_STATE;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	80 93 60 03 	sts	0x0360, r24
			Light_Task.u8TaskState  = TASK_WAITING_STATE;
    3450:	10 92 4a 03 	sts	0x034A, r1

			Arr_Counter = 0;
    3454:	10 92 5b 02 	sts	0x025B, r1
			LightFlag   = 0;
    3458:	10 92 5c 02 	sts	0x025C, r1
    345c:	17 c0       	rjmp	.+46     	; 0x348c <Light_Task_Func+0x1b2>
		}
		else
		{
			Lcd_vidQueueCommand(0x01);
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
			Lcd_vidQueueString(" Not Valid InPut ");
    3464:	88 e0       	ldi	r24, 0x08	; 8
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
			Light_Task.u32Periodicity = 1500;
    346c:	8c ed       	ldi	r24, 0xDC	; 220
    346e:	95 e0       	ldi	r25, 0x05	; 5
    3470:	a0 e0       	ldi	r26, 0x00	; 0
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	80 93 44 03 	sts	0x0344, r24
    3478:	90 93 45 03 	sts	0x0345, r25
    347c:	a0 93 46 03 	sts	0x0346, r26
    3480:	b0 93 47 03 	sts	0x0347, r27
			Arr_Counter = 0;
    3484:	10 92 5b 02 	sts	0x025B, r1
			LightFlag   = 0;
    3488:	10 92 5c 02 	sts	0x025C, r1
		}
	}
}
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	08 95       	ret

00003498 <Fan_Task_Func>:



void Fan_Task_Func(void)
{
    3498:	df 93       	push	r29
    349a:	cf 93       	push	r28
    349c:	00 d0       	rcall	.+0      	; 0x349e <Fan_Task_Func+0x6>
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
	static u8 FanFlag   = 0;


	if( FanFlag == 0 )
    34a2:	80 91 5d 02 	lds	r24, 0x025D
    34a6:	88 23       	and	r24, r24
    34a8:	31 f5       	brne	.+76     	; 0x34f6 <Fan_Task_Func+0x5e>
	{
		Lcd_vidQueueCommand(0x01);
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("Fan : ");
    34b0:	8a e1       	ldi	r24, 0x1A	; 26
    34b2:	91 e0       	ldi	r25, 0x01	; 1
    34b4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Lcd_vidQueueCommand(0xC0);
    34b8:	80 ec       	ldi	r24, 0xC0	; 192
    34ba:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("0- OFF ");
    34be:	81 e2       	ldi	r24, 0x21	; 33
    34c0:	91 e0       	ldi	r25, 0x01	; 1
    34c2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Lcd_vidQueueCommand(0xC8);
    34c6:	88 ec       	ldi	r24, 0xC8	; 200
    34c8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString("1- ON ");
    34cc:	89 e2       	ldi	r24, 0x29	; 41
    34ce:	91 e0       	ldi	r25, 0x01	; 1
    34d0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Fan_Task.u32Periodicity = 100;
    34d4:	84 e6       	ldi	r24, 0x64	; 100
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	a0 e0       	ldi	r26, 0x00	; 0
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	80 93 65 03 	sts	0x0365, r24
    34e0:	90 93 66 03 	sts	0x0366, r25
    34e4:	a0 93 67 03 	sts	0x0367, r26
    34e8:	b0 93 68 03 	sts	0x0368, r27

		FanFlag++;
    34ec:	80 91 5d 02 	lds	r24, 0x025D
    34f0:	8f 5f       	subi	r24, 0xFF	; 255
    34f2:	80 93 5d 02 	sts	0x025D, r24
	}

	if(Save_Key != KEYPAD_u8NO_KEY)
    34f6:	80 91 46 02 	lds	r24, 0x0246
    34fa:	8f 3f       	cpi	r24, 0xFF	; 255
    34fc:	e1 f1       	breq	.+120    	; 0x3576 <Fan_Task_Func+0xde>
	{
		switch(Save_Key)
    34fe:	80 91 46 02 	lds	r24, 0x0246
    3502:	28 2f       	mov	r18, r24
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	3a 83       	std	Y+2, r19	; 0x02
    3508:	29 83       	std	Y+1, r18	; 0x01
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	9a 81       	ldd	r25, Y+2	; 0x02
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	31 f0       	breq	.+12     	; 0x351e <Fan_Task_Func+0x86>
    3512:	29 81       	ldd	r18, Y+1	; 0x01
    3514:	3a 81       	ldd	r19, Y+2	; 0x02
    3516:	21 30       	cpi	r18, 0x01	; 1
    3518:	31 05       	cpc	r19, r1
    351a:	59 f0       	breq	.+22     	; 0x3532 <Fan_Task_Func+0x9a>
    351c:	14 c0       	rjmp	.+40     	; 0x3546 <Fan_Task_Func+0xae>
		{
		case 0:
			DC_vidTurnOff();
    351e:	0e 94 d3 06 	call	0xda6	; 0xda6 <DC_vidTurnOff>
			Control_Task.u8TaskState = TASK_RUNNING_STATE;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	80 93 60 03 	sts	0x0360, r24
			Fan_Task.u8TaskState  = TASK_WAITING_STATE;
    3528:	10 92 6b 03 	sts	0x036B, r1

			FanFlag   = 0;
    352c:	10 92 5d 02 	sts	0x025D, r1
    3530:	1f c0       	rjmp	.+62     	; 0x3570 <Fan_Task_Func+0xd8>
			break;

		case 1:
			DC_vidTurnOn();
    3532:	0e 94 c8 06 	call	0xd90	; 0xd90 <DC_vidTurnOn>
			Control_Task.u8TaskState = TASK_RUNNING_STATE;
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	80 93 60 03 	sts	0x0360, r24
			Fan_Task.u8TaskState  = TASK_WAITING_STATE;
    353c:	10 92 6b 03 	sts	0x036B, r1

			FanFlag   = 0;
    3540:	10 92 5d 02 	sts	0x025D, r1
    3544:	15 c0       	rjmp	.+42     	; 0x3570 <Fan_Task_Func+0xd8>
			break;

		default :
			Lcd_vidQueueCommand(0x01);
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
			Lcd_vidQueueString("Not Valid InPut");
    354c:	8d eb       	ldi	r24, 0xBD	; 189
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
			Fan_Task.u32Periodicity = 1500;
    3554:	8c ed       	ldi	r24, 0xDC	; 220
    3556:	95 e0       	ldi	r25, 0x05	; 5
    3558:	a0 e0       	ldi	r26, 0x00	; 0
    355a:	b0 e0       	ldi	r27, 0x00	; 0
    355c:	80 93 65 03 	sts	0x0365, r24
    3560:	90 93 66 03 	sts	0x0366, r25
    3564:	a0 93 67 03 	sts	0x0367, r26
    3568:	b0 93 68 03 	sts	0x0368, r27

			FanFlag = 0;
    356c:	10 92 5d 02 	sts	0x025D, r1
			break;
		}

		Save_Key = KEYPAD_u8NO_KEY;
    3570:	8f ef       	ldi	r24, 0xFF	; 255
    3572:	80 93 46 02 	sts	0x0246, r24

	}

}
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <Exit_Task_Func>:



void Exit_Task_Func(void)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
	static u8 ExitFlag   = 0;

	if(ExitFlag == 0)
    3588:	80 91 5e 02 	lds	r24, 0x025E
    358c:	88 23       	and	r24, r24
    358e:	a9 f4       	brne	.+42     	; 0x35ba <Exit_Task_Func+0x3a>
	{
		Lcd_vidQueueCommand(0x01);
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <Lcd_vidQueueCommand>
		Lcd_vidQueueString(" GoodBye ");
    3596:	80 e3       	ldi	r24, 0x30	; 48
    3598:	91 e0       	ldi	r25, 0x01	; 1
    359a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Lcd_vidQueueString>
		Exit_Task.u8TaskState = TASK_WAITING_STATE;
    359e:	10 92 29 03 	sts	0x0329, r1
		Door_Task.u8TaskState = TASK_RUNNING_STATE;
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	80 93 3f 03 	sts	0x033F, r24

		Exit_Door_Flag = 1;
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	80 93 4e 02 	sts	0x024E, r24

		ExitFlag++;
    35ae:	80 91 5e 02 	lds	r24, 0x025E
    35b2:	8f 5f       	subi	r24, 0xFF	; 255
    35b4:	80 93 5e 02 	sts	0x025E, r24
    35b8:	13 c0       	rjmp	.+38     	; 0x35e0 <Exit_Task_Func+0x60>
	}
	else
	{
		Servo_vidSetDegree( 0  );
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	0e 94 84 10 	call	0x2108	; 0x2108 <Servo_vidSetDegree>
		PWM_vidSetDutyCycle( 0 );
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <PWM_vidSetDutyCycle>
		DC_vidTurnOff();
    35c6:	0e 94 d3 06 	call	0xda6	; 0xda6 <DC_vidTurnOff>

		Password_Task.u8TaskState = TASK_RUNNING_STATE;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	80 93 84 03 	sts	0x0384, r24
		Door_Task.u8TaskState     = TASK_WAITING_STATE;
    35d0:	10 92 3f 03 	sts	0x033F, r1
		Exit_Task.u8TaskState     = TASK_WAITING_STATE;
    35d4:	10 92 29 03 	sts	0x0329, r1

		Exit_Door_Flag = 0;
    35d8:	10 92 4e 02 	sts	0x024E, r1
		ExitFlag = 0;
    35dc:	10 92 5e 02 	sts	0x025E, r1
	}


}
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <Alarm_Task_Func>:



void Alarm_Task_Func(void)
{
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
	Led_vidTurnOn(LED_1);
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Led_vidTurnOn>
	Buzzer_vidTurnOn();
    35f4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Buzzer_vidTurnOn>
}
    35f8:	cf 91       	pop	r28
    35fa:	df 91       	pop	r29
    35fc:	08 95       	ret

000035fe <LCD_Task_Fun>:



void LCD_Task_Fun(void)
{
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	0f 92       	push	r0
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
	u8 RetVar;

	Lcd_vidDisableTrigger();
    3608:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Lcd_vidDisableTrigger>

	RetVar = Lcd_u8ReadQueue();
    360c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Lcd_u8ReadQueue>
    3610:	89 83       	std	Y+1, r24	; 0x01

	if(RetVar != LCD_QUEUE_NULL)
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	8f 3f       	cpi	r24, 0xFF	; 255
    3616:	21 f0       	breq	.+8      	; 0x3620 <LCD_Task_Fun+0x22>
	{
		LCD_Trigger_Task.u8TaskState = TASK_RUNNING_STATE;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	80 93 34 03 	sts	0x0334, r24
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <LCD_Task_Fun+0x26>
	}
	else
	{
		Lcd_vidDisableTrigger();
    3620:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Lcd_vidDisableTrigger>
	}
}
    3624:	0f 90       	pop	r0
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	08 95       	ret

0000362c <LCD_Trigger_Task_Fun>:



void LCD_Trigger_Task_Fun(void)
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
	Lcd_vidEnableTrigger();
    3634:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Lcd_vidEnableTrigger>
	LCD_Trigger_Task.u8TaskState = TASK_WAITING_STATE;
    3638:	10 92 34 03 	sts	0x0334, r1
}
    363c:	cf 91       	pop	r28
    363e:	df 91       	pop	r29
    3640:	08 95       	ret

00003642 <__prologue_saves__>:
    3642:	2f 92       	push	r2
    3644:	3f 92       	push	r3
    3646:	4f 92       	push	r4
    3648:	5f 92       	push	r5
    364a:	6f 92       	push	r6
    364c:	7f 92       	push	r7
    364e:	8f 92       	push	r8
    3650:	9f 92       	push	r9
    3652:	af 92       	push	r10
    3654:	bf 92       	push	r11
    3656:	cf 92       	push	r12
    3658:	df 92       	push	r13
    365a:	ef 92       	push	r14
    365c:	ff 92       	push	r15
    365e:	0f 93       	push	r16
    3660:	1f 93       	push	r17
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	ca 1b       	sub	r28, r26
    366c:	db 0b       	sbc	r29, r27
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	09 94       	ijmp

0000367a <__epilogue_restores__>:
    367a:	2a 88       	ldd	r2, Y+18	; 0x12
    367c:	39 88       	ldd	r3, Y+17	; 0x11
    367e:	48 88       	ldd	r4, Y+16	; 0x10
    3680:	5f 84       	ldd	r5, Y+15	; 0x0f
    3682:	6e 84       	ldd	r6, Y+14	; 0x0e
    3684:	7d 84       	ldd	r7, Y+13	; 0x0d
    3686:	8c 84       	ldd	r8, Y+12	; 0x0c
    3688:	9b 84       	ldd	r9, Y+11	; 0x0b
    368a:	aa 84       	ldd	r10, Y+10	; 0x0a
    368c:	b9 84       	ldd	r11, Y+9	; 0x09
    368e:	c8 84       	ldd	r12, Y+8	; 0x08
    3690:	df 80       	ldd	r13, Y+7	; 0x07
    3692:	ee 80       	ldd	r14, Y+6	; 0x06
    3694:	fd 80       	ldd	r15, Y+5	; 0x05
    3696:	0c 81       	ldd	r16, Y+4	; 0x04
    3698:	1b 81       	ldd	r17, Y+3	; 0x03
    369a:	aa 81       	ldd	r26, Y+2	; 0x02
    369c:	b9 81       	ldd	r27, Y+1	; 0x01
    369e:	ce 0f       	add	r28, r30
    36a0:	d1 1d       	adc	r29, r1
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	ed 01       	movw	r28, r26
    36ae:	08 95       	ret

000036b0 <_exit>:
    36b0:	f8 94       	cli

000036b2 <__stop_program>:
    36b2:	ff cf       	rjmp	.-2      	; 0x36b2 <__stop_program>
