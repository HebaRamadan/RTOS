
FreeRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000691e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000691e  000069b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000646  00800086  00800086  000069d8  2**0
                  ALLOC
  3 .stab         00008db4  00000000  00000000  000069d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000047c2  00000000  00000000  0000f78c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00013f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0001408e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000141fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00015e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00016d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00017ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00017c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00017ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001869b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f9 e6       	ldi	r31, 0x69	; 105
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 14 	call	0x29bc	; 0x29bc <main>
      8a:	0c 94 8d 34 	jmp	0x691a	; 0x691a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 34 	jmp	0x688c	; 0x688c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 34 	jmp	0x68c4	; 0x68c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 34 	jmp	0x688c	; 0x688c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 34 	jmp	0x68c4	; 0x68c4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 52 34 	jmp	0x68a4	; 0x68a4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6e 34 	jmp	0x68dc	; 0x68dc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 56 34 	jmp	0x68ac	; 0x68ac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 72 34 	jmp	0x68e4	; 0x68e4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_vidSetPinDir>:
#include "../Lib/Bit_math.h"
#include "Dio_int.h"
#include "Dio_priv.h"

void Dio_vidSetPinDir(u8 Pin , u8 Dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	66 97       	sbiw	r28, 0x16	; 22
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	86 95       	lsr	r24
     b62:	86 95       	lsr	r24
     b64:	86 95       	lsr	r24
     b66:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	87 70       	andi	r24, 0x07	; 7
     b6c:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	3e 8b       	std	Y+22, r19	; 0x16
     b76:	2d 8b       	std	Y+21, r18	; 0x15
     b78:	8d 89       	ldd	r24, Y+21	; 0x15
     b7a:	9e 89       	ldd	r25, Y+22	; 0x16
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	91 05       	cpc	r25, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <Dio_vidSetPinDir+0x3e>
     b82:	e1 c0       	rjmp	.+450    	; 0xd46 <Dio_vidSetPinDir+0x200>
     b84:	2d 89       	ldd	r18, Y+21	; 0x15
     b86:	3e 89       	ldd	r19, Y+22	; 0x16
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	2c f4       	brge	.+10     	; 0xb98 <Dio_vidSetPinDir+0x52>
     b8e:	8d 89       	ldd	r24, Y+21	; 0x15
     b90:	9e 89       	ldd	r25, Y+22	; 0x16
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	71 f0       	breq	.+28     	; 0xbb2 <Dio_vidSetPinDir+0x6c>
     b96:	34 c3       	rjmp	.+1640   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     b98:	2d 89       	ldd	r18, Y+21	; 0x15
     b9a:	3e 89       	ldd	r19, Y+22	; 0x16
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	31 05       	cpc	r19, r1
     ba0:	09 f4       	brne	.+2      	; 0xba4 <Dio_vidSetPinDir+0x5e>
     ba2:	9b c1       	rjmp	.+822    	; 0xeda <Dio_vidSetPinDir+0x394>
     ba4:	8d 89       	ldd	r24, Y+21	; 0x15
     ba6:	9e 89       	ldd	r25, Y+22	; 0x16
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <Dio_vidSetPinDir+0x6a>
     bae:	5f c2       	rjmp	.+1214   	; 0x106e <Dio_vidSetPinDir+0x528>
     bb0:	27 c3       	rjmp	.+1614   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
		case 0:
			if(Dir ==1)
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	09 f0       	breq	.+2      	; 0xbba <Dio_vidSetPinDir+0x74>
     bb8:	63 c0       	rjmp	.+198    	; 0xc80 <Dio_vidSetPinDir+0x13a>
				{
					switch(PinLoc)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	3c 8b       	std	Y+20, r19	; 0x14
     bc2:	2b 8b       	std	Y+19, r18	; 0x13
     bc4:	8b 89       	ldd	r24, Y+19	; 0x13
     bc6:	9c 89       	ldd	r25, Y+20	; 0x14
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	d9 f1       	breq	.+118    	; 0xc44 <Dio_vidSetPinDir+0xfe>
     bce:	2b 89       	ldd	r18, Y+19	; 0x13
     bd0:	3c 89       	ldd	r19, Y+20	; 0x14
     bd2:	24 30       	cpi	r18, 0x04	; 4
     bd4:	31 05       	cpc	r19, r1
     bd6:	7c f4       	brge	.+30     	; 0xbf6 <Dio_vidSetPinDir+0xb0>
     bd8:	8b 89       	ldd	r24, Y+19	; 0x13
     bda:	9c 89       	ldd	r25, Y+20	; 0x14
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	91 05       	cpc	r25, r1
     be0:	29 f1       	breq	.+74     	; 0xc2c <Dio_vidSetPinDir+0xe6>
     be2:	2b 89       	ldd	r18, Y+19	; 0x13
     be4:	3c 89       	ldd	r19, Y+20	; 0x14
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	31 05       	cpc	r19, r1
     bea:	34 f5       	brge	.+76     	; 0xc38 <Dio_vidSetPinDir+0xf2>
     bec:	8b 89       	ldd	r24, Y+19	; 0x13
     bee:	9c 89       	ldd	r25, Y+20	; 0x14
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	b1 f0       	breq	.+44     	; 0xc20 <Dio_vidSetPinDir+0xda>
     bf4:	05 c3       	rjmp	.+1546   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     bf6:	2b 89       	ldd	r18, Y+19	; 0x13
     bf8:	3c 89       	ldd	r19, Y+20	; 0x14
     bfa:	25 30       	cpi	r18, 0x05	; 5
     bfc:	31 05       	cpc	r19, r1
     bfe:	71 f1       	breq	.+92     	; 0xc5c <Dio_vidSetPinDir+0x116>
     c00:	8b 89       	ldd	r24, Y+19	; 0x13
     c02:	9c 89       	ldd	r25, Y+20	; 0x14
     c04:	85 30       	cpi	r24, 0x05	; 5
     c06:	91 05       	cpc	r25, r1
     c08:	1c f1       	brlt	.+70     	; 0xc50 <Dio_vidSetPinDir+0x10a>
     c0a:	2b 89       	ldd	r18, Y+19	; 0x13
     c0c:	3c 89       	ldd	r19, Y+20	; 0x14
     c0e:	26 30       	cpi	r18, 0x06	; 6
     c10:	31 05       	cpc	r19, r1
     c12:	51 f1       	breq	.+84     	; 0xc68 <Dio_vidSetPinDir+0x122>
     c14:	8b 89       	ldd	r24, Y+19	; 0x13
     c16:	9c 89       	ldd	r25, Y+20	; 0x14
     c18:	87 30       	cpi	r24, 0x07	; 7
     c1a:	91 05       	cpc	r25, r1
     c1c:	59 f1       	breq	.+86     	; 0xc74 <Dio_vidSetPinDir+0x12e>
     c1e:	f0 c2       	rjmp	.+1504   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRA.Bits.Pin0 =1;
     c20:	ea e3       	ldi	r30, 0x3A	; 58
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	81 60       	ori	r24, 0x01	; 1
     c28:	80 83       	st	Z, r24
     c2a:	ea c2       	rjmp	.+1492   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRA.Bits.Pin1 =1;
     c2c:	ea e3       	ldi	r30, 0x3A	; 58
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	82 60       	ori	r24, 0x02	; 2
     c34:	80 83       	st	Z, r24
     c36:	e4 c2       	rjmp	.+1480   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRA.Bits.Pin2 =1;
     c38:	ea e3       	ldi	r30, 0x3A	; 58
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	84 60       	ori	r24, 0x04	; 4
     c40:	80 83       	st	Z, r24
     c42:	de c2       	rjmp	.+1468   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRA.Bits.Pin3 =1;
     c44:	ea e3       	ldi	r30, 0x3A	; 58
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	88 60       	ori	r24, 0x08	; 8
     c4c:	80 83       	st	Z, r24
     c4e:	d8 c2       	rjmp	.+1456   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRA.Bits.Pin4 =1;
     c50:	ea e3       	ldi	r30, 0x3A	; 58
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	80 61       	ori	r24, 0x10	; 16
     c58:	80 83       	st	Z, r24
     c5a:	d2 c2       	rjmp	.+1444   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRA.Bits.Pin5 =1;
     c5c:	ea e3       	ldi	r30, 0x3A	; 58
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 62       	ori	r24, 0x20	; 32
     c64:	80 83       	st	Z, r24
     c66:	cc c2       	rjmp	.+1432   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRA.Bits.Pin6 =1;
     c68:	ea e3       	ldi	r30, 0x3A	; 58
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	80 64       	ori	r24, 0x40	; 64
     c70:	80 83       	st	Z, r24
     c72:	c6 c2       	rjmp	.+1420   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRA.Bits.Pin7 =1;
     c74:	ea e3       	ldi	r30, 0x3A	; 58
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 68       	ori	r24, 0x80	; 128
     c7c:	80 83       	st	Z, r24
     c7e:	c0 c2       	rjmp	.+1408   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	3a 8b       	std	Y+18, r19	; 0x12
     c88:	29 8b       	std	Y+17, r18	; 0x11
     c8a:	89 89       	ldd	r24, Y+17	; 0x11
     c8c:	9a 89       	ldd	r25, Y+18	; 0x12
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	d9 f1       	breq	.+118    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
     c94:	29 89       	ldd	r18, Y+17	; 0x11
     c96:	3a 89       	ldd	r19, Y+18	; 0x12
     c98:	24 30       	cpi	r18, 0x04	; 4
     c9a:	31 05       	cpc	r19, r1
     c9c:	7c f4       	brge	.+30     	; 0xcbc <Dio_vidSetPinDir+0x176>
     c9e:	89 89       	ldd	r24, Y+17	; 0x11
     ca0:	9a 89       	ldd	r25, Y+18	; 0x12
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	91 05       	cpc	r25, r1
     ca6:	29 f1       	breq	.+74     	; 0xcf2 <Dio_vidSetPinDir+0x1ac>
     ca8:	29 89       	ldd	r18, Y+17	; 0x11
     caa:	3a 89       	ldd	r19, Y+18	; 0x12
     cac:	22 30       	cpi	r18, 0x02	; 2
     cae:	31 05       	cpc	r19, r1
     cb0:	34 f5       	brge	.+76     	; 0xcfe <Dio_vidSetPinDir+0x1b8>
     cb2:	89 89       	ldd	r24, Y+17	; 0x11
     cb4:	9a 89       	ldd	r25, Y+18	; 0x12
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	b1 f0       	breq	.+44     	; 0xce6 <Dio_vidSetPinDir+0x1a0>
     cba:	a2 c2       	rjmp	.+1348   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     cbc:	29 89       	ldd	r18, Y+17	; 0x11
     cbe:	3a 89       	ldd	r19, Y+18	; 0x12
     cc0:	25 30       	cpi	r18, 0x05	; 5
     cc2:	31 05       	cpc	r19, r1
     cc4:	71 f1       	breq	.+92     	; 0xd22 <Dio_vidSetPinDir+0x1dc>
     cc6:	89 89       	ldd	r24, Y+17	; 0x11
     cc8:	9a 89       	ldd	r25, Y+18	; 0x12
     cca:	85 30       	cpi	r24, 0x05	; 5
     ccc:	91 05       	cpc	r25, r1
     cce:	1c f1       	brlt	.+70     	; 0xd16 <Dio_vidSetPinDir+0x1d0>
     cd0:	29 89       	ldd	r18, Y+17	; 0x11
     cd2:	3a 89       	ldd	r19, Y+18	; 0x12
     cd4:	26 30       	cpi	r18, 0x06	; 6
     cd6:	31 05       	cpc	r19, r1
     cd8:	51 f1       	breq	.+84     	; 0xd2e <Dio_vidSetPinDir+0x1e8>
     cda:	89 89       	ldd	r24, Y+17	; 0x11
     cdc:	9a 89       	ldd	r25, Y+18	; 0x12
     cde:	87 30       	cpi	r24, 0x07	; 7
     ce0:	91 05       	cpc	r25, r1
     ce2:	59 f1       	breq	.+86     	; 0xd3a <Dio_vidSetPinDir+0x1f4>
     ce4:	8d c2       	rjmp	.+1306   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRA.Bits.Pin0 =0;
     ce6:	ea e3       	ldi	r30, 0x3A	; 58
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	80 83       	st	Z, r24
     cf0:	87 c2       	rjmp	.+1294   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRA.Bits.Pin1 =0;
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8d 7f       	andi	r24, 0xFD	; 253
     cfa:	80 83       	st	Z, r24
     cfc:	81 c2       	rjmp	.+1282   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRA.Bits.Pin2 =0;
     cfe:	ea e3       	ldi	r30, 0x3A	; 58
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	80 83       	st	Z, r24
     d08:	7b c2       	rjmp	.+1270   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRA.Bits.Pin3 =0;
     d0a:	ea e3       	ldi	r30, 0x3A	; 58
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	87 7f       	andi	r24, 0xF7	; 247
     d12:	80 83       	st	Z, r24
     d14:	75 c2       	rjmp	.+1258   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRA.Bits.Pin4 =0;
     d16:	ea e3       	ldi	r30, 0x3A	; 58
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 7e       	andi	r24, 0xEF	; 239
     d1e:	80 83       	st	Z, r24
     d20:	6f c2       	rjmp	.+1246   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRA.Bits.Pin5 =0;
     d22:	ea e3       	ldi	r30, 0x3A	; 58
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8f 7d       	andi	r24, 0xDF	; 223
     d2a:	80 83       	st	Z, r24
     d2c:	69 c2       	rjmp	.+1234   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRA.Bits.Pin6 =0;
     d2e:	ea e3       	ldi	r30, 0x3A	; 58
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8f 7b       	andi	r24, 0xBF	; 191
     d36:	80 83       	st	Z, r24
     d38:	63 c2       	rjmp	.+1222   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRA.Bits.Pin7 =0;
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 77       	andi	r24, 0x7F	; 127
     d42:	80 83       	st	Z, r24
     d44:	5d c2       	rjmp	.+1210   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				}
			}
		break;

		case 1:
			if(Dir ==1)
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <Dio_vidSetPinDir+0x208>
     d4c:	63 c0       	rjmp	.+198    	; 0xe14 <Dio_vidSetPinDir+0x2ce>
				{
					switch(PinLoc)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	38 8b       	std	Y+16, r19	; 0x10
     d56:	2f 87       	std	Y+15, r18	; 0x0f
     d58:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5a:	98 89       	ldd	r25, Y+16	; 0x10
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	d9 f1       	breq	.+118    	; 0xdd8 <Dio_vidSetPinDir+0x292>
     d62:	2f 85       	ldd	r18, Y+15	; 0x0f
     d64:	38 89       	ldd	r19, Y+16	; 0x10
     d66:	24 30       	cpi	r18, 0x04	; 4
     d68:	31 05       	cpc	r19, r1
     d6a:	7c f4       	brge	.+30     	; 0xd8a <Dio_vidSetPinDir+0x244>
     d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6e:	98 89       	ldd	r25, Y+16	; 0x10
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	29 f1       	breq	.+74     	; 0xdc0 <Dio_vidSetPinDir+0x27a>
     d76:	2f 85       	ldd	r18, Y+15	; 0x0f
     d78:	38 89       	ldd	r19, Y+16	; 0x10
     d7a:	22 30       	cpi	r18, 0x02	; 2
     d7c:	31 05       	cpc	r19, r1
     d7e:	34 f5       	brge	.+76     	; 0xdcc <Dio_vidSetPinDir+0x286>
     d80:	8f 85       	ldd	r24, Y+15	; 0x0f
     d82:	98 89       	ldd	r25, Y+16	; 0x10
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	b1 f0       	breq	.+44     	; 0xdb4 <Dio_vidSetPinDir+0x26e>
     d88:	3b c2       	rjmp	.+1142   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     d8a:	2f 85       	ldd	r18, Y+15	; 0x0f
     d8c:	38 89       	ldd	r19, Y+16	; 0x10
     d8e:	25 30       	cpi	r18, 0x05	; 5
     d90:	31 05       	cpc	r19, r1
     d92:	71 f1       	breq	.+92     	; 0xdf0 <Dio_vidSetPinDir+0x2aa>
     d94:	8f 85       	ldd	r24, Y+15	; 0x0f
     d96:	98 89       	ldd	r25, Y+16	; 0x10
     d98:	85 30       	cpi	r24, 0x05	; 5
     d9a:	91 05       	cpc	r25, r1
     d9c:	1c f1       	brlt	.+70     	; 0xde4 <Dio_vidSetPinDir+0x29e>
     d9e:	2f 85       	ldd	r18, Y+15	; 0x0f
     da0:	38 89       	ldd	r19, Y+16	; 0x10
     da2:	26 30       	cpi	r18, 0x06	; 6
     da4:	31 05       	cpc	r19, r1
     da6:	51 f1       	breq	.+84     	; 0xdfc <Dio_vidSetPinDir+0x2b6>
     da8:	8f 85       	ldd	r24, Y+15	; 0x0f
     daa:	98 89       	ldd	r25, Y+16	; 0x10
     dac:	87 30       	cpi	r24, 0x07	; 7
     dae:	91 05       	cpc	r25, r1
     db0:	59 f1       	breq	.+86     	; 0xe08 <Dio_vidSetPinDir+0x2c2>
     db2:	26 c2       	rjmp	.+1100   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRB.Bits.Pin0 =1;
     db4:	e7 e3       	ldi	r30, 0x37	; 55
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	81 60       	ori	r24, 0x01	; 1
     dbc:	80 83       	st	Z, r24
     dbe:	20 c2       	rjmp	.+1088   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRB.Bits.Pin1 =1;
     dc0:	e7 e3       	ldi	r30, 0x37	; 55
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	80 83       	st	Z, r24
     dca:	1a c2       	rjmp	.+1076   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRB.Bits.Pin2 =1;
     dcc:	e7 e3       	ldi	r30, 0x37	; 55
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	84 60       	ori	r24, 0x04	; 4
     dd4:	80 83       	st	Z, r24
     dd6:	14 c2       	rjmp	.+1064   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRB.Bits.Pin3 =1;
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 60       	ori	r24, 0x08	; 8
     de0:	80 83       	st	Z, r24
     de2:	0e c2       	rjmp	.+1052   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRB.Bits.Pin4 =1;
     de4:	e7 e3       	ldi	r30, 0x37	; 55
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 61       	ori	r24, 0x10	; 16
     dec:	80 83       	st	Z, r24
     dee:	08 c2       	rjmp	.+1040   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRB.Bits.Pin5 =1;
     df0:	e7 e3       	ldi	r30, 0x37	; 55
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 62       	ori	r24, 0x20	; 32
     df8:	80 83       	st	Z, r24
     dfa:	02 c2       	rjmp	.+1028   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRB.Bits.Pin6 =1;
     dfc:	e7 e3       	ldi	r30, 0x37	; 55
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 64       	ori	r24, 0x40	; 64
     e04:	80 83       	st	Z, r24
     e06:	fc c1       	rjmp	.+1016   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRB.Bits.Pin7 =1;
     e08:	e7 e3       	ldi	r30, 0x37	; 55
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 68       	ori	r24, 0x80	; 128
     e10:	80 83       	st	Z, r24
     e12:	f6 c1       	rjmp	.+1004   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	3e 87       	std	Y+14, r19	; 0x0e
     e1c:	2d 87       	std	Y+13, r18	; 0x0d
     e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e20:	9e 85       	ldd	r25, Y+14	; 0x0e
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	91 05       	cpc	r25, r1
     e26:	d9 f1       	breq	.+118    	; 0xe9e <Dio_vidSetPinDir+0x358>
     e28:	2d 85       	ldd	r18, Y+13	; 0x0d
     e2a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e2c:	24 30       	cpi	r18, 0x04	; 4
     e2e:	31 05       	cpc	r19, r1
     e30:	7c f4       	brge	.+30     	; 0xe50 <Dio_vidSetPinDir+0x30a>
     e32:	8d 85       	ldd	r24, Y+13	; 0x0d
     e34:	9e 85       	ldd	r25, Y+14	; 0x0e
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	91 05       	cpc	r25, r1
     e3a:	29 f1       	breq	.+74     	; 0xe86 <Dio_vidSetPinDir+0x340>
     e3c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e3e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	34 f5       	brge	.+76     	; 0xe92 <Dio_vidSetPinDir+0x34c>
     e46:	8d 85       	ldd	r24, Y+13	; 0x0d
     e48:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	b1 f0       	breq	.+44     	; 0xe7a <Dio_vidSetPinDir+0x334>
     e4e:	d8 c1       	rjmp	.+944    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     e50:	2d 85       	ldd	r18, Y+13	; 0x0d
     e52:	3e 85       	ldd	r19, Y+14	; 0x0e
     e54:	25 30       	cpi	r18, 0x05	; 5
     e56:	31 05       	cpc	r19, r1
     e58:	71 f1       	breq	.+92     	; 0xeb6 <Dio_vidSetPinDir+0x370>
     e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5e:	85 30       	cpi	r24, 0x05	; 5
     e60:	91 05       	cpc	r25, r1
     e62:	1c f1       	brlt	.+70     	; 0xeaa <Dio_vidSetPinDir+0x364>
     e64:	2d 85       	ldd	r18, Y+13	; 0x0d
     e66:	3e 85       	ldd	r19, Y+14	; 0x0e
     e68:	26 30       	cpi	r18, 0x06	; 6
     e6a:	31 05       	cpc	r19, r1
     e6c:	51 f1       	breq	.+84     	; 0xec2 <Dio_vidSetPinDir+0x37c>
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	87 30       	cpi	r24, 0x07	; 7
     e74:	91 05       	cpc	r25, r1
     e76:	59 f1       	breq	.+86     	; 0xece <Dio_vidSetPinDir+0x388>
     e78:	c3 c1       	rjmp	.+902    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRB.Bits.Pin0 =0;
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8e 7f       	andi	r24, 0xFE	; 254
     e82:	80 83       	st	Z, r24
     e84:	bd c1       	rjmp	.+890    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRB.Bits.Pin1 =0;
     e86:	e7 e3       	ldi	r30, 0x37	; 55
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8d 7f       	andi	r24, 0xFD	; 253
     e8e:	80 83       	st	Z, r24
     e90:	b7 c1       	rjmp	.+878    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRB.Bits.Pin2 =0;
     e92:	e7 e3       	ldi	r30, 0x37	; 55
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8b 7f       	andi	r24, 0xFB	; 251
     e9a:	80 83       	st	Z, r24
     e9c:	b1 c1       	rjmp	.+866    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRB.Bits.Pin3 =0;
     e9e:	e7 e3       	ldi	r30, 0x37	; 55
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	87 7f       	andi	r24, 0xF7	; 247
     ea6:	80 83       	st	Z, r24
     ea8:	ab c1       	rjmp	.+854    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRB.Bits.Pin4 =0;
     eaa:	e7 e3       	ldi	r30, 0x37	; 55
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	80 83       	st	Z, r24
     eb4:	a5 c1       	rjmp	.+842    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRB.Bits.Pin5 =0;
     eb6:	e7 e3       	ldi	r30, 0x37	; 55
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8f 7d       	andi	r24, 0xDF	; 223
     ebe:	80 83       	st	Z, r24
     ec0:	9f c1       	rjmp	.+830    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRB.Bits.Pin6 =0;
     ec2:	e7 e3       	ldi	r30, 0x37	; 55
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8f 7b       	andi	r24, 0xBF	; 191
     eca:	80 83       	st	Z, r24
     ecc:	99 c1       	rjmp	.+818    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRB.Bits.Pin7 =0;
     ece:	e7 e3       	ldi	r30, 0x37	; 55
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 77       	andi	r24, 0x7F	; 127
     ed6:	80 83       	st	Z, r24
     ed8:	93 c1       	rjmp	.+806    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				}
			}
			break;

		case 2:
			if(Dir ==1)
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	09 f0       	breq	.+2      	; 0xee2 <Dio_vidSetPinDir+0x39c>
     ee0:	63 c0       	rjmp	.+198    	; 0xfa8 <Dio_vidSetPinDir+0x462>
				{
					switch(PinLoc)
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	3c 87       	std	Y+12, r19	; 0x0c
     eea:	2b 87       	std	Y+11, r18	; 0x0b
     eec:	8b 85       	ldd	r24, Y+11	; 0x0b
     eee:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef0:	83 30       	cpi	r24, 0x03	; 3
     ef2:	91 05       	cpc	r25, r1
     ef4:	d9 f1       	breq	.+118    	; 0xf6c <Dio_vidSetPinDir+0x426>
     ef6:	2b 85       	ldd	r18, Y+11	; 0x0b
     ef8:	3c 85       	ldd	r19, Y+12	; 0x0c
     efa:	24 30       	cpi	r18, 0x04	; 4
     efc:	31 05       	cpc	r19, r1
     efe:	7c f4       	brge	.+30     	; 0xf1e <Dio_vidSetPinDir+0x3d8>
     f00:	8b 85       	ldd	r24, Y+11	; 0x0b
     f02:	9c 85       	ldd	r25, Y+12	; 0x0c
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	29 f1       	breq	.+74     	; 0xf54 <Dio_vidSetPinDir+0x40e>
     f0a:	2b 85       	ldd	r18, Y+11	; 0x0b
     f0c:	3c 85       	ldd	r19, Y+12	; 0x0c
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	34 f5       	brge	.+76     	; 0xf60 <Dio_vidSetPinDir+0x41a>
     f14:	8b 85       	ldd	r24, Y+11	; 0x0b
     f16:	9c 85       	ldd	r25, Y+12	; 0x0c
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	b1 f0       	breq	.+44     	; 0xf48 <Dio_vidSetPinDir+0x402>
     f1c:	71 c1       	rjmp	.+738    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     f1e:	2b 85       	ldd	r18, Y+11	; 0x0b
     f20:	3c 85       	ldd	r19, Y+12	; 0x0c
     f22:	25 30       	cpi	r18, 0x05	; 5
     f24:	31 05       	cpc	r19, r1
     f26:	71 f1       	breq	.+92     	; 0xf84 <Dio_vidSetPinDir+0x43e>
     f28:	8b 85       	ldd	r24, Y+11	; 0x0b
     f2a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f2c:	85 30       	cpi	r24, 0x05	; 5
     f2e:	91 05       	cpc	r25, r1
     f30:	1c f1       	brlt	.+70     	; 0xf78 <Dio_vidSetPinDir+0x432>
     f32:	2b 85       	ldd	r18, Y+11	; 0x0b
     f34:	3c 85       	ldd	r19, Y+12	; 0x0c
     f36:	26 30       	cpi	r18, 0x06	; 6
     f38:	31 05       	cpc	r19, r1
     f3a:	51 f1       	breq	.+84     	; 0xf90 <Dio_vidSetPinDir+0x44a>
     f3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f40:	87 30       	cpi	r24, 0x07	; 7
     f42:	91 05       	cpc	r25, r1
     f44:	59 f1       	breq	.+86     	; 0xf9c <Dio_vidSetPinDir+0x456>
     f46:	5c c1       	rjmp	.+696    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRC.Bits.Pin0 =1;
     f48:	e4 e3       	ldi	r30, 0x34	; 52
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
     f52:	56 c1       	rjmp	.+684    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRC.Bits.Pin1 =1;
     f54:	e4 e3       	ldi	r30, 0x34	; 52
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	80 83       	st	Z, r24
     f5e:	50 c1       	rjmp	.+672    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRC.Bits.Pin2 =1;
     f60:	e4 e3       	ldi	r30, 0x34	; 52
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	84 60       	ori	r24, 0x04	; 4
     f68:	80 83       	st	Z, r24
     f6a:	4a c1       	rjmp	.+660    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRC.Bits.Pin3 =1;
     f6c:	e4 e3       	ldi	r30, 0x34	; 52
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	88 60       	ori	r24, 0x08	; 8
     f74:	80 83       	st	Z, r24
     f76:	44 c1       	rjmp	.+648    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRC.Bits.Pin4 =1;
     f78:	e4 e3       	ldi	r30, 0x34	; 52
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 61       	ori	r24, 0x10	; 16
     f80:	80 83       	st	Z, r24
     f82:	3e c1       	rjmp	.+636    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRC.Bits.Pin5 =1;
     f84:	e4 e3       	ldi	r30, 0x34	; 52
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 62       	ori	r24, 0x20	; 32
     f8c:	80 83       	st	Z, r24
     f8e:	38 c1       	rjmp	.+624    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRC.Bits.Pin6 =1;
     f90:	e4 e3       	ldi	r30, 0x34	; 52
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 64       	ori	r24, 0x40	; 64
     f98:	80 83       	st	Z, r24
     f9a:	32 c1       	rjmp	.+612    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRC.Bits.Pin7 =1;
     f9c:	e4 e3       	ldi	r30, 0x34	; 52
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 68       	ori	r24, 0x80	; 128
     fa4:	80 83       	st	Z, r24
     fa6:	2c c1       	rjmp	.+600    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3a 87       	std	Y+10, r19	; 0x0a
     fb0:	29 87       	std	Y+9, r18	; 0x09
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	91 05       	cpc	r25, r1
     fba:	d9 f1       	breq	.+118    	; 0x1032 <Dio_vidSetPinDir+0x4ec>
     fbc:	29 85       	ldd	r18, Y+9	; 0x09
     fbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc0:	24 30       	cpi	r18, 0x04	; 4
     fc2:	31 05       	cpc	r19, r1
     fc4:	7c f4       	brge	.+30     	; 0xfe4 <Dio_vidSetPinDir+0x49e>
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	91 05       	cpc	r25, r1
     fce:	29 f1       	breq	.+74     	; 0x101a <Dio_vidSetPinDir+0x4d4>
     fd0:	29 85       	ldd	r18, Y+9	; 0x09
     fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	34 f5       	brge	.+76     	; 0x1026 <Dio_vidSetPinDir+0x4e0>
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	b1 f0       	breq	.+44     	; 0x100e <Dio_vidSetPinDir+0x4c8>
     fe2:	0e c1       	rjmp	.+540    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     fe4:	29 85       	ldd	r18, Y+9	; 0x09
     fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe8:	25 30       	cpi	r18, 0x05	; 5
     fea:	31 05       	cpc	r19, r1
     fec:	71 f1       	breq	.+92     	; 0x104a <Dio_vidSetPinDir+0x504>
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff2:	85 30       	cpi	r24, 0x05	; 5
     ff4:	91 05       	cpc	r25, r1
     ff6:	1c f1       	brlt	.+70     	; 0x103e <Dio_vidSetPinDir+0x4f8>
     ff8:	29 85       	ldd	r18, Y+9	; 0x09
     ffa:	3a 85       	ldd	r19, Y+10	; 0x0a
     ffc:	26 30       	cpi	r18, 0x06	; 6
     ffe:	31 05       	cpc	r19, r1
    1000:	51 f1       	breq	.+84     	; 0x1056 <Dio_vidSetPinDir+0x510>
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	87 30       	cpi	r24, 0x07	; 7
    1008:	91 05       	cpc	r25, r1
    100a:	59 f1       	breq	.+86     	; 0x1062 <Dio_vidSetPinDir+0x51c>
    100c:	f9 c0       	rjmp	.+498    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRC.Bits.Pin0 =0;
    100e:	e4 e3       	ldi	r30, 0x34	; 52
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	80 83       	st	Z, r24
    1018:	f3 c0       	rjmp	.+486    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRC.Bits.Pin1 =0;
    101a:	e4 e3       	ldi	r30, 0x34	; 52
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8d 7f       	andi	r24, 0xFD	; 253
    1022:	80 83       	st	Z, r24
    1024:	ed c0       	rjmp	.+474    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRC.Bits.Pin2 =0;
    1026:	e4 e3       	ldi	r30, 0x34	; 52
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8b 7f       	andi	r24, 0xFB	; 251
    102e:	80 83       	st	Z, r24
    1030:	e7 c0       	rjmp	.+462    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRC.Bits.Pin3 =0;
    1032:	e4 e3       	ldi	r30, 0x34	; 52
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	87 7f       	andi	r24, 0xF7	; 247
    103a:	80 83       	st	Z, r24
    103c:	e1 c0       	rjmp	.+450    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRC.Bits.Pin4 =0;
    103e:	e4 e3       	ldi	r30, 0x34	; 52
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8f 7e       	andi	r24, 0xEF	; 239
    1046:	80 83       	st	Z, r24
    1048:	db c0       	rjmp	.+438    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRC.Bits.Pin5 =0;
    104a:	e4 e3       	ldi	r30, 0x34	; 52
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 7d       	andi	r24, 0xDF	; 223
    1052:	80 83       	st	Z, r24
    1054:	d5 c0       	rjmp	.+426    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRC.Bits.Pin6 =0;
    1056:	e4 e3       	ldi	r30, 0x34	; 52
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8f 7b       	andi	r24, 0xBF	; 191
    105e:	80 83       	st	Z, r24
    1060:	cf c0       	rjmp	.+414    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRC.Bits.Pin7 =0;
    1062:	e4 e3       	ldi	r30, 0x34	; 52
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8f 77       	andi	r24, 0x7F	; 127
    106a:	80 83       	st	Z, r24
    106c:	c9 c0       	rjmp	.+402    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
			}
		break;


		case 3:
			if(Dir ==1)
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	09 f0       	breq	.+2      	; 0x1076 <Dio_vidSetPinDir+0x530>
    1074:	63 c0       	rjmp	.+198    	; 0x113c <Dio_vidSetPinDir+0x5f6>
				{
					switch(PinLoc)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	38 87       	std	Y+8, r19	; 0x08
    107e:	2f 83       	std	Y+7, r18	; 0x07
    1080:	8f 81       	ldd	r24, Y+7	; 0x07
    1082:	98 85       	ldd	r25, Y+8	; 0x08
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	91 05       	cpc	r25, r1
    1088:	d9 f1       	breq	.+118    	; 0x1100 <Dio_vidSetPinDir+0x5ba>
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	38 85       	ldd	r19, Y+8	; 0x08
    108e:	24 30       	cpi	r18, 0x04	; 4
    1090:	31 05       	cpc	r19, r1
    1092:	7c f4       	brge	.+30     	; 0x10b2 <Dio_vidSetPinDir+0x56c>
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	98 85       	ldd	r25, Y+8	; 0x08
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	91 05       	cpc	r25, r1
    109c:	29 f1       	breq	.+74     	; 0x10e8 <Dio_vidSetPinDir+0x5a2>
    109e:	2f 81       	ldd	r18, Y+7	; 0x07
    10a0:	38 85       	ldd	r19, Y+8	; 0x08
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	34 f5       	brge	.+76     	; 0x10f4 <Dio_vidSetPinDir+0x5ae>
    10a8:	8f 81       	ldd	r24, Y+7	; 0x07
    10aa:	98 85       	ldd	r25, Y+8	; 0x08
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	b1 f0       	breq	.+44     	; 0x10dc <Dio_vidSetPinDir+0x596>
    10b0:	a7 c0       	rjmp	.+334    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
    10b2:	2f 81       	ldd	r18, Y+7	; 0x07
    10b4:	38 85       	ldd	r19, Y+8	; 0x08
    10b6:	25 30       	cpi	r18, 0x05	; 5
    10b8:	31 05       	cpc	r19, r1
    10ba:	71 f1       	breq	.+92     	; 0x1118 <Dio_vidSetPinDir+0x5d2>
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	98 85       	ldd	r25, Y+8	; 0x08
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	91 05       	cpc	r25, r1
    10c4:	1c f1       	brlt	.+70     	; 0x110c <Dio_vidSetPinDir+0x5c6>
    10c6:	2f 81       	ldd	r18, Y+7	; 0x07
    10c8:	38 85       	ldd	r19, Y+8	; 0x08
    10ca:	26 30       	cpi	r18, 0x06	; 6
    10cc:	31 05       	cpc	r19, r1
    10ce:	51 f1       	breq	.+84     	; 0x1124 <Dio_vidSetPinDir+0x5de>
    10d0:	8f 81       	ldd	r24, Y+7	; 0x07
    10d2:	98 85       	ldd	r25, Y+8	; 0x08
    10d4:	87 30       	cpi	r24, 0x07	; 7
    10d6:	91 05       	cpc	r25, r1
    10d8:	59 f1       	breq	.+86     	; 0x1130 <Dio_vidSetPinDir+0x5ea>
    10da:	92 c0       	rjmp	.+292    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRD.Bits.Pin0 =1;
    10dc:	e1 e3       	ldi	r30, 0x31	; 49
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	80 83       	st	Z, r24
    10e6:	8c c0       	rjmp	.+280    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRD.Bits.Pin1 =1;
    10e8:	e1 e3       	ldi	r30, 0x31	; 49
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	82 60       	ori	r24, 0x02	; 2
    10f0:	80 83       	st	Z, r24
    10f2:	86 c0       	rjmp	.+268    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRD.Bits.Pin2 =1;
    10f4:	e1 e3       	ldi	r30, 0x31	; 49
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	84 60       	ori	r24, 0x04	; 4
    10fc:	80 83       	st	Z, r24
    10fe:	80 c0       	rjmp	.+256    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRD.Bits.Pin3 =1;
    1100:	e1 e3       	ldi	r30, 0x31	; 49
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	80 83       	st	Z, r24
    110a:	7a c0       	rjmp	.+244    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRD.Bits.Pin4 =1;
    110c:	e1 e3       	ldi	r30, 0x31	; 49
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	80 83       	st	Z, r24
    1116:	74 c0       	rjmp	.+232    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRD.Bits.Pin5 =1;
    1118:	e1 e3       	ldi	r30, 0x31	; 49
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	80 83       	st	Z, r24
    1122:	6e c0       	rjmp	.+220    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRD.Bits.Pin6 =1;
    1124:	e1 e3       	ldi	r30, 0x31	; 49
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 64       	ori	r24, 0x40	; 64
    112c:	80 83       	st	Z, r24
    112e:	68 c0       	rjmp	.+208    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRD.Bits.Pin7 =1;
    1130:	e1 e3       	ldi	r30, 0x31	; 49
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 68       	ori	r24, 0x80	; 128
    1138:	80 83       	st	Z, r24
    113a:	62 c0       	rjmp	.+196    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3e 83       	std	Y+6, r19	; 0x06
    1144:	2d 83       	std	Y+5, r18	; 0x05
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	d9 f1       	breq	.+118    	; 0x11c6 <Dio_vidSetPinDir+0x680>
    1150:	2d 81       	ldd	r18, Y+5	; 0x05
    1152:	3e 81       	ldd	r19, Y+6	; 0x06
    1154:	24 30       	cpi	r18, 0x04	; 4
    1156:	31 05       	cpc	r19, r1
    1158:	7c f4       	brge	.+30     	; 0x1178 <Dio_vidSetPinDir+0x632>
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	29 f1       	breq	.+74     	; 0x11ae <Dio_vidSetPinDir+0x668>
    1164:	2d 81       	ldd	r18, Y+5	; 0x05
    1166:	3e 81       	ldd	r19, Y+6	; 0x06
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	34 f5       	brge	.+76     	; 0x11ba <Dio_vidSetPinDir+0x674>
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	b1 f0       	breq	.+44     	; 0x11a2 <Dio_vidSetPinDir+0x65c>
    1176:	44 c0       	rjmp	.+136    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
    1178:	2d 81       	ldd	r18, Y+5	; 0x05
    117a:	3e 81       	ldd	r19, Y+6	; 0x06
    117c:	25 30       	cpi	r18, 0x05	; 5
    117e:	31 05       	cpc	r19, r1
    1180:	71 f1       	breq	.+92     	; 0x11de <Dio_vidSetPinDir+0x698>
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	85 30       	cpi	r24, 0x05	; 5
    1188:	91 05       	cpc	r25, r1
    118a:	1c f1       	brlt	.+70     	; 0x11d2 <Dio_vidSetPinDir+0x68c>
    118c:	2d 81       	ldd	r18, Y+5	; 0x05
    118e:	3e 81       	ldd	r19, Y+6	; 0x06
    1190:	26 30       	cpi	r18, 0x06	; 6
    1192:	31 05       	cpc	r19, r1
    1194:	51 f1       	breq	.+84     	; 0x11ea <Dio_vidSetPinDir+0x6a4>
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	87 30       	cpi	r24, 0x07	; 7
    119c:	91 05       	cpc	r25, r1
    119e:	59 f1       	breq	.+86     	; 0x11f6 <Dio_vidSetPinDir+0x6b0>
    11a0:	2f c0       	rjmp	.+94     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRD.Bits.Pin0 =0;
    11a2:	e1 e3       	ldi	r30, 0x31	; 49
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8e 7f       	andi	r24, 0xFE	; 254
    11aa:	80 83       	st	Z, r24
    11ac:	29 c0       	rjmp	.+82     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRD.Bits.Pin1 =0;
    11ae:	e1 e3       	ldi	r30, 0x31	; 49
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8d 7f       	andi	r24, 0xFD	; 253
    11b6:	80 83       	st	Z, r24
    11b8:	23 c0       	rjmp	.+70     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRD.Bits.Pin2 =0;
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8b 7f       	andi	r24, 0xFB	; 251
    11c2:	80 83       	st	Z, r24
    11c4:	1d c0       	rjmp	.+58     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRD.Bits.Pin3 =0;
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	87 7f       	andi	r24, 0xF7	; 247
    11ce:	80 83       	st	Z, r24
    11d0:	17 c0       	rjmp	.+46     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRD.Bits.Pin4 =0;
    11d2:	e1 e3       	ldi	r30, 0x31	; 49
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7e       	andi	r24, 0xEF	; 239
    11da:	80 83       	st	Z, r24
    11dc:	11 c0       	rjmp	.+34     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRD.Bits.Pin5 =0;
    11de:	e1 e3       	ldi	r30, 0x31	; 49
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8f 7d       	andi	r24, 0xDF	; 223
    11e6:	80 83       	st	Z, r24
    11e8:	0b c0       	rjmp	.+22     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRD.Bits.Pin6 =0;
    11ea:	e1 e3       	ldi	r30, 0x31	; 49
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	80 83       	st	Z, r24
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRD.Bits.Pin7 =0;
    11f6:	e1 e3       	ldi	r30, 0x31	; 49
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 77       	andi	r24, 0x7F	; 127
    11fe:	80 83       	st	Z, r24
					break;
				}
			}
		break;
	}
}
    1200:	66 96       	adiw	r28, 0x16	; 22
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin , u8 Val)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	66 97       	sbiw	r28, 0x16	; 22
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	8b 83       	std	Y+3, r24	; 0x03
    1228:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	86 95       	lsr	r24
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	87 70       	andi	r24, 0x07	; 7
    1238:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3e 8b       	std	Y+22, r19	; 0x16
    1242:	2d 8b       	std	Y+21, r18	; 0x15
    1244:	8d 89       	ldd	r24, Y+21	; 0x15
    1246:	9e 89       	ldd	r25, Y+22	; 0x16
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	09 f4       	brne	.+2      	; 0x1250 <Dio_vidSetPinVal+0x3e>
    124e:	e1 c0       	rjmp	.+450    	; 0x1412 <Dio_vidSetPinVal+0x200>
    1250:	2d 89       	ldd	r18, Y+21	; 0x15
    1252:	3e 89       	ldd	r19, Y+22	; 0x16
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <Dio_vidSetPinVal+0x52>
    125a:	8d 89       	ldd	r24, Y+21	; 0x15
    125c:	9e 89       	ldd	r25, Y+22	; 0x16
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	71 f0       	breq	.+28     	; 0x127e <Dio_vidSetPinVal+0x6c>
    1262:	34 c3       	rjmp	.+1640   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    1264:	2d 89       	ldd	r18, Y+21	; 0x15
    1266:	3e 89       	ldd	r19, Y+22	; 0x16
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <Dio_vidSetPinVal+0x5e>
    126e:	9b c1       	rjmp	.+822    	; 0x15a6 <Dio_vidSetPinVal+0x394>
    1270:	8d 89       	ldd	r24, Y+21	; 0x15
    1272:	9e 89       	ldd	r25, Y+22	; 0x16
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	91 05       	cpc	r25, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <Dio_vidSetPinVal+0x6a>
    127a:	5f c2       	rjmp	.+1214   	; 0x173a <Dio_vidSetPinVal+0x528>
    127c:	27 c3       	rjmp	.+1614   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
		case 0:
			if(Val ==1)
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	09 f0       	breq	.+2      	; 0x1286 <Dio_vidSetPinVal+0x74>
    1284:	63 c0       	rjmp	.+198    	; 0x134c <Dio_vidSetPinVal+0x13a>
				{
					switch(PinLoc)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3c 8b       	std	Y+20, r19	; 0x14
    128e:	2b 8b       	std	Y+19, r18	; 0x13
    1290:	8b 89       	ldd	r24, Y+19	; 0x13
    1292:	9c 89       	ldd	r25, Y+20	; 0x14
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	d9 f1       	breq	.+118    	; 0x1310 <Dio_vidSetPinVal+0xfe>
    129a:	2b 89       	ldd	r18, Y+19	; 0x13
    129c:	3c 89       	ldd	r19, Y+20	; 0x14
    129e:	24 30       	cpi	r18, 0x04	; 4
    12a0:	31 05       	cpc	r19, r1
    12a2:	7c f4       	brge	.+30     	; 0x12c2 <Dio_vidSetPinVal+0xb0>
    12a4:	8b 89       	ldd	r24, Y+19	; 0x13
    12a6:	9c 89       	ldd	r25, Y+20	; 0x14
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	29 f1       	breq	.+74     	; 0x12f8 <Dio_vidSetPinVal+0xe6>
    12ae:	2b 89       	ldd	r18, Y+19	; 0x13
    12b0:	3c 89       	ldd	r19, Y+20	; 0x14
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	34 f5       	brge	.+76     	; 0x1304 <Dio_vidSetPinVal+0xf2>
    12b8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ba:	9c 89       	ldd	r25, Y+20	; 0x14
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	b1 f0       	breq	.+44     	; 0x12ec <Dio_vidSetPinVal+0xda>
    12c0:	05 c3       	rjmp	.+1546   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    12c2:	2b 89       	ldd	r18, Y+19	; 0x13
    12c4:	3c 89       	ldd	r19, Y+20	; 0x14
    12c6:	25 30       	cpi	r18, 0x05	; 5
    12c8:	31 05       	cpc	r19, r1
    12ca:	71 f1       	breq	.+92     	; 0x1328 <Dio_vidSetPinVal+0x116>
    12cc:	8b 89       	ldd	r24, Y+19	; 0x13
    12ce:	9c 89       	ldd	r25, Y+20	; 0x14
    12d0:	85 30       	cpi	r24, 0x05	; 5
    12d2:	91 05       	cpc	r25, r1
    12d4:	1c f1       	brlt	.+70     	; 0x131c <Dio_vidSetPinVal+0x10a>
    12d6:	2b 89       	ldd	r18, Y+19	; 0x13
    12d8:	3c 89       	ldd	r19, Y+20	; 0x14
    12da:	26 30       	cpi	r18, 0x06	; 6
    12dc:	31 05       	cpc	r19, r1
    12de:	51 f1       	breq	.+84     	; 0x1334 <Dio_vidSetPinVal+0x122>
    12e0:	8b 89       	ldd	r24, Y+19	; 0x13
    12e2:	9c 89       	ldd	r25, Y+20	; 0x14
    12e4:	87 30       	cpi	r24, 0x07	; 7
    12e6:	91 05       	cpc	r25, r1
    12e8:	59 f1       	breq	.+86     	; 0x1340 <Dio_vidSetPinVal+0x12e>
    12ea:	f0 c2       	rjmp	.+1504   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTA.Bits.Pin0 =1;
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	80 83       	st	Z, r24
    12f6:	ea c2       	rjmp	.+1492   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTA.Bits.Pin1 =1;
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	82 60       	ori	r24, 0x02	; 2
    1300:	80 83       	st	Z, r24
    1302:	e4 c2       	rjmp	.+1480   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTA.Bits.Pin2 =1;
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	84 60       	ori	r24, 0x04	; 4
    130c:	80 83       	st	Z, r24
    130e:	de c2       	rjmp	.+1468   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTA.Bits.Pin3 =1;
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	80 83       	st	Z, r24
    131a:	d8 c2       	rjmp	.+1456   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTA.Bits.Pin4 =1;
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 61       	ori	r24, 0x10	; 16
    1324:	80 83       	st	Z, r24
    1326:	d2 c2       	rjmp	.+1444   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTA.Bits.Pin5 =1;
    1328:	eb e3       	ldi	r30, 0x3B	; 59
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 62       	ori	r24, 0x20	; 32
    1330:	80 83       	st	Z, r24
    1332:	cc c2       	rjmp	.+1432   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTA.Bits.Pin6 =1;
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	80 64       	ori	r24, 0x40	; 64
    133c:	80 83       	st	Z, r24
    133e:	c6 c2       	rjmp	.+1420   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTA.Bits.Pin7 =1;
    1340:	eb e3       	ldi	r30, 0x3B	; 59
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	80 83       	st	Z, r24
    134a:	c0 c2       	rjmp	.+1408   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3a 8b       	std	Y+18, r19	; 0x12
    1354:	29 8b       	std	Y+17, r18	; 0x11
    1356:	89 89       	ldd	r24, Y+17	; 0x11
    1358:	9a 89       	ldd	r25, Y+18	; 0x12
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	d9 f1       	breq	.+118    	; 0x13d6 <Dio_vidSetPinVal+0x1c4>
    1360:	29 89       	ldd	r18, Y+17	; 0x11
    1362:	3a 89       	ldd	r19, Y+18	; 0x12
    1364:	24 30       	cpi	r18, 0x04	; 4
    1366:	31 05       	cpc	r19, r1
    1368:	7c f4       	brge	.+30     	; 0x1388 <Dio_vidSetPinVal+0x176>
    136a:	89 89       	ldd	r24, Y+17	; 0x11
    136c:	9a 89       	ldd	r25, Y+18	; 0x12
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	29 f1       	breq	.+74     	; 0x13be <Dio_vidSetPinVal+0x1ac>
    1374:	29 89       	ldd	r18, Y+17	; 0x11
    1376:	3a 89       	ldd	r19, Y+18	; 0x12
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	34 f5       	brge	.+76     	; 0x13ca <Dio_vidSetPinVal+0x1b8>
    137e:	89 89       	ldd	r24, Y+17	; 0x11
    1380:	9a 89       	ldd	r25, Y+18	; 0x12
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	b1 f0       	breq	.+44     	; 0x13b2 <Dio_vidSetPinVal+0x1a0>
    1386:	a2 c2       	rjmp	.+1348   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    1388:	29 89       	ldd	r18, Y+17	; 0x11
    138a:	3a 89       	ldd	r19, Y+18	; 0x12
    138c:	25 30       	cpi	r18, 0x05	; 5
    138e:	31 05       	cpc	r19, r1
    1390:	71 f1       	breq	.+92     	; 0x13ee <Dio_vidSetPinVal+0x1dc>
    1392:	89 89       	ldd	r24, Y+17	; 0x11
    1394:	9a 89       	ldd	r25, Y+18	; 0x12
    1396:	85 30       	cpi	r24, 0x05	; 5
    1398:	91 05       	cpc	r25, r1
    139a:	1c f1       	brlt	.+70     	; 0x13e2 <Dio_vidSetPinVal+0x1d0>
    139c:	29 89       	ldd	r18, Y+17	; 0x11
    139e:	3a 89       	ldd	r19, Y+18	; 0x12
    13a0:	26 30       	cpi	r18, 0x06	; 6
    13a2:	31 05       	cpc	r19, r1
    13a4:	51 f1       	breq	.+84     	; 0x13fa <Dio_vidSetPinVal+0x1e8>
    13a6:	89 89       	ldd	r24, Y+17	; 0x11
    13a8:	9a 89       	ldd	r25, Y+18	; 0x12
    13aa:	87 30       	cpi	r24, 0x07	; 7
    13ac:	91 05       	cpc	r25, r1
    13ae:	59 f1       	breq	.+86     	; 0x1406 <Dio_vidSetPinVal+0x1f4>
    13b0:	8d c2       	rjmp	.+1306   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTA.Bits.Pin0 =0;
    13b2:	eb e3       	ldi	r30, 0x3B	; 59
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8e 7f       	andi	r24, 0xFE	; 254
    13ba:	80 83       	st	Z, r24
    13bc:	87 c2       	rjmp	.+1294   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTA.Bits.Pin1 =0;
    13be:	eb e3       	ldi	r30, 0x3B	; 59
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8d 7f       	andi	r24, 0xFD	; 253
    13c6:	80 83       	st	Z, r24
    13c8:	81 c2       	rjmp	.+1282   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTA.Bits.Pin2 =0;
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8b 7f       	andi	r24, 0xFB	; 251
    13d2:	80 83       	st	Z, r24
    13d4:	7b c2       	rjmp	.+1270   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTA.Bits.Pin3 =0;
    13d6:	eb e3       	ldi	r30, 0x3B	; 59
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	87 7f       	andi	r24, 0xF7	; 247
    13de:	80 83       	st	Z, r24
    13e0:	75 c2       	rjmp	.+1258   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTA.Bits.Pin4 =0;
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8f 7e       	andi	r24, 0xEF	; 239
    13ea:	80 83       	st	Z, r24
    13ec:	6f c2       	rjmp	.+1246   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTA.Bits.Pin5 =0;
    13ee:	eb e3       	ldi	r30, 0x3B	; 59
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 7d       	andi	r24, 0xDF	; 223
    13f6:	80 83       	st	Z, r24
    13f8:	69 c2       	rjmp	.+1234   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTA.Bits.Pin6 =0;
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 7b       	andi	r24, 0xBF	; 191
    1402:	80 83       	st	Z, r24
    1404:	63 c2       	rjmp	.+1222   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTA.Bits.Pin7 =0;
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8f 77       	andi	r24, 0x7F	; 127
    140e:	80 83       	st	Z, r24
    1410:	5d c2       	rjmp	.+1210   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				}
			}
		break;

		case 1:
			if(Val ==1)
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	09 f0       	breq	.+2      	; 0x141a <Dio_vidSetPinVal+0x208>
    1418:	63 c0       	rjmp	.+198    	; 0x14e0 <Dio_vidSetPinVal+0x2ce>
				{
					switch(PinLoc)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	38 8b       	std	Y+16, r19	; 0x10
    1422:	2f 87       	std	Y+15, r18	; 0x0f
    1424:	8f 85       	ldd	r24, Y+15	; 0x0f
    1426:	98 89       	ldd	r25, Y+16	; 0x10
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	d9 f1       	breq	.+118    	; 0x14a4 <Dio_vidSetPinVal+0x292>
    142e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1430:	38 89       	ldd	r19, Y+16	; 0x10
    1432:	24 30       	cpi	r18, 0x04	; 4
    1434:	31 05       	cpc	r19, r1
    1436:	7c f4       	brge	.+30     	; 0x1456 <Dio_vidSetPinVal+0x244>
    1438:	8f 85       	ldd	r24, Y+15	; 0x0f
    143a:	98 89       	ldd	r25, Y+16	; 0x10
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	29 f1       	breq	.+74     	; 0x148c <Dio_vidSetPinVal+0x27a>
    1442:	2f 85       	ldd	r18, Y+15	; 0x0f
    1444:	38 89       	ldd	r19, Y+16	; 0x10
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	34 f5       	brge	.+76     	; 0x1498 <Dio_vidSetPinVal+0x286>
    144c:	8f 85       	ldd	r24, Y+15	; 0x0f
    144e:	98 89       	ldd	r25, Y+16	; 0x10
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	b1 f0       	breq	.+44     	; 0x1480 <Dio_vidSetPinVal+0x26e>
    1454:	3b c2       	rjmp	.+1142   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    1456:	2f 85       	ldd	r18, Y+15	; 0x0f
    1458:	38 89       	ldd	r19, Y+16	; 0x10
    145a:	25 30       	cpi	r18, 0x05	; 5
    145c:	31 05       	cpc	r19, r1
    145e:	71 f1       	breq	.+92     	; 0x14bc <Dio_vidSetPinVal+0x2aa>
    1460:	8f 85       	ldd	r24, Y+15	; 0x0f
    1462:	98 89       	ldd	r25, Y+16	; 0x10
    1464:	85 30       	cpi	r24, 0x05	; 5
    1466:	91 05       	cpc	r25, r1
    1468:	1c f1       	brlt	.+70     	; 0x14b0 <Dio_vidSetPinVal+0x29e>
    146a:	2f 85       	ldd	r18, Y+15	; 0x0f
    146c:	38 89       	ldd	r19, Y+16	; 0x10
    146e:	26 30       	cpi	r18, 0x06	; 6
    1470:	31 05       	cpc	r19, r1
    1472:	51 f1       	breq	.+84     	; 0x14c8 <Dio_vidSetPinVal+0x2b6>
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	98 89       	ldd	r25, Y+16	; 0x10
    1478:	87 30       	cpi	r24, 0x07	; 7
    147a:	91 05       	cpc	r25, r1
    147c:	59 f1       	breq	.+86     	; 0x14d4 <Dio_vidSetPinVal+0x2c2>
    147e:	26 c2       	rjmp	.+1100   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTB.Bits.Pin0 =1;
    1480:	e8 e3       	ldi	r30, 0x38	; 56
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	81 60       	ori	r24, 0x01	; 1
    1488:	80 83       	st	Z, r24
    148a:	20 c2       	rjmp	.+1088   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTB.Bits.Pin1 =1;
    148c:	e8 e3       	ldi	r30, 0x38	; 56
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	82 60       	ori	r24, 0x02	; 2
    1494:	80 83       	st	Z, r24
    1496:	1a c2       	rjmp	.+1076   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTB.Bits.Pin2 =1;
    1498:	e8 e3       	ldi	r30, 0x38	; 56
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	84 60       	ori	r24, 0x04	; 4
    14a0:	80 83       	st	Z, r24
    14a2:	14 c2       	rjmp	.+1064   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTB.Bits.Pin3 =1;
    14a4:	e8 e3       	ldi	r30, 0x38	; 56
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	88 60       	ori	r24, 0x08	; 8
    14ac:	80 83       	st	Z, r24
    14ae:	0e c2       	rjmp	.+1052   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTB.Bits.Pin4 =1;
    14b0:	e8 e3       	ldi	r30, 0x38	; 56
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 61       	ori	r24, 0x10	; 16
    14b8:	80 83       	st	Z, r24
    14ba:	08 c2       	rjmp	.+1040   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTB.Bits.Pin5 =1;
    14bc:	e8 e3       	ldi	r30, 0x38	; 56
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 62       	ori	r24, 0x20	; 32
    14c4:	80 83       	st	Z, r24
    14c6:	02 c2       	rjmp	.+1028   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTB.Bits.Pin6 =1;
    14c8:	e8 e3       	ldi	r30, 0x38	; 56
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 64       	ori	r24, 0x40	; 64
    14d0:	80 83       	st	Z, r24
    14d2:	fc c1       	rjmp	.+1016   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTB.Bits.Pin7 =1;
    14d4:	e8 e3       	ldi	r30, 0x38	; 56
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	80 68       	ori	r24, 0x80	; 128
    14dc:	80 83       	st	Z, r24
    14de:	f6 c1       	rjmp	.+1004   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3e 87       	std	Y+14, r19	; 0x0e
    14e8:	2d 87       	std	Y+13, r18	; 0x0d
    14ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	91 05       	cpc	r25, r1
    14f2:	d9 f1       	breq	.+118    	; 0x156a <Dio_vidSetPinVal+0x358>
    14f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    14f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14f8:	24 30       	cpi	r18, 0x04	; 4
    14fa:	31 05       	cpc	r19, r1
    14fc:	7c f4       	brge	.+30     	; 0x151c <Dio_vidSetPinVal+0x30a>
    14fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1500:	9e 85       	ldd	r25, Y+14	; 0x0e
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	91 05       	cpc	r25, r1
    1506:	29 f1       	breq	.+74     	; 0x1552 <Dio_vidSetPinVal+0x340>
    1508:	2d 85       	ldd	r18, Y+13	; 0x0d
    150a:	3e 85       	ldd	r19, Y+14	; 0x0e
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	34 f5       	brge	.+76     	; 0x155e <Dio_vidSetPinVal+0x34c>
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	b1 f0       	breq	.+44     	; 0x1546 <Dio_vidSetPinVal+0x334>
    151a:	d8 c1       	rjmp	.+944    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    151c:	2d 85       	ldd	r18, Y+13	; 0x0d
    151e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1520:	25 30       	cpi	r18, 0x05	; 5
    1522:	31 05       	cpc	r19, r1
    1524:	71 f1       	breq	.+92     	; 0x1582 <Dio_vidSetPinVal+0x370>
    1526:	8d 85       	ldd	r24, Y+13	; 0x0d
    1528:	9e 85       	ldd	r25, Y+14	; 0x0e
    152a:	85 30       	cpi	r24, 0x05	; 5
    152c:	91 05       	cpc	r25, r1
    152e:	1c f1       	brlt	.+70     	; 0x1576 <Dio_vidSetPinVal+0x364>
    1530:	2d 85       	ldd	r18, Y+13	; 0x0d
    1532:	3e 85       	ldd	r19, Y+14	; 0x0e
    1534:	26 30       	cpi	r18, 0x06	; 6
    1536:	31 05       	cpc	r19, r1
    1538:	51 f1       	breq	.+84     	; 0x158e <Dio_vidSetPinVal+0x37c>
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	87 30       	cpi	r24, 0x07	; 7
    1540:	91 05       	cpc	r25, r1
    1542:	59 f1       	breq	.+86     	; 0x159a <Dio_vidSetPinVal+0x388>
    1544:	c3 c1       	rjmp	.+902    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTB.Bits.Pin0 =0;
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8e 7f       	andi	r24, 0xFE	; 254
    154e:	80 83       	st	Z, r24
    1550:	bd c1       	rjmp	.+890    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTB.Bits.Pin1 =0;
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	8d 7f       	andi	r24, 0xFD	; 253
    155a:	80 83       	st	Z, r24
    155c:	b7 c1       	rjmp	.+878    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTB.Bits.Pin2 =0;
    155e:	e8 e3       	ldi	r30, 0x38	; 56
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8b 7f       	andi	r24, 0xFB	; 251
    1566:	80 83       	st	Z, r24
    1568:	b1 c1       	rjmp	.+866    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTB.Bits.Pin3 =0;
    156a:	e8 e3       	ldi	r30, 0x38	; 56
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	87 7f       	andi	r24, 0xF7	; 247
    1572:	80 83       	st	Z, r24
    1574:	ab c1       	rjmp	.+854    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTB.Bits.Pin4 =0;
    1576:	e8 e3       	ldi	r30, 0x38	; 56
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	8f 7e       	andi	r24, 0xEF	; 239
    157e:	80 83       	st	Z, r24
    1580:	a5 c1       	rjmp	.+842    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTB.Bits.Pin5 =0;
    1582:	e8 e3       	ldi	r30, 0x38	; 56
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 7d       	andi	r24, 0xDF	; 223
    158a:	80 83       	st	Z, r24
    158c:	9f c1       	rjmp	.+830    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTB.Bits.Pin6 =0;
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8f 7b       	andi	r24, 0xBF	; 191
    1596:	80 83       	st	Z, r24
    1598:	99 c1       	rjmp	.+818    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTB.Bits.Pin7 =0;
    159a:	e8 e3       	ldi	r30, 0x38	; 56
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8f 77       	andi	r24, 0x7F	; 127
    15a2:	80 83       	st	Z, r24
    15a4:	93 c1       	rjmp	.+806    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				}
			}
			break;

		case 2:
			if(Val ==1)
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	09 f0       	breq	.+2      	; 0x15ae <Dio_vidSetPinVal+0x39c>
    15ac:	63 c0       	rjmp	.+198    	; 0x1674 <Dio_vidSetPinVal+0x462>
				{
					switch(PinLoc)
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 87       	std	Y+12, r19	; 0x0c
    15b6:	2b 87       	std	Y+11, r18	; 0x0b
    15b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	d9 f1       	breq	.+118    	; 0x1638 <Dio_vidSetPinVal+0x426>
    15c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    15c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    15c6:	24 30       	cpi	r18, 0x04	; 4
    15c8:	31 05       	cpc	r19, r1
    15ca:	7c f4       	brge	.+30     	; 0x15ea <Dio_vidSetPinVal+0x3d8>
    15cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	29 f1       	breq	.+74     	; 0x1620 <Dio_vidSetPinVal+0x40e>
    15d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    15d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	34 f5       	brge	.+76     	; 0x162c <Dio_vidSetPinVal+0x41a>
    15e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	b1 f0       	breq	.+44     	; 0x1614 <Dio_vidSetPinVal+0x402>
    15e8:	71 c1       	rjmp	.+738    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    15ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    15ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    15ee:	25 30       	cpi	r18, 0x05	; 5
    15f0:	31 05       	cpc	r19, r1
    15f2:	71 f1       	breq	.+92     	; 0x1650 <Dio_vidSetPinVal+0x43e>
    15f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f8:	85 30       	cpi	r24, 0x05	; 5
    15fa:	91 05       	cpc	r25, r1
    15fc:	1c f1       	brlt	.+70     	; 0x1644 <Dio_vidSetPinVal+0x432>
    15fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1600:	3c 85       	ldd	r19, Y+12	; 0x0c
    1602:	26 30       	cpi	r18, 0x06	; 6
    1604:	31 05       	cpc	r19, r1
    1606:	51 f1       	breq	.+84     	; 0x165c <Dio_vidSetPinVal+0x44a>
    1608:	8b 85       	ldd	r24, Y+11	; 0x0b
    160a:	9c 85       	ldd	r25, Y+12	; 0x0c
    160c:	87 30       	cpi	r24, 0x07	; 7
    160e:	91 05       	cpc	r25, r1
    1610:	59 f1       	breq	.+86     	; 0x1668 <Dio_vidSetPinVal+0x456>
    1612:	5c c1       	rjmp	.+696    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTC.Bits.Pin0 =1;
    1614:	e5 e3       	ldi	r30, 0x35	; 53
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	80 83       	st	Z, r24
    161e:	56 c1       	rjmp	.+684    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTC.Bits.Pin1 =1;
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	82 60       	ori	r24, 0x02	; 2
    1628:	80 83       	st	Z, r24
    162a:	50 c1       	rjmp	.+672    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTC.Bits.Pin2 =1;
    162c:	e5 e3       	ldi	r30, 0x35	; 53
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	84 60       	ori	r24, 0x04	; 4
    1634:	80 83       	st	Z, r24
    1636:	4a c1       	rjmp	.+660    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTC.Bits.Pin3 =1;
    1638:	e5 e3       	ldi	r30, 0x35	; 53
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	88 60       	ori	r24, 0x08	; 8
    1640:	80 83       	st	Z, r24
    1642:	44 c1       	rjmp	.+648    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTC.Bits.Pin4 =1;
    1644:	e5 e3       	ldi	r30, 0x35	; 53
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	80 61       	ori	r24, 0x10	; 16
    164c:	80 83       	st	Z, r24
    164e:	3e c1       	rjmp	.+636    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTC.Bits.Pin5 =1;
    1650:	e5 e3       	ldi	r30, 0x35	; 53
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	80 62       	ori	r24, 0x20	; 32
    1658:	80 83       	st	Z, r24
    165a:	38 c1       	rjmp	.+624    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTC.Bits.Pin6 =1;
    165c:	e5 e3       	ldi	r30, 0x35	; 53
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 64       	ori	r24, 0x40	; 64
    1664:	80 83       	st	Z, r24
    1666:	32 c1       	rjmp	.+612    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTC.Bits.Pin7 =1;
    1668:	e5 e3       	ldi	r30, 0x35	; 53
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 68       	ori	r24, 0x80	; 128
    1670:	80 83       	st	Z, r24
    1672:	2c c1       	rjmp	.+600    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3a 87       	std	Y+10, r19	; 0x0a
    167c:	29 87       	std	Y+9, r18	; 0x09
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	d9 f1       	breq	.+118    	; 0x16fe <Dio_vidSetPinVal+0x4ec>
    1688:	29 85       	ldd	r18, Y+9	; 0x09
    168a:	3a 85       	ldd	r19, Y+10	; 0x0a
    168c:	24 30       	cpi	r18, 0x04	; 4
    168e:	31 05       	cpc	r19, r1
    1690:	7c f4       	brge	.+30     	; 0x16b0 <Dio_vidSetPinVal+0x49e>
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	29 f1       	breq	.+74     	; 0x16e6 <Dio_vidSetPinVal+0x4d4>
    169c:	29 85       	ldd	r18, Y+9	; 0x09
    169e:	3a 85       	ldd	r19, Y+10	; 0x0a
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	34 f5       	brge	.+76     	; 0x16f2 <Dio_vidSetPinVal+0x4e0>
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	b1 f0       	breq	.+44     	; 0x16da <Dio_vidSetPinVal+0x4c8>
    16ae:	0e c1       	rjmp	.+540    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    16b0:	29 85       	ldd	r18, Y+9	; 0x09
    16b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b4:	25 30       	cpi	r18, 0x05	; 5
    16b6:	31 05       	cpc	r19, r1
    16b8:	71 f1       	breq	.+92     	; 0x1716 <Dio_vidSetPinVal+0x504>
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16be:	85 30       	cpi	r24, 0x05	; 5
    16c0:	91 05       	cpc	r25, r1
    16c2:	1c f1       	brlt	.+70     	; 0x170a <Dio_vidSetPinVal+0x4f8>
    16c4:	29 85       	ldd	r18, Y+9	; 0x09
    16c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16c8:	26 30       	cpi	r18, 0x06	; 6
    16ca:	31 05       	cpc	r19, r1
    16cc:	51 f1       	breq	.+84     	; 0x1722 <Dio_vidSetPinVal+0x510>
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	87 30       	cpi	r24, 0x07	; 7
    16d4:	91 05       	cpc	r25, r1
    16d6:	59 f1       	breq	.+86     	; 0x172e <Dio_vidSetPinVal+0x51c>
    16d8:	f9 c0       	rjmp	.+498    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTC.Bits.Pin0 =0;
    16da:	e5 e3       	ldi	r30, 0x35	; 53
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8e 7f       	andi	r24, 0xFE	; 254
    16e2:	80 83       	st	Z, r24
    16e4:	f3 c0       	rjmp	.+486    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTC.Bits.Pin1 =0;
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8d 7f       	andi	r24, 0xFD	; 253
    16ee:	80 83       	st	Z, r24
    16f0:	ed c0       	rjmp	.+474    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTC.Bits.Pin2 =0;
    16f2:	e5 e3       	ldi	r30, 0x35	; 53
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8b 7f       	andi	r24, 0xFB	; 251
    16fa:	80 83       	st	Z, r24
    16fc:	e7 c0       	rjmp	.+462    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTC.Bits.Pin3 =0;
    16fe:	e5 e3       	ldi	r30, 0x35	; 53
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	80 83       	st	Z, r24
    1708:	e1 c0       	rjmp	.+450    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTC.Bits.Pin4 =0;
    170a:	e5 e3       	ldi	r30, 0x35	; 53
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8f 7e       	andi	r24, 0xEF	; 239
    1712:	80 83       	st	Z, r24
    1714:	db c0       	rjmp	.+438    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTC.Bits.Pin5 =0;
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8f 7d       	andi	r24, 0xDF	; 223
    171e:	80 83       	st	Z, r24
    1720:	d5 c0       	rjmp	.+426    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTC.Bits.Pin6 =0;
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8f 7b       	andi	r24, 0xBF	; 191
    172a:	80 83       	st	Z, r24
    172c:	cf c0       	rjmp	.+414    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTC.Bits.Pin7 =0;
    172e:	e5 e3       	ldi	r30, 0x35	; 53
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 77       	andi	r24, 0x7F	; 127
    1736:	80 83       	st	Z, r24
    1738:	c9 c0       	rjmp	.+402    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
			}
		break;


		case 3:
			if(Val ==1)
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	09 f0       	breq	.+2      	; 0x1742 <Dio_vidSetPinVal+0x530>
    1740:	63 c0       	rjmp	.+198    	; 0x1808 <Dio_vidSetPinVal+0x5f6>
				{
					switch(PinLoc)
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	38 87       	std	Y+8, r19	; 0x08
    174a:	2f 83       	std	Y+7, r18	; 0x07
    174c:	8f 81       	ldd	r24, Y+7	; 0x07
    174e:	98 85       	ldd	r25, Y+8	; 0x08
    1750:	83 30       	cpi	r24, 0x03	; 3
    1752:	91 05       	cpc	r25, r1
    1754:	d9 f1       	breq	.+118    	; 0x17cc <Dio_vidSetPinVal+0x5ba>
    1756:	2f 81       	ldd	r18, Y+7	; 0x07
    1758:	38 85       	ldd	r19, Y+8	; 0x08
    175a:	24 30       	cpi	r18, 0x04	; 4
    175c:	31 05       	cpc	r19, r1
    175e:	7c f4       	brge	.+30     	; 0x177e <Dio_vidSetPinVal+0x56c>
    1760:	8f 81       	ldd	r24, Y+7	; 0x07
    1762:	98 85       	ldd	r25, Y+8	; 0x08
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	29 f1       	breq	.+74     	; 0x17b4 <Dio_vidSetPinVal+0x5a2>
    176a:	2f 81       	ldd	r18, Y+7	; 0x07
    176c:	38 85       	ldd	r19, Y+8	; 0x08
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	34 f5       	brge	.+76     	; 0x17c0 <Dio_vidSetPinVal+0x5ae>
    1774:	8f 81       	ldd	r24, Y+7	; 0x07
    1776:	98 85       	ldd	r25, Y+8	; 0x08
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	b1 f0       	breq	.+44     	; 0x17a8 <Dio_vidSetPinVal+0x596>
    177c:	a7 c0       	rjmp	.+334    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    177e:	2f 81       	ldd	r18, Y+7	; 0x07
    1780:	38 85       	ldd	r19, Y+8	; 0x08
    1782:	25 30       	cpi	r18, 0x05	; 5
    1784:	31 05       	cpc	r19, r1
    1786:	71 f1       	breq	.+92     	; 0x17e4 <Dio_vidSetPinVal+0x5d2>
    1788:	8f 81       	ldd	r24, Y+7	; 0x07
    178a:	98 85       	ldd	r25, Y+8	; 0x08
    178c:	85 30       	cpi	r24, 0x05	; 5
    178e:	91 05       	cpc	r25, r1
    1790:	1c f1       	brlt	.+70     	; 0x17d8 <Dio_vidSetPinVal+0x5c6>
    1792:	2f 81       	ldd	r18, Y+7	; 0x07
    1794:	38 85       	ldd	r19, Y+8	; 0x08
    1796:	26 30       	cpi	r18, 0x06	; 6
    1798:	31 05       	cpc	r19, r1
    179a:	51 f1       	breq	.+84     	; 0x17f0 <Dio_vidSetPinVal+0x5de>
    179c:	8f 81       	ldd	r24, Y+7	; 0x07
    179e:	98 85       	ldd	r25, Y+8	; 0x08
    17a0:	87 30       	cpi	r24, 0x07	; 7
    17a2:	91 05       	cpc	r25, r1
    17a4:	59 f1       	breq	.+86     	; 0x17fc <Dio_vidSetPinVal+0x5ea>
    17a6:	92 c0       	rjmp	.+292    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTD.Bits.Pin0 =1;
    17a8:	e2 e3       	ldi	r30, 0x32	; 50
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	81 60       	ori	r24, 0x01	; 1
    17b0:	80 83       	st	Z, r24
    17b2:	8c c0       	rjmp	.+280    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTD.Bits.Pin1 =1;
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	82 60       	ori	r24, 0x02	; 2
    17bc:	80 83       	st	Z, r24
    17be:	86 c0       	rjmp	.+268    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTD.Bits.Pin2 =1;
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	84 60       	ori	r24, 0x04	; 4
    17c8:	80 83       	st	Z, r24
    17ca:	80 c0       	rjmp	.+256    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTD.Bits.Pin3 =1;
    17cc:	e2 e3       	ldi	r30, 0x32	; 50
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	88 60       	ori	r24, 0x08	; 8
    17d4:	80 83       	st	Z, r24
    17d6:	7a c0       	rjmp	.+244    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTD.Bits.Pin4 =1;
    17d8:	e2 e3       	ldi	r30, 0x32	; 50
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 61       	ori	r24, 0x10	; 16
    17e0:	80 83       	st	Z, r24
    17e2:	74 c0       	rjmp	.+232    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTD.Bits.Pin5 =1;
    17e4:	e2 e3       	ldi	r30, 0x32	; 50
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 62       	ori	r24, 0x20	; 32
    17ec:	80 83       	st	Z, r24
    17ee:	6e c0       	rjmp	.+220    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTD.Bits.Pin6 =1;
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 64       	ori	r24, 0x40	; 64
    17f8:	80 83       	st	Z, r24
    17fa:	68 c0       	rjmp	.+208    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTD.Bits.Pin7 =1;
    17fc:	e2 e3       	ldi	r30, 0x32	; 50
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	80 83       	st	Z, r24
    1806:	62 c0       	rjmp	.+196    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3e 83       	std	Y+6, r19	; 0x06
    1810:	2d 83       	std	Y+5, r18	; 0x05
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	d9 f1       	breq	.+118    	; 0x1892 <Dio_vidSetPinVal+0x680>
    181c:	2d 81       	ldd	r18, Y+5	; 0x05
    181e:	3e 81       	ldd	r19, Y+6	; 0x06
    1820:	24 30       	cpi	r18, 0x04	; 4
    1822:	31 05       	cpc	r19, r1
    1824:	7c f4       	brge	.+30     	; 0x1844 <Dio_vidSetPinVal+0x632>
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	91 05       	cpc	r25, r1
    182e:	29 f1       	breq	.+74     	; 0x187a <Dio_vidSetPinVal+0x668>
    1830:	2d 81       	ldd	r18, Y+5	; 0x05
    1832:	3e 81       	ldd	r19, Y+6	; 0x06
    1834:	22 30       	cpi	r18, 0x02	; 2
    1836:	31 05       	cpc	r19, r1
    1838:	34 f5       	brge	.+76     	; 0x1886 <Dio_vidSetPinVal+0x674>
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	b1 f0       	breq	.+44     	; 0x186e <Dio_vidSetPinVal+0x65c>
    1842:	44 c0       	rjmp	.+136    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    1844:	2d 81       	ldd	r18, Y+5	; 0x05
    1846:	3e 81       	ldd	r19, Y+6	; 0x06
    1848:	25 30       	cpi	r18, 0x05	; 5
    184a:	31 05       	cpc	r19, r1
    184c:	71 f1       	breq	.+92     	; 0x18aa <Dio_vidSetPinVal+0x698>
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	85 30       	cpi	r24, 0x05	; 5
    1854:	91 05       	cpc	r25, r1
    1856:	1c f1       	brlt	.+70     	; 0x189e <Dio_vidSetPinVal+0x68c>
    1858:	2d 81       	ldd	r18, Y+5	; 0x05
    185a:	3e 81       	ldd	r19, Y+6	; 0x06
    185c:	26 30       	cpi	r18, 0x06	; 6
    185e:	31 05       	cpc	r19, r1
    1860:	51 f1       	breq	.+84     	; 0x18b6 <Dio_vidSetPinVal+0x6a4>
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	87 30       	cpi	r24, 0x07	; 7
    1868:	91 05       	cpc	r25, r1
    186a:	59 f1       	breq	.+86     	; 0x18c2 <Dio_vidSetPinVal+0x6b0>
    186c:	2f c0       	rjmp	.+94     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTD.Bits.Pin0 =0;
    186e:	e2 e3       	ldi	r30, 0x32	; 50
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	8e 7f       	andi	r24, 0xFE	; 254
    1876:	80 83       	st	Z, r24
    1878:	29 c0       	rjmp	.+82     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTD.Bits.Pin1 =0;
    187a:	e2 e3       	ldi	r30, 0x32	; 50
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8d 7f       	andi	r24, 0xFD	; 253
    1882:	80 83       	st	Z, r24
    1884:	23 c0       	rjmp	.+70     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTD.Bits.Pin2 =0;
    1886:	e2 e3       	ldi	r30, 0x32	; 50
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8b 7f       	andi	r24, 0xFB	; 251
    188e:	80 83       	st	Z, r24
    1890:	1d c0       	rjmp	.+58     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTD.Bits.Pin3 =0;
    1892:	e2 e3       	ldi	r30, 0x32	; 50
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	87 7f       	andi	r24, 0xF7	; 247
    189a:	80 83       	st	Z, r24
    189c:	17 c0       	rjmp	.+46     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTD.Bits.Pin4 =0;
    189e:	e2 e3       	ldi	r30, 0x32	; 50
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8f 7e       	andi	r24, 0xEF	; 239
    18a6:	80 83       	st	Z, r24
    18a8:	11 c0       	rjmp	.+34     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTD.Bits.Pin5 =0;
    18aa:	e2 e3       	ldi	r30, 0x32	; 50
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8f 7d       	andi	r24, 0xDF	; 223
    18b2:	80 83       	st	Z, r24
    18b4:	0b c0       	rjmp	.+22     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTD.Bits.Pin6 =0;
    18b6:	e2 e3       	ldi	r30, 0x32	; 50
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7b       	andi	r24, 0xBF	; 191
    18be:	80 83       	st	Z, r24
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTD.Bits.Pin7 =0;
    18c2:	e2 e3       	ldi	r30, 0x32	; 50
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8f 77       	andi	r24, 0x7F	; 127
    18ca:	80 83       	st	Z, r24
					break;
				}
			}
		break;
	}
}
    18cc:	66 96       	adiw	r28, 0x16	; 22
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <Lcd_vidSendCommand>:
#include <util/delay.h>
#include "Lcd_int.h"
#include "Dio_int.h"
#include "Lcd_cfg.h"
void Lcd_vidSendCommand(u8 Cmd)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	2f 97       	sbiw	r28, 0x0f	; 15
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	8f 87       	std	Y+15, r24	; 0x0f
	//Start to change in LCD control Reg to indicate it that you will receive command
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8LOW);  //make RS->0 to indicate LCD "you will receive command not data"
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);  //make RW->0 to indicate LCD "you will write in command Register"
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH); //make EN->1 to indicate LCD "Please LCD don't save any thing in your buffer until be sure all data sent "
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>

	//In prof_code we can't send all data '8_bit'  for PORT at the same time so we use GET_BIT
	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Cmd,0));
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	98 2f       	mov	r25, r24
    1910:	91 70       	andi	r25, 0x01	; 1
    1912:	88 e1       	ldi	r24, 0x18	; 24
    1914:	69 2f       	mov	r22, r25
    1916:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Cmd,1));
    191a:	8f 85       	ldd	r24, Y+15	; 0x0f
    191c:	86 95       	lsr	r24
    191e:	98 2f       	mov	r25, r24
    1920:	91 70       	andi	r25, 0x01	; 1
    1922:	89 e1       	ldi	r24, 0x19	; 25
    1924:	69 2f       	mov	r22, r25
    1926:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Cmd,2));
    192a:	8f 85       	ldd	r24, Y+15	; 0x0f
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	98 2f       	mov	r25, r24
    1932:	91 70       	andi	r25, 0x01	; 1
    1934:	8a e1       	ldi	r24, 0x1A	; 26
    1936:	69 2f       	mov	r22, r25
    1938:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Cmd,3));
    193c:	8f 85       	ldd	r24, Y+15	; 0x0f
    193e:	86 95       	lsr	r24
    1940:	86 95       	lsr	r24
    1942:	86 95       	lsr	r24
    1944:	98 2f       	mov	r25, r24
    1946:	91 70       	andi	r25, 0x01	; 1
    1948:	8b e1       	ldi	r24, 0x1B	; 27
    194a:	69 2f       	mov	r22, r25
    194c:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Cmd,4));
    1950:	8f 85       	ldd	r24, Y+15	; 0x0f
    1952:	82 95       	swap	r24
    1954:	8f 70       	andi	r24, 0x0F	; 15
    1956:	98 2f       	mov	r25, r24
    1958:	91 70       	andi	r25, 0x01	; 1
    195a:	8c e1       	ldi	r24, 0x1C	; 28
    195c:	69 2f       	mov	r22, r25
    195e:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Cmd,5));
    1962:	8f 85       	ldd	r24, Y+15	; 0x0f
    1964:	82 95       	swap	r24
    1966:	86 95       	lsr	r24
    1968:	87 70       	andi	r24, 0x07	; 7
    196a:	98 2f       	mov	r25, r24
    196c:	91 70       	andi	r25, 0x01	; 1
    196e:	8d e1       	ldi	r24, 0x1D	; 29
    1970:	69 2f       	mov	r22, r25
    1972:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Cmd,6));
    1976:	8f 85       	ldd	r24, Y+15	; 0x0f
    1978:	82 95       	swap	r24
    197a:	86 95       	lsr	r24
    197c:	86 95       	lsr	r24
    197e:	83 70       	andi	r24, 0x03	; 3
    1980:	98 2f       	mov	r25, r24
    1982:	91 70       	andi	r25, 0x01	; 1
    1984:	8e e1       	ldi	r24, 0x1E	; 30
    1986:	69 2f       	mov	r22, r25
    1988:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Cmd,7));
    198c:	8f 85       	ldd	r24, Y+15	; 0x0f
    198e:	98 2f       	mov	r25, r24
    1990:	99 1f       	adc	r25, r25
    1992:	99 27       	eor	r25, r25
    1994:	99 1f       	adc	r25, r25
    1996:	8f e1       	ldi	r24, 0x1F	; 31
    1998:	69 2f       	mov	r22, r25
    199a:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a0 e0       	ldi	r26, 0x00	; 0
    19a4:	b0 e4       	ldi	r27, 0x40	; 64
    19a6:	8b 87       	std	Y+11, r24	; 0x0b
    19a8:	9c 87       	std	Y+12, r25	; 0x0c
    19aa:	ad 87       	std	Y+13, r26	; 0x0d
    19ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8f 83       	std	Y+7, r24	; 0x07
    19c8:	98 87       	std	Y+8, r25	; 0x08
    19ca:	a9 87       	std	Y+9, r26	; 0x09
    19cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    19f0:	6f 81       	ldd	r22, Y+7	; 0x07
    19f2:	78 85       	ldd	r23, Y+8	; 0x08
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <Lcd_vidSendCommand+0x172>
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <Lcd_vidSendCommand+0x160>
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <Lcd_vidSendCommand+0x154>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <Lcd_vidSendCommand+0x19c>
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //make EN->0 to indicate LCD "NOW you can save bits in your buffer all data sent"
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>

}
    1a8a:	2f 96       	adiw	r28, 0x0f	; 15
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <Lcd_vidInit>:

void Lcd_vidInit(void)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	aa 97       	sbiw	r28, 0x2a	; 42
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
	 Dio_vidSetPinDir(LCD_u8RS_PIN , DIO_u8OUTPUT);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8RW_PIN , DIO_u8OUTPUT);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8EN_PIN , DIO_u8OUTPUT);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	61 e0       	ldi	r22, 0x01	; 1
    1ac4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	 Dio_vidSetPinDir(LCD_u8D0_PIN , DIO_u8OUTPUT);
    1ac8:	88 e1       	ldi	r24, 0x18	; 24
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D1_PIN , DIO_u8OUTPUT);
    1ad0:	89 e1       	ldi	r24, 0x19	; 25
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D2_PIN , DIO_u8OUTPUT);
    1ad8:	8a e1       	ldi	r24, 0x1A	; 26
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D3_PIN , DIO_u8OUTPUT);
    1ae0:	8b e1       	ldi	r24, 0x1B	; 27
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D4_PIN , DIO_u8OUTPUT);
    1ae8:	8c e1       	ldi	r24, 0x1C	; 28
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D5_PIN , DIO_u8OUTPUT);
    1af0:	8d e1       	ldi	r24, 0x1D	; 29
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D6_PIN , DIO_u8OUTPUT);
    1af8:	8e e1       	ldi	r24, 0x1E	; 30
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D7_PIN , DIO_u8OUTPUT);
    1b00:	8f e1       	ldi	r24, 0x1F	; 31
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	Lcd_vidSendCommand(LCD_u8CMD_8_BIT_2x16_5x7); //LCD_8BIT_2x16_5x7
    1b08:	88 e3       	ldi	r24, 0x38	; 56
    1b0a:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e4       	ldi	r27, 0x40	; 64
    1b16:	8f a3       	std	Y+39, r24	; 0x27
    1b18:	98 a7       	std	Y+40, r25	; 0x28
    1b1a:	a9 a7       	std	Y+41, r26	; 0x29
    1b1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b20:	78 a5       	ldd	r23, Y+40	; 0x28
    1b22:	89 a5       	ldd	r24, Y+41	; 0x29
    1b24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a ef       	ldi	r20, 0xFA	; 250
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8b a3       	std	Y+35, r24	; 0x23
    1b38:	9c a3       	std	Y+36, r25	; 0x24
    1b3a:	ad a3       	std	Y+37, r26	; 0x25
    1b3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b40:	7c a1       	ldd	r23, Y+36	; 0x24
    1b42:	8d a1       	ldd	r24, Y+37	; 0x25
    1b44:	9e a1       	ldd	r25, Y+38	; 0x26
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <Lcd_vidInit+0xc4>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9a a3       	std	Y+34, r25	; 0x22
    1b5c:	89 a3       	std	Y+33, r24	; 0x21
    1b5e:	3f c0       	rjmp	.+126    	; 0x1bde <Lcd_vidInit+0x142>
	else if (__tmp > 65535)
    1b60:	6b a1       	ldd	r22, Y+35	; 0x23
    1b62:	7c a1       	ldd	r23, Y+36	; 0x24
    1b64:	8d a1       	ldd	r24, Y+37	; 0x25
    1b66:	9e a1       	ldd	r25, Y+38	; 0x26
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	4c f5       	brge	.+82     	; 0x1bca <Lcd_vidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	6f a1       	ldd	r22, Y+39	; 0x27
    1b7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9a a3       	std	Y+34, r25	; 0x22
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <Lcd_vidInit+0x124>
    1ba2:	88 ec       	ldi	r24, 0xC8	; 200
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	98 a3       	std	Y+32, r25	; 0x20
    1ba8:	8f 8f       	std	Y+31, r24	; 0x1f
    1baa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bac:	98 a1       	ldd	r25, Y+32	; 0x20
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <Lcd_vidInit+0x112>
    1bb2:	98 a3       	std	Y+32, r25	; 0x20
    1bb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9a a3       	std	Y+34, r25	; 0x22
    1bbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <Lcd_vidInit+0x106>
    1bc8:	14 c0       	rjmp	.+40     	; 0x1bf2 <Lcd_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	6b a1       	ldd	r22, Y+35	; 0x23
    1bcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bce:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9a a3       	std	Y+34, r25	; 0x22
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
    1bde:	89 a1       	ldd	r24, Y+33	; 0x21
    1be0:	9a a1       	ldd	r25, Y+34	; 0x22
    1be2:	9e 8f       	std	Y+30, r25	; 0x1e
    1be4:	8d 8f       	std	Y+29, r24	; 0x1d
    1be6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <Lcd_vidInit+0x14e>
    1bee:	9e 8f       	std	Y+30, r25	; 0x1e
    1bf0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8CMD_DISP_ON_CURS_OFF);
    1bf2:	8c e0       	ldi	r24, 0x0C	; 12
    1bf4:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e4       	ldi	r27, 0x40	; 64
    1c00:	89 8f       	std	Y+25, r24	; 0x19
    1c02:	9a 8f       	std	Y+26, r25	; 0x1a
    1c04:	ab 8f       	std	Y+27, r26	; 0x1b
    1c06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a ef       	ldi	r20, 0xFA	; 250
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8d 8b       	std	Y+21, r24	; 0x15
    1c22:	9e 8b       	std	Y+22, r25	; 0x16
    1c24:	af 8b       	std	Y+23, r26	; 0x17
    1c26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <Lcd_vidInit+0x1ae>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 8b       	std	Y+20, r25	; 0x14
    1c46:	8b 8b       	std	Y+19, r24	; 0x13
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <Lcd_vidInit+0x22c>
	else if (__tmp > 65535)
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <Lcd_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <Lcd_vidInit+0x20e>
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9a 8b       	std	Y+18, r25	; 0x12
    1c92:	89 8b       	std	Y+17, r24	; 0x11
    1c94:	89 89       	ldd	r24, Y+17	; 0x11
    1c96:	9a 89       	ldd	r25, Y+18	; 0x12
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <Lcd_vidInit+0x1fc>
    1c9c:	9a 8b       	std	Y+18, r25	; 0x12
    1c9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cac:	9c 89       	ldd	r25, Y+20	; 0x14
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <Lcd_vidInit+0x1f0>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <Lcd_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cba:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
    1cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd2:	98 89       	ldd	r25, Y+16	; 0x10
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <Lcd_vidInit+0x238>
    1cd8:	98 8b       	std	Y+16, r25	; 0x10
    1cda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8CMD_CLR_Display);
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e0       	ldi	r26, 0x00	; 0
    1ce8:	b0 e4       	ldi	r27, 0x40	; 64
    1cea:	8b 87       	std	Y+11, r24	; 0x0b
    1cec:	9c 87       	std	Y+12, r25	; 0x0c
    1cee:	ad 87       	std	Y+13, r26	; 0x0d
    1cf0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a ef       	ldi	r20, 0xFA	; 250
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	8f 83       	std	Y+7, r24	; 0x07
    1d0c:	98 87       	std	Y+8, r25	; 0x08
    1d0e:	a9 87       	std	Y+9, r26	; 0x09
    1d10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d12:	6f 81       	ldd	r22, Y+7	; 0x07
    1d14:	78 85       	ldd	r23, Y+8	; 0x08
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <Lcd_vidInit+0x298>
		__ticks = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9e 83       	std	Y+6, r25	; 0x06
    1d30:	8d 83       	std	Y+5, r24	; 0x05
    1d32:	3f c0       	rjmp	.+126    	; 0x1db2 <Lcd_vidInit+0x316>
	else if (__tmp > 65535)
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	4c f5       	brge	.+82     	; 0x1d9e <Lcd_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <Lcd_vidInit+0x2f8>
    1d76:	88 ec       	ldi	r24, 0xC8	; 200
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <Lcd_vidInit+0x2e6>
    1d86:	9c 83       	std	Y+4, r25	; 0x04
    1d88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	9e 81       	ldd	r25, Y+6	; 0x06
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <Lcd_vidInit+0x2da>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <Lcd_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1da0:	78 85       	ldd	r23, Y+8	; 0x08
    1da2:	89 85       	ldd	r24, Y+9	; 0x09
    1da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <Lcd_vidInit+0x322>
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1dc6:	aa 96       	adiw	r28, 0x2a	; 42
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Char)

{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	2f 97       	sbiw	r28, 0x0f	; 15
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8HIGH);  //RS
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);  //RW
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH);  //EN
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Char,0));
    1e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e08:	98 2f       	mov	r25, r24
    1e0a:	91 70       	andi	r25, 0x01	; 1
    1e0c:	88 e1       	ldi	r24, 0x18	; 24
    1e0e:	69 2f       	mov	r22, r25
    1e10:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Char,1));
    1e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e16:	86 95       	lsr	r24
    1e18:	98 2f       	mov	r25, r24
    1e1a:	91 70       	andi	r25, 0x01	; 1
    1e1c:	89 e1       	ldi	r24, 0x19	; 25
    1e1e:	69 2f       	mov	r22, r25
    1e20:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Char,2));
    1e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e26:	86 95       	lsr	r24
    1e28:	86 95       	lsr	r24
    1e2a:	98 2f       	mov	r25, r24
    1e2c:	91 70       	andi	r25, 0x01	; 1
    1e2e:	8a e1       	ldi	r24, 0x1A	; 26
    1e30:	69 2f       	mov	r22, r25
    1e32:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Char,3));
    1e36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e38:	86 95       	lsr	r24
    1e3a:	86 95       	lsr	r24
    1e3c:	86 95       	lsr	r24
    1e3e:	98 2f       	mov	r25, r24
    1e40:	91 70       	andi	r25, 0x01	; 1
    1e42:	8b e1       	ldi	r24, 0x1B	; 27
    1e44:	69 2f       	mov	r22, r25
    1e46:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Char,4));
    1e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4c:	82 95       	swap	r24
    1e4e:	8f 70       	andi	r24, 0x0F	; 15
    1e50:	98 2f       	mov	r25, r24
    1e52:	91 70       	andi	r25, 0x01	; 1
    1e54:	8c e1       	ldi	r24, 0x1C	; 28
    1e56:	69 2f       	mov	r22, r25
    1e58:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Char,5));
    1e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5e:	82 95       	swap	r24
    1e60:	86 95       	lsr	r24
    1e62:	87 70       	andi	r24, 0x07	; 7
    1e64:	98 2f       	mov	r25, r24
    1e66:	91 70       	andi	r25, 0x01	; 1
    1e68:	8d e1       	ldi	r24, 0x1D	; 29
    1e6a:	69 2f       	mov	r22, r25
    1e6c:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Char,6));
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	82 95       	swap	r24
    1e74:	86 95       	lsr	r24
    1e76:	86 95       	lsr	r24
    1e78:	83 70       	andi	r24, 0x03	; 3
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	91 70       	andi	r25, 0x01	; 1
    1e7e:	8e e1       	ldi	r24, 0x1E	; 30
    1e80:	69 2f       	mov	r22, r25
    1e82:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Char,7));
    1e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e88:	98 2f       	mov	r25, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	99 27       	eor	r25, r25
    1e8e:	99 1f       	adc	r25, r25
    1e90:	8f e1       	ldi	r24, 0x1F	; 31
    1e92:	69 2f       	mov	r22, r25
    1e94:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e0       	ldi	r26, 0x00	; 0
    1e9e:	b0 e4       	ldi	r27, 0x40	; 64
    1ea0:	8b 87       	std	Y+11, r24	; 0x0b
    1ea2:	9c 87       	std	Y+12, r25	; 0x0c
    1ea4:	ad 87       	std	Y+13, r26	; 0x0d
    1ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8f 83       	std	Y+7, r24	; 0x07
    1ec2:	98 87       	std	Y+8, r25	; 0x08
    1ec4:	a9 87       	std	Y+9, r26	; 0x09
    1ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <Lcd_vidWriteChar+0x172>
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <Lcd_vidWriteChar+0x160>
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <Lcd_vidWriteChar+0x154>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <Lcd_vidWriteChar+0x19c>
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //EN
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
}
    1f84:	2f 96       	adiw	r28, 0x0f	; 15
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <Lcd_vidWriteStr>:

void Lcd_vidWriteStr(u8 *Str){
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <Lcd_vidWriteStr+0x6>
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	0a c0       	rjmp	.+20     	; 0x1fba <Lcd_vidWriteStr+0x24>

	while(* Str != '\0')
	{
		Lcd_vidWriteChar(* Str);
    1fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1faa:	80 81       	ld	r24, Z
    1fac:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Lcd_vidWriteChar>
		Str++;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //EN
}

void Lcd_vidWriteStr(u8 *Str){

	while(* Str != '\0')
    1fba:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 23       	and	r24, r24
    1fc2:	89 f7       	brne	.-30     	; 0x1fa6 <Lcd_vidWriteStr+0x10>
	{
		Lcd_vidWriteChar(* Str);
		Str++;
	}
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <xEventGroupCreate+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    1fd8:	8b e0       	ldi	r24, 0x0B	; 11
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	49 f0       	breq	.+18     	; 0x1ffe <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    1fec:	e9 81       	ldd	r30, Y+1	; 0x01
    1fee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff0:	11 82       	std	Z+1, r1	; 0x01
    1ff2:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	02 96       	adiw	r24, 0x02	; 2
    1ffa:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	60 97       	sbiw	r28, 0x10	; 16
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	9a 87       	std	Y+10, r25	; 0x0a
    2022:	89 87       	std	Y+9, r24	; 0x09
    2024:	7c 87       	std	Y+12, r23	; 0x0c
    2026:	6b 87       	std	Y+11, r22	; 0x0b
    2028:	5e 87       	std	Y+14, r21	; 0x0e
    202a:	4d 87       	std	Y+13, r20	; 0x0d
    202c:	38 8b       	std	Y+16, r19	; 0x10
    202e:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	9c 83       	std	Y+4, r25	; 0x04
    2036:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    2038:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    203a:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    203e:	eb 81       	ldd	r30, Y+3	; 0x03
    2040:	fc 81       	ldd	r31, Y+4	; 0x04
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	98 87       	std	Y+8, r25	; 0x08
    2048:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    204a:	89 85       	ldd	r24, Y+9	; 0x09
    204c:	9a 85       	ldd	r25, Y+10	; 0x0a
    204e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2050:	3c 85       	ldd	r19, Y+12	; 0x0c
    2052:	b9 01       	movw	r22, r18
    2054:	0e 94 dd 11 	call	0x23ba	; 0x23ba <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    2058:	2f 81       	ldd	r18, Y+7	; 0x07
    205a:	38 85       	ldd	r19, Y+8	; 0x08
    205c:	8b 85       	ldd	r24, Y+11	; 0x0b
    205e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2060:	28 2b       	or	r18, r24
    2062:	39 2b       	or	r19, r25
    2064:	8d 85       	ldd	r24, Y+13	; 0x0d
    2066:	9e 85       	ldd	r25, Y+14	; 0x0e
    2068:	28 23       	and	r18, r24
    206a:	39 23       	and	r19, r25
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	28 17       	cp	r18, r24
    2072:	39 07       	cpc	r19, r25
    2074:	c9 f4       	brne	.+50     	; 0x20a8 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    2076:	2f 81       	ldd	r18, Y+7	; 0x07
    2078:	38 85       	ldd	r19, Y+8	; 0x08
    207a:	8b 85       	ldd	r24, Y+11	; 0x0b
    207c:	9c 85       	ldd	r25, Y+12	; 0x0c
    207e:	82 2b       	or	r24, r18
    2080:	93 2b       	or	r25, r19
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    2086:	eb 81       	ldd	r30, Y+3	; 0x03
    2088:	fc 81       	ldd	r31, Y+4	; 0x04
    208a:	20 81       	ld	r18, Z
    208c:	31 81       	ldd	r19, Z+1	; 0x01
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	80 95       	com	r24
    2094:	90 95       	com	r25
    2096:	82 23       	and	r24, r18
    2098:	93 23       	and	r25, r19
    209a:	eb 81       	ldd	r30, Y+3	; 0x03
    209c:	fc 81       	ldd	r31, Y+4	; 0x04
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	80 83       	st	Z, r24

			xTicksToWait = 0;
    20a2:	18 8a       	std	Y+16, r1	; 0x10
    20a4:	1f 86       	std	Y+15, r1	; 0x0f
    20a6:	1e c0       	rjmp	.+60     	; 0x20e4 <xEventGroupSync+0xd8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    20a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20aa:	98 89       	ldd	r25, Y+16	; 0x10
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	91 f0       	breq	.+36     	; 0x20d4 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	bc 01       	movw	r22, r24
    20b6:	6e 5f       	subi	r22, 0xFE	; 254
    20b8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    20bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20be:	9c 01       	movw	r18, r24
    20c0:	35 60       	ori	r19, 0x05	; 5
    20c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    20c4:	58 89       	ldd	r21, Y+16	; 0x10
    20c6:	cb 01       	movw	r24, r22
    20c8:	b9 01       	movw	r22, r18
    20ca:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    20ce:	1e 82       	std	Y+6, r1	; 0x06
    20d0:	1d 82       	std	Y+5, r1	; 0x05
    20d2:	08 c0       	rjmp	.+16     	; 0x20e4 <xEventGroupSync+0xd8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    20d4:	eb 81       	ldd	r30, Y+3	; 0x03
    20d6:	fc 81       	ldd	r31, Y+4	; 0x04
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
				xTimeoutOccurred = pdTRUE;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    20e4:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    20e8:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <xEventGroupSync+0xe8>
    20f2:	3a c0       	rjmp	.+116    	; 0x2168 <xEventGroupSync+0x15c>
	{
		if( xAlreadyYielded == pdFALSE )
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	88 23       	and	r24, r24
    20f8:	11 f4       	brne	.+4      	; 0x20fe <xEventGroupSync+0xf2>
		{
			portYIELD_WITHIN_API();
    20fa:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    20fe:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <uxTaskResetEventItemValue>
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	80 70       	andi	r24, 0x00	; 0
    210c:	92 70       	andi	r25, 0x02	; 2
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	31 f5       	brne	.+76     	; 0x215e <xEventGroupSync+0x152>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    2118:	eb 81       	ldd	r30, Y+3	; 0x03
    211a:	fc 81       	ldd	r31, Y+4	; 0x04
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    2124:	2d 81       	ldd	r18, Y+5	; 0x05
    2126:	3e 81       	ldd	r19, Y+6	; 0x06
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	28 23       	and	r18, r24
    212e:	39 23       	and	r19, r25
    2130:	8d 85       	ldd	r24, Y+13	; 0x0d
    2132:	9e 85       	ldd	r25, Y+14	; 0x0e
    2134:	28 17       	cp	r18, r24
    2136:	39 07       	cpc	r19, r25
    2138:	71 f4       	brne	.+28     	; 0x2156 <xEventGroupSync+0x14a>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    213a:	eb 81       	ldd	r30, Y+3	; 0x03
    213c:	fc 81       	ldd	r31, Y+4	; 0x04
    213e:	20 81       	ld	r18, Z
    2140:	31 81       	ldd	r19, Z+1	; 0x01
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	80 95       	com	r24
    2148:	90 95       	com	r25
    214a:	82 23       	and	r24, r18
    214c:	93 23       	and	r25, r19
    214e:	eb 81       	ldd	r30, Y+3	; 0x03
    2150:	fc 81       	ldd	r31, Y+4	; 0x04
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	90 70       	andi	r25, 0x00	; 0
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
}
    216c:	60 96       	adiw	r28, 0x10	; 16
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	63 97       	sbiw	r28, 0x13	; 19
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	9d 87       	std	Y+13, r25	; 0x0d
    2198:	8c 87       	std	Y+12, r24	; 0x0c
    219a:	7f 87       	std	Y+15, r23	; 0x0f
    219c:	6e 87       	std	Y+14, r22	; 0x0e
    219e:	48 8b       	std	Y+16, r20	; 0x10
    21a0:	29 8b       	std	Y+17, r18	; 0x11
    21a2:	1b 8b       	std	Y+19, r17	; 0x13
    21a4:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = xEventGroup;
    21a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    21aa:	9b 87       	std	Y+11, r25	; 0x0b
    21ac:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    21ae:	1f 82       	std	Y+7, r1	; 0x07
    21b0:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    21b2:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    21b4:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    21b8:	ea 85       	ldd	r30, Y+10	; 0x0a
    21ba:	fb 85       	ldd	r31, Y+11	; 0x0b
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    21ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    21cc:	b9 01       	movw	r22, r18
    21ce:	49 89       	ldd	r20, Y+17	; 0x11
    21d0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <prvTestWaitCondition>
    21d4:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	88 23       	and	r24, r24
    21da:	c1 f0       	breq	.+48     	; 0x220c <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	99 87       	std	Y+9, r25	; 0x09
    21e2:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    21e4:	1b 8a       	std	Y+19, r1	; 0x13
    21e6:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    21e8:	88 89       	ldd	r24, Y+16	; 0x10
    21ea:	88 23       	and	r24, r24
    21ec:	e9 f1       	breq	.+122    	; 0x2268 <xEventGroupWaitBits+0xea>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    21ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    21f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    21f2:	20 81       	ld	r18, Z
    21f4:	31 81       	ldd	r19, Z+1	; 0x01
    21f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    21f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    21fa:	80 95       	com	r24
    21fc:	90 95       	com	r25
    21fe:	82 23       	and	r24, r18
    2200:	93 23       	and	r25, r19
    2202:	ea 85       	ldd	r30, Y+10	; 0x0a
    2204:	fb 85       	ldd	r31, Y+11	; 0x0b
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
    220a:	2e c0       	rjmp	.+92     	; 0x2268 <xEventGroupWaitBits+0xea>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    220c:	8a 89       	ldd	r24, Y+18	; 0x12
    220e:	9b 89       	ldd	r25, Y+19	; 0x13
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	39 f4       	brne	.+14     	; 0x2222 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	99 87       	std	Y+9, r25	; 0x09
    221a:	88 87       	std	Y+8, r24	; 0x08
			xTimeoutOccurred = pdTRUE;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	8b 83       	std	Y+3, r24	; 0x03
    2220:	23 c0       	rjmp	.+70     	; 0x2268 <xEventGroupWaitBits+0xea>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    2222:	88 89       	ldd	r24, Y+16	; 0x10
    2224:	88 23       	and	r24, r24
    2226:	29 f0       	breq	.+10     	; 0x2232 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	91 60       	ori	r25, 0x01	; 1
    222e:	9f 83       	std	Y+7, r25	; 0x07
    2230:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    2232:	89 89       	ldd	r24, Y+17	; 0x11
    2234:	88 23       	and	r24, r24
    2236:	29 f0       	breq	.+10     	; 0x2242 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    2238:	8e 81       	ldd	r24, Y+6	; 0x06
    223a:	9f 81       	ldd	r25, Y+7	; 0x07
    223c:	94 60       	ori	r25, 0x04	; 4
    223e:	9f 83       	std	Y+7, r25	; 0x07
    2240:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    2242:	8a 85       	ldd	r24, Y+10	; 0x0a
    2244:	9b 85       	ldd	r25, Y+11	; 0x0b
    2246:	bc 01       	movw	r22, r24
    2248:	6e 5f       	subi	r22, 0xFE	; 254
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	2e 85       	ldd	r18, Y+14	; 0x0e
    224e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2250:	8e 81       	ldd	r24, Y+6	; 0x06
    2252:	9f 81       	ldd	r25, Y+7	; 0x07
    2254:	28 2b       	or	r18, r24
    2256:	39 2b       	or	r19, r25
    2258:	4a 89       	ldd	r20, Y+18	; 0x12
    225a:	5b 89       	ldd	r21, Y+19	; 0x13
    225c:	cb 01       	movw	r24, r22
    225e:	b9 01       	movw	r22, r18
    2260:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    2264:	19 86       	std	Y+9, r1	; 0x09
    2266:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    2268:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    226c:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    226e:	8a 89       	ldd	r24, Y+18	; 0x12
    2270:	9b 89       	ldd	r25, Y+19	; 0x13
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	09 f4       	brne	.+2      	; 0x2278 <xEventGroupWaitBits+0xfa>
    2276:	3c c0       	rjmp	.+120    	; 0x22f0 <xEventGroupWaitBits+0x172>
	{
		if( xAlreadyYielded == pdFALSE )
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	88 23       	and	r24, r24
    227c:	11 f4       	brne	.+4      	; 0x2282 <xEventGroupWaitBits+0x104>
		{
			portYIELD_WITHIN_API();
    227e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    2282:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <uxTaskResetEventItemValue>
    2286:	99 87       	std	Y+9, r25	; 0x09
    2288:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    228a:	88 85       	ldd	r24, Y+8	; 0x08
    228c:	99 85       	ldd	r25, Y+9	; 0x09
    228e:	80 70       	andi	r24, 0x00	; 0
    2290:	92 70       	andi	r25, 0x02	; 2
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	41 f5       	brne	.+80     	; 0x22e6 <xEventGroupWaitBits+0x168>
		{
			taskENTER_CRITICAL();
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    229c:	ea 85       	ldd	r30, Y+10	; 0x0a
    229e:	fb 85       	ldd	r31, Y+11	; 0x0b
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	99 87       	std	Y+9, r25	; 0x09
    22a6:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    22a8:	88 85       	ldd	r24, Y+8	; 0x08
    22aa:	99 85       	ldd	r25, Y+9	; 0x09
    22ac:	2e 85       	ldd	r18, Y+14	; 0x0e
    22ae:	3f 85       	ldd	r19, Y+15	; 0x0f
    22b0:	b9 01       	movw	r22, r18
    22b2:	49 89       	ldd	r20, Y+17	; 0x11
    22b4:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <prvTestWaitCondition>
    22b8:	88 23       	and	r24, r24
    22ba:	89 f0       	breq	.+34     	; 0x22de <xEventGroupWaitBits+0x160>
				{
					if( xClearOnExit != pdFALSE )
    22bc:	88 89       	ldd	r24, Y+16	; 0x10
    22be:	88 23       	and	r24, r24
    22c0:	71 f0       	breq	.+28     	; 0x22de <xEventGroupWaitBits+0x160>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    22c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    22c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    22c6:	20 81       	ld	r18, Z
    22c8:	31 81       	ldd	r19, Z+1	; 0x01
    22ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    22cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ce:	80 95       	com	r24
    22d0:	90 95       	com	r25
    22d2:	82 23       	and	r24, r18
    22d4:	93 23       	and	r25, r19
    22d6:	ea 85       	ldd	r30, Y+10	; 0x0a
    22d8:	fb 85       	ldd	r31, Y+11	; 0x0b
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	80 83       	st	Z, r24
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	8b 83       	std	Y+3, r24	; 0x03
			}
			taskEXIT_CRITICAL();
    22e2:	0f 90       	pop	r0
    22e4:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    22e6:	88 85       	ldd	r24, Y+8	; 0x08
    22e8:	99 85       	ldd	r25, Y+9	; 0x09
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	99 87       	std	Y+9, r25	; 0x09
    22ee:	88 87       	std	Y+8, r24	; 0x08
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    22f0:	88 85       	ldd	r24, Y+8	; 0x08
    22f2:	99 85       	ldd	r25, Y+9	; 0x09
}
    22f4:	63 96       	adiw	r28, 0x13	; 19
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	28 97       	sbiw	r28, 0x08	; 8
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	78 87       	std	Y+8, r23	; 0x08
    2324:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = xEventGroup;
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    2340:	eb 81       	ldd	r30, Y+3	; 0x03
    2342:	fc 81       	ldd	r31, Y+4	; 0x04
    2344:	20 81       	ld	r18, Z
    2346:	31 81       	ldd	r19, Z+1	; 0x01
    2348:	8f 81       	ldd	r24, Y+7	; 0x07
    234a:	98 85       	ldd	r25, Y+8	; 0x08
    234c:	80 95       	com	r24
    234e:	90 95       	com	r25
    2350:	82 23       	and	r24, r18
    2352:	93 23       	and	r25, r19
    2354:	eb 81       	ldd	r30, Y+3	; 0x03
    2356:	fc 81       	ldd	r31, Y+4	; 0x04
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2364:	28 96       	adiw	r28, 0x08	; 8
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	27 97       	sbiw	r28, 0x07	; 7
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	9f 83       	std	Y+7, r25	; 0x07
    238c:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
    238e:	8e 81       	ldd	r24, Y+6	; 0x06
    2390:	9f 81       	ldd	r25, Y+7	; 0x07
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2396:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    2398:	eb 81       	ldd	r30, Y+3	; 0x03
    239a:	fc 81       	ldd	r31, Y+4	; 0x04
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    23a8:	27 96       	adiw	r28, 0x07	; 7
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	65 97       	sbiw	r28, 0x15	; 21
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	9b 8b       	std	Y+19, r25	; 0x13
    23d0:	8a 8b       	std	Y+18, r24	; 0x12
    23d2:	7d 8b       	std	Y+21, r23	; 0x15
    23d4:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    23d6:	19 86       	std	Y+9, r1	; 0x09
    23d8:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = xEventGroup;
    23da:	8a 89       	ldd	r24, Y+18	; 0x12
    23dc:	9b 89       	ldd	r25, Y+19	; 0x13
    23de:	9b 83       	std	Y+3, r25	; 0x03
    23e0:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    23e2:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	9b 81       	ldd	r25, Y+3	; 0x03
    23e8:	02 96       	adiw	r24, 0x02	; 2
    23ea:	9b 87       	std	Y+11, r25	; 0x0b
    23ec:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    23ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f2:	03 96       	adiw	r24, 0x03	; 3
    23f4:	9d 87       	std	Y+13, r25	; 0x0d
    23f6:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    23f8:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    23fc:	ea 85       	ldd	r30, Y+10	; 0x0a
    23fe:	fb 85       	ldd	r31, Y+11	; 0x0b
    2400:	85 81       	ldd	r24, Z+5	; 0x05
    2402:	96 81       	ldd	r25, Z+6	; 0x06
    2404:	99 8b       	std	Y+17, r25	; 0x11
    2406:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    2408:	ea 81       	ldd	r30, Y+2	; 0x02
    240a:	fb 81       	ldd	r31, Y+3	; 0x03
    240c:	20 81       	ld	r18, Z
    240e:	31 81       	ldd	r19, Z+1	; 0x01
    2410:	8c 89       	ldd	r24, Y+20	; 0x14
    2412:	9d 89       	ldd	r25, Y+21	; 0x15
    2414:	82 2b       	or	r24, r18
    2416:	93 2b       	or	r25, r19
    2418:	ea 81       	ldd	r30, Y+2	; 0x02
    241a:	fb 81       	ldd	r31, Y+3	; 0x03
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	59 c0       	rjmp	.+178    	; 0x24d4 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    2422:	e8 89       	ldd	r30, Y+16	; 0x10
    2424:	f9 89       	ldd	r31, Y+17	; 0x11
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	9f 87       	std	Y+15, r25	; 0x0f
    242c:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    242e:	e8 89       	ldd	r30, Y+16	; 0x10
    2430:	f9 89       	ldd	r31, Y+17	; 0x11
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	9f 83       	std	Y+7, r25	; 0x07
    2438:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    243a:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    243c:	8e 81       	ldd	r24, Y+6	; 0x06
    243e:	9f 81       	ldd	r25, Y+7	; 0x07
    2440:	80 70       	andi	r24, 0x00	; 0
    2442:	9d 83       	std	Y+5, r25	; 0x05
    2444:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    2446:	8e 81       	ldd	r24, Y+6	; 0x06
    2448:	9f 81       	ldd	r25, Y+7	; 0x07
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	9f 83       	std	Y+7, r25	; 0x07
    244e:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	9d 81       	ldd	r25, Y+5	; 0x05
    2454:	80 70       	andi	r24, 0x00	; 0
    2456:	94 70       	andi	r25, 0x04	; 4
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f4       	brne	.+26     	; 0x2476 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    245c:	ea 81       	ldd	r30, Y+2	; 0x02
    245e:	fb 81       	ldd	r31, Y+3	; 0x03
    2460:	20 81       	ld	r18, Z
    2462:	31 81       	ldd	r19, Z+1	; 0x01
    2464:	8e 81       	ldd	r24, Y+6	; 0x06
    2466:	9f 81       	ldd	r25, Y+7	; 0x07
    2468:	82 23       	and	r24, r18
    246a:	93 23       	and	r25, r19
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	91 f0       	breq	.+36     	; 0x2494 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    2476:	ea 81       	ldd	r30, Y+2	; 0x02
    2478:	fb 81       	ldd	r31, Y+3	; 0x03
    247a:	20 81       	ld	r18, Z
    247c:	31 81       	ldd	r19, Z+1	; 0x01
    247e:	8e 81       	ldd	r24, Y+6	; 0x06
    2480:	9f 81       	ldd	r25, Y+7	; 0x07
    2482:	28 23       	and	r18, r24
    2484:	39 23       	and	r19, r25
    2486:	8e 81       	ldd	r24, Y+6	; 0x06
    2488:	9f 81       	ldd	r25, Y+7	; 0x07
    248a:	28 17       	cp	r18, r24
    248c:	39 07       	cpc	r19, r25
    248e:	11 f4       	brne	.+4      	; 0x2494 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	88 23       	and	r24, r24
    2498:	c9 f0       	breq	.+50     	; 0x24cc <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    249a:	8c 81       	ldd	r24, Y+4	; 0x04
    249c:	9d 81       	ldd	r25, Y+5	; 0x05
    249e:	80 70       	andi	r24, 0x00	; 0
    24a0:	91 70       	andi	r25, 0x01	; 1
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	41 f0       	breq	.+16     	; 0x24b6 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    24a6:	88 85       	ldd	r24, Y+8	; 0x08
    24a8:	99 85       	ldd	r25, Y+9	; 0x09
    24aa:	2e 81       	ldd	r18, Y+6	; 0x06
    24ac:	3f 81       	ldd	r19, Y+7	; 0x07
    24ae:	82 2b       	or	r24, r18
    24b0:	93 2b       	or	r25, r19
    24b2:	99 87       	std	Y+9, r25	; 0x09
    24b4:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    24b6:	ea 81       	ldd	r30, Y+2	; 0x02
    24b8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	9c 01       	movw	r18, r24
    24c0:	32 60       	ori	r19, 0x02	; 2
    24c2:	88 89       	ldd	r24, Y+16	; 0x10
    24c4:	99 89       	ldd	r25, Y+17	; 0x11
    24c6:	b9 01       	movw	r22, r18
    24c8:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    24cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    24d0:	99 8b       	std	Y+17, r25	; 0x11
    24d2:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    24d4:	28 89       	ldd	r18, Y+16	; 0x10
    24d6:	39 89       	ldd	r19, Y+17	; 0x11
    24d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24da:	9d 85       	ldd	r25, Y+13	; 0x0d
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <xEventGroupSetBits+0x12a>
    24e2:	9f cf       	rjmp	.-194    	; 0x2422 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    24e4:	ea 81       	ldd	r30, Y+2	; 0x02
    24e6:	fb 81       	ldd	r31, Y+3	; 0x03
    24e8:	20 81       	ld	r18, Z
    24ea:	31 81       	ldd	r19, Z+1	; 0x01
    24ec:	88 85       	ldd	r24, Y+8	; 0x08
    24ee:	99 85       	ldd	r25, Y+9	; 0x09
    24f0:	80 95       	com	r24
    24f2:	90 95       	com	r25
    24f4:	82 23       	and	r24, r18
    24f6:	93 23       	and	r25, r19
    24f8:	ea 81       	ldd	r30, Y+2	; 0x02
    24fa:	fb 81       	ldd	r31, Y+3	; 0x03
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    2500:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    2504:	ea 81       	ldd	r30, Y+2	; 0x02
    2506:	fb 81       	ldd	r31, Y+3	; 0x03
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
}
    250c:	65 96       	adiw	r28, 0x15	; 21
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	00 d0       	rcall	.+0      	; 0x2524 <vEventGroupDelete+0x6>
    2524:	00 d0       	rcall	.+0      	; 0x2526 <vEventGroupDelete+0x8>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <vEventGroupDelete+0xa>
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = xEventGroup;
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	02 96       	adiw	r24, 0x02	; 2
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    2542:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
    2546:	08 c0       	rjmp	.+16     	; 0x2558 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    2548:	e9 81       	ldd	r30, Y+1	; 0x01
    254a:	fa 81       	ldd	r31, Y+2	; 0x02
    254c:	85 81       	ldd	r24, Z+5	; 0x05
    254e:	96 81       	ldd	r25, Z+6	; 0x06
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	72 e0       	ldi	r23, 0x02	; 2
    2554:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    2558:	e9 81       	ldd	r30, Y+1	; 0x01
    255a:	fa 81       	ldd	r31, Y+2	; 0x02
    255c:	80 81       	ld	r24, Z
    255e:	88 23       	and	r24, r24
    2560:	99 f7       	brne	.-26     	; 0x2548 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    256a:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
}
    256e:	26 96       	adiw	r28, 0x06	; 6
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <vEventGroupSetBitsCallback+0x6>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <vEventGroupSetBitsCallback+0x8>
    2588:	00 d0       	rcall	.+0      	; 0x258a <vEventGroupSetBitsCallback+0xa>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	4b 83       	std	Y+3, r20	; 0x03
    2594:	5c 83       	std	Y+4, r21	; 0x04
    2596:	6d 83       	std	Y+5, r22	; 0x05
    2598:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	9a 81       	ldd	r25, Y+2	; 0x02
    259e:	2b 81       	ldd	r18, Y+3	; 0x03
    25a0:	3c 81       	ldd	r19, Y+4	; 0x04
    25a2:	b9 01       	movw	r22, r18
    25a4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <xEventGroupSetBits>
}
    25a8:	26 96       	adiw	r28, 0x06	; 6
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <vEventGroupClearBitsCallback+0x6>
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <vEventGroupClearBitsCallback+0x8>
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <vEventGroupClearBitsCallback+0xa>
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	4b 83       	std	Y+3, r20	; 0x03
    25ce:	5c 83       	std	Y+4, r21	; 0x04
    25d0:	6d 83       	std	Y+5, r22	; 0x05
    25d2:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	2b 81       	ldd	r18, Y+3	; 0x03
    25da:	3c 81       	ldd	r19, Y+4	; 0x04
    25dc:	b9 01       	movw	r22, r18
    25de:	0e 94 85 11 	call	0x230a	; 0x230a <xEventGroupClearBits>
}
    25e2:	26 96       	adiw	r28, 0x06	; 6
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <prvTestWaitCondition+0x6>
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <prvTestWaitCondition+0x8>
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <prvTestWaitCondition+0xa>
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	9b 83       	std	Y+3, r25	; 0x03
    2604:	8a 83       	std	Y+2, r24	; 0x02
    2606:	7d 83       	std	Y+5, r23	; 0x05
    2608:	6c 83       	std	Y+4, r22	; 0x04
    260a:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    260c:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    260e:	8e 81       	ldd	r24, Y+6	; 0x06
    2610:	88 23       	and	r24, r24
    2612:	59 f4       	brne	.+22     	; 0x262a <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	2c 81       	ldd	r18, Y+4	; 0x04
    261a:	3d 81       	ldd	r19, Y+5	; 0x05
    261c:	82 23       	and	r24, r18
    261e:	93 23       	and	r25, r19
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	81 f0       	breq	.+32     	; 0x2644 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    262a:	2a 81       	ldd	r18, Y+2	; 0x02
    262c:	3b 81       	ldd	r19, Y+3	; 0x03
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	28 23       	and	r18, r24
    2634:	39 23       	and	r19, r25
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	28 17       	cp	r18, r24
    263c:	39 07       	cpc	r19, r25
    263e:	11 f4       	brne	.+4      	; 0x2644 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    2644:	89 81       	ldd	r24, Y+1	; 0x01
}
    2646:	26 96       	adiw	r28, 0x06	; 6
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <pvPortMalloc+0x6>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <pvPortMalloc+0x8>
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    2668:	1a 82       	std	Y+2, r1	; 0x02
    266a:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    266c:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    2670:	80 91 88 00 	lds	r24, 0x0088
    2674:	90 91 89 00 	lds	r25, 0x0089
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	31 f4       	brne	.+12     	; 0x2688 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    267c:	8b e8       	ldi	r24, 0x8B	; 139
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	90 93 89 00 	sts	0x0089, r25
    2684:	80 93 88 00 	sts	0x0088, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2688:	80 91 86 00 	lds	r24, 0x0086
    268c:	90 91 87 00 	lds	r25, 0x0087
    2690:	2b 81       	ldd	r18, Y+3	; 0x03
    2692:	3c 81       	ldd	r19, Y+4	; 0x04
    2694:	82 0f       	add	r24, r18
    2696:	93 1f       	adc	r25, r19
    2698:	25 e0       	ldi	r18, 0x05	; 5
    269a:	8b 3d       	cpi	r24, 0xDB	; 219
    269c:	92 07       	cpc	r25, r18
    269e:	38 f5       	brcc	.+78     	; 0x26ee <pvPortMalloc+0x96>
    26a0:	20 91 86 00 	lds	r18, 0x0086
    26a4:	30 91 87 00 	lds	r19, 0x0087
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	28 0f       	add	r18, r24
    26ae:	39 1f       	adc	r19, r25
    26b0:	80 91 86 00 	lds	r24, 0x0086
    26b4:	90 91 87 00 	lds	r25, 0x0087
    26b8:	82 17       	cp	r24, r18
    26ba:	93 07       	cpc	r25, r19
    26bc:	c0 f4       	brcc	.+48     	; 0x26ee <pvPortMalloc+0x96>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    26be:	20 91 88 00 	lds	r18, 0x0088
    26c2:	30 91 89 00 	lds	r19, 0x0089
    26c6:	80 91 86 00 	lds	r24, 0x0086
    26ca:	90 91 87 00 	lds	r25, 0x0087
    26ce:	82 0f       	add	r24, r18
    26d0:	93 1f       	adc	r25, r19
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    26d6:	20 91 86 00 	lds	r18, 0x0086
    26da:	30 91 87 00 	lds	r19, 0x0087
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	90 93 87 00 	sts	0x0087, r25
    26ea:	80 93 86 00 	sts	0x0086, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    26ee:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <vPortFree+0x6>
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2724:	10 92 87 00 	sts	0x0087, r1
    2728:	10 92 86 00 	sts	0x0086, r1
}
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    273a:	20 91 86 00 	lds	r18, 0x0086
    273e:	30 91 87 00 	lds	r19, 0x0087
    2742:	8b ed       	ldi	r24, 0xDB	; 219
    2744:	95 e0       	ldi	r25, 0x05	; 5
    2746:	82 1b       	sub	r24, r18
    2748:	93 0b       	sbc	r25, r19
}
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <vListInitialise+0x6>
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	03 96       	adiw	r24, 0x03	; 3
    2764:	e9 81       	ldd	r30, Y+1	; 0x01
    2766:	fa 81       	ldd	r31, Y+2	; 0x02
    2768:	92 83       	std	Z+2, r25	; 0x02
    276a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    276c:	e9 81       	ldd	r30, Y+1	; 0x01
    276e:	fa 81       	ldd	r31, Y+2	; 0x02
    2770:	8f ef       	ldi	r24, 0xFF	; 255
    2772:	9f ef       	ldi	r25, 0xFF	; 255
    2774:	94 83       	std	Z+4, r25	; 0x04
    2776:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	03 96       	adiw	r24, 0x03	; 3
    277e:	e9 81       	ldd	r30, Y+1	; 0x01
    2780:	fa 81       	ldd	r31, Y+2	; 0x02
    2782:	96 83       	std	Z+6, r25	; 0x06
    2784:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	03 96       	adiw	r24, 0x03	; 3
    278c:	e9 81       	ldd	r30, Y+1	; 0x01
    278e:	fa 81       	ldd	r31, Y+2	; 0x02
    2790:	90 87       	std	Z+8, r25	; 0x08
    2792:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2794:	e9 81       	ldd	r30, Y+1	; 0x01
    2796:	fa 81       	ldd	r31, Y+2	; 0x02
    2798:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <vListInitialiseItem+0x6>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    27b2:	e9 81       	ldd	r30, Y+1	; 0x01
    27b4:	fa 81       	ldd	r31, Y+2	; 0x02
    27b6:	11 86       	std	Z+9, r1	; 0x09
    27b8:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <vListInsertEnd+0x6>
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <vListInsertEnd+0x8>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <vListInsertEnd+0xa>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
    27d6:	7e 83       	std	Y+6, r23	; 0x06
    27d8:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    27da:	eb 81       	ldd	r30, Y+3	; 0x03
    27dc:	fc 81       	ldd	r31, Y+4	; 0x04
    27de:	81 81       	ldd	r24, Z+1	; 0x01
    27e0:	92 81       	ldd	r25, Z+2	; 0x02
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    27e6:	ed 81       	ldd	r30, Y+5	; 0x05
    27e8:	fe 81       	ldd	r31, Y+6	; 0x06
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	93 83       	std	Z+3, r25	; 0x03
    27f0:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    27f2:	e9 81       	ldd	r30, Y+1	; 0x01
    27f4:	fa 81       	ldd	r31, Y+2	; 0x02
    27f6:	84 81       	ldd	r24, Z+4	; 0x04
    27f8:	95 81       	ldd	r25, Z+5	; 0x05
    27fa:	ed 81       	ldd	r30, Y+5	; 0x05
    27fc:	fe 81       	ldd	r31, Y+6	; 0x06
    27fe:	95 83       	std	Z+5, r25	; 0x05
    2800:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2802:	e9 81       	ldd	r30, Y+1	; 0x01
    2804:	fa 81       	ldd	r31, Y+2	; 0x02
    2806:	04 80       	ldd	r0, Z+4	; 0x04
    2808:	f5 81       	ldd	r31, Z+5	; 0x05
    280a:	e0 2d       	mov	r30, r0
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	93 83       	std	Z+3, r25	; 0x03
    2812:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    2814:	e9 81       	ldd	r30, Y+1	; 0x01
    2816:	fa 81       	ldd	r31, Y+2	; 0x02
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	95 83       	std	Z+5, r25	; 0x05
    281e:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    2820:	ed 81       	ldd	r30, Y+5	; 0x05
    2822:	fe 81       	ldd	r31, Y+6	; 0x06
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	91 87       	std	Z+9, r25	; 0x09
    282a:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    282c:	eb 81       	ldd	r30, Y+3	; 0x03
    282e:	fc 81       	ldd	r31, Y+4	; 0x04
    2830:	80 81       	ld	r24, Z
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	eb 81       	ldd	r30, Y+3	; 0x03
    2836:	fc 81       	ldd	r31, Y+4	; 0x04
    2838:	80 83       	st	Z, r24
}
    283a:	26 96       	adiw	r28, 0x06	; 6
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	28 97       	sbiw	r28, 0x08	; 8
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	78 87       	std	Y+8, r23	; 0x08
    2866:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2868:	ef 81       	ldd	r30, Y+7	; 0x07
    286a:	f8 85       	ldd	r31, Y+8	; 0x08
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	2f ef       	ldi	r18, 0xFF	; 255
    287a:	8f 3f       	cpi	r24, 0xFF	; 255
    287c:	92 07       	cpc	r25, r18
    287e:	39 f4       	brne	.+14     	; 0x288e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2880:	ed 81       	ldd	r30, Y+5	; 0x05
    2882:	fe 81       	ldd	r31, Y+6	; 0x06
    2884:	87 81       	ldd	r24, Z+7	; 0x07
    2886:	90 85       	ldd	r25, Z+8	; 0x08
    2888:	9c 83       	std	Y+4, r25	; 0x04
    288a:	8b 83       	std	Y+3, r24	; 0x03
    288c:	18 c0       	rjmp	.+48     	; 0x28be <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	03 96       	adiw	r24, 0x03	; 3
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    2898:	06 c0       	rjmp	.+12     	; 0x28a6 <vListInsert+0x5a>
    289a:	eb 81       	ldd	r30, Y+3	; 0x03
    289c:	fc 81       	ldd	r31, Y+4	; 0x04
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	9c 83       	std	Y+4, r25	; 0x04
    28a4:	8b 83       	std	Y+3, r24	; 0x03
    28a6:	eb 81       	ldd	r30, Y+3	; 0x03
    28a8:	fc 81       	ldd	r31, Y+4	; 0x04
    28aa:	02 80       	ldd	r0, Z+2	; 0x02
    28ac:	f3 81       	ldd	r31, Z+3	; 0x03
    28ae:	e0 2d       	mov	r30, r0
    28b0:	20 81       	ld	r18, Z
    28b2:	31 81       	ldd	r19, Z+1	; 0x01
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	82 17       	cp	r24, r18
    28ba:	93 07       	cpc	r25, r19
    28bc:	70 f7       	brcc	.-36     	; 0x289a <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    28be:	eb 81       	ldd	r30, Y+3	; 0x03
    28c0:	fc 81       	ldd	r31, Y+4	; 0x04
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	ef 81       	ldd	r30, Y+7	; 0x07
    28c8:	f8 85       	ldd	r31, Y+8	; 0x08
    28ca:	93 83       	std	Z+3, r25	; 0x03
    28cc:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    28ce:	ef 81       	ldd	r30, Y+7	; 0x07
    28d0:	f8 85       	ldd	r31, Y+8	; 0x08
    28d2:	02 80       	ldd	r0, Z+2	; 0x02
    28d4:	f3 81       	ldd	r31, Z+3	; 0x03
    28d6:	e0 2d       	mov	r30, r0
    28d8:	8f 81       	ldd	r24, Y+7	; 0x07
    28da:	98 85       	ldd	r25, Y+8	; 0x08
    28dc:	95 83       	std	Z+5, r25	; 0x05
    28de:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    28e0:	ef 81       	ldd	r30, Y+7	; 0x07
    28e2:	f8 85       	ldd	r31, Y+8	; 0x08
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	9c 81       	ldd	r25, Y+4	; 0x04
    28e8:	95 83       	std	Z+5, r25	; 0x05
    28ea:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    28ec:	eb 81       	ldd	r30, Y+3	; 0x03
    28ee:	fc 81       	ldd	r31, Y+4	; 0x04
    28f0:	8f 81       	ldd	r24, Y+7	; 0x07
    28f2:	98 85       	ldd	r25, Y+8	; 0x08
    28f4:	93 83       	std	Z+3, r25	; 0x03
    28f6:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    28f8:	ef 81       	ldd	r30, Y+7	; 0x07
    28fa:	f8 85       	ldd	r31, Y+8	; 0x08
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	91 87       	std	Z+9, r25	; 0x09
    2902:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2904:	ed 81       	ldd	r30, Y+5	; 0x05
    2906:	fe 81       	ldd	r31, Y+6	; 0x06
    2908:	80 81       	ld	r24, Z
    290a:	8f 5f       	subi	r24, 0xFF	; 255
    290c:	ed 81       	ldd	r30, Y+5	; 0x05
    290e:	fe 81       	ldd	r31, Y+6	; 0x06
    2910:	80 83       	st	Z, r24
}
    2912:	28 96       	adiw	r28, 0x08	; 8
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	00 d0       	rcall	.+0      	; 0x292a <uxListRemove+0x6>
    292a:	00 d0       	rcall	.+0      	; 0x292c <uxListRemove+0x8>
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	9c 83       	std	Y+4, r25	; 0x04
    2932:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2934:	eb 81       	ldd	r30, Y+3	; 0x03
    2936:	fc 81       	ldd	r31, Y+4	; 0x04
    2938:	80 85       	ldd	r24, Z+8	; 0x08
    293a:	91 85       	ldd	r25, Z+9	; 0x09
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2940:	eb 81       	ldd	r30, Y+3	; 0x03
    2942:	fc 81       	ldd	r31, Y+4	; 0x04
    2944:	a2 81       	ldd	r26, Z+2	; 0x02
    2946:	b3 81       	ldd	r27, Z+3	; 0x03
    2948:	eb 81       	ldd	r30, Y+3	; 0x03
    294a:	fc 81       	ldd	r31, Y+4	; 0x04
    294c:	84 81       	ldd	r24, Z+4	; 0x04
    294e:	95 81       	ldd	r25, Z+5	; 0x05
    2950:	15 96       	adiw	r26, 0x05	; 5
    2952:	9c 93       	st	X, r25
    2954:	8e 93       	st	-X, r24
    2956:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2958:	eb 81       	ldd	r30, Y+3	; 0x03
    295a:	fc 81       	ldd	r31, Y+4	; 0x04
    295c:	a4 81       	ldd	r26, Z+4	; 0x04
    295e:	b5 81       	ldd	r27, Z+5	; 0x05
    2960:	eb 81       	ldd	r30, Y+3	; 0x03
    2962:	fc 81       	ldd	r31, Y+4	; 0x04
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	13 96       	adiw	r26, 0x03	; 3
    296a:	9c 93       	st	X, r25
    296c:	8e 93       	st	-X, r24
    296e:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2970:	e9 81       	ldd	r30, Y+1	; 0x01
    2972:	fa 81       	ldd	r31, Y+2	; 0x02
    2974:	21 81       	ldd	r18, Z+1	; 0x01
    2976:	32 81       	ldd	r19, Z+2	; 0x02
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	28 17       	cp	r18, r24
    297e:	39 07       	cpc	r19, r25
    2980:	41 f4       	brne	.+16     	; 0x2992 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2982:	eb 81       	ldd	r30, Y+3	; 0x03
    2984:	fc 81       	ldd	r31, Y+4	; 0x04
    2986:	84 81       	ldd	r24, Z+4	; 0x04
    2988:	95 81       	ldd	r25, Z+5	; 0x05
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	92 83       	std	Z+2, r25	; 0x02
    2990:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    2992:	eb 81       	ldd	r30, Y+3	; 0x03
    2994:	fc 81       	ldd	r31, Y+4	; 0x04
    2996:	11 86       	std	Z+9, r1	; 0x09
    2998:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    299a:	e9 81       	ldd	r30, Y+1	; 0x01
    299c:	fa 81       	ldd	r31, Y+2	; 0x02
    299e:	80 81       	ld	r24, Z
    29a0:	81 50       	subi	r24, 0x01	; 1
    29a2:	e9 81       	ldd	r30, Y+1	; 0x01
    29a4:	fa 81       	ldd	r31, Y+2	; 0x02
    29a6:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    29a8:	e9 81       	ldd	r30, Y+1	; 0x01
    29aa:	fa 81       	ldd	r31, Y+2	; 0x02
    29ac:	80 81       	ld	r24, Z
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <main>:

void LCD_Task1_Func( void *pvParameter );
void LCD_Task2_Func( void *pvParameter );

int main(void)
{
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
	Lcd_vidInit();
    29ca:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Lcd_vidInit>

	/* Create Tasks */
	xTaskCreate( LCD_Task1_Func , NULL , 200 , NULL , TASK1_PRIORITY , NULL );
    29ce:	8b e0       	ldi	r24, 0x0B	; 11
    29d0:	95 e1       	ldi	r25, 0x15	; 21
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	70 e0       	ldi	r23, 0x00	; 0
    29d6:	48 ec       	ldi	r20, 0xC8	; 200
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	01 e0       	ldi	r16, 0x01	; 1
    29e0:	ee 24       	eor	r14, r14
    29e2:	ff 24       	eor	r15, r15
    29e4:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <xTaskCreate>
	xTaskCreate( LCD_Task2_Func , NULL , 200 , NULL , TASK2_PRIORITY , NULL );
    29e8:	8e e1       	ldi	r24, 0x1E	; 30
    29ea:	95 e1       	ldi	r25, 0x15	; 21
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	48 ec       	ldi	r20, 0xC8	; 200
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	01 e0       	ldi	r16, 0x01	; 1
    29fa:	ee 24       	eor	r14, r14
    29fc:	ff 24       	eor	r15, r15
    29fe:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <xTaskCreate>


	/* Start Scheduler */
	vTaskStartScheduler();
    2a02:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <vTaskStartScheduler>

	return 0;
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
}
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	08 95       	ret

00002a16 <LCD_Task1_Func>:

void LCD_Task1_Func( void *pvParameter )
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <LCD_Task1_Func+0x6>
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	9a 83       	std	Y+2, r25	; 0x02
    2a22:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		Lcd_vidSendCommand(0x01);
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
		Lcd_vidWriteStr("I am Task 1");
    2a2a:	80 e6       	ldi	r24, 0x60	; 96
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <Lcd_vidWriteStr>

		vTaskDelay(1000);
    2a32:	88 ee       	ldi	r24, 0xE8	; 232
    2a34:	93 e0       	ldi	r25, 0x03	; 3
    2a36:	0e 94 4b 29 	call	0x5296	; 0x5296 <vTaskDelay>
    2a3a:	f4 cf       	rjmp	.-24     	; 0x2a24 <LCD_Task1_Func+0xe>

00002a3c <LCD_Task2_Func>:

	}
}

void LCD_Task2_Func( void *pvParameter )
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <LCD_Task2_Func+0x6>
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		Lcd_vidSendCommand(0x01);
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
		Lcd_vidWriteStr("I am Task 2");
    2a50:	8c e6       	ldi	r24, 0x6C	; 108
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <Lcd_vidWriteStr>

		vTaskDelay(1000);
    2a58:	88 ee       	ldi	r24, 0xE8	; 232
    2a5a:	93 e0       	ldi	r25, 0x03	; 3
    2a5c:	0e 94 4b 29 	call	0x5296	; 0x5296 <vTaskDelay>
    2a60:	f4 cf       	rjmp	.-24     	; 0x2a4a <LCD_Task2_Func+0xe>

00002a62 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	28 97       	sbiw	r28, 0x08	; 8
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	9c 83       	std	Y+4, r25	; 0x04
    2a78:	8b 83       	std	Y+3, r24	; 0x03
    2a7a:	7e 83       	std	Y+6, r23	; 0x06
    2a7c:	6d 83       	std	Y+5, r22	; 0x05
    2a7e:	58 87       	std	Y+8, r21	; 0x08
    2a80:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2a82:	eb 81       	ldd	r30, Y+3	; 0x03
    2a84:	fc 81       	ldd	r31, Y+4	; 0x04
    2a86:	81 e1       	ldi	r24, 0x11	; 17
    2a88:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	9c 83       	std	Y+4, r25	; 0x04
    2a92:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2a94:	eb 81       	ldd	r30, Y+3	; 0x03
    2a96:	fc 81       	ldd	r31, Y+4	; 0x04
    2a98:	82 e2       	ldi	r24, 0x22	; 34
    2a9a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2aa6:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa8:	fc 81       	ldd	r31, Y+4	; 0x04
    2aaa:	83 e3       	ldi	r24, 0x33	; 51
    2aac:	80 83       	st	Z, r24
	pxTopOfStack--;
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	9c 83       	std	Y+4, r25	; 0x04
    2ab6:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	9e 81       	ldd	r25, Y+6	; 0x06
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	9c 81       	ldd	r25, Y+4	; 0x04
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	89 2f       	mov	r24, r25
    2ad8:	99 27       	eor	r25, r25
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	9c 83       	std	Y+4, r25	; 0x04
    2aee:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    2af0:	eb 81       	ldd	r30, Y+3	; 0x03
    2af2:	fc 81       	ldd	r31, Y+4	; 0x04
    2af4:	10 82       	st	Z, r1
	pxTopOfStack--;
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	9c 81       	ldd	r25, Y+4	; 0x04
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9c 83       	std	Y+4, r25	; 0x04
    2afe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2b00:	eb 81       	ldd	r30, Y+3	; 0x03
    2b02:	fc 81       	ldd	r31, Y+4	; 0x04
    2b04:	80 e8       	ldi	r24, 0x80	; 128
    2b06:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	9c 83       	std	Y+4, r25	; 0x04
    2b10:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    2b12:	eb 81       	ldd	r30, Y+3	; 0x03
    2b14:	fc 81       	ldd	r31, Y+4	; 0x04
    2b16:	10 82       	st	Z, r1
	pxTopOfStack--;
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	9c 83       	std	Y+4, r25	; 0x04
    2b20:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    2b22:	eb 81       	ldd	r30, Y+3	; 0x03
    2b24:	fc 81       	ldd	r31, Y+4	; 0x04
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    2b34:	eb 81       	ldd	r30, Y+3	; 0x03
    2b36:	fc 81       	ldd	r31, Y+4	; 0x04
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	9c 83       	std	Y+4, r25	; 0x04
    2b44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    2b46:	eb 81       	ldd	r30, Y+3	; 0x03
    2b48:	fc 81       	ldd	r31, Y+4	; 0x04
    2b4a:	84 e0       	ldi	r24, 0x04	; 4
    2b4c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	9c 83       	std	Y+4, r25	; 0x04
    2b56:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    2b58:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5c:	85 e0       	ldi	r24, 0x05	; 5
    2b5e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	9c 83       	std	Y+4, r25	; 0x04
    2b68:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    2b6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6e:	86 e0       	ldi	r24, 0x06	; 6
    2b70:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	9c 83       	std	Y+4, r25	; 0x04
    2b7a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    2b7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b80:	87 e0       	ldi	r24, 0x07	; 7
    2b82:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	9c 81       	ldd	r25, Y+4	; 0x04
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    2b8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b90:	fc 81       	ldd	r31, Y+4	; 0x04
    2b92:	88 e0       	ldi	r24, 0x08	; 8
    2b94:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9c 83       	std	Y+4, r25	; 0x04
    2b9e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    2ba0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba4:	89 e0       	ldi	r24, 0x09	; 9
    2ba6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	9c 83       	std	Y+4, r25	; 0x04
    2bb0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    2bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb6:	80 e1       	ldi	r24, 0x10	; 16
    2bb8:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9c 83       	std	Y+4, r25	; 0x04
    2bc2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    2bc4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc8:	81 e1       	ldi	r24, 0x11	; 17
    2bca:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	9c 83       	std	Y+4, r25	; 0x04
    2bd4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2bd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bda:	82 e1       	ldi	r24, 0x12	; 18
    2bdc:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    2be8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bea:	fc 81       	ldd	r31, Y+4	; 0x04
    2bec:	83 e1       	ldi	r24, 0x13	; 19
    2bee:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9c 83       	std	Y+4, r25	; 0x04
    2bf8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    2bfa:	eb 81       	ldd	r30, Y+3	; 0x03
    2bfc:	fc 81       	ldd	r31, Y+4	; 0x04
    2bfe:	84 e1       	ldi	r24, 0x14	; 20
    2c00:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	9c 81       	ldd	r25, Y+4	; 0x04
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	9c 83       	std	Y+4, r25	; 0x04
    2c0a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    2c0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c10:	85 e1       	ldi	r24, 0x15	; 21
    2c12:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	9c 83       	std	Y+4, r25	; 0x04
    2c1c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    2c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c20:	fc 81       	ldd	r31, Y+4	; 0x04
    2c22:	86 e1       	ldi	r24, 0x16	; 22
    2c24:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	9c 83       	std	Y+4, r25	; 0x04
    2c2e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    2c30:	eb 81       	ldd	r30, Y+3	; 0x03
    2c32:	fc 81       	ldd	r31, Y+4	; 0x04
    2c34:	87 e1       	ldi	r24, 0x17	; 23
    2c36:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	9c 83       	std	Y+4, r25	; 0x04
    2c40:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    2c42:	eb 81       	ldd	r30, Y+3	; 0x03
    2c44:	fc 81       	ldd	r31, Y+4	; 0x04
    2c46:	88 e1       	ldi	r24, 0x18	; 24
    2c48:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2c54:	eb 81       	ldd	r30, Y+3	; 0x03
    2c56:	fc 81       	ldd	r31, Y+4	; 0x04
    2c58:	89 e1       	ldi	r24, 0x19	; 25
    2c5a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	9c 83       	std	Y+4, r25	; 0x04
    2c64:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2c66:	eb 81       	ldd	r30, Y+3	; 0x03
    2c68:	fc 81       	ldd	r31, Y+4	; 0x04
    2c6a:	80 e2       	ldi	r24, 0x20	; 32
    2c6c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9c 83       	std	Y+4, r25	; 0x04
    2c76:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2c78:	eb 81       	ldd	r30, Y+3	; 0x03
    2c7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c7c:	81 e2       	ldi	r24, 0x21	; 33
    2c7e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	9c 81       	ldd	r25, Y+4	; 0x04
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9c 83       	std	Y+4, r25	; 0x04
    2c88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    2c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c8e:	82 e2       	ldi	r24, 0x22	; 34
    2c90:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9c 83       	std	Y+4, r25	; 0x04
    2c9a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    2c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca0:	83 e2       	ldi	r24, 0x23	; 35
    2ca2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    2cae:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb0:	98 85       	ldd	r25, Y+8	; 0x08
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cba:	fc 81       	ldd	r31, Y+4	; 0x04
    2cbc:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	9c 83       	std	Y+4, r25	; 0x04
    2cc6:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ccc:	89 2f       	mov	r24, r25
    2cce:	99 27       	eor	r25, r25
    2cd0:	9a 83       	std	Y+2, r25	; 0x02
    2cd2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cda:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cea:	86 e2       	ldi	r24, 0x26	; 38
    2cec:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	9c 83       	std	Y+4, r25	; 0x04
    2cf6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    2cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    2cfc:	87 e2       	ldi	r24, 0x27	; 39
    2cfe:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	9c 81       	ldd	r25, Y+4	; 0x04
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	9c 83       	std	Y+4, r25	; 0x04
    2d08:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    2d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d0e:	88 e2       	ldi	r24, 0x28	; 40
    2d10:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	9c 83       	std	Y+4, r25	; 0x04
    2d1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    2d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d20:	89 e2       	ldi	r24, 0x29	; 41
    2d22:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	9c 83       	std	Y+4, r25	; 0x04
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    2d2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d30:	fc 81       	ldd	r31, Y+4	; 0x04
    2d32:	80 e3       	ldi	r24, 0x30	; 48
    2d34:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	9c 83       	std	Y+4, r25	; 0x04
    2d3e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    2d40:	eb 81       	ldd	r30, Y+3	; 0x03
    2d42:	fc 81       	ldd	r31, Y+4	; 0x04
    2d44:	81 e3       	ldi	r24, 0x31	; 49
    2d46:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2d56:	28 96       	adiw	r28, 0x08	; 8
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2d70:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2d74:	a0 91 66 06 	lds	r26, 0x0666
    2d78:	b0 91 67 06 	lds	r27, 0x0667
    2d7c:	cd 91       	ld	r28, X+
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	dd 91       	ld	r29, X+
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	ff 91       	pop	r31
    2d86:	ef 91       	pop	r30
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	bf 91       	pop	r27
    2d8e:	af 91       	pop	r26
    2d90:	9f 91       	pop	r25
    2d92:	8f 91       	pop	r24
    2d94:	7f 91       	pop	r23
    2d96:	6f 91       	pop	r22
    2d98:	5f 91       	pop	r21
    2d9a:	4f 91       	pop	r20
    2d9c:	3f 91       	pop	r19
    2d9e:	2f 91       	pop	r18
    2da0:	1f 91       	pop	r17
    2da2:	0f 91       	pop	r16
    2da4:	ff 90       	pop	r15
    2da6:	ef 90       	pop	r14
    2da8:	df 90       	pop	r13
    2daa:	cf 90       	pop	r12
    2dac:	bf 90       	pop	r11
    2dae:	af 90       	pop	r10
    2db0:	9f 90       	pop	r9
    2db2:	8f 90       	pop	r8
    2db4:	7f 90       	pop	r7
    2db6:	6f 90       	pop	r6
    2db8:	5f 90       	pop	r5
    2dba:	4f 90       	pop	r4
    2dbc:	3f 90       	pop	r3
    2dbe:	2f 90       	pop	r2
    2dc0:	1f 90       	pop	r1
    2dc2:	0f 90       	pop	r0
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2dc8:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
}
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2de0:	0f 92       	push	r0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	0f 92       	push	r0
    2de8:	1f 92       	push	r1
    2dea:	11 24       	eor	r1, r1
    2dec:	2f 92       	push	r2
    2dee:	3f 92       	push	r3
    2df0:	4f 92       	push	r4
    2df2:	5f 92       	push	r5
    2df4:	6f 92       	push	r6
    2df6:	7f 92       	push	r7
    2df8:	8f 92       	push	r8
    2dfa:	9f 92       	push	r9
    2dfc:	af 92       	push	r10
    2dfe:	bf 92       	push	r11
    2e00:	cf 92       	push	r12
    2e02:	df 92       	push	r13
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	ef 93       	push	r30
    2e26:	ff 93       	push	r31
    2e28:	a0 91 66 06 	lds	r26, 0x0666
    2e2c:	b0 91 67 06 	lds	r27, 0x0667
    2e30:	0d b6       	in	r0, 0x3d	; 61
    2e32:	0d 92       	st	X+, r0
    2e34:	0e b6       	in	r0, 0x3e	; 62
    2e36:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2e38:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2e3c:	a0 91 66 06 	lds	r26, 0x0666
    2e40:	b0 91 67 06 	lds	r27, 0x0667
    2e44:	cd 91       	ld	r28, X+
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	dd 91       	ld	r29, X+
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	ff 91       	pop	r31
    2e4e:	ef 91       	pop	r30
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	bf 91       	pop	r27
    2e56:	af 91       	pop	r26
    2e58:	9f 91       	pop	r25
    2e5a:	8f 91       	pop	r24
    2e5c:	7f 91       	pop	r23
    2e5e:	6f 91       	pop	r22
    2e60:	5f 91       	pop	r21
    2e62:	4f 91       	pop	r20
    2e64:	3f 91       	pop	r19
    2e66:	2f 91       	pop	r18
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	df 90       	pop	r13
    2e72:	cf 90       	pop	r12
    2e74:	bf 90       	pop	r11
    2e76:	af 90       	pop	r10
    2e78:	9f 90       	pop	r9
    2e7a:	8f 90       	pop	r8
    2e7c:	7f 90       	pop	r7
    2e7e:	6f 90       	pop	r6
    2e80:	5f 90       	pop	r5
    2e82:	4f 90       	pop	r4
    2e84:	3f 90       	pop	r3
    2e86:	2f 90       	pop	r2
    2e88:	1f 90       	pop	r1
    2e8a:	0f 90       	pop	r0
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2e90:	08 95       	ret

00002e92 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2e92:	0f 92       	push	r0
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	0f 92       	push	r0
    2e9a:	1f 92       	push	r1
    2e9c:	11 24       	eor	r1, r1
    2e9e:	2f 92       	push	r2
    2ea0:	3f 92       	push	r3
    2ea2:	4f 92       	push	r4
    2ea4:	5f 92       	push	r5
    2ea6:	6f 92       	push	r6
    2ea8:	7f 92       	push	r7
    2eaa:	8f 92       	push	r8
    2eac:	9f 92       	push	r9
    2eae:	af 92       	push	r10
    2eb0:	bf 92       	push	r11
    2eb2:	cf 92       	push	r12
    2eb4:	df 92       	push	r13
    2eb6:	ef 92       	push	r14
    2eb8:	ff 92       	push	r15
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	ef 93       	push	r30
    2ed8:	ff 93       	push	r31
    2eda:	a0 91 66 06 	lds	r26, 0x0666
    2ede:	b0 91 67 06 	lds	r27, 0x0667
    2ee2:	0d b6       	in	r0, 0x3d	; 61
    2ee4:	0d 92       	st	X+, r0
    2ee6:	0e b6       	in	r0, 0x3e	; 62
    2ee8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2eea:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskIncrementTick>
    2eee:	88 23       	and	r24, r24
    2ef0:	11 f0       	breq	.+4      	; 0x2ef6 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    2ef2:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    2ef6:	a0 91 66 06 	lds	r26, 0x0666
    2efa:	b0 91 67 06 	lds	r27, 0x0667
    2efe:	cd 91       	ld	r28, X+
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	dd 91       	ld	r29, X+
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	ff 91       	pop	r31
    2f08:	ef 91       	pop	r30
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	bf 91       	pop	r27
    2f10:	af 91       	pop	r26
    2f12:	9f 91       	pop	r25
    2f14:	8f 91       	pop	r24
    2f16:	7f 91       	pop	r23
    2f18:	6f 91       	pop	r22
    2f1a:	5f 91       	pop	r21
    2f1c:	4f 91       	pop	r20
    2f1e:	3f 91       	pop	r19
    2f20:	2f 91       	pop	r18
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	bf 90       	pop	r11
    2f30:	af 90       	pop	r10
    2f32:	9f 90       	pop	r9
    2f34:	8f 90       	pop	r8
    2f36:	7f 90       	pop	r7
    2f38:	6f 90       	pop	r6
    2f3a:	5f 90       	pop	r5
    2f3c:	4f 90       	pop	r4
    2f3e:	3f 90       	pop	r3
    2f40:	2f 90       	pop	r2
    2f42:	1f 90       	pop	r1
    2f44:	0f 90       	pop	r0
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2f4a:	08 95       	ret

00002f4c <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <prvSetupTimerInterrupt+0x6>
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <prvSetupTimerInterrupt+0x8>
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <prvSetupTimerInterrupt+0xa>
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2f5a:	80 e4       	ldi	r24, 0x40	; 64
    2f5c:	9f e1       	ldi	r25, 0x1F	; 31
    2f5e:	a0 e0       	ldi	r26, 0x00	; 0
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	8b 83       	std	Y+3, r24	; 0x03
    2f64:	9c 83       	std	Y+4, r25	; 0x04
    2f66:	ad 83       	std	Y+5, r26	; 0x05
    2f68:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6e:	ad 81       	ldd	r26, Y+5	; 0x05
    2f70:	be 81       	ldd	r27, Y+6	; 0x06
    2f72:	68 94       	set
    2f74:	15 f8       	bld	r1, 5
    2f76:	b6 95       	lsr	r27
    2f78:	a7 95       	ror	r26
    2f7a:	97 95       	ror	r25
    2f7c:	87 95       	ror	r24
    2f7e:	16 94       	lsr	r1
    2f80:	d1 f7       	brne	.-12     	; 0x2f76 <prvSetupTimerInterrupt+0x2a>
    2f82:	8b 83       	std	Y+3, r24	; 0x03
    2f84:	9c 83       	std	Y+4, r25	; 0x04
    2f86:	ad 83       	std	Y+5, r26	; 0x05
    2f88:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8e:	ad 81       	ldd	r26, Y+5	; 0x05
    2f90:	be 81       	ldd	r27, Y+6	; 0x06
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	a1 09       	sbc	r26, r1
    2f96:	b1 09       	sbc	r27, r1
    2f98:	8b 83       	std	Y+3, r24	; 0x03
    2f9a:	9c 83       	std	Y+4, r25	; 0x04
    2f9c:	ad 83       	std	Y+5, r26	; 0x05
    2f9e:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	ad 81       	ldd	r26, Y+5	; 0x05
    2faa:	be 81       	ldd	r27, Y+6	; 0x06
    2fac:	89 2f       	mov	r24, r25
    2fae:	9a 2f       	mov	r25, r26
    2fb0:	ab 2f       	mov	r26, r27
    2fb2:	bb 27       	eor	r27, r27
    2fb4:	8b 83       	std	Y+3, r24	; 0x03
    2fb6:	9c 83       	std	Y+4, r25	; 0x04
    2fb8:	ad 83       	std	Y+5, r26	; 0x05
    2fba:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    2fc0:	eb e4       	ldi	r30, 0x4B	; 75
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2fc8:	ea e4       	ldi	r30, 0x4A	; 74
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2fd0:	8b e0       	ldi	r24, 0x0B	; 11
    2fd2:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    2fd4:	ee e4       	ldi	r30, 0x4E	; 78
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2fdc:	e9 e5       	ldi	r30, 0x59	; 89
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	80 61       	ori	r24, 0x10	; 16
    2fe8:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2fea:	e9 e5       	ldi	r30, 0x59	; 89
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	80 83       	st	Z, r24
}
    2ff2:	26 96       	adiw	r28, 0x06	; 6
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    3004:	0e 94 49 17 	call	0x2e92	; 0x2e92 <vPortYieldFromTick>
		asm volatile ( "reti" );
    3008:	18 95       	reti

0000300a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <xQueueGenericReset+0x6>
    3010:	00 d0       	rcall	.+0      	; 0x3012 <xQueueGenericReset+0x8>
    3012:	0f 92       	push	r0
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	9c 83       	std	Y+4, r25	; 0x04
    301a:	8b 83       	std	Y+3, r24	; 0x03
    301c:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = xQueue;
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	9c 81       	ldd	r25, Y+4	; 0x04
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	0f 92       	push	r0
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    302c:	e9 81       	ldd	r30, Y+1	; 0x01
    302e:	fa 81       	ldd	r31, Y+2	; 0x02
    3030:	40 81       	ld	r20, Z
    3032:	51 81       	ldd	r21, Z+1	; 0x01
    3034:	e9 81       	ldd	r30, Y+1	; 0x01
    3036:	fa 81       	ldd	r31, Y+2	; 0x02
    3038:	83 8d       	ldd	r24, Z+27	; 0x1b
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	e9 81       	ldd	r30, Y+1	; 0x01
    3040:	fa 81       	ldd	r31, Y+2	; 0x02
    3042:	84 8d       	ldd	r24, Z+28	; 0x1c
    3044:	88 2f       	mov	r24, r24
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	bc 01       	movw	r22, r24
    304a:	26 9f       	mul	r18, r22
    304c:	c0 01       	movw	r24, r0
    304e:	27 9f       	mul	r18, r23
    3050:	90 0d       	add	r25, r0
    3052:	36 9f       	mul	r19, r22
    3054:	90 0d       	add	r25, r0
    3056:	11 24       	eor	r1, r1
    3058:	84 0f       	add	r24, r20
    305a:	95 1f       	adc	r25, r21
    305c:	e9 81       	ldd	r30, Y+1	; 0x01
    305e:	fa 81       	ldd	r31, Y+2	; 0x02
    3060:	95 83       	std	Z+5, r25	; 0x05
    3062:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    3064:	e9 81       	ldd	r30, Y+1	; 0x01
    3066:	fa 81       	ldd	r31, Y+2	; 0x02
    3068:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    306a:	e9 81       	ldd	r30, Y+1	; 0x01
    306c:	fa 81       	ldd	r31, Y+2	; 0x02
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	e9 81       	ldd	r30, Y+1	; 0x01
    3074:	fa 81       	ldd	r31, Y+2	; 0x02
    3076:	93 83       	std	Z+3, r25	; 0x03
    3078:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    307a:	e9 81       	ldd	r30, Y+1	; 0x01
    307c:	fa 81       	ldd	r31, Y+2	; 0x02
    307e:	40 81       	ld	r20, Z
    3080:	51 81       	ldd	r21, Z+1	; 0x01
    3082:	e9 81       	ldd	r30, Y+1	; 0x01
    3084:	fa 81       	ldd	r31, Y+2	; 0x02
    3086:	83 8d       	ldd	r24, Z+27	; 0x1b
    3088:	88 2f       	mov	r24, r24
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9c 01       	movw	r18, r24
    308e:	21 50       	subi	r18, 0x01	; 1
    3090:	30 40       	sbci	r19, 0x00	; 0
    3092:	e9 81       	ldd	r30, Y+1	; 0x01
    3094:	fa 81       	ldd	r31, Y+2	; 0x02
    3096:	84 8d       	ldd	r24, Z+28	; 0x1c
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	bc 01       	movw	r22, r24
    309e:	26 9f       	mul	r18, r22
    30a0:	c0 01       	movw	r24, r0
    30a2:	27 9f       	mul	r18, r23
    30a4:	90 0d       	add	r25, r0
    30a6:	36 9f       	mul	r19, r22
    30a8:	90 0d       	add	r25, r0
    30aa:	11 24       	eor	r1, r1
    30ac:	84 0f       	add	r24, r20
    30ae:	95 1f       	adc	r25, r21
    30b0:	e9 81       	ldd	r30, Y+1	; 0x01
    30b2:	fa 81       	ldd	r31, Y+2	; 0x02
    30b4:	97 83       	std	Z+7, r25	; 0x07
    30b6:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    30b8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ba:	fa 81       	ldd	r31, Y+2	; 0x02
    30bc:	8f ef       	ldi	r24, 0xFF	; 255
    30be:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    30c0:	e9 81       	ldd	r30, Y+1	; 0x01
    30c2:	fa 81       	ldd	r31, Y+2	; 0x02
    30c4:	8f ef       	ldi	r24, 0xFF	; 255
    30c6:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	88 23       	and	r24, r24
    30cc:	79 f4       	brne	.+30     	; 0x30ec <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    30ce:	e9 81       	ldd	r30, Y+1	; 0x01
    30d0:	fa 81       	ldd	r31, Y+2	; 0x02
    30d2:	80 85       	ldd	r24, Z+8	; 0x08
    30d4:	88 23       	and	r24, r24
    30d6:	a1 f0       	breq	.+40     	; 0x3100 <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	08 96       	adiw	r24, 0x08	; 8
    30de:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    30e2:	88 23       	and	r24, r24
    30e4:	69 f0       	breq	.+26     	; 0x3100 <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    30e6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
    30ea:	0a c0       	rjmp	.+20     	; 0x3100 <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	9a 81       	ldd	r25, Y+2	; 0x02
    30f0:	08 96       	adiw	r24, 0x08	; 8
    30f2:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	9a 81       	ldd	r25, Y+2	; 0x02
    30fa:	41 96       	adiw	r24, 0x11	; 17
    30fc:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    3100:	0f 90       	pop	r0
    3102:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    3104:	81 e0       	ldi	r24, 0x01	; 1
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	df 93       	push	r29
    311c:	cf 93       	push	r28
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	29 97       	sbiw	r28, 0x09	; 9
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	8f 83       	std	Y+7, r24	; 0x07
    3130:	68 87       	std	Y+8, r22	; 0x08
    3132:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    3134:	88 85       	ldd	r24, Y+8	; 0x08
    3136:	88 23       	and	r24, r24
    3138:	19 f4       	brne	.+6      	; 0x3140 <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    313a:	1c 82       	std	Y+4, r1	; 0x04
    313c:	1b 82       	std	Y+3, r1	; 0x03
    313e:	10 c0       	rjmp	.+32     	; 0x3160 <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3140:	8f 81       	ldd	r24, Y+7	; 0x07
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	88 85       	ldd	r24, Y+8	; 0x08
    3148:	88 2f       	mov	r24, r24
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	ac 01       	movw	r20, r24
    314e:	24 9f       	mul	r18, r20
    3150:	c0 01       	movw	r24, r0
    3152:	25 9f       	mul	r18, r21
    3154:	90 0d       	add	r25, r0
    3156:	34 9f       	mul	r19, r20
    3158:	90 0d       	add	r25, r0
    315a:	11 24       	eor	r1, r1
    315c:	9c 83       	std	Y+4, r25	; 0x04
    315e:	8b 83       	std	Y+3, r24	; 0x03
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	9c 81       	ldd	r25, Y+4	; 0x04
    3164:	4f 96       	adiw	r24, 0x1f	; 31
    3166:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    316a:	9e 83       	std	Y+6, r25	; 0x06
    316c:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    316e:	8d 81       	ldd	r24, Y+5	; 0x05
    3170:	9e 81       	ldd	r25, Y+6	; 0x06
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	a1 f0       	breq	.+40     	; 0x319e <xQueueGenericCreate+0x88>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	9a 83       	std	Y+2, r25	; 0x02
    317c:	89 83       	std	Y+1, r24	; 0x01
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	9a 81       	ldd	r25, Y+2	; 0x02
    3182:	4f 96       	adiw	r24, 0x1f	; 31
    3184:	9a 83       	std	Y+2, r25	; 0x02
    3186:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    3188:	29 81       	ldd	r18, Y+1	; 0x01
    318a:	3a 81       	ldd	r19, Y+2	; 0x02
    318c:	ed 81       	ldd	r30, Y+5	; 0x05
    318e:	fe 81       	ldd	r31, Y+6	; 0x06
    3190:	8f 81       	ldd	r24, Y+7	; 0x07
    3192:	68 85       	ldd	r22, Y+8	; 0x08
    3194:	a9 01       	movw	r20, r18
    3196:	29 85       	ldd	r18, Y+9	; 0x09
    3198:	8f 01       	movw	r16, r30
    319a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    319e:	8d 81       	ldd	r24, Y+5	; 0x05
    31a0:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    31a2:	29 96       	adiw	r28, 0x09	; 9
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	de bf       	out	0x3e, r29	; 62
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	cd bf       	out	0x3d, r28	; 61
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	08 95       	ret

000031b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	27 97       	sbiw	r28, 0x07	; 7
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	89 83       	std	Y+1, r24	; 0x01
    31d2:	6a 83       	std	Y+2, r22	; 0x02
    31d4:	5c 83       	std	Y+4, r21	; 0x04
    31d6:	4b 83       	std	Y+3, r20	; 0x03
    31d8:	2d 83       	std	Y+5, r18	; 0x05
    31da:	1f 83       	std	Y+7, r17	; 0x07
    31dc:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	88 23       	and	r24, r24
    31e2:	39 f4       	brne	.+14     	; 0x31f2 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    31e4:	8e 81       	ldd	r24, Y+6	; 0x06
    31e6:	9f 81       	ldd	r25, Y+7	; 0x07
    31e8:	ee 81       	ldd	r30, Y+6	; 0x06
    31ea:	ff 81       	ldd	r31, Y+7	; 0x07
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
    31f0:	06 c0       	rjmp	.+12     	; 0x31fe <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	9c 81       	ldd	r25, Y+4	; 0x04
    31f6:	ee 81       	ldd	r30, Y+6	; 0x06
    31f8:	ff 81       	ldd	r31, Y+7	; 0x07
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    31fe:	ee 81       	ldd	r30, Y+6	; 0x06
    3200:	ff 81       	ldd	r31, Y+7	; 0x07
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    3206:	ee 81       	ldd	r30, Y+6	; 0x06
    3208:	ff 81       	ldd	r31, Y+7	; 0x07
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    320e:	8e 81       	ldd	r24, Y+6	; 0x06
    3210:	9f 81       	ldd	r25, Y+7	; 0x07
    3212:	61 e0       	ldi	r22, 0x01	; 1
    3214:	0e 94 05 18 	call	0x300a	; 0x300a <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    3218:	27 96       	adiw	r28, 0x07	; 7
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	1f 91       	pop	r17
    322a:	0f 91       	pop	r16
    322c:	08 95       	ret

0000322e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	2f 97       	sbiw	r28, 0x0f	; 15
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	99 87       	std	Y+9, r25	; 0x09
    3244:	88 87       	std	Y+8, r24	; 0x08
    3246:	7b 87       	std	Y+11, r23	; 0x0b
    3248:	6a 87       	std	Y+10, r22	; 0x0a
    324a:	5d 87       	std	Y+13, r21	; 0x0d
    324c:	4c 87       	std	Y+12, r20	; 0x0c
    324e:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    3250:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    3252:	88 85       	ldd	r24, Y+8	; 0x08
    3254:	99 85       	ldd	r25, Y+9	; 0x09
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3260:	e9 81       	ldd	r30, Y+1	; 0x01
    3262:	fa 81       	ldd	r31, Y+2	; 0x02
    3264:	92 8d       	ldd	r25, Z+26	; 0x1a
    3266:	e9 81       	ldd	r30, Y+1	; 0x01
    3268:	fa 81       	ldd	r31, Y+2	; 0x02
    326a:	83 8d       	ldd	r24, Z+27	; 0x1b
    326c:	98 17       	cp	r25, r24
    326e:	18 f0       	brcs	.+6      	; 0x3276 <xQueueGenericSend+0x48>
    3270:	8e 85       	ldd	r24, Y+14	; 0x0e
    3272:	82 30       	cpi	r24, 0x02	; 2
    3274:	11 f5       	brne	.+68     	; 0x32ba <xQueueGenericSend+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	2a 85       	ldd	r18, Y+10	; 0x0a
    327c:	3b 85       	ldd	r19, Y+11	; 0x0b
    327e:	b9 01       	movw	r22, r18
    3280:	4e 85       	ldd	r20, Y+14	; 0x0e
    3282:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <prvCopyDataToQueue>
    3286:	8b 83       	std	Y+3, r24	; 0x03

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3288:	e9 81       	ldd	r30, Y+1	; 0x01
    328a:	fa 81       	ldd	r31, Y+2	; 0x02
    328c:	81 89       	ldd	r24, Z+17	; 0x11
    328e:	88 23       	and	r24, r24
    3290:	51 f0       	breq	.+20     	; 0x32a6 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	41 96       	adiw	r24, 0x11	; 17
    3298:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    329c:	88 23       	and	r24, r24
    329e:	41 f0       	breq	.+16     	; 0x32b0 <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    32a0:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
    32a4:	05 c0       	rjmp	.+10     	; 0x32b0 <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	88 23       	and	r24, r24
    32aa:	11 f0       	breq	.+4      	; 0x32b0 <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    32ac:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    32b0:	0f 90       	pop	r0
    32b2:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	8f 87       	std	Y+15, r24	; 0x0f
    32b8:	5c c0       	rjmp	.+184    	; 0x3372 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    32ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    32bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	21 f4       	brne	.+8      	; 0x32ca <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    32c2:	0f 90       	pop	r0
    32c4:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    32c6:	1f 86       	std	Y+15, r1	; 0x0f
    32c8:	54 c0       	rjmp	.+168    	; 0x3372 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
    32cc:	88 23       	and	r24, r24
    32ce:	31 f4       	brne	.+12     	; 0x32dc <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    32d0:	ce 01       	movw	r24, r28
    32d2:	05 96       	adiw	r24, 0x05	; 5
    32d4:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    32dc:	0f 90       	pop	r0
    32de:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    32e0:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	0f 92       	push	r0
    32ea:	e9 81       	ldd	r30, Y+1	; 0x01
    32ec:	fa 81       	ldd	r31, Y+2	; 0x02
    32ee:	85 8d       	ldd	r24, Z+29	; 0x1d
    32f0:	8f 3f       	cpi	r24, 0xFF	; 255
    32f2:	19 f4       	brne	.+6      	; 0x32fa <xQueueGenericSend+0xcc>
    32f4:	e9 81       	ldd	r30, Y+1	; 0x01
    32f6:	fa 81       	ldd	r31, Y+2	; 0x02
    32f8:	15 8e       	std	Z+29, r1	; 0x1d
    32fa:	e9 81       	ldd	r30, Y+1	; 0x01
    32fc:	fa 81       	ldd	r31, Y+2	; 0x02
    32fe:	86 8d       	ldd	r24, Z+30	; 0x1e
    3300:	8f 3f       	cpi	r24, 0xFF	; 255
    3302:	19 f4       	brne	.+6      	; 0x330a <xQueueGenericSend+0xdc>
    3304:	e9 81       	ldd	r30, Y+1	; 0x01
    3306:	fa 81       	ldd	r31, Y+2	; 0x02
    3308:	16 8e       	std	Z+30, r1	; 0x1e
    330a:	0f 90       	pop	r0
    330c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    330e:	ce 01       	movw	r24, r28
    3310:	05 96       	adiw	r24, 0x05	; 5
    3312:	9e 01       	movw	r18, r28
    3314:	24 5f       	subi	r18, 0xF4	; 244
    3316:	3f 4f       	sbci	r19, 0xFF	; 255
    3318:	b9 01       	movw	r22, r18
    331a:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <xTaskCheckForTimeOut>
    331e:	88 23       	and	r24, r24
    3320:	09 f5       	brne	.+66     	; 0x3364 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	9a 81       	ldd	r25, Y+2	; 0x02
    3326:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <prvIsQueueFull>
    332a:	88 23       	and	r24, r24
    332c:	a1 f0       	breq	.+40     	; 0x3356 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
    3332:	08 96       	adiw	r24, 0x08	; 8
    3334:	2c 85       	ldd	r18, Y+12	; 0x0c
    3336:	3d 85       	ldd	r19, Y+13	; 0x0d
    3338:	b9 01       	movw	r22, r18
    333a:	0e 94 66 2d 	call	0x5acc	; 0x5acc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
    3342:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3346:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    334a:	88 23       	and	r24, r24
    334c:	09 f0       	breq	.+2      	; 0x3350 <xQueueGenericSend+0x122>
    334e:	85 cf       	rjmp	.-246    	; 0x325a <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    3350:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
    3354:	82 cf       	rjmp	.-252    	; 0x325a <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	9a 81       	ldd	r25, Y+2	; 0x02
    335a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
    335e:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    3362:	7b cf       	rjmp	.-266    	; 0x325a <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	9a 81       	ldd	r25, Y+2	; 0x02
    3368:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
    336c:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3370:	1f 86       	std	Y+15, r1	; 0x0f
    3372:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	} /*lint -restore */
}
    3374:	2f 96       	adiw	r28, 0x0f	; 15
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	2c 97       	sbiw	r28, 0x0c	; 12
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	9f 83       	std	Y+7, r25	; 0x07
    339c:	8e 83       	std	Y+6, r24	; 0x06
    339e:	79 87       	std	Y+9, r23	; 0x09
    33a0:	68 87       	std	Y+8, r22	; 0x08
    33a2:	5b 87       	std	Y+11, r21	; 0x0b
    33a4:	4a 87       	std	Y+10, r20	; 0x0a
    33a6:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    33a8:	8e 81       	ldd	r24, Y+6	; 0x06
    33aa:	9f 81       	ldd	r25, Y+7	; 0x07
    33ac:	9b 83       	std	Y+3, r25	; 0x03
    33ae:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    33b0:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    33b2:	ea 81       	ldd	r30, Y+2	; 0x02
    33b4:	fb 81       	ldd	r31, Y+3	; 0x03
    33b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    33b8:	ea 81       	ldd	r30, Y+2	; 0x02
    33ba:	fb 81       	ldd	r31, Y+3	; 0x03
    33bc:	83 8d       	ldd	r24, Z+27	; 0x1b
    33be:	98 17       	cp	r25, r24
    33c0:	18 f0       	brcs	.+6      	; 0x33c8 <xQueueGenericSendFromISR+0x42>
    33c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    33c4:	82 30       	cpi	r24, 0x02	; 2
    33c6:	61 f5       	brne	.+88     	; 0x3420 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    33c8:	ea 81       	ldd	r30, Y+2	; 0x02
    33ca:	fb 81       	ldd	r31, Y+3	; 0x03
    33cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    33ce:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	9b 81       	ldd	r25, Y+3	; 0x03
    33d4:	28 85       	ldd	r18, Y+8	; 0x08
    33d6:	39 85       	ldd	r19, Y+9	; 0x09
    33d8:	b9 01       	movw	r22, r18
    33da:	4c 85       	ldd	r20, Y+12	; 0x0c
    33dc:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	8f 3f       	cpi	r24, 0xFF	; 255
    33e4:	a9 f4       	brne	.+42     	; 0x3410 <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    33e6:	ea 81       	ldd	r30, Y+2	; 0x02
    33e8:	fb 81       	ldd	r31, Y+3	; 0x03
    33ea:	81 89       	ldd	r24, Z+17	; 0x11
    33ec:	88 23       	and	r24, r24
    33ee:	a9 f0       	breq	.+42     	; 0x341a <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	9b 81       	ldd	r25, Y+3	; 0x03
    33f4:	41 96       	adiw	r24, 0x11	; 17
    33f6:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    33fa:	88 23       	and	r24, r24
    33fc:	71 f0       	breq	.+28     	; 0x341a <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    33fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3400:	9b 85       	ldd	r25, Y+11	; 0x0b
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	51 f0       	breq	.+20     	; 0x341a <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3406:	ea 85       	ldd	r30, Y+10	; 0x0a
    3408:	fb 85       	ldd	r31, Y+11	; 0x0b
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	80 83       	st	Z, r24
    340e:	05 c0       	rjmp	.+10     	; 0x341a <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	8f 5f       	subi	r24, 0xFF	; 255
    3414:	ea 81       	ldd	r30, Y+2	; 0x02
    3416:	fb 81       	ldd	r31, Y+3	; 0x03
    3418:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	8d 83       	std	Y+5, r24	; 0x05
    341e:	01 c0       	rjmp	.+2      	; 0x3422 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3420:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3424:	2c 96       	adiw	r28, 0x0c	; 12
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	2a 97       	sbiw	r28, 0x0a	; 10
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
    344a:	98 87       	std	Y+8, r25	; 0x08
    344c:	8f 83       	std	Y+7, r24	; 0x07
    344e:	7a 87       	std	Y+10, r23	; 0x0a
    3450:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    3452:	8f 81       	ldd	r24, Y+7	; 0x07
    3454:	98 85       	ldd	r25, Y+8	; 0x08
    3456:	9c 83       	std	Y+4, r25	; 0x04
    3458:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    345a:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    345c:	eb 81       	ldd	r30, Y+3	; 0x03
    345e:	fc 81       	ldd	r31, Y+4	; 0x04
    3460:	82 8d       	ldd	r24, Z+26	; 0x1a
    3462:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    3464:	eb 81       	ldd	r30, Y+3	; 0x03
    3466:	fc 81       	ldd	r31, Y+4	; 0x04
    3468:	93 8d       	ldd	r25, Z+27	; 0x1b
    346a:	8a 81       	ldd	r24, Y+2	; 0x02
    346c:	89 17       	cp	r24, r25
    346e:	48 f5       	brcc	.+82     	; 0x34c2 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    3470:	eb 81       	ldd	r30, Y+3	; 0x03
    3472:	fc 81       	ldd	r31, Y+4	; 0x04
    3474:	86 8d       	ldd	r24, Z+30	; 0x1e
    3476:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3478:	8a 81       	ldd	r24, Y+2	; 0x02
    347a:	8f 5f       	subi	r24, 0xFF	; 255
    347c:	eb 81       	ldd	r30, Y+3	; 0x03
    347e:	fc 81       	ldd	r31, Y+4	; 0x04
    3480:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	8f 3f       	cpi	r24, 0xFF	; 255
    3486:	a9 f4       	brne	.+42     	; 0x34b2 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3488:	eb 81       	ldd	r30, Y+3	; 0x03
    348a:	fc 81       	ldd	r31, Y+4	; 0x04
    348c:	81 89       	ldd	r24, Z+17	; 0x11
    348e:	88 23       	and	r24, r24
    3490:	a9 f0       	breq	.+42     	; 0x34bc <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3492:	8b 81       	ldd	r24, Y+3	; 0x03
    3494:	9c 81       	ldd	r25, Y+4	; 0x04
    3496:	41 96       	adiw	r24, 0x11	; 17
    3498:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    349c:	88 23       	and	r24, r24
    349e:	71 f0       	breq	.+28     	; 0x34bc <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	51 f0       	breq	.+20     	; 0x34bc <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    34a8:	e9 85       	ldd	r30, Y+9	; 0x09
    34aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	80 83       	st	Z, r24
    34b0:	05 c0       	rjmp	.+10     	; 0x34bc <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    34b2:	89 81       	ldd	r24, Y+1	; 0x01
    34b4:	8f 5f       	subi	r24, 0xFF	; 255
    34b6:	eb 81       	ldd	r30, Y+3	; 0x03
    34b8:	fc 81       	ldd	r31, Y+4	; 0x04
    34ba:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	8e 83       	std	Y+6, r24	; 0x06
    34c0:	01 c0       	rjmp	.+2      	; 0x34c4 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    34c2:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    34c4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    34c6:	2a 96       	adiw	r28, 0x0a	; 10
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	2e 97       	sbiw	r28, 0x0e	; 14
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	99 87       	std	Y+9, r25	; 0x09
    34ee:	88 87       	std	Y+8, r24	; 0x08
    34f0:	7b 87       	std	Y+11, r23	; 0x0b
    34f2:	6a 87       	std	Y+10, r22	; 0x0a
    34f4:	5d 87       	std	Y+13, r21	; 0x0d
    34f6:	4c 87       	std	Y+12, r20	; 0x0c
BaseType_t xEntryTimeSet = pdFALSE;
    34f8:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    34fa:	88 85       	ldd	r24, Y+8	; 0x08
    34fc:	99 85       	ldd	r25, Y+9	; 0x09
    34fe:	9b 83       	std	Y+3, r25	; 0x03
    3500:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3508:	ea 81       	ldd	r30, Y+2	; 0x02
    350a:	fb 81       	ldd	r31, Y+3	; 0x03
    350c:	82 8d       	ldd	r24, Z+26	; 0x1a
    350e:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	88 23       	and	r24, r24
    3514:	f9 f0       	breq	.+62     	; 0x3554 <xQueueReceive+0x7c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	9b 81       	ldd	r25, Y+3	; 0x03
    351a:	2a 85       	ldd	r18, Y+10	; 0x0a
    351c:	3b 85       	ldd	r19, Y+11	; 0x0b
    351e:	b9 01       	movw	r22, r18
    3520:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	81 50       	subi	r24, 0x01	; 1
    3528:	ea 81       	ldd	r30, Y+2	; 0x02
    352a:	fb 81       	ldd	r31, Y+3	; 0x03
    352c:	82 8f       	std	Z+26, r24	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    352e:	ea 81       	ldd	r30, Y+2	; 0x02
    3530:	fb 81       	ldd	r31, Y+3	; 0x03
    3532:	80 85       	ldd	r24, Z+8	; 0x08
    3534:	88 23       	and	r24, r24
    3536:	49 f0       	breq	.+18     	; 0x354a <xQueueReceive+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	9b 81       	ldd	r25, Y+3	; 0x03
    353c:	08 96       	adiw	r24, 0x08	; 8
    353e:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    3542:	88 23       	and	r24, r24
    3544:	11 f0       	breq	.+4      	; 0x354a <xQueueReceive+0x72>
					{
						queueYIELD_IF_USING_PREEMPTION();
    3546:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    354a:	0f 90       	pop	r0
    354c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	8e 87       	std	Y+14, r24	; 0x0e
    3552:	63 c0       	rjmp	.+198    	; 0x361a <xQueueReceive+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3554:	8c 85       	ldd	r24, Y+12	; 0x0c
    3556:	9d 85       	ldd	r25, Y+13	; 0x0d
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	21 f4       	brne	.+8      	; 0x3564 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    355c:	0f 90       	pop	r0
    355e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3560:	1e 86       	std	Y+14, r1	; 0x0e
    3562:	5b c0       	rjmp	.+182    	; 0x361a <xQueueReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
    3564:	8c 81       	ldd	r24, Y+4	; 0x04
    3566:	88 23       	and	r24, r24
    3568:	31 f4       	brne	.+12     	; 0x3576 <xQueueReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    356a:	ce 01       	movw	r24, r28
    356c:	05 96       	adiw	r24, 0x05	; 5
    356e:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3576:	0f 90       	pop	r0
    3578:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    357a:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	0f 92       	push	r0
    3584:	ea 81       	ldd	r30, Y+2	; 0x02
    3586:	fb 81       	ldd	r31, Y+3	; 0x03
    3588:	85 8d       	ldd	r24, Z+29	; 0x1d
    358a:	8f 3f       	cpi	r24, 0xFF	; 255
    358c:	19 f4       	brne	.+6      	; 0x3594 <xQueueReceive+0xbc>
    358e:	ea 81       	ldd	r30, Y+2	; 0x02
    3590:	fb 81       	ldd	r31, Y+3	; 0x03
    3592:	15 8e       	std	Z+29, r1	; 0x1d
    3594:	ea 81       	ldd	r30, Y+2	; 0x02
    3596:	fb 81       	ldd	r31, Y+3	; 0x03
    3598:	86 8d       	ldd	r24, Z+30	; 0x1e
    359a:	8f 3f       	cpi	r24, 0xFF	; 255
    359c:	19 f4       	brne	.+6      	; 0x35a4 <xQueueReceive+0xcc>
    359e:	ea 81       	ldd	r30, Y+2	; 0x02
    35a0:	fb 81       	ldd	r31, Y+3	; 0x03
    35a2:	16 8e       	std	Z+30, r1	; 0x1e
    35a4:	0f 90       	pop	r0
    35a6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    35a8:	ce 01       	movw	r24, r28
    35aa:	05 96       	adiw	r24, 0x05	; 5
    35ac:	9e 01       	movw	r18, r28
    35ae:	24 5f       	subi	r18, 0xF4	; 244
    35b0:	3f 4f       	sbci	r19, 0xFF	; 255
    35b2:	b9 01       	movw	r22, r18
    35b4:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <xTaskCheckForTimeOut>
    35b8:	88 23       	and	r24, r24
    35ba:	09 f5       	brne	.+66     	; 0x35fe <xQueueReceive+0x126>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	9b 81       	ldd	r25, Y+3	; 0x03
    35c0:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <prvIsQueueEmpty>
    35c4:	88 23       	and	r24, r24
    35c6:	a1 f0       	breq	.+40     	; 0x35f0 <xQueueReceive+0x118>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	9b 81       	ldd	r25, Y+3	; 0x03
    35cc:	41 96       	adiw	r24, 0x11	; 17
    35ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    35d0:	3d 85       	ldd	r19, Y+13	; 0x0d
    35d2:	b9 01       	movw	r22, r18
    35d4:	0e 94 66 2d 	call	0x5acc	; 0x5acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	9b 81       	ldd	r25, Y+3	; 0x03
    35dc:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    35e0:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    35e4:	88 23       	and	r24, r24
    35e6:	09 f0       	breq	.+2      	; 0x35ea <xQueueReceive+0x112>
    35e8:	8c cf       	rjmp	.-232    	; 0x3502 <xQueueReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    35ea:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
    35ee:	89 cf       	rjmp	.-238    	; 0x3502 <xQueueReceive+0x2a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    35f0:	8a 81       	ldd	r24, Y+2	; 0x02
    35f2:	9b 81       	ldd	r25, Y+3	; 0x03
    35f4:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
    35f8:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    35fc:	82 cf       	rjmp	.-252    	; 0x3502 <xQueueReceive+0x2a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    35fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3600:	9b 81       	ldd	r25, Y+3	; 0x03
    3602:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3606:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	9b 81       	ldd	r25, Y+3	; 0x03
    360e:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <prvIsQueueEmpty>
    3612:	88 23       	and	r24, r24
    3614:	09 f4       	brne	.+2      	; 0x3618 <xQueueReceive+0x140>
    3616:	75 cf       	rjmp	.-278    	; 0x3502 <xQueueReceive+0x2a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    3618:	1e 86       	std	Y+14, r1	; 0x0e
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    361a:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    361c:	2e 96       	adiw	r28, 0x0e	; 14
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	2c 97       	sbiw	r28, 0x0c	; 12
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	99 87       	std	Y+9, r25	; 0x09
    3644:	88 87       	std	Y+8, r24	; 0x08
    3646:	7b 87       	std	Y+11, r23	; 0x0b
    3648:	6a 87       	std	Y+10, r22	; 0x0a
BaseType_t xEntryTimeSet = pdFALSE;
    364a:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    364c:	88 85       	ldd	r24, Y+8	; 0x08
    364e:	99 85       	ldd	r25, Y+9	; 0x09
    3650:	9b 83       	std	Y+3, r25	; 0x03
    3652:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    365a:	ea 81       	ldd	r30, Y+2	; 0x02
    365c:	fb 81       	ldd	r31, Y+3	; 0x03
    365e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3660:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	88 23       	and	r24, r24
    3666:	c1 f0       	breq	.+48     	; 0x3698 <xQueueSemaphoreTake+0x6a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	81 50       	subi	r24, 0x01	; 1
    366c:	ea 81       	ldd	r30, Y+2	; 0x02
    366e:	fb 81       	ldd	r31, Y+3	; 0x03
    3670:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3672:	ea 81       	ldd	r30, Y+2	; 0x02
    3674:	fb 81       	ldd	r31, Y+3	; 0x03
    3676:	80 85       	ldd	r24, Z+8	; 0x08
    3678:	88 23       	and	r24, r24
    367a:	49 f0       	breq	.+18     	; 0x368e <xQueueSemaphoreTake+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	9b 81       	ldd	r25, Y+3	; 0x03
    3680:	08 96       	adiw	r24, 0x08	; 8
    3682:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    3686:	88 23       	and	r24, r24
    3688:	11 f0       	breq	.+4      	; 0x368e <xQueueSemaphoreTake+0x60>
					{
						queueYIELD_IF_USING_PREEMPTION();
    368a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    368e:	0f 90       	pop	r0
    3690:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	8c 87       	std	Y+12, r24	; 0x0c
    3696:	63 c0       	rjmp	.+198    	; 0x375e <xQueueSemaphoreTake+0x130>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3698:	8a 85       	ldd	r24, Y+10	; 0x0a
    369a:	9b 85       	ldd	r25, Y+11	; 0x0b
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	21 f4       	brne	.+8      	; 0x36a8 <xQueueSemaphoreTake+0x7a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    36a0:	0f 90       	pop	r0
    36a2:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    36a4:	1c 86       	std	Y+12, r1	; 0x0c
    36a6:	5b c0       	rjmp	.+182    	; 0x375e <xQueueSemaphoreTake+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
    36a8:	8c 81       	ldd	r24, Y+4	; 0x04
    36aa:	88 23       	and	r24, r24
    36ac:	31 f4       	brne	.+12     	; 0x36ba <xQueueSemaphoreTake+0x8c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    36ae:	ce 01       	movw	r24, r28
    36b0:	05 96       	adiw	r24, 0x05	; 5
    36b2:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    36ba:	0f 90       	pop	r0
    36bc:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    36be:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	0f 92       	push	r0
    36c8:	ea 81       	ldd	r30, Y+2	; 0x02
    36ca:	fb 81       	ldd	r31, Y+3	; 0x03
    36cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    36ce:	8f 3f       	cpi	r24, 0xFF	; 255
    36d0:	19 f4       	brne	.+6      	; 0x36d8 <xQueueSemaphoreTake+0xaa>
    36d2:	ea 81       	ldd	r30, Y+2	; 0x02
    36d4:	fb 81       	ldd	r31, Y+3	; 0x03
    36d6:	15 8e       	std	Z+29, r1	; 0x1d
    36d8:	ea 81       	ldd	r30, Y+2	; 0x02
    36da:	fb 81       	ldd	r31, Y+3	; 0x03
    36dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    36de:	8f 3f       	cpi	r24, 0xFF	; 255
    36e0:	19 f4       	brne	.+6      	; 0x36e8 <xQueueSemaphoreTake+0xba>
    36e2:	ea 81       	ldd	r30, Y+2	; 0x02
    36e4:	fb 81       	ldd	r31, Y+3	; 0x03
    36e6:	16 8e       	std	Z+30, r1	; 0x1e
    36e8:	0f 90       	pop	r0
    36ea:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    36ec:	ce 01       	movw	r24, r28
    36ee:	05 96       	adiw	r24, 0x05	; 5
    36f0:	9e 01       	movw	r18, r28
    36f2:	26 5f       	subi	r18, 0xF6	; 246
    36f4:	3f 4f       	sbci	r19, 0xFF	; 255
    36f6:	b9 01       	movw	r22, r18
    36f8:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <xTaskCheckForTimeOut>
    36fc:	88 23       	and	r24, r24
    36fe:	09 f5       	brne	.+66     	; 0x3742 <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	9b 81       	ldd	r25, Y+3	; 0x03
    3704:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <prvIsQueueEmpty>
    3708:	88 23       	and	r24, r24
    370a:	a1 f0       	breq	.+40     	; 0x3734 <xQueueSemaphoreTake+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	9b 81       	ldd	r25, Y+3	; 0x03
    3710:	41 96       	adiw	r24, 0x11	; 17
    3712:	2a 85       	ldd	r18, Y+10	; 0x0a
    3714:	3b 85       	ldd	r19, Y+11	; 0x0b
    3716:	b9 01       	movw	r22, r18
    3718:	0e 94 66 2d 	call	0x5acc	; 0x5acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    371c:	8a 81       	ldd	r24, Y+2	; 0x02
    371e:	9b 81       	ldd	r25, Y+3	; 0x03
    3720:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3724:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    3728:	88 23       	and	r24, r24
    372a:	09 f0       	breq	.+2      	; 0x372e <xQueueSemaphoreTake+0x100>
    372c:	93 cf       	rjmp	.-218    	; 0x3654 <xQueueSemaphoreTake+0x26>
				{
					portYIELD_WITHIN_API();
    372e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
    3732:	90 cf       	rjmp	.-224    	; 0x3654 <xQueueSemaphoreTake+0x26>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	9b 81       	ldd	r25, Y+3	; 0x03
    3738:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
    373c:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    3740:	89 cf       	rjmp	.-238    	; 0x3654 <xQueueSemaphoreTake+0x26>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    3742:	8a 81       	ldd	r24, Y+2	; 0x02
    3744:	9b 81       	ldd	r25, Y+3	; 0x03
    3746:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
    374a:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    374e:	8a 81       	ldd	r24, Y+2	; 0x02
    3750:	9b 81       	ldd	r25, Y+3	; 0x03
    3752:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <prvIsQueueEmpty>
    3756:	88 23       	and	r24, r24
    3758:	09 f4       	brne	.+2      	; 0x375c <xQueueSemaphoreTake+0x12e>
    375a:	7c cf       	rjmp	.-264    	; 0x3654 <xQueueSemaphoreTake+0x26>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    375c:	1c 86       	std	Y+12, r1	; 0x0c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    375e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    3760:	2c 96       	adiw	r28, 0x0c	; 12
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61
    376c:	cf 91       	pop	r28
    376e:	df 91       	pop	r29
    3770:	08 95       	ret

00003772 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    3772:	df 93       	push	r29
    3774:	cf 93       	push	r28
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	60 97       	sbiw	r28, 0x10	; 16
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	de bf       	out	0x3e, r29	; 62
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	cd bf       	out	0x3d, r28	; 61
    3786:	9b 87       	std	Y+11, r25	; 0x0b
    3788:	8a 87       	std	Y+10, r24	; 0x0a
    378a:	7d 87       	std	Y+13, r23	; 0x0d
    378c:	6c 87       	std	Y+12, r22	; 0x0c
    378e:	5f 87       	std	Y+15, r21	; 0x0f
    3790:	4e 87       	std	Y+14, r20	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE;
    3792:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    3794:	8a 85       	ldd	r24, Y+10	; 0x0a
    3796:	9b 85       	ldd	r25, Y+11	; 0x0b
    3798:	9b 83       	std	Y+3, r25	; 0x03
    379a:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    37a2:	ea 81       	ldd	r30, Y+2	; 0x02
    37a4:	fb 81       	ldd	r31, Y+3	; 0x03
    37a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    37a8:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	88 23       	and	r24, r24
    37ae:	31 f1       	breq	.+76     	; 0x37fc <xQueuePeek+0x8a>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    37b0:	ea 81       	ldd	r30, Y+2	; 0x02
    37b2:	fb 81       	ldd	r31, Y+3	; 0x03
    37b4:	86 81       	ldd	r24, Z+6	; 0x06
    37b6:	97 81       	ldd	r25, Z+7	; 0x07
    37b8:	9d 83       	std	Y+5, r25	; 0x05
    37ba:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	9b 81       	ldd	r25, Y+3	; 0x03
    37c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    37c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    37c4:	b9 01       	movw	r22, r18
    37c6:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    37ca:	ea 81       	ldd	r30, Y+2	; 0x02
    37cc:	fb 81       	ldd	r31, Y+3	; 0x03
    37ce:	8c 81       	ldd	r24, Y+4	; 0x04
    37d0:	9d 81       	ldd	r25, Y+5	; 0x05
    37d2:	97 83       	std	Z+7, r25	; 0x07
    37d4:	86 83       	std	Z+6, r24	; 0x06

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    37d6:	ea 81       	ldd	r30, Y+2	; 0x02
    37d8:	fb 81       	ldd	r31, Y+3	; 0x03
    37da:	81 89       	ldd	r24, Z+17	; 0x11
    37dc:	88 23       	and	r24, r24
    37de:	49 f0       	breq	.+18     	; 0x37f2 <xQueuePeek+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	9b 81       	ldd	r25, Y+3	; 0x03
    37e4:	41 96       	adiw	r24, 0x11	; 17
    37e6:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    37ea:	88 23       	and	r24, r24
    37ec:	11 f0       	breq	.+4      	; 0x37f2 <xQueuePeek+0x80>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    37ee:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    37f2:	0f 90       	pop	r0
    37f4:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	88 8b       	std	Y+16, r24	; 0x10
    37fa:	63 c0       	rjmp	.+198    	; 0x38c2 <xQueuePeek+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    37fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    37fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	21 f4       	brne	.+8      	; 0x380c <xQueuePeek+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3804:	0f 90       	pop	r0
    3806:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3808:	18 8a       	std	Y+16, r1	; 0x10
    380a:	5b c0       	rjmp	.+182    	; 0x38c2 <xQueuePeek+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    380c:	8e 81       	ldd	r24, Y+6	; 0x06
    380e:	88 23       	and	r24, r24
    3810:	31 f4       	brne	.+12     	; 0x381e <xQueuePeek+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    3812:	ce 01       	movw	r24, r28
    3814:	07 96       	adiw	r24, 0x07	; 7
    3816:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    381e:	0f 90       	pop	r0
    3820:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3822:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	0f 92       	push	r0
    382c:	ea 81       	ldd	r30, Y+2	; 0x02
    382e:	fb 81       	ldd	r31, Y+3	; 0x03
    3830:	85 8d       	ldd	r24, Z+29	; 0x1d
    3832:	8f 3f       	cpi	r24, 0xFF	; 255
    3834:	19 f4       	brne	.+6      	; 0x383c <xQueuePeek+0xca>
    3836:	ea 81       	ldd	r30, Y+2	; 0x02
    3838:	fb 81       	ldd	r31, Y+3	; 0x03
    383a:	15 8e       	std	Z+29, r1	; 0x1d
    383c:	ea 81       	ldd	r30, Y+2	; 0x02
    383e:	fb 81       	ldd	r31, Y+3	; 0x03
    3840:	86 8d       	ldd	r24, Z+30	; 0x1e
    3842:	8f 3f       	cpi	r24, 0xFF	; 255
    3844:	19 f4       	brne	.+6      	; 0x384c <xQueuePeek+0xda>
    3846:	ea 81       	ldd	r30, Y+2	; 0x02
    3848:	fb 81       	ldd	r31, Y+3	; 0x03
    384a:	16 8e       	std	Z+30, r1	; 0x1e
    384c:	0f 90       	pop	r0
    384e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3850:	ce 01       	movw	r24, r28
    3852:	07 96       	adiw	r24, 0x07	; 7
    3854:	9e 01       	movw	r18, r28
    3856:	22 5f       	subi	r18, 0xF2	; 242
    3858:	3f 4f       	sbci	r19, 0xFF	; 255
    385a:	b9 01       	movw	r22, r18
    385c:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <xTaskCheckForTimeOut>
    3860:	88 23       	and	r24, r24
    3862:	09 f5       	brne	.+66     	; 0x38a6 <xQueuePeek+0x134>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3864:	8a 81       	ldd	r24, Y+2	; 0x02
    3866:	9b 81       	ldd	r25, Y+3	; 0x03
    3868:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <prvIsQueueEmpty>
    386c:	88 23       	and	r24, r24
    386e:	a1 f0       	breq	.+40     	; 0x3898 <xQueuePeek+0x126>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
    3872:	9b 81       	ldd	r25, Y+3	; 0x03
    3874:	41 96       	adiw	r24, 0x11	; 17
    3876:	2e 85       	ldd	r18, Y+14	; 0x0e
    3878:	3f 85       	ldd	r19, Y+15	; 0x0f
    387a:	b9 01       	movw	r22, r18
    387c:	0e 94 66 2d 	call	0x5acc	; 0x5acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3880:	8a 81       	ldd	r24, Y+2	; 0x02
    3882:	9b 81       	ldd	r25, Y+3	; 0x03
    3884:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3888:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    388c:	88 23       	and	r24, r24
    388e:	09 f0       	breq	.+2      	; 0x3892 <xQueuePeek+0x120>
    3890:	85 cf       	rjmp	.-246    	; 0x379c <xQueuePeek+0x2a>
				{
					portYIELD_WITHIN_API();
    3892:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
    3896:	82 cf       	rjmp	.-252    	; 0x379c <xQueuePeek+0x2a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    3898:	8a 81       	ldd	r24, Y+2	; 0x02
    389a:	9b 81       	ldd	r25, Y+3	; 0x03
    389c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
    38a0:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    38a4:	7b cf       	rjmp	.-266    	; 0x379c <xQueuePeek+0x2a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	9b 81       	ldd	r25, Y+3	; 0x03
    38aa:	0e 94 56 1e 	call	0x3cac	; 0x3cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
    38ae:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	9b 81       	ldd	r25, Y+3	; 0x03
    38b6:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <prvIsQueueEmpty>
    38ba:	88 23       	and	r24, r24
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <xQueuePeek+0x14e>
    38be:	6e cf       	rjmp	.-292    	; 0x379c <xQueuePeek+0x2a>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    38c0:	18 8a       	std	Y+16, r1	; 0x10
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    38c2:	88 89       	ldd	r24, Y+16	; 0x10
}
    38c4:	60 96       	adiw	r28, 0x10	; 16
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	cd bf       	out	0x3d, r28	; 61
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
    38de:	2c 97       	sbiw	r28, 0x0c	; 12
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
    38ea:	98 87       	std	Y+8, r25	; 0x08
    38ec:	8f 83       	std	Y+7, r24	; 0x07
    38ee:	7a 87       	std	Y+10, r23	; 0x0a
    38f0:	69 87       	std	Y+9, r22	; 0x09
    38f2:	5c 87       	std	Y+12, r21	; 0x0c
    38f4:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    38f6:	8f 81       	ldd	r24, Y+7	; 0x07
    38f8:	98 85       	ldd	r25, Y+8	; 0x08
    38fa:	9c 83       	std	Y+4, r25	; 0x04
    38fc:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    38fe:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3900:	eb 81       	ldd	r30, Y+3	; 0x03
    3902:	fc 81       	ldd	r31, Y+4	; 0x04
    3904:	82 8d       	ldd	r24, Z+26	; 0x1a
    3906:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3908:	8a 81       	ldd	r24, Y+2	; 0x02
    390a:	88 23       	and	r24, r24
    390c:	81 f1       	breq	.+96     	; 0x396e <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    390e:	eb 81       	ldd	r30, Y+3	; 0x03
    3910:	fc 81       	ldd	r31, Y+4	; 0x04
    3912:	85 8d       	ldd	r24, Z+29	; 0x1d
    3914:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3916:	8b 81       	ldd	r24, Y+3	; 0x03
    3918:	9c 81       	ldd	r25, Y+4	; 0x04
    391a:	29 85       	ldd	r18, Y+9	; 0x09
    391c:	3a 85       	ldd	r19, Y+10	; 0x0a
    391e:	b9 01       	movw	r22, r18
    3920:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	81 50       	subi	r24, 0x01	; 1
    3928:	eb 81       	ldd	r30, Y+3	; 0x03
    392a:	fc 81       	ldd	r31, Y+4	; 0x04
    392c:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	8f 3f       	cpi	r24, 0xFF	; 255
    3932:	a9 f4       	brne	.+42     	; 0x395e <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3934:	eb 81       	ldd	r30, Y+3	; 0x03
    3936:	fc 81       	ldd	r31, Y+4	; 0x04
    3938:	80 85       	ldd	r24, Z+8	; 0x08
    393a:	88 23       	and	r24, r24
    393c:	a9 f0       	breq	.+42     	; 0x3968 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    393e:	8b 81       	ldd	r24, Y+3	; 0x03
    3940:	9c 81       	ldd	r25, Y+4	; 0x04
    3942:	08 96       	adiw	r24, 0x08	; 8
    3944:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    3948:	88 23       	and	r24, r24
    394a:	71 f0       	breq	.+28     	; 0x3968 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    394c:	8b 85       	ldd	r24, Y+11	; 0x0b
    394e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	51 f0       	breq	.+20     	; 0x3968 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    3954:	eb 85       	ldd	r30, Y+11	; 0x0b
    3956:	fc 85       	ldd	r31, Y+12	; 0x0c
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	80 83       	st	Z, r24
    395c:	05 c0       	rjmp	.+10     	; 0x3968 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	8f 5f       	subi	r24, 0xFF	; 255
    3962:	eb 81       	ldd	r30, Y+3	; 0x03
    3964:	fc 81       	ldd	r31, Y+4	; 0x04
    3966:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	8e 83       	std	Y+6, r24	; 0x06
    396c:	01 c0       	rjmp	.+2      	; 0x3970 <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    396e:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3970:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3972:	2c 96       	adiw	r28, 0x0c	; 12
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	08 95       	ret

00003984 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
    398c:	2a 97       	sbiw	r28, 0x0a	; 10
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	98 87       	std	Y+8, r25	; 0x08
    399a:	8f 83       	std	Y+7, r24	; 0x07
    399c:	7a 87       	std	Y+10, r23	; 0x0a
    399e:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    39a0:	8f 81       	ldd	r24, Y+7	; 0x07
    39a2:	98 85       	ldd	r25, Y+8	; 0x08
    39a4:	9a 83       	std	Y+2, r25	; 0x02
    39a6:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    39a8:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    39aa:	e9 81       	ldd	r30, Y+1	; 0x01
    39ac:	fa 81       	ldd	r31, Y+2	; 0x02
    39ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    39b0:	88 23       	and	r24, r24
    39b2:	b1 f0       	breq	.+44     	; 0x39e0 <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    39b4:	e9 81       	ldd	r30, Y+1	; 0x01
    39b6:	fa 81       	ldd	r31, Y+2	; 0x02
    39b8:	86 81       	ldd	r24, Z+6	; 0x06
    39ba:	97 81       	ldd	r25, Z+7	; 0x07
    39bc:	9c 83       	std	Y+4, r25	; 0x04
    39be:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	9a 81       	ldd	r25, Y+2	; 0x02
    39c4:	29 85       	ldd	r18, Y+9	; 0x09
    39c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    39c8:	b9 01       	movw	r22, r18
    39ca:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    39ce:	e9 81       	ldd	r30, Y+1	; 0x01
    39d0:	fa 81       	ldd	r31, Y+2	; 0x02
    39d2:	8b 81       	ldd	r24, Y+3	; 0x03
    39d4:	9c 81       	ldd	r25, Y+4	; 0x04
    39d6:	97 83       	std	Z+7, r25	; 0x07
    39d8:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	8e 83       	std	Y+6, r24	; 0x06
    39de:	01 c0       	rjmp	.+2      	; 0x39e2 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    39e0:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    39e2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    39e4:	2a 96       	adiw	r28, 0x0a	; 10
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	08 95       	ret

000039f6 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	00 d0       	rcall	.+0      	; 0x39fc <uxQueueMessagesWaiting+0x6>
    39fc:	0f 92       	push	r0
    39fe:	cd b7       	in	r28, 0x3d	; 61
    3a00:	de b7       	in	r29, 0x3e	; 62
    3a02:	9b 83       	std	Y+3, r25	; 0x03
    3a04:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	f8 94       	cli
    3a0a:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    3a0c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a0e:	fb 81       	ldd	r31, Y+3	; 0x03
    3a10:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a12:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3a14:	0f 90       	pop	r0
    3a16:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	cf 91       	pop	r28
    3a22:	df 91       	pop	r29
    3a24:	08 95       	ret

00003a26 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    3a26:	df 93       	push	r29
    3a28:	cf 93       	push	r28
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <uxQueueSpacesAvailable+0x6>
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <uxQueueSpacesAvailable+0x8>
    3a2e:	0f 92       	push	r0
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	9d 83       	std	Y+5, r25	; 0x05
    3a36:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    3a38:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a3c:	9a 83       	std	Y+2, r25	; 0x02
    3a3e:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    3a46:	e9 81       	ldd	r30, Y+1	; 0x01
    3a48:	fa 81       	ldd	r31, Y+2	; 0x02
    3a4a:	93 8d       	ldd	r25, Z+27	; 0x1b
    3a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a50:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a52:	29 2f       	mov	r18, r25
    3a54:	28 1b       	sub	r18, r24
    3a56:	82 2f       	mov	r24, r18
    3a58:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    3a5a:	0f 90       	pop	r0
    3a5c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	cf 91       	pop	r28
    3a6c:	df 91       	pop	r29
    3a6e:	08 95       	ret

00003a70 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	00 d0       	rcall	.+0      	; 0x3a76 <uxQueueMessagesWaitingFromISR+0x6>
    3a76:	00 d0       	rcall	.+0      	; 0x3a78 <uxQueueMessagesWaitingFromISR+0x8>
    3a78:	0f 92       	push	r0
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
    3a7e:	9d 83       	std	Y+5, r25	; 0x05
    3a80:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    3a82:	8c 81       	ldd	r24, Y+4	; 0x04
    3a84:	9d 81       	ldd	r25, Y+5	; 0x05
    3a86:	9a 83       	std	Y+2, r25	; 0x02
    3a88:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
    3a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a8c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a90:	8b 83       	std	Y+3, r24	; 0x03

	return uxReturn;
    3a92:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	0f 90       	pop	r0
    3a9e:	cf 91       	pop	r28
    3aa0:	df 91       	pop	r29
    3aa2:	08 95       	ret

00003aa4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	00 d0       	rcall	.+0      	; 0x3aaa <vQueueDelete+0x6>
    3aaa:	00 d0       	rcall	.+0      	; 0x3aac <vQueueDelete+0x8>
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
    3ab0:	9c 83       	std	Y+4, r25	; 0x04
    3ab2:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = xQueue;
    3ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab8:	9a 83       	std	Y+2, r25	; 0x02
    3aba:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac0:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	08 95       	ret

00003ad2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	27 97       	sbiw	r28, 0x07	; 7
    3adc:	0f b6       	in	r0, 0x3f	; 63
    3ade:	f8 94       	cli
    3ae0:	de bf       	out	0x3e, r29	; 62
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	cd bf       	out	0x3d, r28	; 61
    3ae6:	9c 83       	std	Y+4, r25	; 0x04
    3ae8:	8b 83       	std	Y+3, r24	; 0x03
    3aea:	7e 83       	std	Y+6, r23	; 0x06
    3aec:	6d 83       	std	Y+5, r22	; 0x05
    3aee:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    3af0:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3af2:	eb 81       	ldd	r30, Y+3	; 0x03
    3af4:	fc 81       	ldd	r31, Y+4	; 0x04
    3af6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3af8:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3afa:	eb 81       	ldd	r30, Y+3	; 0x03
    3afc:	fc 81       	ldd	r31, Y+4	; 0x04
    3afe:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b00:	88 23       	and	r24, r24
    3b02:	09 f4       	brne	.+2      	; 0x3b06 <prvCopyDataToQueue+0x34>
    3b04:	7d c0       	rjmp	.+250    	; 0x3c00 <prvCopyDataToQueue+0x12e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    3b06:	8f 81       	ldd	r24, Y+7	; 0x07
    3b08:	88 23       	and	r24, r24
    3b0a:	99 f5       	brne	.+102    	; 0x3b72 <prvCopyDataToQueue+0xa0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    3b0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b10:	62 81       	ldd	r22, Z+2	; 0x02
    3b12:	73 81       	ldd	r23, Z+3	; 0x03
    3b14:	eb 81       	ldd	r30, Y+3	; 0x03
    3b16:	fc 81       	ldd	r31, Y+4	; 0x04
    3b18:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b1a:	48 2f       	mov	r20, r24
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	2d 81       	ldd	r18, Y+5	; 0x05
    3b20:	3e 81       	ldd	r19, Y+6	; 0x06
    3b22:	cb 01       	movw	r24, r22
    3b24:	b9 01       	movw	r22, r18
    3b26:	0e 94 7d 34 	call	0x68fa	; 0x68fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    3b2a:	eb 81       	ldd	r30, Y+3	; 0x03
    3b2c:	fc 81       	ldd	r31, Y+4	; 0x04
    3b2e:	22 81       	ldd	r18, Z+2	; 0x02
    3b30:	33 81       	ldd	r19, Z+3	; 0x03
    3b32:	eb 81       	ldd	r30, Y+3	; 0x03
    3b34:	fc 81       	ldd	r31, Y+4	; 0x04
    3b36:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b38:	88 2f       	mov	r24, r24
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	82 0f       	add	r24, r18
    3b3e:	93 1f       	adc	r25, r19
    3b40:	eb 81       	ldd	r30, Y+3	; 0x03
    3b42:	fc 81       	ldd	r31, Y+4	; 0x04
    3b44:	93 83       	std	Z+3, r25	; 0x03
    3b46:	82 83       	std	Z+2, r24	; 0x02
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3b48:	eb 81       	ldd	r30, Y+3	; 0x03
    3b4a:	fc 81       	ldd	r31, Y+4	; 0x04
    3b4c:	22 81       	ldd	r18, Z+2	; 0x02
    3b4e:	33 81       	ldd	r19, Z+3	; 0x03
    3b50:	eb 81       	ldd	r30, Y+3	; 0x03
    3b52:	fc 81       	ldd	r31, Y+4	; 0x04
    3b54:	84 81       	ldd	r24, Z+4	; 0x04
    3b56:	95 81       	ldd	r25, Z+5	; 0x05
    3b58:	28 17       	cp	r18, r24
    3b5a:	39 07       	cpc	r19, r25
    3b5c:	08 f4       	brcc	.+2      	; 0x3b60 <prvCopyDataToQueue+0x8e>
    3b5e:	50 c0       	rjmp	.+160    	; 0x3c00 <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3b60:	eb 81       	ldd	r30, Y+3	; 0x03
    3b62:	fc 81       	ldd	r31, Y+4	; 0x04
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	eb 81       	ldd	r30, Y+3	; 0x03
    3b6a:	fc 81       	ldd	r31, Y+4	; 0x04
    3b6c:	93 83       	std	Z+3, r25	; 0x03
    3b6e:	82 83       	std	Z+2, r24	; 0x02
    3b70:	47 c0       	rjmp	.+142    	; 0x3c00 <prvCopyDataToQueue+0x12e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    3b72:	eb 81       	ldd	r30, Y+3	; 0x03
    3b74:	fc 81       	ldd	r31, Y+4	; 0x04
    3b76:	66 81       	ldd	r22, Z+6	; 0x06
    3b78:	77 81       	ldd	r23, Z+7	; 0x07
    3b7a:	eb 81       	ldd	r30, Y+3	; 0x03
    3b7c:	fc 81       	ldd	r31, Y+4	; 0x04
    3b7e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b80:	48 2f       	mov	r20, r24
    3b82:	50 e0       	ldi	r21, 0x00	; 0
    3b84:	2d 81       	ldd	r18, Y+5	; 0x05
    3b86:	3e 81       	ldd	r19, Y+6	; 0x06
    3b88:	cb 01       	movw	r24, r22
    3b8a:	b9 01       	movw	r22, r18
    3b8c:	0e 94 7d 34 	call	0x68fa	; 0x68fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    3b90:	eb 81       	ldd	r30, Y+3	; 0x03
    3b92:	fc 81       	ldd	r31, Y+4	; 0x04
    3b94:	26 81       	ldd	r18, Z+6	; 0x06
    3b96:	37 81       	ldd	r19, Z+7	; 0x07
    3b98:	eb 81       	ldd	r30, Y+3	; 0x03
    3b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    3b9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b9e:	88 2f       	mov	r24, r24
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	90 95       	com	r25
    3ba4:	81 95       	neg	r24
    3ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba8:	82 0f       	add	r24, r18
    3baa:	93 1f       	adc	r25, r19
    3bac:	eb 81       	ldd	r30, Y+3	; 0x03
    3bae:	fc 81       	ldd	r31, Y+4	; 0x04
    3bb0:	97 83       	std	Z+7, r25	; 0x07
    3bb2:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3bb4:	eb 81       	ldd	r30, Y+3	; 0x03
    3bb6:	fc 81       	ldd	r31, Y+4	; 0x04
    3bb8:	26 81       	ldd	r18, Z+6	; 0x06
    3bba:	37 81       	ldd	r19, Z+7	; 0x07
    3bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    3bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    3bc0:	80 81       	ld	r24, Z
    3bc2:	91 81       	ldd	r25, Z+1	; 0x01
    3bc4:	28 17       	cp	r18, r24
    3bc6:	39 07       	cpc	r19, r25
    3bc8:	90 f4       	brcc	.+36     	; 0x3bee <prvCopyDataToQueue+0x11c>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    3bca:	eb 81       	ldd	r30, Y+3	; 0x03
    3bcc:	fc 81       	ldd	r31, Y+4	; 0x04
    3bce:	24 81       	ldd	r18, Z+4	; 0x04
    3bd0:	35 81       	ldd	r19, Z+5	; 0x05
    3bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    3bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    3bd6:	84 8d       	ldd	r24, Z+28	; 0x1c
    3bd8:	88 2f       	mov	r24, r24
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	90 95       	com	r25
    3bde:	81 95       	neg	r24
    3be0:	9f 4f       	sbci	r25, 0xFF	; 255
    3be2:	82 0f       	add	r24, r18
    3be4:	93 1f       	adc	r25, r19
    3be6:	eb 81       	ldd	r30, Y+3	; 0x03
    3be8:	fc 81       	ldd	r31, Y+4	; 0x04
    3bea:	97 83       	std	Z+7, r25	; 0x07
    3bec:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    3bee:	8f 81       	ldd	r24, Y+7	; 0x07
    3bf0:	82 30       	cpi	r24, 0x02	; 2
    3bf2:	31 f4       	brne	.+12     	; 0x3c00 <prvCopyDataToQueue+0x12e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3bf4:	89 81       	ldd	r24, Y+1	; 0x01
    3bf6:	88 23       	and	r24, r24
    3bf8:	19 f0       	breq	.+6      	; 0x3c00 <prvCopyDataToQueue+0x12e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	81 50       	subi	r24, 0x01	; 1
    3bfe:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	8f 5f       	subi	r24, 0xFF	; 255
    3c04:	eb 81       	ldd	r30, Y+3	; 0x03
    3c06:	fc 81       	ldd	r31, Y+4	; 0x04
    3c08:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    3c0a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3c0c:	27 96       	adiw	r28, 0x07	; 7
    3c0e:	0f b6       	in	r0, 0x3f	; 63
    3c10:	f8 94       	cli
    3c12:	de bf       	out	0x3e, r29	; 62
    3c14:	0f be       	out	0x3f, r0	; 63
    3c16:	cd bf       	out	0x3d, r28	; 61
    3c18:	cf 91       	pop	r28
    3c1a:	df 91       	pop	r29
    3c1c:	08 95       	ret

00003c1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    3c1e:	df 93       	push	r29
    3c20:	cf 93       	push	r28
    3c22:	00 d0       	rcall	.+0      	; 0x3c24 <prvCopyDataFromQueue+0x6>
    3c24:	00 d0       	rcall	.+0      	; 0x3c26 <prvCopyDataFromQueue+0x8>
    3c26:	cd b7       	in	r28, 0x3d	; 61
    3c28:	de b7       	in	r29, 0x3e	; 62
    3c2a:	9a 83       	std	Y+2, r25	; 0x02
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	7c 83       	std	Y+4, r23	; 0x04
    3c30:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3c32:	e9 81       	ldd	r30, Y+1	; 0x01
    3c34:	fa 81       	ldd	r31, Y+2	; 0x02
    3c36:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c38:	88 23       	and	r24, r24
    3c3a:	89 f1       	breq	.+98     	; 0x3c9e <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    3c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c40:	26 81       	ldd	r18, Z+6	; 0x06
    3c42:	37 81       	ldd	r19, Z+7	; 0x07
    3c44:	e9 81       	ldd	r30, Y+1	; 0x01
    3c46:	fa 81       	ldd	r31, Y+2	; 0x02
    3c48:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c4a:	88 2f       	mov	r24, r24
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	82 0f       	add	r24, r18
    3c50:	93 1f       	adc	r25, r19
    3c52:	e9 81       	ldd	r30, Y+1	; 0x01
    3c54:	fa 81       	ldd	r31, Y+2	; 0x02
    3c56:	97 83       	std	Z+7, r25	; 0x07
    3c58:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c5e:	26 81       	ldd	r18, Z+6	; 0x06
    3c60:	37 81       	ldd	r19, Z+7	; 0x07
    3c62:	e9 81       	ldd	r30, Y+1	; 0x01
    3c64:	fa 81       	ldd	r31, Y+2	; 0x02
    3c66:	84 81       	ldd	r24, Z+4	; 0x04
    3c68:	95 81       	ldd	r25, Z+5	; 0x05
    3c6a:	28 17       	cp	r18, r24
    3c6c:	39 07       	cpc	r19, r25
    3c6e:	40 f0       	brcs	.+16     	; 0x3c80 <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    3c70:	e9 81       	ldd	r30, Y+1	; 0x01
    3c72:	fa 81       	ldd	r31, Y+2	; 0x02
    3c74:	80 81       	ld	r24, Z
    3c76:	91 81       	ldd	r25, Z+1	; 0x01
    3c78:	e9 81       	ldd	r30, Y+1	; 0x01
    3c7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c7c:	97 83       	std	Z+7, r25	; 0x07
    3c7e:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    3c80:	e9 81       	ldd	r30, Y+1	; 0x01
    3c82:	fa 81       	ldd	r31, Y+2	; 0x02
    3c84:	46 81       	ldd	r20, Z+6	; 0x06
    3c86:	57 81       	ldd	r21, Z+7	; 0x07
    3c88:	e9 81       	ldd	r30, Y+1	; 0x01
    3c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c8c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c8e:	28 2f       	mov	r18, r24
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	9c 81       	ldd	r25, Y+4	; 0x04
    3c96:	ba 01       	movw	r22, r20
    3c98:	a9 01       	movw	r20, r18
    3c9a:	0e 94 7d 34 	call	0x68fa	; 0x68fa <memcpy>
	}
}
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	08 95       	ret

00003cac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    3cac:	df 93       	push	r29
    3cae:	cf 93       	push	r28
    3cb0:	00 d0       	rcall	.+0      	; 0x3cb2 <prvUnlockQueue+0x6>
    3cb2:	00 d0       	rcall	.+0      	; 0x3cb4 <prvUnlockQueue+0x8>
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	9c 83       	std	Y+4, r25	; 0x04
    3cba:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    3cc2:	eb 81       	ldd	r30, Y+3	; 0x03
    3cc4:	fc 81       	ldd	r31, Y+4	; 0x04
    3cc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cc8:	8a 83       	std	Y+2, r24	; 0x02
    3cca:	11 c0       	rjmp	.+34     	; 0x3cee <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3ccc:	eb 81       	ldd	r30, Y+3	; 0x03
    3cce:	fc 81       	ldd	r31, Y+4	; 0x04
    3cd0:	81 89       	ldd	r24, Z+17	; 0x11
    3cd2:	88 23       	and	r24, r24
    3cd4:	79 f0       	breq	.+30     	; 0x3cf4 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cda:	41 96       	adiw	r24, 0x11	; 17
    3cdc:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    3ce0:	88 23       	and	r24, r24
    3ce2:	11 f0       	breq	.+4      	; 0x3ce8 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    3ce4:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	81 50       	subi	r24, 0x01	; 1
    3cec:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    3cee:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf0:	18 16       	cp	r1, r24
    3cf2:	64 f3       	brlt	.-40     	; 0x3ccc <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    3cf4:	eb 81       	ldd	r30, Y+3	; 0x03
    3cf6:	fc 81       	ldd	r31, Y+4	; 0x04
    3cf8:	8f ef       	ldi	r24, 0xFF	; 255
    3cfa:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3cfc:	0f 90       	pop	r0
    3cfe:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    3d06:	eb 81       	ldd	r30, Y+3	; 0x03
    3d08:	fc 81       	ldd	r31, Y+4	; 0x04
    3d0a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d0c:	89 83       	std	Y+1, r24	; 0x01
    3d0e:	11 c0       	rjmp	.+34     	; 0x3d32 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d10:	eb 81       	ldd	r30, Y+3	; 0x03
    3d12:	fc 81       	ldd	r31, Y+4	; 0x04
    3d14:	80 85       	ldd	r24, Z+8	; 0x08
    3d16:	88 23       	and	r24, r24
    3d18:	79 f0       	breq	.+30     	; 0x3d38 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1e:	08 96       	adiw	r24, 0x08	; 8
    3d20:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskRemoveFromEventList>
    3d24:	88 23       	and	r24, r24
    3d26:	11 f0       	breq	.+4      	; 0x3d2c <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    3d28:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	81 50       	subi	r24, 0x01	; 1
    3d30:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
    3d34:	18 16       	cp	r1, r24
    3d36:	64 f3       	brlt	.-40     	; 0x3d10 <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    3d38:	eb 81       	ldd	r30, Y+3	; 0x03
    3d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d3c:	8f ef       	ldi	r24, 0xFF	; 255
    3d3e:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3d40:	0f 90       	pop	r0
    3d42:	0f be       	out	0x3f, r0	; 63
}
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	cf 91       	pop	r28
    3d4e:	df 91       	pop	r29
    3d50:	08 95       	ret

00003d52 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3d52:	df 93       	push	r29
    3d54:	cf 93       	push	r28
    3d56:	00 d0       	rcall	.+0      	; 0x3d58 <prvIsQueueEmpty+0x6>
    3d58:	0f 92       	push	r0
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	9b 83       	std	Y+3, r25	; 0x03
    3d60:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3d68:	ea 81       	ldd	r30, Y+2	; 0x02
    3d6a:	fb 81       	ldd	r31, Y+3	; 0x03
    3d6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d6e:	88 23       	and	r24, r24
    3d70:	19 f4       	brne	.+6      	; 0x3d78 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	01 c0       	rjmp	.+2      	; 0x3d7a <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    3d78:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3d7a:	0f 90       	pop	r0
    3d7c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	cf 91       	pop	r28
    3d88:	df 91       	pop	r29
    3d8a:	08 95       	ret

00003d8c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    3d8c:	df 93       	push	r29
    3d8e:	cf 93       	push	r28
    3d90:	00 d0       	rcall	.+0      	; 0x3d92 <xQueueIsQueueEmptyFromISR+0x6>
    3d92:	00 d0       	rcall	.+0      	; 0x3d94 <xQueueIsQueueEmptyFromISR+0x8>
    3d94:	0f 92       	push	r0
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	9d 83       	std	Y+5, r25	; 0x05
    3d9c:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    3d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3da0:	9d 81       	ldd	r25, Y+5	; 0x05
    3da2:	9a 83       	std	Y+2, r25	; 0x02
    3da4:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    3da6:	e9 81       	ldd	r30, Y+1	; 0x01
    3da8:	fa 81       	ldd	r31, Y+2	; 0x02
    3daa:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dac:	88 23       	and	r24, r24
    3dae:	19 f4       	brne	.+6      	; 0x3db6 <xQueueIsQueueEmptyFromISR+0x2a>
	{
		xReturn = pdTRUE;
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	8b 83       	std	Y+3, r24	; 0x03
    3db4:	01 c0       	rjmp	.+2      	; 0x3db8 <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    3db6:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <prvIsQueueFull+0x6>
    3dd0:	0f 92       	push	r0
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	9b 83       	std	Y+3, r25	; 0x03
    3dd8:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3de0:	ea 81       	ldd	r30, Y+2	; 0x02
    3de2:	fb 81       	ldd	r31, Y+3	; 0x03
    3de4:	92 8d       	ldd	r25, Z+26	; 0x1a
    3de6:	ea 81       	ldd	r30, Y+2	; 0x02
    3de8:	fb 81       	ldd	r31, Y+3	; 0x03
    3dea:	83 8d       	ldd	r24, Z+27	; 0x1b
    3dec:	98 17       	cp	r25, r24
    3dee:	19 f4       	brne	.+6      	; 0x3df6 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	89 83       	std	Y+1, r24	; 0x01
    3df4:	01 c0       	rjmp	.+2      	; 0x3df8 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    3df6:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3df8:	0f 90       	pop	r0
    3dfa:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	cf 91       	pop	r28
    3e06:	df 91       	pop	r29
    3e08:	08 95       	ret

00003e0a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    3e0a:	df 93       	push	r29
    3e0c:	cf 93       	push	r28
    3e0e:	00 d0       	rcall	.+0      	; 0x3e10 <xQueueIsQueueFullFromISR+0x6>
    3e10:	00 d0       	rcall	.+0      	; 0x3e12 <xQueueIsQueueFullFromISR+0x8>
    3e12:	0f 92       	push	r0
    3e14:	cd b7       	in	r28, 0x3d	; 61
    3e16:	de b7       	in	r29, 0x3e	; 62
    3e18:	9d 83       	std	Y+5, r25	; 0x05
    3e1a:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    3e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e20:	9a 83       	std	Y+2, r25	; 0x02
    3e22:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3e24:	e9 81       	ldd	r30, Y+1	; 0x01
    3e26:	fa 81       	ldd	r31, Y+2	; 0x02
    3e28:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e2e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3e30:	98 17       	cp	r25, r24
    3e32:	19 f4       	brne	.+6      	; 0x3e3a <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	8b 83       	std	Y+3, r24	; 0x03
    3e38:	01 c0       	rjmp	.+2      	; 0x3e3c <xQueueIsQueueFullFromISR+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    3e3a:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	0f 90       	pop	r0
    3e48:	cf 91       	pop	r28
    3e4a:	df 91       	pop	r29
    3e4c:	08 95       	ret

00003e4e <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
    3e4e:	0f 93       	push	r16
    3e50:	df 93       	push	r29
    3e52:	cf 93       	push	r28
    3e54:	cd b7       	in	r28, 0x3d	; 61
    3e56:	de b7       	in	r29, 0x3e	; 62
    3e58:	28 97       	sbiw	r28, 0x08	; 8
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	9d 83       	std	Y+5, r25	; 0x05
    3e66:	8c 83       	std	Y+4, r24	; 0x04
    3e68:	7f 83       	std	Y+7, r23	; 0x07
    3e6a:	6e 83       	std	Y+6, r22	; 0x06
    3e6c:	48 87       	std	Y+8, r20	; 0x08

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
    3e6e:	88 85       	ldd	r24, Y+8	; 0x08
    3e70:	81 30       	cpi	r24, 0x01	; 1
    3e72:	19 f4       	brne	.+6      	; 0x3e7a <xStreamBufferGenericCreate+0x2c>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	89 83       	std	Y+1, r24	; 0x01
    3e78:	01 c0       	rjmp	.+2      	; 0x3e7c <xStreamBufferGenericCreate+0x2e>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
    3e7a:	19 82       	std	Y+1, r1	; 0x01
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
    3e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	21 f4       	brne	.+8      	; 0x3e8c <xStreamBufferGenericCreate+0x3e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	9f 83       	std	Y+7, r25	; 0x07
    3e8a:	8e 83       	std	Y+6, r24	; 0x06
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
    3e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e90:	01 96       	adiw	r24, 0x01	; 1
    3e92:	9d 83       	std	Y+5, r25	; 0x05
    3e94:	8c 83       	std	Y+4, r24	; 0x04
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
    3e96:	8c 81       	ldd	r24, Y+4	; 0x04
    3e98:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9a:	0f 96       	adiw	r24, 0x0f	; 15
    3e9c:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    3ea0:	9b 83       	std	Y+3, r25	; 0x03
    3ea2:	8a 83       	std	Y+2, r24	; 0x02

		if( pucAllocatedMemory != NULL )
    3ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea8:	00 97       	sbiw	r24, 0x00	; 0
    3eaa:	89 f0       	breq	.+34     	; 0x3ece <xStreamBufferGenericCreate+0x80>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
    3eac:	6a 81       	ldd	r22, Y+2	; 0x02
    3eae:	7b 81       	ldd	r23, Y+3	; 0x03
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb4:	9c 01       	movw	r18, r24
    3eb6:	21 5f       	subi	r18, 0xF1	; 241
    3eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eba:	4c 81       	ldd	r20, Y+4	; 0x04
    3ebc:	5d 81       	ldd	r21, Y+5	; 0x05
    3ebe:	ee 81       	ldd	r30, Y+6	; 0x06
    3ec0:	ff 81       	ldd	r31, Y+7	; 0x07
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	b9 01       	movw	r22, r18
    3ec6:	9f 01       	movw	r18, r30
    3ec8:	09 81       	ldd	r16, Y+1	; 0x01
    3eca:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
    3ece:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed0:	9b 81       	ldd	r25, Y+3	; 0x03
	}
    3ed2:	28 96       	adiw	r28, 0x08	; 8
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	f8 94       	cli
    3ed8:	de bf       	out	0x3e, r29	; 62
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	cf 91       	pop	r28
    3ee0:	df 91       	pop	r29
    3ee2:	0f 91       	pop	r16
    3ee4:	08 95       	ret

00003ee6 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
    3ee6:	df 93       	push	r29
    3ee8:	cf 93       	push	r28
    3eea:	00 d0       	rcall	.+0      	; 0x3eec <vStreamBufferDelete+0x6>
    3eec:	00 d0       	rcall	.+0      	; 0x3eee <vStreamBufferDelete+0x8>
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	9c 83       	std	Y+4, r25	; 0x04
    3ef4:	8b 83       	std	Y+3, r24	; 0x03
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
    3ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    3efa:	9a 83       	std	Y+2, r25	; 0x02
    3efc:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    3efe:	e9 81       	ldd	r30, Y+1	; 0x01
    3f00:	fa 81       	ldd	r31, Y+2	; 0x02
    3f02:	86 85       	ldd	r24, Z+14	; 0x0e
    3f04:	88 2f       	mov	r24, r24
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	82 70       	andi	r24, 0x02	; 2
    3f0a:	90 70       	andi	r25, 0x00	; 0
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	29 f4       	brne	.+10     	; 0x3f1a <vStreamBufferDelete+0x34>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
    3f12:	9a 81       	ldd	r25, Y+2	; 0x02
    3f14:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
    3f18:	08 c0       	rjmp	.+16     	; 0x3f2a <vStreamBufferDelete+0x44>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    3f1a:	89 81       	ldd	r24, Y+1	; 0x01
    3f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1e:	60 e0       	ldi	r22, 0x00	; 0
    3f20:	70 e0       	ldi	r23, 0x00	; 0
    3f22:	4f e0       	ldi	r20, 0x0F	; 15
    3f24:	50 e0       	ldi	r21, 0x00	; 0
    3f26:	0e 94 86 34 	call	0x690c	; 0x690c <memset>
	}
}
    3f2a:	0f 90       	pop	r0
    3f2c:	0f 90       	pop	r0
    3f2e:	0f 90       	pop	r0
    3f30:	0f 90       	pop	r0
    3f32:	cf 91       	pop	r28
    3f34:	df 91       	pop	r29
    3f36:	08 95       	ret

00003f38 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    3f38:	0f 93       	push	r16
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	00 d0       	rcall	.+0      	; 0x3f40 <xStreamBufferReset+0x8>
    3f40:	00 d0       	rcall	.+0      	; 0x3f42 <xStreamBufferReset+0xa>
    3f42:	0f 92       	push	r0
    3f44:	cd b7       	in	r28, 0x3d	; 61
    3f46:	de b7       	in	r29, 0x3e	; 62
    3f48:	9d 83       	std	Y+5, r25	; 0x05
    3f4a:	8c 83       	std	Y+4, r24	; 0x04
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f50:	9b 83       	std	Y+3, r25	; 0x03
    3f52:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn = pdFAIL;
    3f54:	19 82       	std	Y+1, r1	; 0x01
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	f8 94       	cli
    3f5a:	0f 92       	push	r0
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
    3f5c:	ea 81       	ldd	r30, Y+2	; 0x02
    3f5e:	fb 81       	ldd	r31, Y+3	; 0x03
    3f60:	80 85       	ldd	r24, Z+8	; 0x08
    3f62:	91 85       	ldd	r25, Z+9	; 0x09
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	f1 f4       	brne	.+60     	; 0x3fa4 <xStreamBufferReset+0x6c>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
    3f68:	ea 81       	ldd	r30, Y+2	; 0x02
    3f6a:	fb 81       	ldd	r31, Y+3	; 0x03
    3f6c:	82 85       	ldd	r24, Z+10	; 0x0a
    3f6e:	93 85       	ldd	r25, Z+11	; 0x0b
    3f70:	00 97       	sbiw	r24, 0x00	; 0
    3f72:	c1 f4       	brne	.+48     	; 0x3fa4 <xStreamBufferReset+0x6c>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
    3f74:	ea 81       	ldd	r30, Y+2	; 0x02
    3f76:	fb 81       	ldd	r31, Y+3	; 0x03
    3f78:	24 85       	ldd	r18, Z+12	; 0x0c
    3f7a:	35 85       	ldd	r19, Z+13	; 0x0d
    3f7c:	ea 81       	ldd	r30, Y+2	; 0x02
    3f7e:	fb 81       	ldd	r31, Y+3	; 0x03
    3f80:	44 81       	ldd	r20, Z+4	; 0x04
    3f82:	55 81       	ldd	r21, Z+5	; 0x05
    3f84:	ea 81       	ldd	r30, Y+2	; 0x02
    3f86:	fb 81       	ldd	r31, Y+3	; 0x03
    3f88:	a6 81       	ldd	r26, Z+6	; 0x06
    3f8a:	b7 81       	ldd	r27, Z+7	; 0x07
    3f8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3f8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3f90:	e6 85       	ldd	r30, Z+14	; 0x0e
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
    3f94:	9b 81       	ldd	r25, Y+3	; 0x03
    3f96:	b9 01       	movw	r22, r18
    3f98:	9d 01       	movw	r18, r26
    3f9a:	0e 2f       	mov	r16, r30
    3f9c:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	89 83       	std	Y+1, r24	; 0x01

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
    3fa4:	0f 90       	pop	r0
    3fa6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	0f 90       	pop	r0
    3fb0:	0f 90       	pop	r0
    3fb2:	0f 90       	pop	r0
    3fb4:	cf 91       	pop	r28
    3fb6:	df 91       	pop	r29
    3fb8:	0f 91       	pop	r16
    3fba:	08 95       	ret

00003fbc <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
    3fbc:	df 93       	push	r29
    3fbe:	cf 93       	push	r28
    3fc0:	cd b7       	in	r28, 0x3d	; 61
    3fc2:	de b7       	in	r29, 0x3e	; 62
    3fc4:	27 97       	sbiw	r28, 0x07	; 7
    3fc6:	0f b6       	in	r0, 0x3f	; 63
    3fc8:	f8 94       	cli
    3fca:	de bf       	out	0x3e, r29	; 62
    3fcc:	0f be       	out	0x3f, r0	; 63
    3fce:	cd bf       	out	0x3d, r28	; 61
    3fd0:	9d 83       	std	Y+5, r25	; 0x05
    3fd2:	8c 83       	std	Y+4, r24	; 0x04
    3fd4:	7f 83       	std	Y+7, r23	; 0x07
    3fd6:	6e 83       	std	Y+6, r22	; 0x06
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3fda:	9d 81       	ldd	r25, Y+5	; 0x05
    3fdc:	9b 83       	std	Y+3, r25	; 0x03
    3fde:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
    3fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    3fe4:	00 97       	sbiw	r24, 0x00	; 0
    3fe6:	21 f4       	brne	.+8      	; 0x3ff0 <xStreamBufferSetTriggerLevel+0x34>
	{
		xTriggerLevel = ( size_t ) 1;
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	9f 83       	std	Y+7, r25	; 0x07
    3fee:	8e 83       	std	Y+6, r24	; 0x06
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
    3ff0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ff2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ff4:	24 81       	ldd	r18, Z+4	; 0x04
    3ff6:	35 81       	ldd	r19, Z+5	; 0x05
    3ff8:	8e 81       	ldd	r24, Y+6	; 0x06
    3ffa:	9f 81       	ldd	r25, Y+7	; 0x07
    3ffc:	28 17       	cp	r18, r24
    3ffe:	39 07       	cpc	r19, r25
    4000:	48 f0       	brcs	.+18     	; 0x4014 <xStreamBufferSetTriggerLevel+0x58>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    4002:	ea 81       	ldd	r30, Y+2	; 0x02
    4004:	fb 81       	ldd	r31, Y+3	; 0x03
    4006:	8e 81       	ldd	r24, Y+6	; 0x06
    4008:	9f 81       	ldd	r25, Y+7	; 0x07
    400a:	97 83       	std	Z+7, r25	; 0x07
    400c:	86 83       	std	Z+6, r24	; 0x06
		xReturn = pdPASS;
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	89 83       	std	Y+1, r24	; 0x01
    4012:	01 c0       	rjmp	.+2      	; 0x4016 <xStreamBufferSetTriggerLevel+0x5a>
	}
	else
	{
		xReturn = pdFALSE;
    4014:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4016:	89 81       	ldd	r24, Y+1	; 0x01
}
    4018:	27 96       	adiw	r28, 0x07	; 7
    401a:	0f b6       	in	r0, 0x3f	; 63
    401c:	f8 94       	cli
    401e:	de bf       	out	0x3e, r29	; 62
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	cd bf       	out	0x3d, r28	; 61
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	08 95       	ret

0000402a <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	00 d0       	rcall	.+0      	; 0x4030 <xStreamBufferSpacesAvailable+0x6>
    4030:	00 d0       	rcall	.+0      	; 0x4032 <xStreamBufferSpacesAvailable+0x8>
    4032:	00 d0       	rcall	.+0      	; 0x4034 <xStreamBufferSpacesAvailable+0xa>
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    403c:	8d 81       	ldd	r24, Y+5	; 0x05
    403e:	9e 81       	ldd	r25, Y+6	; 0x06
    4040:	9c 83       	std	Y+4, r25	; 0x04
    4042:	8b 83       	std	Y+3, r24	; 0x03
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    4044:	eb 81       	ldd	r30, Y+3	; 0x03
    4046:	fc 81       	ldd	r31, Y+4	; 0x04
    4048:	24 81       	ldd	r18, Z+4	; 0x04
    404a:	35 81       	ldd	r19, Z+5	; 0x05
    404c:	eb 81       	ldd	r30, Y+3	; 0x03
    404e:	fc 81       	ldd	r31, Y+4	; 0x04
    4050:	80 81       	ld	r24, Z
    4052:	91 81       	ldd	r25, Z+1	; 0x01
    4054:	82 0f       	add	r24, r18
    4056:	93 1f       	adc	r25, r19
    4058:	9a 83       	std	Y+2, r25	; 0x02
    405a:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= pxStreamBuffer->xHead;
    405c:	eb 81       	ldd	r30, Y+3	; 0x03
    405e:	fc 81       	ldd	r31, Y+4	; 0x04
    4060:	22 81       	ldd	r18, Z+2	; 0x02
    4062:	33 81       	ldd	r19, Z+3	; 0x03
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	9a 81       	ldd	r25, Y+2	; 0x02
    4068:	82 1b       	sub	r24, r18
    406a:	93 0b       	sbc	r25, r19
    406c:	9a 83       	std	Y+2, r25	; 0x02
    406e:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= ( size_t ) 1;
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	9a 81       	ldd	r25, Y+2	; 0x02
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	9a 83       	std	Y+2, r25	; 0x02
    4078:	89 83       	std	Y+1, r24	; 0x01

	if( xSpace >= pxStreamBuffer->xLength )
    407a:	eb 81       	ldd	r30, Y+3	; 0x03
    407c:	fc 81       	ldd	r31, Y+4	; 0x04
    407e:	24 81       	ldd	r18, Z+4	; 0x04
    4080:	35 81       	ldd	r19, Z+5	; 0x05
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	9a 81       	ldd	r25, Y+2	; 0x02
    4086:	82 17       	cp	r24, r18
    4088:	93 07       	cpc	r25, r19
    408a:	50 f0       	brcs	.+20     	; 0x40a0 <xStreamBufferSpacesAvailable+0x76>
	{
		xSpace -= pxStreamBuffer->xLength;
    408c:	eb 81       	ldd	r30, Y+3	; 0x03
    408e:	fc 81       	ldd	r31, Y+4	; 0x04
    4090:	24 81       	ldd	r18, Z+4	; 0x04
    4092:	35 81       	ldd	r19, Z+5	; 0x05
    4094:	89 81       	ldd	r24, Y+1	; 0x01
    4096:	9a 81       	ldd	r25, Y+2	; 0x02
    4098:	82 1b       	sub	r24, r18
    409a:	93 0b       	sbc	r25, r19
    409c:	9a 83       	std	Y+2, r25	; 0x02
    409e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    40a4:	26 96       	adiw	r28, 0x06	; 6
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	f8 94       	cli
    40aa:	de bf       	out	0x3e, r29	; 62
    40ac:	0f be       	out	0x3f, r0	; 63
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	cf 91       	pop	r28
    40b2:	df 91       	pop	r29
    40b4:	08 95       	ret

000040b6 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    40b6:	df 93       	push	r29
    40b8:	cf 93       	push	r28
    40ba:	00 d0       	rcall	.+0      	; 0x40bc <xStreamBufferBytesAvailable+0x6>
    40bc:	00 d0       	rcall	.+0      	; 0x40be <xStreamBufferBytesAvailable+0x8>
    40be:	00 d0       	rcall	.+0      	; 0x40c0 <xStreamBufferBytesAvailable+0xa>
    40c0:	cd b7       	in	r28, 0x3d	; 61
    40c2:	de b7       	in	r29, 0x3e	; 62
    40c4:	9e 83       	std	Y+6, r25	; 0x06
    40c6:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    40c8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ca:	9e 81       	ldd	r25, Y+6	; 0x06
    40cc:	9c 83       	std	Y+4, r25	; 0x04
    40ce:	8b 83       	std	Y+3, r24	; 0x03
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
    40d0:	8b 81       	ldd	r24, Y+3	; 0x03
    40d2:	9c 81       	ldd	r25, Y+4	; 0x04
    40d4:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <prvBytesInBuffer>
    40d8:	9a 83       	std	Y+2, r25	; 0x02
    40da:	89 83       	std	Y+1, r24	; 0x01
	return xReturn;
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	9a 81       	ldd	r25, Y+2	; 0x02
}
    40e0:	26 96       	adiw	r28, 0x06	; 6
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
    40f2:	ef 92       	push	r14
    40f4:	ff 92       	push	r15
    40f6:	0f 93       	push	r16
    40f8:	1f 93       	push	r17
    40fa:	df 93       	push	r29
    40fc:	cf 93       	push	r28
    40fe:	cd b7       	in	r28, 0x3d	; 61
    4100:	de b7       	in	r29, 0x3e	; 62
    4102:	63 97       	sbiw	r28, 0x13	; 19
    4104:	0f b6       	in	r0, 0x3f	; 63
    4106:	f8 94       	cli
    4108:	de bf       	out	0x3e, r29	; 62
    410a:	0f be       	out	0x3f, r0	; 63
    410c:	cd bf       	out	0x3d, r28	; 61
    410e:	9d 87       	std	Y+13, r25	; 0x0d
    4110:	8c 87       	std	Y+12, r24	; 0x0c
    4112:	7f 87       	std	Y+15, r23	; 0x0f
    4114:	6e 87       	std	Y+14, r22	; 0x0e
    4116:	59 8b       	std	Y+17, r21	; 0x11
    4118:	48 8b       	std	Y+16, r20	; 0x10
    411a:	3b 8b       	std	Y+19, r19	; 0x13
    411c:	2a 8b       	std	Y+18, r18	; 0x12
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    411e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4120:	9d 85       	ldd	r25, Y+13	; 0x0d
    4122:	98 87       	std	Y+8, r25	; 0x08
    4124:	8f 83       	std	Y+7, r24	; 0x07
size_t xReturn, xSpace = 0;
    4126:	1c 82       	std	Y+4, r1	; 0x04
    4128:	1b 82       	std	Y+3, r1	; 0x03
size_t xRequiredSpace = xDataLengthBytes;
    412a:	88 89       	ldd	r24, Y+16	; 0x10
    412c:	99 89       	ldd	r25, Y+17	; 0x11
    412e:	9a 83       	std	Y+2, r25	; 0x02
    4130:	89 83       	std	Y+1, r24	; 0x01

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    4132:	ef 81       	ldd	r30, Y+7	; 0x07
    4134:	f8 85       	ldd	r31, Y+8	; 0x08
    4136:	86 85       	ldd	r24, Z+14	; 0x0e
    4138:	88 2f       	mov	r24, r24
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	81 70       	andi	r24, 0x01	; 1
    413e:	90 70       	andi	r25, 0x00	; 0
    4140:	88 23       	and	r24, r24
    4142:	29 f0       	breq	.+10     	; 0x414e <xStreamBufferSend+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    4144:	89 81       	ldd	r24, Y+1	; 0x01
    4146:	9a 81       	ldd	r25, Y+2	; 0x02
    4148:	02 96       	adiw	r24, 0x02	; 2
    414a:	9a 83       	std	Y+2, r25	; 0x02
    414c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    414e:	8a 89       	ldd	r24, Y+18	; 0x12
    4150:	9b 89       	ldd	r25, Y+19	; 0x13
    4152:	00 97       	sbiw	r24, 0x00	; 0
    4154:	09 f4       	brne	.+2      	; 0x4158 <xStreamBufferSend+0x66>
    4156:	40 c0       	rjmp	.+128    	; 0x41d8 <xStreamBufferSend+0xe6>
	{
		vTaskSetTimeOutState( &xTimeOut );
    4158:	ce 01       	movw	r24, r28
    415a:	09 96       	adiw	r24, 0x09	; 9
    415c:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	f8 94       	cli
    4164:	0f 92       	push	r0
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    4166:	8f 81       	ldd	r24, Y+7	; 0x07
    4168:	98 85       	ldd	r25, Y+8	; 0x08
    416a:	0e 94 15 20 	call	0x402a	; 0x402a <xStreamBufferSpacesAvailable>
    416e:	9c 83       	std	Y+4, r25	; 0x04
    4170:	8b 83       	std	Y+3, r24	; 0x03

				if( xSpace < xRequiredSpace )
    4172:	2b 81       	ldd	r18, Y+3	; 0x03
    4174:	3c 81       	ldd	r19, Y+4	; 0x04
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	9a 81       	ldd	r25, Y+2	; 0x02
    417a:	28 17       	cp	r18, r24
    417c:	39 07       	cpc	r19, r25
    417e:	50 f5       	brcc	.+84     	; 0x41d4 <xStreamBufferSend+0xe2>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
    4180:	80 e0       	ldi	r24, 0x00	; 0
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	0e 94 90 33 	call	0x6720	; 0x6720 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    4188:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <xTaskGetCurrentTaskHandle>
    418c:	ef 81       	ldd	r30, Y+7	; 0x07
    418e:	f8 85       	ldd	r31, Y+8	; 0x08
    4190:	93 87       	std	Z+11, r25	; 0x0b
    4192:	82 87       	std	Z+10, r24	; 0x0a
				{
					taskEXIT_CRITICAL();
					break;
				}
			}
			taskEXIT_CRITICAL();
    4194:	0f 90       	pop	r0
    4196:	0f be       	out	0x3f, r0	; 63

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    4198:	ea 89       	ldd	r30, Y+18	; 0x12
    419a:	fb 89       	ldd	r31, Y+19	; 0x13
    419c:	60 e0       	ldi	r22, 0x00	; 0
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	40 e0       	ldi	r20, 0x00	; 0
    41aa:	50 e0       	ldi	r21, 0x00	; 0
    41ac:	00 e0       	ldi	r16, 0x00	; 0
    41ae:	10 e0       	ldi	r17, 0x00	; 0
    41b0:	7f 01       	movw	r14, r30
    41b2:	0e 94 99 30 	call	0x6132	; 0x6132 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
    41b6:	ef 81       	ldd	r30, Y+7	; 0x07
    41b8:	f8 85       	ldd	r31, Y+8	; 0x08
    41ba:	13 86       	std	Z+11, r1	; 0x0b
    41bc:	12 86       	std	Z+10, r1	; 0x0a

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    41be:	ce 01       	movw	r24, r28
    41c0:	09 96       	adiw	r24, 0x09	; 9
    41c2:	9e 01       	movw	r18, r28
    41c4:	2e 5e       	subi	r18, 0xEE	; 238
    41c6:	3f 4f       	sbci	r19, 0xFF	; 255
    41c8:	b9 01       	movw	r22, r18
    41ca:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <xTaskCheckForTimeOut>
    41ce:	88 23       	and	r24, r24
    41d0:	39 f2       	breq	.-114    	; 0x4160 <xStreamBufferSend+0x6e>
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <xStreamBufferSend+0xe6>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
				}
				else
				{
					taskEXIT_CRITICAL();
    41d4:	0f 90       	pop	r0
    41d6:	0f be       	out	0x3f, r0	; 63
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
    41d8:	8b 81       	ldd	r24, Y+3	; 0x03
    41da:	9c 81       	ldd	r25, Y+4	; 0x04
    41dc:	00 97       	sbiw	r24, 0x00	; 0
    41de:	31 f4       	brne	.+12     	; 0x41ec <xStreamBufferSend+0xfa>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    41e0:	8f 81       	ldd	r24, Y+7	; 0x07
    41e2:	98 85       	ldd	r25, Y+8	; 0x08
    41e4:	0e 94 15 20 	call	0x402a	; 0x402a <xStreamBufferSpacesAvailable>
    41e8:	9c 83       	std	Y+4, r25	; 0x04
    41ea:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    41ec:	8f 81       	ldd	r24, Y+7	; 0x07
    41ee:	98 85       	ldd	r25, Y+8	; 0x08
    41f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    41f2:	3f 85       	ldd	r19, Y+15	; 0x0f
    41f4:	48 89       	ldd	r20, Y+16	; 0x10
    41f6:	59 89       	ldd	r21, Y+17	; 0x11
    41f8:	eb 81       	ldd	r30, Y+3	; 0x03
    41fa:	fc 81       	ldd	r31, Y+4	; 0x04
    41fc:	a9 81       	ldd	r26, Y+1	; 0x01
    41fe:	ba 81       	ldd	r27, Y+2	; 0x02
    4200:	b9 01       	movw	r22, r18
    4202:	9f 01       	movw	r18, r30
    4204:	8d 01       	movw	r16, r26
    4206:	0e 94 be 21 	call	0x437c	; 0x437c <prvWriteMessageToBuffer>
    420a:	9e 83       	std	Y+6, r25	; 0x06
    420c:	8d 83       	std	Y+5, r24	; 0x05

	if( xReturn > ( size_t ) 0 )
    420e:	8d 81       	ldd	r24, Y+5	; 0x05
    4210:	9e 81       	ldd	r25, Y+6	; 0x06
    4212:	00 97       	sbiw	r24, 0x00	; 0
    4214:	39 f1       	breq	.+78     	; 0x4264 <xStreamBufferSend+0x172>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    4216:	8f 81       	ldd	r24, Y+7	; 0x07
    4218:	98 85       	ldd	r25, Y+8	; 0x08
    421a:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <prvBytesInBuffer>
    421e:	9c 01       	movw	r18, r24
    4220:	ef 81       	ldd	r30, Y+7	; 0x07
    4222:	f8 85       	ldd	r31, Y+8	; 0x08
    4224:	86 81       	ldd	r24, Z+6	; 0x06
    4226:	97 81       	ldd	r25, Z+7	; 0x07
    4228:	28 17       	cp	r18, r24
    422a:	39 07       	cpc	r19, r25
    422c:	d8 f0       	brcs	.+54     	; 0x4264 <xStreamBufferSend+0x172>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
    422e:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
    4232:	ef 81       	ldd	r30, Y+7	; 0x07
    4234:	f8 85       	ldd	r31, Y+8	; 0x08
    4236:	80 85       	ldd	r24, Z+8	; 0x08
    4238:	91 85       	ldd	r25, Z+9	; 0x09
    423a:	00 97       	sbiw	r24, 0x00	; 0
    423c:	89 f0       	breq	.+34     	; 0x4260 <xStreamBufferSend+0x16e>
    423e:	ef 81       	ldd	r30, Y+7	; 0x07
    4240:	f8 85       	ldd	r31, Y+8	; 0x08
    4242:	80 85       	ldd	r24, Z+8	; 0x08
    4244:	91 85       	ldd	r25, Z+9	; 0x09
    4246:	40 e0       	ldi	r20, 0x00	; 0
    4248:	50 e0       	ldi	r21, 0x00	; 0
    424a:	60 e0       	ldi	r22, 0x00	; 0
    424c:	70 e0       	ldi	r23, 0x00	; 0
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	00 e0       	ldi	r16, 0x00	; 0
    4252:	10 e0       	ldi	r17, 0x00	; 0
    4254:	0e 94 35 31 	call	0x626a	; 0x626a <xTaskGenericNotify>
    4258:	ef 81       	ldd	r30, Y+7	; 0x07
    425a:	f8 85       	ldd	r31, Y+8	; 0x08
    425c:	11 86       	std	Z+9, r1	; 0x09
    425e:	10 86       	std	Z+8, r1	; 0x08
    4260:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
    4264:	8d 81       	ldd	r24, Y+5	; 0x05
    4266:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4268:	63 96       	adiw	r28, 0x13	; 19
    426a:	0f b6       	in	r0, 0x3f	; 63
    426c:	f8 94       	cli
    426e:	de bf       	out	0x3e, r29	; 62
    4270:	0f be       	out	0x3f, r0	; 63
    4272:	cd bf       	out	0x3d, r28	; 61
    4274:	cf 91       	pop	r28
    4276:	df 91       	pop	r29
    4278:	1f 91       	pop	r17
    427a:	0f 91       	pop	r16
    427c:	ff 90       	pop	r15
    427e:	ef 90       	pop	r14
    4280:	08 95       	ret

00004282 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
    4282:	ef 92       	push	r14
    4284:	ff 92       	push	r15
    4286:	0f 93       	push	r16
    4288:	1f 93       	push	r17
    428a:	df 93       	push	r29
    428c:	cf 93       	push	r28
    428e:	cd b7       	in	r28, 0x3d	; 61
    4290:	de b7       	in	r29, 0x3e	; 62
    4292:	61 97       	sbiw	r28, 0x11	; 17
    4294:	0f b6       	in	r0, 0x3f	; 63
    4296:	f8 94       	cli
    4298:	de bf       	out	0x3e, r29	; 62
    429a:	0f be       	out	0x3f, r0	; 63
    429c:	cd bf       	out	0x3d, r28	; 61
    429e:	9b 87       	std	Y+11, r25	; 0x0b
    42a0:	8a 87       	std	Y+10, r24	; 0x0a
    42a2:	7d 87       	std	Y+13, r23	; 0x0d
    42a4:	6c 87       	std	Y+12, r22	; 0x0c
    42a6:	5f 87       	std	Y+15, r21	; 0x0f
    42a8:	4e 87       	std	Y+14, r20	; 0x0e
    42aa:	39 8b       	std	Y+17, r19	; 0x11
    42ac:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    42ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    42b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    42b2:	99 87       	std	Y+9, r25	; 0x09
    42b4:	88 87       	std	Y+8, r24	; 0x08
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    42b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    42b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    42ba:	9b 83       	std	Y+3, r25	; 0x03
    42bc:	8a 83       	std	Y+2, r24	; 0x02

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    42be:	e8 85       	ldd	r30, Y+8	; 0x08
    42c0:	f9 85       	ldd	r31, Y+9	; 0x09
    42c2:	86 85       	ldd	r24, Z+14	; 0x0e
    42c4:	88 2f       	mov	r24, r24
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	81 70       	andi	r24, 0x01	; 1
    42ca:	90 70       	andi	r25, 0x00	; 0
    42cc:	88 23       	and	r24, r24
    42ce:	29 f0       	breq	.+10     	; 0x42da <xStreamBufferSendFromISR+0x58>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    42d0:	8a 81       	ldd	r24, Y+2	; 0x02
    42d2:	9b 81       	ldd	r25, Y+3	; 0x03
    42d4:	02 96       	adiw	r24, 0x02	; 2
    42d6:	9b 83       	std	Y+3, r25	; 0x03
    42d8:	8a 83       	std	Y+2, r24	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    42da:	88 85       	ldd	r24, Y+8	; 0x08
    42dc:	99 85       	ldd	r25, Y+9	; 0x09
    42de:	0e 94 15 20 	call	0x402a	; 0x402a <xStreamBufferSpacesAvailable>
    42e2:	9d 83       	std	Y+5, r25	; 0x05
    42e4:	8c 83       	std	Y+4, r24	; 0x04
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    42e6:	88 85       	ldd	r24, Y+8	; 0x08
    42e8:	99 85       	ldd	r25, Y+9	; 0x09
    42ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    42ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    42ee:	4e 85       	ldd	r20, Y+14	; 0x0e
    42f0:	5f 85       	ldd	r21, Y+15	; 0x0f
    42f2:	ec 81       	ldd	r30, Y+4	; 0x04
    42f4:	fd 81       	ldd	r31, Y+5	; 0x05
    42f6:	aa 81       	ldd	r26, Y+2	; 0x02
    42f8:	bb 81       	ldd	r27, Y+3	; 0x03
    42fa:	b9 01       	movw	r22, r18
    42fc:	9f 01       	movw	r18, r30
    42fe:	8d 01       	movw	r16, r26
    4300:	0e 94 be 21 	call	0x437c	; 0x437c <prvWriteMessageToBuffer>
    4304:	9f 83       	std	Y+7, r25	; 0x07
    4306:	8e 83       	std	Y+6, r24	; 0x06

	if( xReturn > ( size_t ) 0 )
    4308:	8e 81       	ldd	r24, Y+6	; 0x06
    430a:	9f 81       	ldd	r25, Y+7	; 0x07
    430c:	00 97       	sbiw	r24, 0x00	; 0
    430e:	39 f1       	breq	.+78     	; 0x435e <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    4310:	88 85       	ldd	r24, Y+8	; 0x08
    4312:	99 85       	ldd	r25, Y+9	; 0x09
    4314:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <prvBytesInBuffer>
    4318:	9c 01       	movw	r18, r24
    431a:	e8 85       	ldd	r30, Y+8	; 0x08
    431c:	f9 85       	ldd	r31, Y+9	; 0x09
    431e:	86 81       	ldd	r24, Z+6	; 0x06
    4320:	97 81       	ldd	r25, Z+7	; 0x07
    4322:	28 17       	cp	r18, r24
    4324:	39 07       	cpc	r19, r25
    4326:	d8 f0       	brcs	.+54     	; 0x435e <xStreamBufferSendFromISR+0xdc>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    4328:	19 82       	std	Y+1, r1	; 0x01
    432a:	e8 85       	ldd	r30, Y+8	; 0x08
    432c:	f9 85       	ldd	r31, Y+9	; 0x09
    432e:	80 85       	ldd	r24, Z+8	; 0x08
    4330:	91 85       	ldd	r25, Z+9	; 0x09
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	a1 f0       	breq	.+40     	; 0x435e <xStreamBufferSendFromISR+0xdc>
    4336:	e8 85       	ldd	r30, Y+8	; 0x08
    4338:	f9 85       	ldd	r31, Y+9	; 0x09
    433a:	80 85       	ldd	r24, Z+8	; 0x08
    433c:	91 85       	ldd	r25, Z+9	; 0x09
    433e:	e8 89       	ldd	r30, Y+16	; 0x10
    4340:	f9 89       	ldd	r31, Y+17	; 0x11
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	50 e0       	ldi	r21, 0x00	; 0
    4346:	60 e0       	ldi	r22, 0x00	; 0
    4348:	70 e0       	ldi	r23, 0x00	; 0
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	00 e0       	ldi	r16, 0x00	; 0
    434e:	10 e0       	ldi	r17, 0x00	; 0
    4350:	7f 01       	movw	r14, r30
    4352:	0e 94 12 32 	call	0x6424	; 0x6424 <xTaskGenericNotifyFromISR>
    4356:	e8 85       	ldd	r30, Y+8	; 0x08
    4358:	f9 85       	ldd	r31, Y+9	; 0x09
    435a:	11 86       	std	Z+9, r1	; 0x09
    435c:	10 86       	std	Z+8, r1	; 0x08
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
    435e:	8e 81       	ldd	r24, Y+6	; 0x06
    4360:	9f 81       	ldd	r25, Y+7	; 0x07
}
    4362:	61 96       	adiw	r28, 0x11	; 17
    4364:	0f b6       	in	r0, 0x3f	; 63
    4366:	f8 94       	cli
    4368:	de bf       	out	0x3e, r29	; 62
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	cd bf       	out	0x3d, r28	; 61
    436e:	cf 91       	pop	r28
    4370:	df 91       	pop	r29
    4372:	1f 91       	pop	r17
    4374:	0f 91       	pop	r16
    4376:	ff 90       	pop	r15
    4378:	ef 90       	pop	r14
    437a:	08 95       	ret

0000437c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	df 93       	push	r29
    4382:	cf 93       	push	r28
    4384:	cd b7       	in	r28, 0x3d	; 61
    4386:	de b7       	in	r29, 0x3e	; 62
    4388:	61 97       	sbiw	r28, 0x11	; 17
    438a:	0f b6       	in	r0, 0x3f	; 63
    438c:	f8 94       	cli
    438e:	de bf       	out	0x3e, r29	; 62
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	cd bf       	out	0x3d, r28	; 61
    4394:	9d 83       	std	Y+5, r25	; 0x05
    4396:	8c 83       	std	Y+4, r24	; 0x04
    4398:	7f 83       	std	Y+7, r23	; 0x07
    439a:	6e 83       	std	Y+6, r22	; 0x06
    439c:	59 87       	std	Y+9, r21	; 0x09
    439e:	48 87       	std	Y+8, r20	; 0x08
    43a0:	3b 87       	std	Y+11, r19	; 0x0b
    43a2:	2a 87       	std	Y+10, r18	; 0x0a
    43a4:	1d 87       	std	Y+13, r17	; 0x0d
    43a6:	0c 87       	std	Y+12, r16	; 0x0c
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
    43a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    43aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    43ac:	00 97       	sbiw	r24, 0x00	; 0
    43ae:	11 f4       	brne	.+4      	; 0x43b4 <prvWriteMessageToBuffer+0x38>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
    43b0:	1b 82       	std	Y+3, r1	; 0x03
    43b2:	38 c0       	rjmp	.+112    	; 0x4424 <prvWriteMessageToBuffer+0xa8>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
    43b4:	ec 81       	ldd	r30, Y+4	; 0x04
    43b6:	fd 81       	ldd	r31, Y+5	; 0x05
    43b8:	86 85       	ldd	r24, Z+14	; 0x0e
    43ba:	88 2f       	mov	r24, r24
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	81 70       	andi	r24, 0x01	; 1
    43c0:	90 70       	andi	r25, 0x00	; 0
    43c2:	00 97       	sbiw	r24, 0x00	; 0
    43c4:	d1 f4       	brne	.+52     	; 0x43fa <prvWriteMessageToBuffer+0x7e>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	8b 83       	std	Y+3, r24	; 0x03
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    43ca:	28 85       	ldd	r18, Y+8	; 0x08
    43cc:	39 85       	ldd	r19, Y+9	; 0x09
    43ce:	39 8b       	std	Y+17, r19	; 0x11
    43d0:	28 8b       	std	Y+16, r18	; 0x10
    43d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    43d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    43d6:	9f 87       	std	Y+15, r25	; 0x0f
    43d8:	8e 87       	std	Y+14, r24	; 0x0e
    43da:	2e 85       	ldd	r18, Y+14	; 0x0e
    43dc:	3f 85       	ldd	r19, Y+15	; 0x0f
    43de:	88 89       	ldd	r24, Y+16	; 0x10
    43e0:	99 89       	ldd	r25, Y+17	; 0x11
    43e2:	82 17       	cp	r24, r18
    43e4:	93 07       	cpc	r25, r19
    43e6:	20 f4       	brcc	.+8      	; 0x43f0 <prvWriteMessageToBuffer+0x74>
    43e8:	28 89       	ldd	r18, Y+16	; 0x10
    43ea:	39 89       	ldd	r19, Y+17	; 0x11
    43ec:	3f 87       	std	Y+15, r19	; 0x0f
    43ee:	2e 87       	std	Y+14, r18	; 0x0e
    43f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    43f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    43f4:	99 87       	std	Y+9, r25	; 0x09
    43f6:	88 87       	std	Y+8, r24	; 0x08
    43f8:	15 c0       	rjmp	.+42     	; 0x4424 <prvWriteMessageToBuffer+0xa8>
	}
	else if( xSpace >= xRequiredSpace )
    43fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    43fc:	3b 85       	ldd	r19, Y+11	; 0x0b
    43fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4400:	9d 85       	ldd	r25, Y+13	; 0x0d
    4402:	28 17       	cp	r18, r24
    4404:	39 07       	cpc	r19, r25
    4406:	68 f0       	brcs	.+26     	; 0x4422 <prvWriteMessageToBuffer+0xa6>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	8b 83       	std	Y+3, r24	; 0x03
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
    440c:	9e 01       	movw	r18, r28
    440e:	28 5f       	subi	r18, 0xF8	; 248
    4410:	3f 4f       	sbci	r19, 0xFF	; 255
    4412:	8c 81       	ldd	r24, Y+4	; 0x04
    4414:	9d 81       	ldd	r25, Y+5	; 0x05
    4416:	b9 01       	movw	r22, r18
    4418:	42 e0       	ldi	r20, 0x02	; 2
    441a:	50 e0       	ldi	r21, 0x00	; 0
    441c:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <prvWriteBytesToBuffer>
    4420:	01 c0       	rjmp	.+2      	; 0x4424 <prvWriteMessageToBuffer+0xa8>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
    4422:	1b 82       	std	Y+3, r1	; 0x03
	}

	if( xShouldWrite != pdFALSE )
    4424:	8b 81       	ldd	r24, Y+3	; 0x03
    4426:	88 23       	and	r24, r24
    4428:	61 f0       	breq	.+24     	; 0x4442 <prvWriteMessageToBuffer+0xc6>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
    442a:	2e 81       	ldd	r18, Y+6	; 0x06
    442c:	3f 81       	ldd	r19, Y+7	; 0x07
    442e:	48 85       	ldd	r20, Y+8	; 0x08
    4430:	59 85       	ldd	r21, Y+9	; 0x09
    4432:	8c 81       	ldd	r24, Y+4	; 0x04
    4434:	9d 81       	ldd	r25, Y+5	; 0x05
    4436:	b9 01       	movw	r22, r18
    4438:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <prvWriteBytesToBuffer>
    443c:	9a 83       	std	Y+2, r25	; 0x02
    443e:	89 83       	std	Y+1, r24	; 0x01
    4440:	02 c0       	rjmp	.+4      	; 0x4446 <prvWriteMessageToBuffer+0xca>
	}
	else
	{
		xReturn = 0;
    4442:	1a 82       	std	Y+2, r1	; 0x02
    4444:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4446:	89 81       	ldd	r24, Y+1	; 0x01
    4448:	9a 81       	ldd	r25, Y+2	; 0x02
}
    444a:	61 96       	adiw	r28, 0x11	; 17
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	f8 94       	cli
    4450:	de bf       	out	0x3e, r29	; 62
    4452:	0f be       	out	0x3f, r0	; 63
    4454:	cd bf       	out	0x3d, r28	; 61
    4456:	cf 91       	pop	r28
    4458:	df 91       	pop	r29
    445a:	1f 91       	pop	r17
    445c:	0f 91       	pop	r16
    445e:	08 95       	ret

00004460 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
    4460:	ef 92       	push	r14
    4462:	ff 92       	push	r15
    4464:	0f 93       	push	r16
    4466:	1f 93       	push	r17
    4468:	df 93       	push	r29
    446a:	cf 93       	push	r28
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
    4470:	60 97       	sbiw	r28, 0x10	; 16
    4472:	0f b6       	in	r0, 0x3f	; 63
    4474:	f8 94       	cli
    4476:	de bf       	out	0x3e, r29	; 62
    4478:	0f be       	out	0x3f, r0	; 63
    447a:	cd bf       	out	0x3d, r28	; 61
    447c:	9a 87       	std	Y+10, r25	; 0x0a
    447e:	89 87       	std	Y+9, r24	; 0x09
    4480:	7c 87       	std	Y+12, r23	; 0x0c
    4482:	6b 87       	std	Y+11, r22	; 0x0b
    4484:	5e 87       	std	Y+14, r21	; 0x0e
    4486:	4d 87       	std	Y+13, r20	; 0x0d
    4488:	38 8b       	std	Y+16, r19	; 0x10
    448a:	2f 87       	std	Y+15, r18	; 0x0f
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    448c:	89 85       	ldd	r24, Y+9	; 0x09
    448e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4490:	98 87       	std	Y+8, r25	; 0x08
    4492:	8f 83       	std	Y+7, r24	; 0x07
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    4494:	1e 82       	std	Y+6, r1	; 0x06
    4496:	1d 82       	std	Y+5, r1	; 0x05
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    4498:	ef 81       	ldd	r30, Y+7	; 0x07
    449a:	f8 85       	ldd	r31, Y+8	; 0x08
    449c:	86 85       	ldd	r24, Z+14	; 0x0e
    449e:	88 2f       	mov	r24, r24
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	81 70       	andi	r24, 0x01	; 1
    44a4:	90 70       	andi	r25, 0x00	; 0
    44a6:	88 23       	and	r24, r24
    44a8:	29 f0       	breq	.+10     	; 0x44b4 <xStreamBufferReceive+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    44aa:	82 e0       	ldi	r24, 0x02	; 2
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	9a 83       	std	Y+2, r25	; 0x02
    44b0:	89 83       	std	Y+1, r24	; 0x01
    44b2:	02 c0       	rjmp	.+4      	; 0x44b8 <xStreamBufferReceive+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    44b4:	1a 82       	std	Y+2, r1	; 0x02
    44b6:	19 82       	std	Y+1, r1	; 0x01
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    44b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    44ba:	98 89       	ldd	r25, Y+16	; 0x10
    44bc:	00 97       	sbiw	r24, 0x00	; 0
    44be:	09 f4       	brne	.+2      	; 0x44c2 <xStreamBufferReceive+0x62>
    44c0:	3d c0       	rjmp	.+122    	; 0x453c <xStreamBufferReceive+0xdc>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	f8 94       	cli
    44c6:	0f 92       	push	r0
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    44c8:	8f 81       	ldd	r24, Y+7	; 0x07
    44ca:	98 85       	ldd	r25, Y+8	; 0x08
    44cc:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <prvBytesInBuffer>
    44d0:	9c 83       	std	Y+4, r25	; 0x04
    44d2:	8b 83       	std	Y+3, r24	; 0x03
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
    44d4:	2b 81       	ldd	r18, Y+3	; 0x03
    44d6:	3c 81       	ldd	r19, Y+4	; 0x04
    44d8:	89 81       	ldd	r24, Y+1	; 0x01
    44da:	9a 81       	ldd	r25, Y+2	; 0x02
    44dc:	82 17       	cp	r24, r18
    44de:	93 07       	cpc	r25, r19
    44e0:	50 f0       	brcs	.+20     	; 0x44f6 <xStreamBufferReceive+0x96>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	0e 94 90 33 	call	0x6720	; 0x6720 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    44ea:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <xTaskGetCurrentTaskHandle>
    44ee:	ef 81       	ldd	r30, Y+7	; 0x07
    44f0:	f8 85       	ldd	r31, Y+8	; 0x08
    44f2:	91 87       	std	Z+9, r25	; 0x09
    44f4:	80 87       	std	Z+8, r24	; 0x08
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    44f6:	0f 90       	pop	r0
    44f8:	0f be       	out	0x3f, r0	; 63

		if( xBytesAvailable <= xBytesToStoreMessageLength )
    44fa:	2b 81       	ldd	r18, Y+3	; 0x03
    44fc:	3c 81       	ldd	r19, Y+4	; 0x04
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	9a 81       	ldd	r25, Y+2	; 0x02
    4502:	82 17       	cp	r24, r18
    4504:	93 07       	cpc	r25, r19
    4506:	00 f1       	brcs	.+64     	; 0x4548 <xStreamBufferReceive+0xe8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    4508:	ef 85       	ldd	r30, Y+15	; 0x0f
    450a:	f8 89       	ldd	r31, Y+16	; 0x10
    450c:	60 e0       	ldi	r22, 0x00	; 0
    450e:	70 e0       	ldi	r23, 0x00	; 0
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	50 e0       	ldi	r21, 0x00	; 0
    451c:	00 e0       	ldi	r16, 0x00	; 0
    451e:	10 e0       	ldi	r17, 0x00	; 0
    4520:	7f 01       	movw	r14, r30
    4522:	0e 94 99 30 	call	0x6132	; 0x6132 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
    4526:	ef 81       	ldd	r30, Y+7	; 0x07
    4528:	f8 85       	ldd	r31, Y+8	; 0x08
    452a:	11 86       	std	Z+9, r1	; 0x09
    452c:	10 86       	std	Z+8, r1	; 0x08

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    452e:	8f 81       	ldd	r24, Y+7	; 0x07
    4530:	98 85       	ldd	r25, Y+8	; 0x08
    4532:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <prvBytesInBuffer>
    4536:	9c 83       	std	Y+4, r25	; 0x04
    4538:	8b 83       	std	Y+3, r24	; 0x03
    453a:	06 c0       	rjmp	.+12     	; 0x4548 <xStreamBufferReceive+0xe8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    453c:	8f 81       	ldd	r24, Y+7	; 0x07
    453e:	98 85       	ldd	r25, Y+8	; 0x08
    4540:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <prvBytesInBuffer>
    4544:	9c 83       	std	Y+4, r25	; 0x04
    4546:	8b 83       	std	Y+3, r24	; 0x03
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    4548:	2b 81       	ldd	r18, Y+3	; 0x03
    454a:	3c 81       	ldd	r19, Y+4	; 0x04
    454c:	89 81       	ldd	r24, Y+1	; 0x01
    454e:	9a 81       	ldd	r25, Y+2	; 0x02
    4550:	82 17       	cp	r24, r18
    4552:	93 07       	cpc	r25, r19
    4554:	80 f5       	brcc	.+96     	; 0x45b6 <xStreamBufferReceive+0x156>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    4556:	8f 81       	ldd	r24, Y+7	; 0x07
    4558:	98 85       	ldd	r25, Y+8	; 0x08
    455a:	2b 85       	ldd	r18, Y+11	; 0x0b
    455c:	3c 85       	ldd	r19, Y+12	; 0x0c
    455e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4560:	5e 85       	ldd	r21, Y+14	; 0x0e
    4562:	eb 81       	ldd	r30, Y+3	; 0x03
    4564:	fc 81       	ldd	r31, Y+4	; 0x04
    4566:	a9 81       	ldd	r26, Y+1	; 0x01
    4568:	ba 81       	ldd	r27, Y+2	; 0x02
    456a:	b9 01       	movw	r22, r18
    456c:	9f 01       	movw	r18, r30
    456e:	8d 01       	movw	r16, r26
    4570:	0e 94 b4 23 	call	0x4768	; 0x4768 <prvReadMessageFromBuffer>
    4574:	9e 83       	std	Y+6, r25	; 0x06
    4576:	8d 83       	std	Y+5, r24	; 0x05

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    4578:	8d 81       	ldd	r24, Y+5	; 0x05
    457a:	9e 81       	ldd	r25, Y+6	; 0x06
    457c:	00 97       	sbiw	r24, 0x00	; 0
    457e:	d9 f0       	breq	.+54     	; 0x45b6 <xStreamBufferReceive+0x156>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
    4580:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
    4584:	ef 81       	ldd	r30, Y+7	; 0x07
    4586:	f8 85       	ldd	r31, Y+8	; 0x08
    4588:	82 85       	ldd	r24, Z+10	; 0x0a
    458a:	93 85       	ldd	r25, Z+11	; 0x0b
    458c:	00 97       	sbiw	r24, 0x00	; 0
    458e:	89 f0       	breq	.+34     	; 0x45b2 <xStreamBufferReceive+0x152>
    4590:	ef 81       	ldd	r30, Y+7	; 0x07
    4592:	f8 85       	ldd	r31, Y+8	; 0x08
    4594:	82 85       	ldd	r24, Z+10	; 0x0a
    4596:	93 85       	ldd	r25, Z+11	; 0x0b
    4598:	40 e0       	ldi	r20, 0x00	; 0
    459a:	50 e0       	ldi	r21, 0x00	; 0
    459c:	60 e0       	ldi	r22, 0x00	; 0
    459e:	70 e0       	ldi	r23, 0x00	; 0
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	00 e0       	ldi	r16, 0x00	; 0
    45a4:	10 e0       	ldi	r17, 0x00	; 0
    45a6:	0e 94 35 31 	call	0x626a	; 0x626a <xTaskGenericNotify>
    45aa:	ef 81       	ldd	r30, Y+7	; 0x07
    45ac:	f8 85       	ldd	r31, Y+8	; 0x08
    45ae:	13 86       	std	Z+11, r1	; 0x0b
    45b0:	12 86       	std	Z+10, r1	; 0x0a
    45b2:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
    45b6:	8d 81       	ldd	r24, Y+5	; 0x05
    45b8:	9e 81       	ldd	r25, Y+6	; 0x06
}
    45ba:	60 96       	adiw	r28, 0x10	; 16
    45bc:	0f b6       	in	r0, 0x3f	; 63
    45be:	f8 94       	cli
    45c0:	de bf       	out	0x3e, r29	; 62
    45c2:	0f be       	out	0x3f, r0	; 63
    45c4:	cd bf       	out	0x3d, r28	; 61
    45c6:	cf 91       	pop	r28
    45c8:	df 91       	pop	r29
    45ca:	1f 91       	pop	r17
    45cc:	0f 91       	pop	r16
    45ce:	ff 90       	pop	r15
    45d0:	ef 90       	pop	r14
    45d2:	08 95       	ret

000045d4 <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    45d4:	df 93       	push	r29
    45d6:	cf 93       	push	r28
    45d8:	cd b7       	in	r28, 0x3d	; 61
    45da:	de b7       	in	r29, 0x3e	; 62
    45dc:	2c 97       	sbiw	r28, 0x0c	; 12
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	f8 94       	cli
    45e2:	de bf       	out	0x3e, r29	; 62
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	cd bf       	out	0x3d, r28	; 61
    45e8:	9c 87       	std	Y+12, r25	; 0x0c
    45ea:	8b 87       	std	Y+11, r24	; 0x0b
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    45ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    45ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    45f0:	98 87       	std	Y+8, r25	; 0x08
    45f2:	8f 83       	std	Y+7, r24	; 0x07
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    45f4:	ef 81       	ldd	r30, Y+7	; 0x07
    45f6:	f8 85       	ldd	r31, Y+8	; 0x08
    45f8:	86 85       	ldd	r24, Z+14	; 0x0e
    45fa:	88 2f       	mov	r24, r24
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	81 70       	andi	r24, 0x01	; 1
    4600:	90 70       	andi	r25, 0x00	; 0
    4602:	88 23       	and	r24, r24
    4604:	61 f1       	breq	.+88     	; 0x465e <xStreamBufferNextMessageLengthBytes+0x8a>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    4606:	8f 81       	ldd	r24, Y+7	; 0x07
    4608:	98 85       	ldd	r25, Y+8	; 0x08
    460a:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <prvBytesInBuffer>
    460e:	9c 83       	std	Y+4, r25	; 0x04
    4610:	8b 83       	std	Y+3, r24	; 0x03
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    4612:	8b 81       	ldd	r24, Y+3	; 0x03
    4614:	9c 81       	ldd	r25, Y+4	; 0x04
    4616:	83 30       	cpi	r24, 0x03	; 3
    4618:	91 05       	cpc	r25, r1
    461a:	f0 f0       	brcs	.+60     	; 0x4658 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
    461c:	ef 81       	ldd	r30, Y+7	; 0x07
    461e:	f8 85       	ldd	r31, Y+8	; 0x08
    4620:	80 81       	ld	r24, Z
    4622:	91 81       	ldd	r25, Z+1	; 0x01
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
    4628:	9e 01       	movw	r18, r28
    462a:	27 5f       	subi	r18, 0xF7	; 247
    462c:	3f 4f       	sbci	r19, 0xFF	; 255
    462e:	8f 81       	ldd	r24, Y+7	; 0x07
    4630:	98 85       	ldd	r25, Y+8	; 0x08
    4632:	eb 81       	ldd	r30, Y+3	; 0x03
    4634:	fc 81       	ldd	r31, Y+4	; 0x04
    4636:	b9 01       	movw	r22, r18
    4638:	42 e0       	ldi	r20, 0x02	; 2
    463a:	50 e0       	ldi	r21, 0x00	; 0
    463c:	9f 01       	movw	r18, r30
    463e:	0e 94 98 25 	call	0x4b30	; 0x4b30 <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
    4642:	89 85       	ldd	r24, Y+9	; 0x09
    4644:	9a 85       	ldd	r25, Y+10	; 0x0a
    4646:	9e 83       	std	Y+6, r25	; 0x06
    4648:	8d 83       	std	Y+5, r24	; 0x05
			pxStreamBuffer->xTail = xOriginalTail;
    464a:	ef 81       	ldd	r30, Y+7	; 0x07
    464c:	f8 85       	ldd	r31, Y+8	; 0x08
    464e:	89 81       	ldd	r24, Y+1	; 0x01
    4650:	9a 81       	ldd	r25, Y+2	; 0x02
    4652:	91 83       	std	Z+1, r25	; 0x01
    4654:	80 83       	st	Z, r24
    4656:	05 c0       	rjmp	.+10     	; 0x4662 <xStreamBufferNextMessageLengthBytes+0x8e>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
    4658:	1e 82       	std	Y+6, r1	; 0x06
    465a:	1d 82       	std	Y+5, r1	; 0x05
    465c:	02 c0       	rjmp	.+4      	; 0x4662 <xStreamBufferNextMessageLengthBytes+0x8e>
		}
	}
	else
	{
		xReturn = 0;
    465e:	1e 82       	std	Y+6, r1	; 0x06
    4660:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    4662:	8d 81       	ldd	r24, Y+5	; 0x05
    4664:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4666:	2c 96       	adiw	r28, 0x0c	; 12
    4668:	0f b6       	in	r0, 0x3f	; 63
    466a:	f8 94       	cli
    466c:	de bf       	out	0x3e, r29	; 62
    466e:	0f be       	out	0x3f, r0	; 63
    4670:	cd bf       	out	0x3d, r28	; 61
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
    4678:	ef 92       	push	r14
    467a:	ff 92       	push	r15
    467c:	0f 93       	push	r16
    467e:	1f 93       	push	r17
    4680:	df 93       	push	r29
    4682:	cf 93       	push	r28
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	61 97       	sbiw	r28, 0x11	; 17
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	cd bf       	out	0x3d, r28	; 61
    4694:	9b 87       	std	Y+11, r25	; 0x0b
    4696:	8a 87       	std	Y+10, r24	; 0x0a
    4698:	7d 87       	std	Y+13, r23	; 0x0d
    469a:	6c 87       	std	Y+12, r22	; 0x0c
    469c:	5f 87       	std	Y+15, r21	; 0x0f
    469e:	4e 87       	std	Y+14, r20	; 0x0e
    46a0:	39 8b       	std	Y+17, r19	; 0x11
    46a2:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    46a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    46a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    46a8:	99 87       	std	Y+9, r25	; 0x09
    46aa:	88 87       	std	Y+8, r24	; 0x08
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    46ac:	1f 82       	std	Y+7, r1	; 0x07
    46ae:	1e 82       	std	Y+6, r1	; 0x06
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    46b0:	e8 85       	ldd	r30, Y+8	; 0x08
    46b2:	f9 85       	ldd	r31, Y+9	; 0x09
    46b4:	86 85       	ldd	r24, Z+14	; 0x0e
    46b6:	88 2f       	mov	r24, r24
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	81 70       	andi	r24, 0x01	; 1
    46bc:	90 70       	andi	r25, 0x00	; 0
    46be:	88 23       	and	r24, r24
    46c0:	29 f0       	breq	.+10     	; 0x46cc <xStreamBufferReceiveFromISR+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    46c2:	82 e0       	ldi	r24, 0x02	; 2
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	9b 83       	std	Y+3, r25	; 0x03
    46c8:	8a 83       	std	Y+2, r24	; 0x02
    46ca:	02 c0       	rjmp	.+4      	; 0x46d0 <xStreamBufferReceiveFromISR+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    46cc:	1b 82       	std	Y+3, r1	; 0x03
    46ce:	1a 82       	std	Y+2, r1	; 0x02
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    46d0:	88 85       	ldd	r24, Y+8	; 0x08
    46d2:	99 85       	ldd	r25, Y+9	; 0x09
    46d4:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <prvBytesInBuffer>
    46d8:	9d 83       	std	Y+5, r25	; 0x05
    46da:	8c 83       	std	Y+4, r24	; 0x04
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    46dc:	2c 81       	ldd	r18, Y+4	; 0x04
    46de:	3d 81       	ldd	r19, Y+5	; 0x05
    46e0:	8a 81       	ldd	r24, Y+2	; 0x02
    46e2:	9b 81       	ldd	r25, Y+3	; 0x03
    46e4:	82 17       	cp	r24, r18
    46e6:	93 07       	cpc	r25, r19
    46e8:	80 f5       	brcc	.+96     	; 0x474a <xStreamBufferReceiveFromISR+0xd2>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    46ea:	88 85       	ldd	r24, Y+8	; 0x08
    46ec:	99 85       	ldd	r25, Y+9	; 0x09
    46ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    46f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    46f2:	4e 85       	ldd	r20, Y+14	; 0x0e
    46f4:	5f 85       	ldd	r21, Y+15	; 0x0f
    46f6:	ec 81       	ldd	r30, Y+4	; 0x04
    46f8:	fd 81       	ldd	r31, Y+5	; 0x05
    46fa:	aa 81       	ldd	r26, Y+2	; 0x02
    46fc:	bb 81       	ldd	r27, Y+3	; 0x03
    46fe:	b9 01       	movw	r22, r18
    4700:	9f 01       	movw	r18, r30
    4702:	8d 01       	movw	r16, r26
    4704:	0e 94 b4 23 	call	0x4768	; 0x4768 <prvReadMessageFromBuffer>
    4708:	9f 83       	std	Y+7, r25	; 0x07
    470a:	8e 83       	std	Y+6, r24	; 0x06

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    470c:	8e 81       	ldd	r24, Y+6	; 0x06
    470e:	9f 81       	ldd	r25, Y+7	; 0x07
    4710:	00 97       	sbiw	r24, 0x00	; 0
    4712:	d9 f0       	breq	.+54     	; 0x474a <xStreamBufferReceiveFromISR+0xd2>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    4714:	19 82       	std	Y+1, r1	; 0x01
    4716:	e8 85       	ldd	r30, Y+8	; 0x08
    4718:	f9 85       	ldd	r31, Y+9	; 0x09
    471a:	82 85       	ldd	r24, Z+10	; 0x0a
    471c:	93 85       	ldd	r25, Z+11	; 0x0b
    471e:	00 97       	sbiw	r24, 0x00	; 0
    4720:	a1 f0       	breq	.+40     	; 0x474a <xStreamBufferReceiveFromISR+0xd2>
    4722:	e8 85       	ldd	r30, Y+8	; 0x08
    4724:	f9 85       	ldd	r31, Y+9	; 0x09
    4726:	82 85       	ldd	r24, Z+10	; 0x0a
    4728:	93 85       	ldd	r25, Z+11	; 0x0b
    472a:	e8 89       	ldd	r30, Y+16	; 0x10
    472c:	f9 89       	ldd	r31, Y+17	; 0x11
    472e:	40 e0       	ldi	r20, 0x00	; 0
    4730:	50 e0       	ldi	r21, 0x00	; 0
    4732:	60 e0       	ldi	r22, 0x00	; 0
    4734:	70 e0       	ldi	r23, 0x00	; 0
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	00 e0       	ldi	r16, 0x00	; 0
    473a:	10 e0       	ldi	r17, 0x00	; 0
    473c:	7f 01       	movw	r14, r30
    473e:	0e 94 12 32 	call	0x6424	; 0x6424 <xTaskGenericNotifyFromISR>
    4742:	e8 85       	ldd	r30, Y+8	; 0x08
    4744:	f9 85       	ldd	r31, Y+9	; 0x09
    4746:	13 86       	std	Z+11, r1	; 0x0b
    4748:	12 86       	std	Z+10, r1	; 0x0a
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
    474a:	8e 81       	ldd	r24, Y+6	; 0x06
    474c:	9f 81       	ldd	r25, Y+7	; 0x07
}
    474e:	61 96       	adiw	r28, 0x11	; 17
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
    475a:	cf 91       	pop	r28
    475c:	df 91       	pop	r29
    475e:	1f 91       	pop	r17
    4760:	0f 91       	pop	r16
    4762:	ff 90       	pop	r15
    4764:	ef 90       	pop	r14
    4766:	08 95       	ret

00004768 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
    4768:	0f 93       	push	r16
    476a:	1f 93       	push	r17
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
    4774:	62 97       	sbiw	r28, 0x12	; 18
    4776:	0f b6       	in	r0, 0x3f	; 63
    4778:	f8 94       	cli
    477a:	de bf       	out	0x3e, r29	; 62
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	cd bf       	out	0x3d, r28	; 61
    4780:	9a 87       	std	Y+10, r25	; 0x0a
    4782:	89 87       	std	Y+9, r24	; 0x09
    4784:	7c 87       	std	Y+12, r23	; 0x0c
    4786:	6b 87       	std	Y+11, r22	; 0x0b
    4788:	5e 87       	std	Y+14, r21	; 0x0e
    478a:	4d 87       	std	Y+13, r20	; 0x0d
    478c:	38 8b       	std	Y+16, r19	; 0x10
    478e:	2f 87       	std	Y+15, r18	; 0x0f
    4790:	1a 8b       	std	Y+18, r17	; 0x12
    4792:	09 8b       	std	Y+17, r16	; 0x11
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
    4794:	89 89       	ldd	r24, Y+17	; 0x11
    4796:	9a 89       	ldd	r25, Y+18	; 0x12
    4798:	00 97       	sbiw	r24, 0x00	; 0
    479a:	91 f1       	breq	.+100    	; 0x4800 <prvReadMessageFromBuffer+0x98>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
    479c:	e9 85       	ldd	r30, Y+9	; 0x09
    479e:	fa 85       	ldd	r31, Y+10	; 0x0a
    47a0:	80 81       	ld	r24, Z
    47a2:	91 81       	ldd	r25, Z+1	; 0x01
    47a4:	9e 83       	std	Y+6, r25	; 0x06
    47a6:	8d 83       	std	Y+5, r24	; 0x05
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    47a8:	ae 01       	movw	r20, r28
    47aa:	49 5f       	subi	r20, 0xF9	; 249
    47ac:	5f 4f       	sbci	r21, 0xFF	; 255
    47ae:	89 85       	ldd	r24, Y+9	; 0x09
    47b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47b2:	29 89       	ldd	r18, Y+17	; 0x11
    47b4:	3a 89       	ldd	r19, Y+18	; 0x12
    47b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    47b8:	f8 89       	ldd	r31, Y+16	; 0x10
    47ba:	ba 01       	movw	r22, r20
    47bc:	a9 01       	movw	r20, r18
    47be:	9f 01       	movw	r18, r30
    47c0:	0e 94 98 25 	call	0x4b30	; 0x4b30 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
    47c4:	8f 81       	ldd	r24, Y+7	; 0x07
    47c6:	98 85       	ldd	r25, Y+8	; 0x08
    47c8:	9a 83       	std	Y+2, r25	; 0x02
    47ca:	89 83       	std	Y+1, r24	; 0x01

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
    47cc:	2f 85       	ldd	r18, Y+15	; 0x0f
    47ce:	38 89       	ldd	r19, Y+16	; 0x10
    47d0:	89 89       	ldd	r24, Y+17	; 0x11
    47d2:	9a 89       	ldd	r25, Y+18	; 0x12
    47d4:	a9 01       	movw	r20, r18
    47d6:	48 1b       	sub	r20, r24
    47d8:	59 0b       	sbc	r21, r25
    47da:	ca 01       	movw	r24, r20
    47dc:	98 8b       	std	Y+16, r25	; 0x10
    47de:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
    47e0:	29 81       	ldd	r18, Y+1	; 0x01
    47e2:	3a 81       	ldd	r19, Y+2	; 0x02
    47e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e8:	82 17       	cp	r24, r18
    47ea:	93 07       	cpc	r25, r19
    47ec:	68 f4       	brcc	.+26     	; 0x4808 <prvReadMessageFromBuffer+0xa0>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
    47ee:	e9 85       	ldd	r30, Y+9	; 0x09
    47f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    47f2:	8d 81       	ldd	r24, Y+5	; 0x05
    47f4:	9e 81       	ldd	r25, Y+6	; 0x06
    47f6:	91 83       	std	Z+1, r25	; 0x01
    47f8:	80 83       	st	Z, r24
			xNextMessageLength = 0;
    47fa:	1a 82       	std	Y+2, r1	; 0x02
    47fc:	19 82       	std	Y+1, r1	; 0x01
    47fe:	04 c0       	rjmp	.+8      	; 0x4808 <prvReadMessageFromBuffer+0xa0>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
    4800:	8d 85       	ldd	r24, Y+13	; 0x0d
    4802:	9e 85       	ldd	r25, Y+14	; 0x0e
    4804:	9a 83       	std	Y+2, r25	; 0x02
    4806:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    4808:	4b 85       	ldd	r20, Y+11	; 0x0b
    480a:	5c 85       	ldd	r21, Y+12	; 0x0c
    480c:	89 85       	ldd	r24, Y+9	; 0x09
    480e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4810:	29 81       	ldd	r18, Y+1	; 0x01
    4812:	3a 81       	ldd	r19, Y+2	; 0x02
    4814:	ef 85       	ldd	r30, Y+15	; 0x0f
    4816:	f8 89       	ldd	r31, Y+16	; 0x10
    4818:	ba 01       	movw	r22, r20
    481a:	a9 01       	movw	r20, r18
    481c:	9f 01       	movw	r18, r30
    481e:	0e 94 98 25 	call	0x4b30	; 0x4b30 <prvReadBytesFromBuffer>
    4822:	9c 83       	std	Y+4, r25	; 0x04
    4824:	8b 83       	std	Y+3, r24	; 0x03

	return xReceivedLength;
    4826:	8b 81       	ldd	r24, Y+3	; 0x03
    4828:	9c 81       	ldd	r25, Y+4	; 0x04
}
    482a:	62 96       	adiw	r28, 0x12	; 18
    482c:	0f b6       	in	r0, 0x3f	; 63
    482e:	f8 94       	cli
    4830:	de bf       	out	0x3e, r29	; 62
    4832:	0f be       	out	0x3f, r0	; 63
    4834:	cd bf       	out	0x3d, r28	; 61
    4836:	cf 91       	pop	r28
    4838:	df 91       	pop	r29
    483a:	1f 91       	pop	r17
    483c:	0f 91       	pop	r16
    483e:	08 95       	ret

00004840 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
    4840:	df 93       	push	r29
    4842:	cf 93       	push	r28
    4844:	cd b7       	in	r28, 0x3d	; 61
    4846:	de b7       	in	r29, 0x3e	; 62
    4848:	27 97       	sbiw	r28, 0x07	; 7
    484a:	0f b6       	in	r0, 0x3f	; 63
    484c:	f8 94       	cli
    484e:	de bf       	out	0x3e, r29	; 62
    4850:	0f be       	out	0x3f, r0	; 63
    4852:	cd bf       	out	0x3d, r28	; 61
    4854:	9f 83       	std	Y+7, r25	; 0x07
    4856:	8e 83       	std	Y+6, r24	; 0x06
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4858:	8e 81       	ldd	r24, Y+6	; 0x06
    485a:	9f 81       	ldd	r25, Y+7	; 0x07
    485c:	9d 83       	std	Y+5, r25	; 0x05
    485e:	8c 83       	std	Y+4, r24	; 0x04
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
    4860:	ec 81       	ldd	r30, Y+4	; 0x04
    4862:	fd 81       	ldd	r31, Y+5	; 0x05
    4864:	80 81       	ld	r24, Z
    4866:	91 81       	ldd	r25, Z+1	; 0x01
    4868:	9a 83       	std	Y+2, r25	; 0x02
    486a:	89 83       	std	Y+1, r24	; 0x01
	if( pxStreamBuffer->xHead == xTail )
    486c:	ec 81       	ldd	r30, Y+4	; 0x04
    486e:	fd 81       	ldd	r31, Y+5	; 0x05
    4870:	22 81       	ldd	r18, Z+2	; 0x02
    4872:	33 81       	ldd	r19, Z+3	; 0x03
    4874:	89 81       	ldd	r24, Y+1	; 0x01
    4876:	9a 81       	ldd	r25, Y+2	; 0x02
    4878:	28 17       	cp	r18, r24
    487a:	39 07       	cpc	r19, r25
    487c:	19 f4       	brne	.+6      	; 0x4884 <xStreamBufferIsEmpty+0x44>
	{
		xReturn = pdTRUE;
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	8b 83       	std	Y+3, r24	; 0x03
    4882:	01 c0       	rjmp	.+2      	; 0x4886 <xStreamBufferIsEmpty+0x46>
	}
	else
	{
		xReturn = pdFALSE;
    4884:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    4886:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4888:	27 96       	adiw	r28, 0x07	; 7
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	de bf       	out	0x3e, r29	; 62
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	cf 91       	pop	r28
    4896:	df 91       	pop	r29
    4898:	08 95       	ret

0000489a <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    489a:	df 93       	push	r29
    489c:	cf 93       	push	r28
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
    48a2:	27 97       	sbiw	r28, 0x07	; 7
    48a4:	0f b6       	in	r0, 0x3f	; 63
    48a6:	f8 94       	cli
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	0f be       	out	0x3f, r0	; 63
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	9f 83       	std	Y+7, r25	; 0x07
    48b0:	8e 83       	std	Y+6, r24	; 0x06
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    48b2:	8e 81       	ldd	r24, Y+6	; 0x06
    48b4:	9f 81       	ldd	r25, Y+7	; 0x07
    48b6:	9a 83       	std	Y+2, r25	; 0x02
    48b8:	89 83       	std	Y+1, r24	; 0x01

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    48ba:	e9 81       	ldd	r30, Y+1	; 0x01
    48bc:	fa 81       	ldd	r31, Y+2	; 0x02
    48be:	86 85       	ldd	r24, Z+14	; 0x0e
    48c0:	88 2f       	mov	r24, r24
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	81 70       	andi	r24, 0x01	; 1
    48c6:	90 70       	andi	r25, 0x00	; 0
    48c8:	88 23       	and	r24, r24
    48ca:	29 f0       	breq	.+10     	; 0x48d6 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    48cc:	82 e0       	ldi	r24, 0x02	; 2
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	9c 83       	std	Y+4, r25	; 0x04
    48d2:	8b 83       	std	Y+3, r24	; 0x03
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    48d6:	1c 82       	std	Y+4, r1	; 0x04
    48d8:	1b 82       	std	Y+3, r1	; 0x03
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    48da:	8e 81       	ldd	r24, Y+6	; 0x06
    48dc:	9f 81       	ldd	r25, Y+7	; 0x07
    48de:	0e 94 15 20 	call	0x402a	; 0x402a <xStreamBufferSpacesAvailable>
    48e2:	9c 01       	movw	r18, r24
    48e4:	8b 81       	ldd	r24, Y+3	; 0x03
    48e6:	9c 81       	ldd	r25, Y+4	; 0x04
    48e8:	82 17       	cp	r24, r18
    48ea:	93 07       	cpc	r25, r19
    48ec:	18 f0       	brcs	.+6      	; 0x48f4 <xStreamBufferIsFull+0x5a>
	{
		xReturn = pdTRUE;
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	8d 83       	std	Y+5, r24	; 0x05
    48f2:	01 c0       	rjmp	.+2      	; 0x48f6 <xStreamBufferIsFull+0x5c>
	}
	else
	{
		xReturn = pdFALSE;
    48f4:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    48f6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    48f8:	27 96       	adiw	r28, 0x07	; 7
    48fa:	0f b6       	in	r0, 0x3f	; 63
    48fc:	f8 94       	cli
    48fe:	de bf       	out	0x3e, r29	; 62
    4900:	0f be       	out	0x3f, r0	; 63
    4902:	cd bf       	out	0x3d, r28	; 61
    4904:	cf 91       	pop	r28
    4906:	df 91       	pop	r29
    4908:	08 95       	ret

0000490a <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    490a:	ef 92       	push	r14
    490c:	ff 92       	push	r15
    490e:	0f 93       	push	r16
    4910:	1f 93       	push	r17
    4912:	df 93       	push	r29
    4914:	cf 93       	push	r28
    4916:	cd b7       	in	r28, 0x3d	; 61
    4918:	de b7       	in	r29, 0x3e	; 62
    491a:	28 97       	sbiw	r28, 0x08	; 8
    491c:	0f b6       	in	r0, 0x3f	; 63
    491e:	f8 94       	cli
    4920:	de bf       	out	0x3e, r29	; 62
    4922:	0f be       	out	0x3f, r0	; 63
    4924:	cd bf       	out	0x3d, r28	; 61
    4926:	9e 83       	std	Y+6, r25	; 0x06
    4928:	8d 83       	std	Y+5, r24	; 0x05
    492a:	78 87       	std	Y+8, r23	; 0x08
    492c:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    492e:	8d 81       	ldd	r24, Y+5	; 0x05
    4930:	9e 81       	ldd	r25, Y+6	; 0x06
    4932:	9c 83       	std	Y+4, r25	; 0x04
    4934:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    4936:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    4938:	eb 81       	ldd	r30, Y+3	; 0x03
    493a:	fc 81       	ldd	r31, Y+4	; 0x04
    493c:	80 85       	ldd	r24, Z+8	; 0x08
    493e:	91 85       	ldd	r25, Z+9	; 0x09
    4940:	00 97       	sbiw	r24, 0x00	; 0
    4942:	b9 f0       	breq	.+46     	; 0x4972 <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    4944:	eb 81       	ldd	r30, Y+3	; 0x03
    4946:	fc 81       	ldd	r31, Y+4	; 0x04
    4948:	80 85       	ldd	r24, Z+8	; 0x08
    494a:	91 85       	ldd	r25, Z+9	; 0x09
    494c:	ef 81       	ldd	r30, Y+7	; 0x07
    494e:	f8 85       	ldd	r31, Y+8	; 0x08
    4950:	40 e0       	ldi	r20, 0x00	; 0
    4952:	50 e0       	ldi	r21, 0x00	; 0
    4954:	60 e0       	ldi	r22, 0x00	; 0
    4956:	70 e0       	ldi	r23, 0x00	; 0
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	00 e0       	ldi	r16, 0x00	; 0
    495c:	10 e0       	ldi	r17, 0x00	; 0
    495e:	7f 01       	movw	r14, r30
    4960:	0e 94 12 32 	call	0x6424	; 0x6424 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    4964:	eb 81       	ldd	r30, Y+3	; 0x03
    4966:	fc 81       	ldd	r31, Y+4	; 0x04
    4968:	11 86       	std	Z+9, r1	; 0x09
    496a:	10 86       	std	Z+8, r1	; 0x08
			xReturn = pdTRUE;
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	8a 83       	std	Y+2, r24	; 0x02
    4970:	01 c0       	rjmp	.+2      	; 0x4974 <xStreamBufferSendCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    4972:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4974:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4976:	28 96       	adiw	r28, 0x08	; 8
    4978:	0f b6       	in	r0, 0x3f	; 63
    497a:	f8 94       	cli
    497c:	de bf       	out	0x3e, r29	; 62
    497e:	0f be       	out	0x3f, r0	; 63
    4980:	cd bf       	out	0x3d, r28	; 61
    4982:	cf 91       	pop	r28
    4984:	df 91       	pop	r29
    4986:	1f 91       	pop	r17
    4988:	0f 91       	pop	r16
    498a:	ff 90       	pop	r15
    498c:	ef 90       	pop	r14
    498e:	08 95       	ret

00004990 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    4990:	ef 92       	push	r14
    4992:	ff 92       	push	r15
    4994:	0f 93       	push	r16
    4996:	1f 93       	push	r17
    4998:	df 93       	push	r29
    499a:	cf 93       	push	r28
    499c:	cd b7       	in	r28, 0x3d	; 61
    499e:	de b7       	in	r29, 0x3e	; 62
    49a0:	28 97       	sbiw	r28, 0x08	; 8
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	9e 83       	std	Y+6, r25	; 0x06
    49ae:	8d 83       	std	Y+5, r24	; 0x05
    49b0:	78 87       	std	Y+8, r23	; 0x08
    49b2:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	9e 81       	ldd	r25, Y+6	; 0x06
    49b8:	9c 83       	std	Y+4, r25	; 0x04
    49ba:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    49bc:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    49be:	eb 81       	ldd	r30, Y+3	; 0x03
    49c0:	fc 81       	ldd	r31, Y+4	; 0x04
    49c2:	82 85       	ldd	r24, Z+10	; 0x0a
    49c4:	93 85       	ldd	r25, Z+11	; 0x0b
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	b9 f0       	breq	.+46     	; 0x49f8 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    49ca:	eb 81       	ldd	r30, Y+3	; 0x03
    49cc:	fc 81       	ldd	r31, Y+4	; 0x04
    49ce:	82 85       	ldd	r24, Z+10	; 0x0a
    49d0:	93 85       	ldd	r25, Z+11	; 0x0b
    49d2:	ef 81       	ldd	r30, Y+7	; 0x07
    49d4:	f8 85       	ldd	r31, Y+8	; 0x08
    49d6:	40 e0       	ldi	r20, 0x00	; 0
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	60 e0       	ldi	r22, 0x00	; 0
    49dc:	70 e0       	ldi	r23, 0x00	; 0
    49de:	20 e0       	ldi	r18, 0x00	; 0
    49e0:	00 e0       	ldi	r16, 0x00	; 0
    49e2:	10 e0       	ldi	r17, 0x00	; 0
    49e4:	7f 01       	movw	r14, r30
    49e6:	0e 94 12 32 	call	0x6424	; 0x6424 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    49ea:	eb 81       	ldd	r30, Y+3	; 0x03
    49ec:	fc 81       	ldd	r31, Y+4	; 0x04
    49ee:	13 86       	std	Z+11, r1	; 0x0b
    49f0:	12 86       	std	Z+10, r1	; 0x0a
			xReturn = pdTRUE;
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	8a 83       	std	Y+2, r24	; 0x02
    49f6:	01 c0       	rjmp	.+2      	; 0x49fa <xStreamBufferReceiveCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    49f8:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    49fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    49fc:	28 96       	adiw	r28, 0x08	; 8
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	f8 94       	cli
    4a02:	de bf       	out	0x3e, r29	; 62
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	cd bf       	out	0x3d, r28	; 61
    4a08:	cf 91       	pop	r28
    4a0a:	df 91       	pop	r29
    4a0c:	1f 91       	pop	r17
    4a0e:	0f 91       	pop	r16
    4a10:	ff 90       	pop	r15
    4a12:	ef 90       	pop	r14
    4a14:	08 95       	ret

00004a16 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	cd b7       	in	r28, 0x3d	; 61
    4a1c:	de b7       	in	r29, 0x3e	; 62
    4a1e:	2e 97       	sbiw	r28, 0x0e	; 14
    4a20:	0f b6       	in	r0, 0x3f	; 63
    4a22:	f8 94       	cli
    4a24:	de bf       	out	0x3e, r29	; 62
    4a26:	0f be       	out	0x3f, r0	; 63
    4a28:	cd bf       	out	0x3d, r28	; 61
    4a2a:	9e 83       	std	Y+6, r25	; 0x06
    4a2c:	8d 83       	std	Y+5, r24	; 0x05
    4a2e:	78 87       	std	Y+8, r23	; 0x08
    4a30:	6f 83       	std	Y+7, r22	; 0x07
    4a32:	5a 87       	std	Y+10, r21	; 0x0a
    4a34:	49 87       	std	Y+9, r20	; 0x09
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
    4a36:	ed 81       	ldd	r30, Y+5	; 0x05
    4a38:	fe 81       	ldd	r31, Y+6	; 0x06
    4a3a:	82 81       	ldd	r24, Z+2	; 0x02
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	9c 83       	std	Y+4, r25	; 0x04
    4a40:	8b 83       	std	Y+3, r24	; 0x03

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    4a42:	ed 81       	ldd	r30, Y+5	; 0x05
    4a44:	fe 81       	ldd	r31, Y+6	; 0x06
    4a46:	24 81       	ldd	r18, Z+4	; 0x04
    4a48:	35 81       	ldd	r19, Z+5	; 0x05
    4a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a4e:	a9 01       	movw	r20, r18
    4a50:	48 1b       	sub	r20, r24
    4a52:	59 0b       	sbc	r21, r25
    4a54:	ca 01       	movw	r24, r20
    4a56:	29 85       	ldd	r18, Y+9	; 0x09
    4a58:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a5a:	3e 87       	std	Y+14, r19	; 0x0e
    4a5c:	2d 87       	std	Y+13, r18	; 0x0d
    4a5e:	9c 87       	std	Y+12, r25	; 0x0c
    4a60:	8b 87       	std	Y+11, r24	; 0x0b
    4a62:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a64:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a6a:	84 17       	cp	r24, r20
    4a6c:	95 07       	cpc	r25, r21
    4a6e:	20 f4       	brcc	.+8      	; 0x4a78 <prvWriteBytesToBuffer+0x62>
    4a70:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a72:	3e 85       	ldd	r19, Y+14	; 0x0e
    4a74:	3c 87       	std	Y+12, r19	; 0x0c
    4a76:	2b 87       	std	Y+11, r18	; 0x0b
    4a78:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a7a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a7c:	5a 83       	std	Y+2, r21	; 0x02
    4a7e:	49 83       	std	Y+1, r20	; 0x01

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4a80:	ed 81       	ldd	r30, Y+5	; 0x05
    4a82:	fe 81       	ldd	r31, Y+6	; 0x06
    4a84:	24 85       	ldd	r18, Z+12	; 0x0c
    4a86:	35 85       	ldd	r19, Z+13	; 0x0d
    4a88:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a8c:	82 0f       	add	r24, r18
    4a8e:	93 1f       	adc	r25, r19
    4a90:	2f 81       	ldd	r18, Y+7	; 0x07
    4a92:	38 85       	ldd	r19, Y+8	; 0x08
    4a94:	49 81       	ldd	r20, Y+1	; 0x01
    4a96:	5a 81       	ldd	r21, Y+2	; 0x02
    4a98:	b9 01       	movw	r22, r18
    4a9a:	0e 94 7d 34 	call	0x68fa	; 0x68fa <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
    4a9e:	29 85       	ldd	r18, Y+9	; 0x09
    4aa0:	3a 85       	ldd	r19, Y+10	; 0x0a
    4aa2:	89 81       	ldd	r24, Y+1	; 0x01
    4aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa6:	82 17       	cp	r24, r18
    4aa8:	93 07       	cpc	r25, r19
    4aaa:	b0 f4       	brcc	.+44     	; 0x4ad8 <prvWriteBytesToBuffer+0xc2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4aac:	ed 81       	ldd	r30, Y+5	; 0x05
    4aae:	fe 81       	ldd	r31, Y+6	; 0x06
    4ab0:	64 85       	ldd	r22, Z+12	; 0x0c
    4ab2:	75 85       	ldd	r23, Z+13	; 0x0d
    4ab4:	2f 81       	ldd	r18, Y+7	; 0x07
    4ab6:	38 85       	ldd	r19, Y+8	; 0x08
    4ab8:	89 81       	ldd	r24, Y+1	; 0x01
    4aba:	9a 81       	ldd	r25, Y+2	; 0x02
    4abc:	a9 01       	movw	r20, r18
    4abe:	48 0f       	add	r20, r24
    4ac0:	59 1f       	adc	r21, r25
    4ac2:	29 85       	ldd	r18, Y+9	; 0x09
    4ac4:	3a 85       	ldd	r19, Y+10	; 0x0a
    4ac6:	89 81       	ldd	r24, Y+1	; 0x01
    4ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aca:	28 1b       	sub	r18, r24
    4acc:	39 0b       	sbc	r19, r25
    4ace:	cb 01       	movw	r24, r22
    4ad0:	ba 01       	movw	r22, r20
    4ad2:	a9 01       	movw	r20, r18
    4ad4:	0e 94 7d 34 	call	0x68fa	; 0x68fa <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
    4ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    4ada:	3c 81       	ldd	r19, Y+4	; 0x04
    4adc:	89 85       	ldd	r24, Y+9	; 0x09
    4ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ae0:	82 0f       	add	r24, r18
    4ae2:	93 1f       	adc	r25, r19
    4ae4:	9c 83       	std	Y+4, r25	; 0x04
    4ae6:	8b 83       	std	Y+3, r24	; 0x03
	if( xNextHead >= pxStreamBuffer->xLength )
    4ae8:	ed 81       	ldd	r30, Y+5	; 0x05
    4aea:	fe 81       	ldd	r31, Y+6	; 0x06
    4aec:	24 81       	ldd	r18, Z+4	; 0x04
    4aee:	35 81       	ldd	r19, Z+5	; 0x05
    4af0:	8b 81       	ldd	r24, Y+3	; 0x03
    4af2:	9c 81       	ldd	r25, Y+4	; 0x04
    4af4:	82 17       	cp	r24, r18
    4af6:	93 07       	cpc	r25, r19
    4af8:	50 f0       	brcs	.+20     	; 0x4b0e <prvWriteBytesToBuffer+0xf8>
	{
		xNextHead -= pxStreamBuffer->xLength;
    4afa:	ed 81       	ldd	r30, Y+5	; 0x05
    4afc:	fe 81       	ldd	r31, Y+6	; 0x06
    4afe:	24 81       	ldd	r18, Z+4	; 0x04
    4b00:	35 81       	ldd	r19, Z+5	; 0x05
    4b02:	8b 81       	ldd	r24, Y+3	; 0x03
    4b04:	9c 81       	ldd	r25, Y+4	; 0x04
    4b06:	82 1b       	sub	r24, r18
    4b08:	93 0b       	sbc	r25, r19
    4b0a:	9c 83       	std	Y+4, r25	; 0x04
    4b0c:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
    4b0e:	ed 81       	ldd	r30, Y+5	; 0x05
    4b10:	fe 81       	ldd	r31, Y+6	; 0x06
    4b12:	8b 81       	ldd	r24, Y+3	; 0x03
    4b14:	9c 81       	ldd	r25, Y+4	; 0x04
    4b16:	93 83       	std	Z+3, r25	; 0x03
    4b18:	82 83       	std	Z+2, r24	; 0x02

	return xCount;
    4b1a:	89 85       	ldd	r24, Y+9	; 0x09
    4b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    4b1e:	2e 96       	adiw	r28, 0x0e	; 14
    4b20:	0f b6       	in	r0, 0x3f	; 63
    4b22:	f8 94       	cli
    4b24:	de bf       	out	0x3e, r29	; 62
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	cd bf       	out	0x3d, r28	; 61
    4b2a:	cf 91       	pop	r28
    4b2c:	df 91       	pop	r29
    4b2e:	08 95       	ret

00004b30 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    4b30:	df 93       	push	r29
    4b32:	cf 93       	push	r28
    4b34:	cd b7       	in	r28, 0x3d	; 61
    4b36:	de b7       	in	r29, 0x3e	; 62
    4b38:	66 97       	sbiw	r28, 0x16	; 22
    4b3a:	0f b6       	in	r0, 0x3f	; 63
    4b3c:	f8 94       	cli
    4b3e:	de bf       	out	0x3e, r29	; 62
    4b40:	0f be       	out	0x3f, r0	; 63
    4b42:	cd bf       	out	0x3d, r28	; 61
    4b44:	98 87       	std	Y+8, r25	; 0x08
    4b46:	8f 83       	std	Y+7, r24	; 0x07
    4b48:	7a 87       	std	Y+10, r23	; 0x0a
    4b4a:	69 87       	std	Y+9, r22	; 0x09
    4b4c:	5c 87       	std	Y+12, r21	; 0x0c
    4b4e:	4b 87       	std	Y+11, r20	; 0x0b
    4b50:	3e 87       	std	Y+14, r19	; 0x0e
    4b52:	2d 87       	std	Y+13, r18	; 0x0d
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
    4b54:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b56:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b58:	3a 8b       	std	Y+18, r19	; 0x12
    4b5a:	29 8b       	std	Y+17, r18	; 0x11
    4b5c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b5e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b60:	58 8b       	std	Y+16, r21	; 0x10
    4b62:	4f 87       	std	Y+15, r20	; 0x0f
    4b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b66:	98 89       	ldd	r25, Y+16	; 0x10
    4b68:	29 89       	ldd	r18, Y+17	; 0x11
    4b6a:	3a 89       	ldd	r19, Y+18	; 0x12
    4b6c:	28 17       	cp	r18, r24
    4b6e:	39 07       	cpc	r19, r25
    4b70:	20 f4       	brcc	.+8      	; 0x4b7a <prvReadBytesFromBuffer+0x4a>
    4b72:	49 89       	ldd	r20, Y+17	; 0x11
    4b74:	5a 89       	ldd	r21, Y+18	; 0x12
    4b76:	58 8b       	std	Y+16, r21	; 0x10
    4b78:	4f 87       	std	Y+15, r20	; 0x0f
    4b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b7c:	98 89       	ldd	r25, Y+16	; 0x10
    4b7e:	9e 83       	std	Y+6, r25	; 0x06
    4b80:	8d 83       	std	Y+5, r24	; 0x05

	if( xCount > ( size_t ) 0 )
    4b82:	8d 81       	ldd	r24, Y+5	; 0x05
    4b84:	9e 81       	ldd	r25, Y+6	; 0x06
    4b86:	00 97       	sbiw	r24, 0x00	; 0
    4b88:	09 f4       	brne	.+2      	; 0x4b8c <prvReadBytesFromBuffer+0x5c>
    4b8a:	74 c0       	rjmp	.+232    	; 0x4c74 <prvReadBytesFromBuffer+0x144>
	{
		xNextTail = pxStreamBuffer->xTail;
    4b8c:	ef 81       	ldd	r30, Y+7	; 0x07
    4b8e:	f8 85       	ldd	r31, Y+8	; 0x08
    4b90:	80 81       	ld	r24, Z
    4b92:	91 81       	ldd	r25, Z+1	; 0x01
    4b94:	9a 83       	std	Y+2, r25	; 0x02
    4b96:	89 83       	std	Y+1, r24	; 0x01

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    4b98:	ef 81       	ldd	r30, Y+7	; 0x07
    4b9a:	f8 85       	ldd	r31, Y+8	; 0x08
    4b9c:	24 81       	ldd	r18, Z+4	; 0x04
    4b9e:	35 81       	ldd	r19, Z+5	; 0x05
    4ba0:	89 81       	ldd	r24, Y+1	; 0x01
    4ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba4:	a9 01       	movw	r20, r18
    4ba6:	48 1b       	sub	r20, r24
    4ba8:	59 0b       	sbc	r21, r25
    4baa:	ca 01       	movw	r24, r20
    4bac:	2d 81       	ldd	r18, Y+5	; 0x05
    4bae:	3e 81       	ldd	r19, Y+6	; 0x06
    4bb0:	3e 8b       	std	Y+22, r19	; 0x16
    4bb2:	2d 8b       	std	Y+21, r18	; 0x15
    4bb4:	9c 8b       	std	Y+20, r25	; 0x14
    4bb6:	8b 8b       	std	Y+19, r24	; 0x13
    4bb8:	4b 89       	ldd	r20, Y+19	; 0x13
    4bba:	5c 89       	ldd	r21, Y+20	; 0x14
    4bbc:	8d 89       	ldd	r24, Y+21	; 0x15
    4bbe:	9e 89       	ldd	r25, Y+22	; 0x16
    4bc0:	84 17       	cp	r24, r20
    4bc2:	95 07       	cpc	r25, r21
    4bc4:	20 f4       	brcc	.+8      	; 0x4bce <prvReadBytesFromBuffer+0x9e>
    4bc6:	2d 89       	ldd	r18, Y+21	; 0x15
    4bc8:	3e 89       	ldd	r19, Y+22	; 0x16
    4bca:	3c 8b       	std	Y+20, r19	; 0x14
    4bcc:	2b 8b       	std	Y+19, r18	; 0x13
    4bce:	4b 89       	ldd	r20, Y+19	; 0x13
    4bd0:	5c 89       	ldd	r21, Y+20	; 0x14
    4bd2:	5c 83       	std	Y+4, r21	; 0x04
    4bd4:	4b 83       	std	Y+3, r20	; 0x03

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4bd6:	ef 81       	ldd	r30, Y+7	; 0x07
    4bd8:	f8 85       	ldd	r31, Y+8	; 0x08
    4bda:	24 85       	ldd	r18, Z+12	; 0x0c
    4bdc:	35 85       	ldd	r19, Z+13	; 0x0d
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	9a 81       	ldd	r25, Y+2	; 0x02
    4be2:	a9 01       	movw	r20, r18
    4be4:	48 0f       	add	r20, r24
    4be6:	59 1f       	adc	r21, r25
    4be8:	89 85       	ldd	r24, Y+9	; 0x09
    4bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bec:	2b 81       	ldd	r18, Y+3	; 0x03
    4bee:	3c 81       	ldd	r19, Y+4	; 0x04
    4bf0:	ba 01       	movw	r22, r20
    4bf2:	a9 01       	movw	r20, r18
    4bf4:	0e 94 7d 34 	call	0x68fa	; 0x68fa <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
    4bf8:	2d 81       	ldd	r18, Y+5	; 0x05
    4bfa:	3e 81       	ldd	r19, Y+6	; 0x06
    4bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    4c00:	82 17       	cp	r24, r18
    4c02:	93 07       	cpc	r25, r19
    4c04:	b0 f4       	brcc	.+44     	; 0x4c32 <prvReadBytesFromBuffer+0x102>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4c06:	29 85       	ldd	r18, Y+9	; 0x09
    4c08:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c0e:	b9 01       	movw	r22, r18
    4c10:	68 0f       	add	r22, r24
    4c12:	79 1f       	adc	r23, r25
    4c14:	ef 81       	ldd	r30, Y+7	; 0x07
    4c16:	f8 85       	ldd	r31, Y+8	; 0x08
    4c18:	44 85       	ldd	r20, Z+12	; 0x0c
    4c1a:	55 85       	ldd	r21, Z+13	; 0x0d
    4c1c:	2d 81       	ldd	r18, Y+5	; 0x05
    4c1e:	3e 81       	ldd	r19, Y+6	; 0x06
    4c20:	8b 81       	ldd	r24, Y+3	; 0x03
    4c22:	9c 81       	ldd	r25, Y+4	; 0x04
    4c24:	28 1b       	sub	r18, r24
    4c26:	39 0b       	sbc	r19, r25
    4c28:	cb 01       	movw	r24, r22
    4c2a:	ba 01       	movw	r22, r20
    4c2c:	a9 01       	movw	r20, r18
    4c2e:	0e 94 7d 34 	call	0x68fa	; 0x68fa <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
    4c32:	29 81       	ldd	r18, Y+1	; 0x01
    4c34:	3a 81       	ldd	r19, Y+2	; 0x02
    4c36:	8d 81       	ldd	r24, Y+5	; 0x05
    4c38:	9e 81       	ldd	r25, Y+6	; 0x06
    4c3a:	82 0f       	add	r24, r18
    4c3c:	93 1f       	adc	r25, r19
    4c3e:	9a 83       	std	Y+2, r25	; 0x02
    4c40:	89 83       	std	Y+1, r24	; 0x01

		if( xNextTail >= pxStreamBuffer->xLength )
    4c42:	ef 81       	ldd	r30, Y+7	; 0x07
    4c44:	f8 85       	ldd	r31, Y+8	; 0x08
    4c46:	24 81       	ldd	r18, Z+4	; 0x04
    4c48:	35 81       	ldd	r19, Z+5	; 0x05
    4c4a:	89 81       	ldd	r24, Y+1	; 0x01
    4c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c4e:	82 17       	cp	r24, r18
    4c50:	93 07       	cpc	r25, r19
    4c52:	50 f0       	brcs	.+20     	; 0x4c68 <prvReadBytesFromBuffer+0x138>
		{
			xNextTail -= pxStreamBuffer->xLength;
    4c54:	ef 81       	ldd	r30, Y+7	; 0x07
    4c56:	f8 85       	ldd	r31, Y+8	; 0x08
    4c58:	24 81       	ldd	r18, Z+4	; 0x04
    4c5a:	35 81       	ldd	r19, Z+5	; 0x05
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c60:	82 1b       	sub	r24, r18
    4c62:	93 0b       	sbc	r25, r19
    4c64:	9a 83       	std	Y+2, r25	; 0x02
    4c66:	89 83       	std	Y+1, r24	; 0x01
		}

		pxStreamBuffer->xTail = xNextTail;
    4c68:	ef 81       	ldd	r30, Y+7	; 0x07
    4c6a:	f8 85       	ldd	r31, Y+8	; 0x08
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c70:	91 83       	std	Z+1, r25	; 0x01
    4c72:	80 83       	st	Z, r24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    4c74:	8d 81       	ldd	r24, Y+5	; 0x05
    4c76:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4c78:	66 96       	adiw	r28, 0x16	; 22
    4c7a:	0f b6       	in	r0, 0x3f	; 63
    4c7c:	f8 94       	cli
    4c7e:	de bf       	out	0x3e, r29	; 62
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	cd bf       	out	0x3d, r28	; 61
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	08 95       	ret

00004c8a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    4c8a:	df 93       	push	r29
    4c8c:	cf 93       	push	r28
    4c8e:	00 d0       	rcall	.+0      	; 0x4c90 <prvBytesInBuffer+0x6>
    4c90:	00 d0       	rcall	.+0      	; 0x4c92 <prvBytesInBuffer+0x8>
    4c92:	cd b7       	in	r28, 0x3d	; 61
    4c94:	de b7       	in	r29, 0x3e	; 62
    4c96:	9c 83       	std	Y+4, r25	; 0x04
    4c98:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    4c9a:	eb 81       	ldd	r30, Y+3	; 0x03
    4c9c:	fc 81       	ldd	r31, Y+4	; 0x04
    4c9e:	24 81       	ldd	r18, Z+4	; 0x04
    4ca0:	35 81       	ldd	r19, Z+5	; 0x05
    4ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    4ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    4ca6:	82 81       	ldd	r24, Z+2	; 0x02
    4ca8:	93 81       	ldd	r25, Z+3	; 0x03
    4caa:	82 0f       	add	r24, r18
    4cac:	93 1f       	adc	r25, r19
    4cae:	9a 83       	std	Y+2, r25	; 0x02
    4cb0:	89 83       	std	Y+1, r24	; 0x01
	xCount -= pxStreamBuffer->xTail;
    4cb2:	eb 81       	ldd	r30, Y+3	; 0x03
    4cb4:	fc 81       	ldd	r31, Y+4	; 0x04
    4cb6:	20 81       	ld	r18, Z
    4cb8:	31 81       	ldd	r19, Z+1	; 0x01
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbe:	82 1b       	sub	r24, r18
    4cc0:	93 0b       	sbc	r25, r19
    4cc2:	9a 83       	std	Y+2, r25	; 0x02
    4cc4:	89 83       	std	Y+1, r24	; 0x01
	if ( xCount >= pxStreamBuffer->xLength )
    4cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    4cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    4cca:	24 81       	ldd	r18, Z+4	; 0x04
    4ccc:	35 81       	ldd	r19, Z+5	; 0x05
    4cce:	89 81       	ldd	r24, Y+1	; 0x01
    4cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd2:	82 17       	cp	r24, r18
    4cd4:	93 07       	cpc	r25, r19
    4cd6:	50 f0       	brcs	.+20     	; 0x4cec <prvBytesInBuffer+0x62>
	{
		xCount -= pxStreamBuffer->xLength;
    4cd8:	eb 81       	ldd	r30, Y+3	; 0x03
    4cda:	fc 81       	ldd	r31, Y+4	; 0x04
    4cdc:	24 81       	ldd	r18, Z+4	; 0x04
    4cde:	35 81       	ldd	r19, Z+5	; 0x05
    4ce0:	89 81       	ldd	r24, Y+1	; 0x01
    4ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ce4:	82 1b       	sub	r24, r18
    4ce6:	93 0b       	sbc	r25, r19
    4ce8:	9a 83       	std	Y+2, r25	; 0x02
    4cea:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    4cec:	89 81       	ldd	r24, Y+1	; 0x01
    4cee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4cf0:	0f 90       	pop	r0
    4cf2:	0f 90       	pop	r0
    4cf4:	0f 90       	pop	r0
    4cf6:	0f 90       	pop	r0
    4cf8:	cf 91       	pop	r28
    4cfa:	df 91       	pop	r29
    4cfc:	08 95       	ret

00004cfe <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
    4cfe:	0f 93       	push	r16
    4d00:	df 93       	push	r29
    4d02:	cf 93       	push	r28
    4d04:	cd b7       	in	r28, 0x3d	; 61
    4d06:	de b7       	in	r29, 0x3e	; 62
    4d08:	29 97       	sbiw	r28, 0x09	; 9
    4d0a:	0f b6       	in	r0, 0x3f	; 63
    4d0c:	f8 94       	cli
    4d0e:	de bf       	out	0x3e, r29	; 62
    4d10:	0f be       	out	0x3f, r0	; 63
    4d12:	cd bf       	out	0x3d, r28	; 61
    4d14:	9a 83       	std	Y+2, r25	; 0x02
    4d16:	89 83       	std	Y+1, r24	; 0x01
    4d18:	7c 83       	std	Y+4, r23	; 0x04
    4d1a:	6b 83       	std	Y+3, r22	; 0x03
    4d1c:	5e 83       	std	Y+6, r21	; 0x06
    4d1e:	4d 83       	std	Y+5, r20	; 0x05
    4d20:	38 87       	std	Y+8, r19	; 0x08
    4d22:	2f 83       	std	Y+7, r18	; 0x07
    4d24:	09 87       	std	Y+9, r16	; 0x09
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    4d26:	89 81       	ldd	r24, Y+1	; 0x01
    4d28:	9a 81       	ldd	r25, Y+2	; 0x02
    4d2a:	60 e0       	ldi	r22, 0x00	; 0
    4d2c:	70 e0       	ldi	r23, 0x00	; 0
    4d2e:	4f e0       	ldi	r20, 0x0F	; 15
    4d30:	50 e0       	ldi	r21, 0x00	; 0
    4d32:	0e 94 86 34 	call	0x690c	; 0x690c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    4d36:	e9 81       	ldd	r30, Y+1	; 0x01
    4d38:	fa 81       	ldd	r31, Y+2	; 0x02
    4d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d3e:	95 87       	std	Z+13, r25	; 0x0d
    4d40:	84 87       	std	Z+12, r24	; 0x0c
	pxStreamBuffer->xLength = xBufferSizeBytes;
    4d42:	e9 81       	ldd	r30, Y+1	; 0x01
    4d44:	fa 81       	ldd	r31, Y+2	; 0x02
    4d46:	8d 81       	ldd	r24, Y+5	; 0x05
    4d48:	9e 81       	ldd	r25, Y+6	; 0x06
    4d4a:	95 83       	std	Z+5, r25	; 0x05
    4d4c:	84 83       	std	Z+4, r24	; 0x04
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    4d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    4d50:	fa 81       	ldd	r31, Y+2	; 0x02
    4d52:	8f 81       	ldd	r24, Y+7	; 0x07
    4d54:	98 85       	ldd	r25, Y+8	; 0x08
    4d56:	97 83       	std	Z+7, r25	; 0x07
    4d58:	86 83       	std	Z+6, r24	; 0x06
	pxStreamBuffer->ucFlags = ucFlags;
    4d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    4d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    4d5e:	89 85       	ldd	r24, Y+9	; 0x09
    4d60:	86 87       	std	Z+14, r24	; 0x0e
}
    4d62:	29 96       	adiw	r28, 0x09	; 9
    4d64:	0f b6       	in	r0, 0x3f	; 63
    4d66:	f8 94       	cli
    4d68:	de bf       	out	0x3e, r29	; 62
    4d6a:	0f be       	out	0x3f, r0	; 63
    4d6c:	cd bf       	out	0x3d, r28	; 61
    4d6e:	cf 91       	pop	r28
    4d70:	df 91       	pop	r29
    4d72:	0f 91       	pop	r16
    4d74:	08 95       	ret

00004d76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    4d76:	8f 92       	push	r8
    4d78:	9f 92       	push	r9
    4d7a:	af 92       	push	r10
    4d7c:	bf 92       	push	r11
    4d7e:	cf 92       	push	r12
    4d80:	df 92       	push	r13
    4d82:	ef 92       	push	r14
    4d84:	ff 92       	push	r15
    4d86:	0f 93       	push	r16
    4d88:	1f 93       	push	r17
    4d8a:	df 93       	push	r29
    4d8c:	cf 93       	push	r28
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
    4d92:	60 97       	sbiw	r28, 0x10	; 16
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	de bf       	out	0x3e, r29	; 62
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	cd bf       	out	0x3d, r28	; 61
    4d9e:	9f 83       	std	Y+7, r25	; 0x07
    4da0:	8e 83       	std	Y+6, r24	; 0x06
    4da2:	79 87       	std	Y+9, r23	; 0x09
    4da4:	68 87       	std	Y+8, r22	; 0x08
    4da6:	5b 87       	std	Y+11, r21	; 0x0b
    4da8:	4a 87       	std	Y+10, r20	; 0x0a
    4daa:	3d 87       	std	Y+13, r19	; 0x0d
    4dac:	2c 87       	std	Y+12, r18	; 0x0c
    4dae:	0e 87       	std	Y+14, r16	; 0x0e
    4db0:	f8 8a       	std	Y+16, r15	; 0x10
    4db2:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    4db4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4db6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4db8:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    4dbc:	9a 83       	std	Y+2, r25	; 0x02
    4dbe:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    4dc0:	89 81       	ldd	r24, Y+1	; 0x01
    4dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc4:	00 97       	sbiw	r24, 0x00	; 0
    4dc6:	b1 f0       	breq	.+44     	; 0x4df4 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    4dc8:	86 e2       	ldi	r24, 0x26	; 38
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    4dd0:	9d 83       	std	Y+5, r25	; 0x05
    4dd2:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    4dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    4dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    4dd8:	00 97       	sbiw	r24, 0x00	; 0
    4dda:	39 f0       	breq	.+14     	; 0x4dea <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    4ddc:	ec 81       	ldd	r30, Y+4	; 0x04
    4dde:	fd 81       	ldd	r31, Y+5	; 0x05
    4de0:	89 81       	ldd	r24, Y+1	; 0x01
    4de2:	9a 81       	ldd	r25, Y+2	; 0x02
    4de4:	90 8f       	std	Z+24, r25	; 0x18
    4de6:	87 8b       	std	Z+23, r24	; 0x17
    4de8:	07 c0       	rjmp	.+14     	; 0x4df8 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	9a 81       	ldd	r25, Y+2	; 0x02
    4dee:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    4df4:	1d 82       	std	Y+5, r1	; 0x05
    4df6:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    4df8:	8c 81       	ldd	r24, Y+4	; 0x04
    4dfa:	9d 81       	ldd	r25, Y+5	; 0x05
    4dfc:	00 97       	sbiw	r24, 0x00	; 0
    4dfe:	e9 f0       	breq	.+58     	; 0x4e3a <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    4e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e02:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e04:	9c 01       	movw	r18, r24
    4e06:	40 e0       	ldi	r20, 0x00	; 0
    4e08:	50 e0       	ldi	r21, 0x00	; 0
    4e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4e0c:	9f 81       	ldd	r25, Y+7	; 0x07
    4e0e:	68 85       	ldd	r22, Y+8	; 0x08
    4e10:	79 85       	ldd	r23, Y+9	; 0x09
    4e12:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e14:	fd 85       	ldd	r31, Y+13	; 0x0d
    4e16:	af 85       	ldd	r26, Y+15	; 0x0f
    4e18:	b8 89       	ldd	r27, Y+16	; 0x10
    4e1a:	ac 80       	ldd	r10, Y+4	; 0x04
    4e1c:	bd 80       	ldd	r11, Y+5	; 0x05
    4e1e:	8f 01       	movw	r16, r30
    4e20:	ee 84       	ldd	r14, Y+14	; 0x0e
    4e22:	6d 01       	movw	r12, r26
    4e24:	88 24       	eor	r8, r8
    4e26:	99 24       	eor	r9, r9
    4e28:	0e 94 33 27 	call	0x4e66	; 0x4e66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    4e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    4e30:	0e 94 ef 27 	call	0x4fde	; 0x4fde <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	8b 83       	std	Y+3, r24	; 0x03
    4e38:	02 c0       	rjmp	.+4      	; 0x4e3e <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4e3a:	8f ef       	ldi	r24, 0xFF	; 255
    4e3c:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    4e3e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    4e40:	60 96       	adiw	r28, 0x10	; 16
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	f8 94       	cli
    4e46:	de bf       	out	0x3e, r29	; 62
    4e48:	0f be       	out	0x3f, r0	; 63
    4e4a:	cd bf       	out	0x3d, r28	; 61
    4e4c:	cf 91       	pop	r28
    4e4e:	df 91       	pop	r29
    4e50:	1f 91       	pop	r17
    4e52:	0f 91       	pop	r16
    4e54:	ff 90       	pop	r15
    4e56:	ef 90       	pop	r14
    4e58:	df 90       	pop	r13
    4e5a:	cf 90       	pop	r12
    4e5c:	bf 90       	pop	r11
    4e5e:	af 90       	pop	r10
    4e60:	9f 90       	pop	r9
    4e62:	8f 90       	pop	r8
    4e64:	08 95       	ret

00004e66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    4e66:	8f 92       	push	r8
    4e68:	9f 92       	push	r9
    4e6a:	af 92       	push	r10
    4e6c:	bf 92       	push	r11
    4e6e:	cf 92       	push	r12
    4e70:	df 92       	push	r13
    4e72:	ef 92       	push	r14
    4e74:	0f 93       	push	r16
    4e76:	1f 93       	push	r17
    4e78:	df 93       	push	r29
    4e7a:	cf 93       	push	r28
    4e7c:	cd b7       	in	r28, 0x3d	; 61
    4e7e:	de b7       	in	r29, 0x3e	; 62
    4e80:	64 97       	sbiw	r28, 0x14	; 20
    4e82:	0f b6       	in	r0, 0x3f	; 63
    4e84:	f8 94       	cli
    4e86:	de bf       	out	0x3e, r29	; 62
    4e88:	0f be       	out	0x3f, r0	; 63
    4e8a:	cd bf       	out	0x3d, r28	; 61
    4e8c:	9d 83       	std	Y+5, r25	; 0x05
    4e8e:	8c 83       	std	Y+4, r24	; 0x04
    4e90:	7f 83       	std	Y+7, r23	; 0x07
    4e92:	6e 83       	std	Y+6, r22	; 0x06
    4e94:	28 87       	std	Y+8, r18	; 0x08
    4e96:	39 87       	std	Y+9, r19	; 0x09
    4e98:	4a 87       	std	Y+10, r20	; 0x0a
    4e9a:	5b 87       	std	Y+11, r21	; 0x0b
    4e9c:	1d 87       	std	Y+13, r17	; 0x0d
    4e9e:	0c 87       	std	Y+12, r16	; 0x0c
    4ea0:	ee 86       	std	Y+14, r14	; 0x0e
    4ea2:	d8 8a       	std	Y+16, r13	; 0x10
    4ea4:	cf 86       	std	Y+15, r12	; 0x0f
    4ea6:	ba 8a       	std	Y+18, r11	; 0x12
    4ea8:	a9 8a       	std	Y+17, r10	; 0x11
    4eaa:	9c 8a       	std	Y+20, r9	; 0x14
    4eac:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    4eae:	e9 89       	ldd	r30, Y+17	; 0x11
    4eb0:	fa 89       	ldd	r31, Y+18	; 0x12
    4eb2:	27 89       	ldd	r18, Z+23	; 0x17
    4eb4:	30 8d       	ldd	r19, Z+24	; 0x18
    4eb6:	88 85       	ldd	r24, Y+8	; 0x08
    4eb8:	99 85       	ldd	r25, Y+9	; 0x09
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	82 0f       	add	r24, r18
    4ebe:	93 1f       	adc	r25, r19
    4ec0:	9b 83       	std	Y+3, r25	; 0x03
    4ec2:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    4ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    4ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    4ec8:	00 97       	sbiw	r24, 0x00	; 0
    4eca:	51 f1       	breq	.+84     	; 0x4f20 <prvInitialiseNewTask+0xba>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4ecc:	19 82       	std	Y+1, r1	; 0x01
    4ece:	21 c0       	rjmp	.+66     	; 0x4f12 <prvInitialiseNewTask+0xac>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	48 2f       	mov	r20, r24
    4ed4:	50 e0       	ldi	r21, 0x00	; 0
    4ed6:	89 81       	ldd	r24, Y+1	; 0x01
    4ed8:	28 2f       	mov	r18, r24
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	8e 81       	ldd	r24, Y+6	; 0x06
    4ede:	9f 81       	ldd	r25, Y+7	; 0x07
    4ee0:	fc 01       	movw	r30, r24
    4ee2:	e2 0f       	add	r30, r18
    4ee4:	f3 1f       	adc	r31, r19
    4ee6:	20 81       	ld	r18, Z
    4ee8:	89 89       	ldd	r24, Y+17	; 0x11
    4eea:	9a 89       	ldd	r25, Y+18	; 0x12
    4eec:	84 0f       	add	r24, r20
    4eee:	95 1f       	adc	r25, r21
    4ef0:	fc 01       	movw	r30, r24
    4ef2:	79 96       	adiw	r30, 0x19	; 25
    4ef4:	20 83       	st	Z, r18

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	28 2f       	mov	r18, r24
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	8e 81       	ldd	r24, Y+6	; 0x06
    4efe:	9f 81       	ldd	r25, Y+7	; 0x07
    4f00:	fc 01       	movw	r30, r24
    4f02:	e2 0f       	add	r30, r18
    4f04:	f3 1f       	adc	r31, r19
    4f06:	80 81       	ld	r24, Z
    4f08:	88 23       	and	r24, r24
    4f0a:	31 f0       	breq	.+12     	; 0x4f18 <prvInitialiseNewTask+0xb2>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4f0c:	89 81       	ldd	r24, Y+1	; 0x01
    4f0e:	8f 5f       	subi	r24, 0xFF	; 255
    4f10:	89 83       	std	Y+1, r24	; 0x01
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
    4f14:	88 30       	cpi	r24, 0x08	; 8
    4f16:	e0 f2       	brcs	.-72     	; 0x4ed0 <prvInitialiseNewTask+0x6a>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    4f18:	e9 89       	ldd	r30, Y+17	; 0x11
    4f1a:	fa 89       	ldd	r31, Y+18	; 0x12
    4f1c:	10 a2       	std	Z+32, r1	; 0x20
    4f1e:	03 c0       	rjmp	.+6      	; 0x4f26 <prvInitialiseNewTask+0xc0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    4f20:	e9 89       	ldd	r30, Y+17	; 0x11
    4f22:	fa 89       	ldd	r31, Y+18	; 0x12
    4f24:	11 8e       	std	Z+25, r1	; 0x19
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    4f26:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f28:	84 30       	cpi	r24, 0x04	; 4
    4f2a:	10 f0       	brcs	.+4      	; 0x4f30 <prvInitialiseNewTask+0xca>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    4f2c:	83 e0       	ldi	r24, 0x03	; 3
    4f2e:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    4f30:	e9 89       	ldd	r30, Y+17	; 0x11
    4f32:	fa 89       	ldd	r31, Y+18	; 0x12
    4f34:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f36:	86 8b       	std	Z+22, r24	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    4f38:	89 89       	ldd	r24, Y+17	; 0x11
    4f3a:	9a 89       	ldd	r25, Y+18	; 0x12
    4f3c:	02 96       	adiw	r24, 0x02	; 2
    4f3e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    4f42:	89 89       	ldd	r24, Y+17	; 0x11
    4f44:	9a 89       	ldd	r25, Y+18	; 0x12
    4f46:	0c 96       	adiw	r24, 0x0c	; 12
    4f48:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    4f4c:	e9 89       	ldd	r30, Y+17	; 0x11
    4f4e:	fa 89       	ldd	r31, Y+18	; 0x12
    4f50:	89 89       	ldd	r24, Y+17	; 0x11
    4f52:	9a 89       	ldd	r25, Y+18	; 0x12
    4f54:	91 87       	std	Z+9, r25	; 0x09
    4f56:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4f58:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f5a:	28 2f       	mov	r18, r24
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	84 e0       	ldi	r24, 0x04	; 4
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	82 1b       	sub	r24, r18
    4f64:	93 0b       	sbc	r25, r19
    4f66:	e9 89       	ldd	r30, Y+17	; 0x11
    4f68:	fa 89       	ldd	r31, Y+18	; 0x12
    4f6a:	95 87       	std	Z+13, r25	; 0x0d
    4f6c:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    4f6e:	e9 89       	ldd	r30, Y+17	; 0x11
    4f70:	fa 89       	ldd	r31, Y+18	; 0x12
    4f72:	89 89       	ldd	r24, Y+17	; 0x11
    4f74:	9a 89       	ldd	r25, Y+18	; 0x12
    4f76:	93 8b       	std	Z+19, r25	; 0x13
    4f78:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    4f7a:	e9 89       	ldd	r30, Y+17	; 0x11
    4f7c:	fa 89       	ldd	r31, Y+18	; 0x12
    4f7e:	11 a2       	std	Z+33, r1	; 0x21
    4f80:	12 a2       	std	Z+34, r1	; 0x22
    4f82:	13 a2       	std	Z+35, r1	; 0x23
    4f84:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4f86:	e9 89       	ldd	r30, Y+17	; 0x11
    4f88:	fa 89       	ldd	r31, Y+18	; 0x12
    4f8a:	15 a2       	std	Z+37, r1	; 0x25
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f90:	2c 81       	ldd	r18, Y+4	; 0x04
    4f92:	3d 81       	ldd	r19, Y+5	; 0x05
    4f94:	4c 85       	ldd	r20, Y+12	; 0x0c
    4f96:	5d 85       	ldd	r21, Y+13	; 0x0d
    4f98:	b9 01       	movw	r22, r18
    4f9a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <pxPortInitialiseStack>
    4f9e:	e9 89       	ldd	r30, Y+17	; 0x11
    4fa0:	fa 89       	ldd	r31, Y+18	; 0x12
    4fa2:	91 83       	std	Z+1, r25	; 0x01
    4fa4:	80 83       	st	Z, r24
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    4fa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fa8:	98 89       	ldd	r25, Y+16	; 0x10
    4faa:	00 97       	sbiw	r24, 0x00	; 0
    4fac:	31 f0       	breq	.+12     	; 0x4fba <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    4fae:	ef 85       	ldd	r30, Y+15	; 0x0f
    4fb0:	f8 89       	ldd	r31, Y+16	; 0x10
    4fb2:	89 89       	ldd	r24, Y+17	; 0x11
    4fb4:	9a 89       	ldd	r25, Y+18	; 0x12
    4fb6:	91 83       	std	Z+1, r25	; 0x01
    4fb8:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    4fba:	64 96       	adiw	r28, 0x14	; 20
    4fbc:	0f b6       	in	r0, 0x3f	; 63
    4fbe:	f8 94       	cli
    4fc0:	de bf       	out	0x3e, r29	; 62
    4fc2:	0f be       	out	0x3f, r0	; 63
    4fc4:	cd bf       	out	0x3d, r28	; 61
    4fc6:	cf 91       	pop	r28
    4fc8:	df 91       	pop	r29
    4fca:	1f 91       	pop	r17
    4fcc:	0f 91       	pop	r16
    4fce:	ef 90       	pop	r14
    4fd0:	df 90       	pop	r13
    4fd2:	cf 90       	pop	r12
    4fd4:	bf 90       	pop	r11
    4fd6:	af 90       	pop	r10
    4fd8:	9f 90       	pop	r9
    4fda:	8f 90       	pop	r8
    4fdc:	08 95       	ret

00004fde <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    4fde:	df 93       	push	r29
    4fe0:	cf 93       	push	r28
    4fe2:	00 d0       	rcall	.+0      	; 0x4fe4 <prvAddNewTaskToReadyList+0x6>
    4fe4:	cd b7       	in	r28, 0x3d	; 61
    4fe6:	de b7       	in	r29, 0x3e	; 62
    4fe8:	9a 83       	std	Y+2, r25	; 0x02
    4fea:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    4fec:	0f b6       	in	r0, 0x3f	; 63
    4fee:	f8 94       	cli
    4ff0:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    4ff2:	80 91 69 06 	lds	r24, 0x0669
    4ff6:	8f 5f       	subi	r24, 0xFF	; 255
    4ff8:	80 93 69 06 	sts	0x0669, r24
		if( pxCurrentTCB == NULL )
    4ffc:	80 91 66 06 	lds	r24, 0x0666
    5000:	90 91 67 06 	lds	r25, 0x0667
    5004:	00 97       	sbiw	r24, 0x00	; 0
    5006:	69 f4       	brne	.+26     	; 0x5022 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    5008:	89 81       	ldd	r24, Y+1	; 0x01
    500a:	9a 81       	ldd	r25, Y+2	; 0x02
    500c:	90 93 67 06 	sts	0x0667, r25
    5010:	80 93 66 06 	sts	0x0666, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    5014:	80 91 69 06 	lds	r24, 0x0669
    5018:	81 30       	cpi	r24, 0x01	; 1
    501a:	b9 f4       	brne	.+46     	; 0x504a <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    501c:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <prvInitialiseTaskLists>
    5020:	14 c0       	rjmp	.+40     	; 0x504a <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    5022:	80 91 6d 06 	lds	r24, 0x066D
    5026:	88 23       	and	r24, r24
    5028:	81 f4       	brne	.+32     	; 0x504a <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    502a:	e0 91 66 06 	lds	r30, 0x0666
    502e:	f0 91 67 06 	lds	r31, 0x0667
    5032:	96 89       	ldd	r25, Z+22	; 0x16
    5034:	e9 81       	ldd	r30, Y+1	; 0x01
    5036:	fa 81       	ldd	r31, Y+2	; 0x02
    5038:	86 89       	ldd	r24, Z+22	; 0x16
    503a:	89 17       	cp	r24, r25
    503c:	30 f0       	brcs	.+12     	; 0x504a <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	9a 81       	ldd	r25, Y+2	; 0x02
    5042:	90 93 67 06 	sts	0x0667, r25
    5046:	80 93 66 06 	sts	0x0666, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    504a:	80 91 71 06 	lds	r24, 0x0671
    504e:	8f 5f       	subi	r24, 0xFF	; 255
    5050:	80 93 71 06 	sts	0x0671, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    5054:	e9 81       	ldd	r30, Y+1	; 0x01
    5056:	fa 81       	ldd	r31, Y+2	; 0x02
    5058:	96 89       	ldd	r25, Z+22	; 0x16
    505a:	80 91 6c 06 	lds	r24, 0x066C
    505e:	89 17       	cp	r24, r25
    5060:	28 f4       	brcc	.+10     	; 0x506c <prvAddNewTaskToReadyList+0x8e>
    5062:	e9 81       	ldd	r30, Y+1	; 0x01
    5064:	fa 81       	ldd	r31, Y+2	; 0x02
    5066:	86 89       	ldd	r24, Z+22	; 0x16
    5068:	80 93 6c 06 	sts	0x066C, r24
    506c:	e9 81       	ldd	r30, Y+1	; 0x01
    506e:	fa 81       	ldd	r31, Y+2	; 0x02
    5070:	86 89       	ldd	r24, Z+22	; 0x16
    5072:	28 2f       	mov	r18, r24
    5074:	30 e0       	ldi	r19, 0x00	; 0
    5076:	c9 01       	movw	r24, r18
    5078:	88 0f       	add	r24, r24
    507a:	99 1f       	adc	r25, r25
    507c:	88 0f       	add	r24, r24
    507e:	99 1f       	adc	r25, r25
    5080:	88 0f       	add	r24, r24
    5082:	99 1f       	adc	r25, r25
    5084:	82 0f       	add	r24, r18
    5086:	93 1f       	adc	r25, r19
    5088:	ac 01       	movw	r20, r24
    508a:	49 58       	subi	r20, 0x89	; 137
    508c:	59 4f       	sbci	r21, 0xF9	; 249
    508e:	89 81       	ldd	r24, Y+1	; 0x01
    5090:	9a 81       	ldd	r25, Y+2	; 0x02
    5092:	9c 01       	movw	r18, r24
    5094:	2e 5f       	subi	r18, 0xFE	; 254
    5096:	3f 4f       	sbci	r19, 0xFF	; 255
    5098:	ca 01       	movw	r24, r20
    509a:	b9 01       	movw	r22, r18
    509c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    50a0:	0f 90       	pop	r0
    50a2:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    50a4:	80 91 6d 06 	lds	r24, 0x066D
    50a8:	88 23       	and	r24, r24
    50aa:	61 f0       	breq	.+24     	; 0x50c4 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    50ac:	e0 91 66 06 	lds	r30, 0x0666
    50b0:	f0 91 67 06 	lds	r31, 0x0667
    50b4:	96 89       	ldd	r25, Z+22	; 0x16
    50b6:	e9 81       	ldd	r30, Y+1	; 0x01
    50b8:	fa 81       	ldd	r31, Y+2	; 0x02
    50ba:	86 89       	ldd	r24, Z+22	; 0x16
    50bc:	98 17       	cp	r25, r24
    50be:	10 f4       	brcc	.+4      	; 0x50c4 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    50c0:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	cf 91       	pop	r28
    50ca:	df 91       	pop	r29
    50cc:	08 95       	ret

000050ce <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    50ce:	df 93       	push	r29
    50d0:	cf 93       	push	r28
    50d2:	00 d0       	rcall	.+0      	; 0x50d4 <vTaskDelete+0x6>
    50d4:	00 d0       	rcall	.+0      	; 0x50d6 <vTaskDelete+0x8>
    50d6:	00 d0       	rcall	.+0      	; 0x50d8 <vTaskDelete+0xa>
    50d8:	cd b7       	in	r28, 0x3d	; 61
    50da:	de b7       	in	r29, 0x3e	; 62
    50dc:	9c 83       	std	Y+4, r25	; 0x04
    50de:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    50e0:	0f b6       	in	r0, 0x3f	; 63
    50e2:	f8 94       	cli
    50e4:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    50e6:	8b 81       	ldd	r24, Y+3	; 0x03
    50e8:	9c 81       	ldd	r25, Y+4	; 0x04
    50ea:	00 97       	sbiw	r24, 0x00	; 0
    50ec:	39 f4       	brne	.+14     	; 0x50fc <vTaskDelete+0x2e>
    50ee:	80 91 66 06 	lds	r24, 0x0666
    50f2:	90 91 67 06 	lds	r25, 0x0667
    50f6:	9e 83       	std	Y+6, r25	; 0x06
    50f8:	8d 83       	std	Y+5, r24	; 0x05
    50fa:	04 c0       	rjmp	.+8      	; 0x5104 <vTaskDelete+0x36>
    50fc:	8b 81       	ldd	r24, Y+3	; 0x03
    50fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5100:	9e 83       	std	Y+6, r25	; 0x06
    5102:	8d 83       	std	Y+5, r24	; 0x05
    5104:	8d 81       	ldd	r24, Y+5	; 0x05
    5106:	9e 81       	ldd	r25, Y+6	; 0x06
    5108:	9a 83       	std	Y+2, r25	; 0x02
    510a:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    510c:	89 81       	ldd	r24, Y+1	; 0x01
    510e:	9a 81       	ldd	r25, Y+2	; 0x02
    5110:	02 96       	adiw	r24, 0x02	; 2
    5112:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5116:	e9 81       	ldd	r30, Y+1	; 0x01
    5118:	fa 81       	ldd	r31, Y+2	; 0x02
    511a:	84 89       	ldd	r24, Z+20	; 0x14
    511c:	95 89       	ldd	r25, Z+21	; 0x15
    511e:	00 97       	sbiw	r24, 0x00	; 0
    5120:	29 f0       	breq	.+10     	; 0x512c <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5122:	89 81       	ldd	r24, Y+1	; 0x01
    5124:	9a 81       	ldd	r25, Y+2	; 0x02
    5126:	0c 96       	adiw	r24, 0x0c	; 12
    5128:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    512c:	80 91 71 06 	lds	r24, 0x0671
    5130:	8f 5f       	subi	r24, 0xFF	; 255
    5132:	80 93 71 06 	sts	0x0671, r24

			if( pxTCB == pxCurrentTCB )
    5136:	20 91 66 06 	lds	r18, 0x0666
    513a:	30 91 67 06 	lds	r19, 0x0667
    513e:	89 81       	ldd	r24, Y+1	; 0x01
    5140:	9a 81       	ldd	r25, Y+2	; 0x02
    5142:	82 17       	cp	r24, r18
    5144:	93 07       	cpc	r25, r19
    5146:	81 f4       	brne	.+32     	; 0x5168 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	9a 81       	ldd	r25, Y+2	; 0x02
    514c:	9c 01       	movw	r18, r24
    514e:	2e 5f       	subi	r18, 0xFE	; 254
    5150:	3f 4f       	sbci	r19, 0xFF	; 255
    5152:	8a eb       	ldi	r24, 0xBA	; 186
    5154:	96 e0       	ldi	r25, 0x06	; 6
    5156:	b9 01       	movw	r22, r18
    5158:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    515c:	80 91 68 06 	lds	r24, 0x0668
    5160:	8f 5f       	subi	r24, 0xFF	; 255
    5162:	80 93 68 06 	sts	0x0668, r24
    5166:	0b c0       	rjmp	.+22     	; 0x517e <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    5168:	80 91 69 06 	lds	r24, 0x0669
    516c:	81 50       	subi	r24, 0x01	; 1
    516e:	80 93 69 06 	sts	0x0669, r24
				prvDeleteTCB( pxTCB );
    5172:	89 81       	ldd	r24, Y+1	; 0x01
    5174:	9a 81       	ldd	r25, Y+2	; 0x02
    5176:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    517a:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    517e:	0f 90       	pop	r0
    5180:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    5182:	80 91 6d 06 	lds	r24, 0x066D
    5186:	88 23       	and	r24, r24
    5188:	59 f0       	breq	.+22     	; 0x51a0 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    518a:	20 91 66 06 	lds	r18, 0x0666
    518e:	30 91 67 06 	lds	r19, 0x0667
    5192:	89 81       	ldd	r24, Y+1	; 0x01
    5194:	9a 81       	ldd	r25, Y+2	; 0x02
    5196:	82 17       	cp	r24, r18
    5198:	93 07       	cpc	r25, r19
    519a:	11 f4       	brne	.+4      	; 0x51a0 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    519c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    51a0:	26 96       	adiw	r28, 0x06	; 6
    51a2:	0f b6       	in	r0, 0x3f	; 63
    51a4:	f8 94       	cli
    51a6:	de bf       	out	0x3e, r29	; 62
    51a8:	0f be       	out	0x3f, r0	; 63
    51aa:	cd bf       	out	0x3d, r28	; 61
    51ac:	cf 91       	pop	r28
    51ae:	df 91       	pop	r29
    51b0:	08 95       	ret

000051b2 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    51b2:	df 93       	push	r29
    51b4:	cf 93       	push	r28
    51b6:	cd b7       	in	r28, 0x3d	; 61
    51b8:	de b7       	in	r29, 0x3e	; 62
    51ba:	2a 97       	sbiw	r28, 0x0a	; 10
    51bc:	0f b6       	in	r0, 0x3f	; 63
    51be:	f8 94       	cli
    51c0:	de bf       	out	0x3e, r29	; 62
    51c2:	0f be       	out	0x3f, r0	; 63
    51c4:	cd bf       	out	0x3d, r28	; 61
    51c6:	98 87       	std	Y+8, r25	; 0x08
    51c8:	8f 83       	std	Y+7, r24	; 0x07
    51ca:	7a 87       	std	Y+10, r23	; 0x0a
    51cc:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    51ce:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    51d0:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    51d4:	80 91 6a 06 	lds	r24, 0x066A
    51d8:	90 91 6b 06 	lds	r25, 0x066B
    51dc:	9a 83       	std	Y+2, r25	; 0x02
    51de:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    51e0:	ef 81       	ldd	r30, Y+7	; 0x07
    51e2:	f8 85       	ldd	r31, Y+8	; 0x08
    51e4:	20 81       	ld	r18, Z
    51e6:	31 81       	ldd	r19, Z+1	; 0x01
    51e8:	89 85       	ldd	r24, Y+9	; 0x09
    51ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ec:	82 0f       	add	r24, r18
    51ee:	93 1f       	adc	r25, r19
    51f0:	9e 83       	std	Y+6, r25	; 0x06
    51f2:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    51f4:	ef 81       	ldd	r30, Y+7	; 0x07
    51f6:	f8 85       	ldd	r31, Y+8	; 0x08
    51f8:	20 81       	ld	r18, Z
    51fa:	31 81       	ldd	r19, Z+1	; 0x01
    51fc:	89 81       	ldd	r24, Y+1	; 0x01
    51fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5200:	82 17       	cp	r24, r18
    5202:	93 07       	cpc	r25, r19
    5204:	98 f4       	brcc	.+38     	; 0x522c <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    5206:	ef 81       	ldd	r30, Y+7	; 0x07
    5208:	f8 85       	ldd	r31, Y+8	; 0x08
    520a:	20 81       	ld	r18, Z
    520c:	31 81       	ldd	r19, Z+1	; 0x01
    520e:	8d 81       	ldd	r24, Y+5	; 0x05
    5210:	9e 81       	ldd	r25, Y+6	; 0x06
    5212:	82 17       	cp	r24, r18
    5214:	93 07       	cpc	r25, r19
    5216:	e0 f4       	brcc	.+56     	; 0x5250 <vTaskDelayUntil+0x9e>
    5218:	2d 81       	ldd	r18, Y+5	; 0x05
    521a:	3e 81       	ldd	r19, Y+6	; 0x06
    521c:	89 81       	ldd	r24, Y+1	; 0x01
    521e:	9a 81       	ldd	r25, Y+2	; 0x02
    5220:	82 17       	cp	r24, r18
    5222:	93 07       	cpc	r25, r19
    5224:	a8 f4       	brcc	.+42     	; 0x5250 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	8b 83       	std	Y+3, r24	; 0x03
    522a:	12 c0       	rjmp	.+36     	; 0x5250 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    522c:	ef 81       	ldd	r30, Y+7	; 0x07
    522e:	f8 85       	ldd	r31, Y+8	; 0x08
    5230:	20 81       	ld	r18, Z
    5232:	31 81       	ldd	r19, Z+1	; 0x01
    5234:	8d 81       	ldd	r24, Y+5	; 0x05
    5236:	9e 81       	ldd	r25, Y+6	; 0x06
    5238:	82 17       	cp	r24, r18
    523a:	93 07       	cpc	r25, r19
    523c:	38 f0       	brcs	.+14     	; 0x524c <vTaskDelayUntil+0x9a>
    523e:	2d 81       	ldd	r18, Y+5	; 0x05
    5240:	3e 81       	ldd	r19, Y+6	; 0x06
    5242:	89 81       	ldd	r24, Y+1	; 0x01
    5244:	9a 81       	ldd	r25, Y+2	; 0x02
    5246:	82 17       	cp	r24, r18
    5248:	93 07       	cpc	r25, r19
    524a:	10 f4       	brcc	.+4      	; 0x5250 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    5250:	ef 81       	ldd	r30, Y+7	; 0x07
    5252:	f8 85       	ldd	r31, Y+8	; 0x08
    5254:	8d 81       	ldd	r24, Y+5	; 0x05
    5256:	9e 81       	ldd	r25, Y+6	; 0x06
    5258:	91 83       	std	Z+1, r25	; 0x01
    525a:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    525c:	8b 81       	ldd	r24, Y+3	; 0x03
    525e:	88 23       	and	r24, r24
    5260:	49 f0       	breq	.+18     	; 0x5274 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    5262:	8d 81       	ldd	r24, Y+5	; 0x05
    5264:	9e 81       	ldd	r25, Y+6	; 0x06
    5266:	29 81       	ldd	r18, Y+1	; 0x01
    5268:	3a 81       	ldd	r19, Y+2	; 0x02
    526a:	82 1b       	sub	r24, r18
    526c:	93 0b       	sbc	r25, r19
    526e:	60 e0       	ldi	r22, 0x00	; 0
    5270:	0e 94 ca 33 	call	0x6794	; 0x6794 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    5274:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    5278:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    527a:	8c 81       	ldd	r24, Y+4	; 0x04
    527c:	88 23       	and	r24, r24
    527e:	11 f4       	brne	.+4      	; 0x5284 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    5280:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5284:	2a 96       	adiw	r28, 0x0a	; 10
    5286:	0f b6       	in	r0, 0x3f	; 63
    5288:	f8 94       	cli
    528a:	de bf       	out	0x3e, r29	; 62
    528c:	0f be       	out	0x3f, r0	; 63
    528e:	cd bf       	out	0x3d, r28	; 61
    5290:	cf 91       	pop	r28
    5292:	df 91       	pop	r29
    5294:	08 95       	ret

00005296 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    5296:	df 93       	push	r29
    5298:	cf 93       	push	r28
    529a:	00 d0       	rcall	.+0      	; 0x529c <vTaskDelay+0x6>
    529c:	0f 92       	push	r0
    529e:	cd b7       	in	r28, 0x3d	; 61
    52a0:	de b7       	in	r29, 0x3e	; 62
    52a2:	9b 83       	std	Y+3, r25	; 0x03
    52a4:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    52a6:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    52a8:	8a 81       	ldd	r24, Y+2	; 0x02
    52aa:	9b 81       	ldd	r25, Y+3	; 0x03
    52ac:	00 97       	sbiw	r24, 0x00	; 0
    52ae:	51 f0       	breq	.+20     	; 0x52c4 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    52b0:	0e 94 18 2b 	call	0x5630	; 0x5630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    52b4:	8a 81       	ldd	r24, Y+2	; 0x02
    52b6:	9b 81       	ldd	r25, Y+3	; 0x03
    52b8:	60 e0       	ldi	r22, 0x00	; 0
    52ba:	0e 94 ca 33 	call	0x6794	; 0x6794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    52be:	0e 94 24 2b 	call	0x5648	; 0x5648 <xTaskResumeAll>
    52c2:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    52c4:	89 81       	ldd	r24, Y+1	; 0x01
    52c6:	88 23       	and	r24, r24
    52c8:	11 f4       	brne	.+4      	; 0x52ce <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    52ca:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    52ce:	0f 90       	pop	r0
    52d0:	0f 90       	pop	r0
    52d2:	0f 90       	pop	r0
    52d4:	cf 91       	pop	r28
    52d6:	df 91       	pop	r29
    52d8:	08 95       	ret

000052da <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    52da:	df 93       	push	r29
    52dc:	cf 93       	push	r28
    52de:	00 d0       	rcall	.+0      	; 0x52e0 <vTaskSuspend+0x6>
    52e0:	00 d0       	rcall	.+0      	; 0x52e2 <vTaskSuspend+0x8>
    52e2:	00 d0       	rcall	.+0      	; 0x52e4 <vTaskSuspend+0xa>
    52e4:	cd b7       	in	r28, 0x3d	; 61
    52e6:	de b7       	in	r29, 0x3e	; 62
    52e8:	9c 83       	std	Y+4, r25	; 0x04
    52ea:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    52ec:	0f b6       	in	r0, 0x3f	; 63
    52ee:	f8 94       	cli
    52f0:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    52f2:	8b 81       	ldd	r24, Y+3	; 0x03
    52f4:	9c 81       	ldd	r25, Y+4	; 0x04
    52f6:	00 97       	sbiw	r24, 0x00	; 0
    52f8:	39 f4       	brne	.+14     	; 0x5308 <vTaskSuspend+0x2e>
    52fa:	80 91 66 06 	lds	r24, 0x0666
    52fe:	90 91 67 06 	lds	r25, 0x0667
    5302:	9e 83       	std	Y+6, r25	; 0x06
    5304:	8d 83       	std	Y+5, r24	; 0x05
    5306:	04 c0       	rjmp	.+8      	; 0x5310 <vTaskSuspend+0x36>
    5308:	8b 81       	ldd	r24, Y+3	; 0x03
    530a:	9c 81       	ldd	r25, Y+4	; 0x04
    530c:	9e 83       	std	Y+6, r25	; 0x06
    530e:	8d 83       	std	Y+5, r24	; 0x05
    5310:	8d 81       	ldd	r24, Y+5	; 0x05
    5312:	9e 81       	ldd	r25, Y+6	; 0x06
    5314:	9a 83       	std	Y+2, r25	; 0x02
    5316:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5318:	89 81       	ldd	r24, Y+1	; 0x01
    531a:	9a 81       	ldd	r25, Y+2	; 0x02
    531c:	02 96       	adiw	r24, 0x02	; 2
    531e:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5322:	e9 81       	ldd	r30, Y+1	; 0x01
    5324:	fa 81       	ldd	r31, Y+2	; 0x02
    5326:	84 89       	ldd	r24, Z+20	; 0x14
    5328:	95 89       	ldd	r25, Z+21	; 0x15
    532a:	00 97       	sbiw	r24, 0x00	; 0
    532c:	29 f0       	breq	.+10     	; 0x5338 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    532e:	89 81       	ldd	r24, Y+1	; 0x01
    5330:	9a 81       	ldd	r25, Y+2	; 0x02
    5332:	0c 96       	adiw	r24, 0x0c	; 12
    5334:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    5338:	89 81       	ldd	r24, Y+1	; 0x01
    533a:	9a 81       	ldd	r25, Y+2	; 0x02
    533c:	9c 01       	movw	r18, r24
    533e:	2e 5f       	subi	r18, 0xFE	; 254
    5340:	3f 4f       	sbci	r19, 0xFF	; 255
    5342:	83 ec       	ldi	r24, 0xC3	; 195
    5344:	96 e0       	ldi	r25, 0x06	; 6
    5346:	b9 01       	movw	r22, r18
    5348:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    534c:	e9 81       	ldd	r30, Y+1	; 0x01
    534e:	fa 81       	ldd	r31, Y+2	; 0x02
    5350:	85 a1       	ldd	r24, Z+37	; 0x25
    5352:	81 30       	cpi	r24, 0x01	; 1
    5354:	19 f4       	brne	.+6      	; 0x535c <vTaskSuspend+0x82>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5356:	e9 81       	ldd	r30, Y+1	; 0x01
    5358:	fa 81       	ldd	r31, Y+2	; 0x02
    535a:	15 a2       	std	Z+37, r1	; 0x25
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    535c:	0f 90       	pop	r0
    535e:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    5360:	80 91 6d 06 	lds	r24, 0x066D
    5364:	88 23       	and	r24, r24
    5366:	39 f0       	breq	.+14     	; 0x5376 <vTaskSuspend+0x9c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    5368:	0f b6       	in	r0, 0x3f	; 63
    536a:	f8 94       	cli
    536c:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    536e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    5372:	0f 90       	pop	r0
    5374:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    5376:	20 91 66 06 	lds	r18, 0x0666
    537a:	30 91 67 06 	lds	r19, 0x0667
    537e:	89 81       	ldd	r24, Y+1	; 0x01
    5380:	9a 81       	ldd	r25, Y+2	; 0x02
    5382:	82 17       	cp	r24, r18
    5384:	93 07       	cpc	r25, r19
    5386:	a1 f4       	brne	.+40     	; 0x53b0 <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
    5388:	80 91 6d 06 	lds	r24, 0x066D
    538c:	88 23       	and	r24, r24
    538e:	19 f0       	breq	.+6      	; 0x5396 <vTaskSuspend+0xbc>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    5390:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
    5394:	0d c0       	rjmp	.+26     	; 0x53b0 <vTaskSuspend+0xd6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
    5396:	90 91 c3 06 	lds	r25, 0x06C3
    539a:	80 91 69 06 	lds	r24, 0x0669
    539e:	98 17       	cp	r25, r24
    53a0:	29 f4       	brne	.+10     	; 0x53ac <vTaskSuspend+0xd2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    53a2:	10 92 67 06 	sts	0x0667, r1
    53a6:	10 92 66 06 	sts	0x0666, r1
    53aa:	02 c0       	rjmp	.+4      	; 0x53b0 <vTaskSuspend+0xd6>
				}
				else
				{
					vTaskSwitchContext();
    53ac:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    53b0:	26 96       	adiw	r28, 0x06	; 6
    53b2:	0f b6       	in	r0, 0x3f	; 63
    53b4:	f8 94       	cli
    53b6:	de bf       	out	0x3e, r29	; 62
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	cf 91       	pop	r28
    53be:	df 91       	pop	r29
    53c0:	08 95       	ret

000053c2 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    53c2:	df 93       	push	r29
    53c4:	cf 93       	push	r28
    53c6:	00 d0       	rcall	.+0      	; 0x53c8 <prvTaskIsTaskSuspended+0x6>
    53c8:	00 d0       	rcall	.+0      	; 0x53ca <prvTaskIsTaskSuspended+0x8>
    53ca:	0f 92       	push	r0
    53cc:	cd b7       	in	r28, 0x3d	; 61
    53ce:	de b7       	in	r29, 0x3e	; 62
    53d0:	9d 83       	std	Y+5, r25	; 0x05
    53d2:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    53d4:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = xTask;
    53d6:	8c 81       	ldd	r24, Y+4	; 0x04
    53d8:	9d 81       	ldd	r25, Y+5	; 0x05
    53da:	9a 83       	std	Y+2, r25	; 0x02
    53dc:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    53de:	e9 81       	ldd	r30, Y+1	; 0x01
    53e0:	fa 81       	ldd	r31, Y+2	; 0x02
    53e2:	82 85       	ldd	r24, Z+10	; 0x0a
    53e4:	93 85       	ldd	r25, Z+11	; 0x0b
    53e6:	26 e0       	ldi	r18, 0x06	; 6
    53e8:	83 3c       	cpi	r24, 0xC3	; 195
    53ea:	92 07       	cpc	r25, r18
    53ec:	81 f4       	brne	.+32     	; 0x540e <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    53ee:	e9 81       	ldd	r30, Y+1	; 0x01
    53f0:	fa 81       	ldd	r31, Y+2	; 0x02
    53f2:	84 89       	ldd	r24, Z+20	; 0x14
    53f4:	95 89       	ldd	r25, Z+21	; 0x15
    53f6:	26 e0       	ldi	r18, 0x06	; 6
    53f8:	81 3b       	cpi	r24, 0xB1	; 177
    53fa:	92 07       	cpc	r25, r18
    53fc:	41 f0       	breq	.+16     	; 0x540e <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    53fe:	e9 81       	ldd	r30, Y+1	; 0x01
    5400:	fa 81       	ldd	r31, Y+2	; 0x02
    5402:	84 89       	ldd	r24, Z+20	; 0x14
    5404:	95 89       	ldd	r25, Z+21	; 0x15
    5406:	00 97       	sbiw	r24, 0x00	; 0
    5408:	11 f4       	brne	.+4      	; 0x540e <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    540e:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    5410:	0f 90       	pop	r0
    5412:	0f 90       	pop	r0
    5414:	0f 90       	pop	r0
    5416:	0f 90       	pop	r0
    5418:	0f 90       	pop	r0
    541a:	cf 91       	pop	r28
    541c:	df 91       	pop	r29
    541e:	08 95       	ret

00005420 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    5420:	df 93       	push	r29
    5422:	cf 93       	push	r28
    5424:	00 d0       	rcall	.+0      	; 0x5426 <vTaskResume+0x6>
    5426:	00 d0       	rcall	.+0      	; 0x5428 <vTaskResume+0x8>
    5428:	cd b7       	in	r28, 0x3d	; 61
    542a:	de b7       	in	r29, 0x3e	; 62
    542c:	9c 83       	std	Y+4, r25	; 0x04
    542e:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = xTaskToResume;
    5430:	8b 81       	ldd	r24, Y+3	; 0x03
    5432:	9c 81       	ldd	r25, Y+4	; 0x04
    5434:	9a 83       	std	Y+2, r25	; 0x02
    5436:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
    5438:	20 91 66 06 	lds	r18, 0x0666
    543c:	30 91 67 06 	lds	r19, 0x0667
    5440:	89 81       	ldd	r24, Y+1	; 0x01
    5442:	9a 81       	ldd	r25, Y+2	; 0x02
    5444:	82 17       	cp	r24, r18
    5446:	93 07       	cpc	r25, r19
    5448:	09 f4       	brne	.+2      	; 0x544c <vTaskResume+0x2c>
    544a:	47 c0       	rjmp	.+142    	; 0x54da <vTaskResume+0xba>
    544c:	89 81       	ldd	r24, Y+1	; 0x01
    544e:	9a 81       	ldd	r25, Y+2	; 0x02
    5450:	00 97       	sbiw	r24, 0x00	; 0
    5452:	09 f4       	brne	.+2      	; 0x5456 <vTaskResume+0x36>
    5454:	42 c0       	rjmp	.+132    	; 0x54da <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    5456:	0f b6       	in	r0, 0x3f	; 63
    5458:	f8 94       	cli
    545a:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    545c:	89 81       	ldd	r24, Y+1	; 0x01
    545e:	9a 81       	ldd	r25, Y+2	; 0x02
    5460:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <prvTaskIsTaskSuspended>
    5464:	88 23       	and	r24, r24
    5466:	b9 f1       	breq	.+110    	; 0x54d6 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    5468:	89 81       	ldd	r24, Y+1	; 0x01
    546a:	9a 81       	ldd	r25, Y+2	; 0x02
    546c:	02 96       	adiw	r24, 0x02	; 2
    546e:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5472:	e9 81       	ldd	r30, Y+1	; 0x01
    5474:	fa 81       	ldd	r31, Y+2	; 0x02
    5476:	96 89       	ldd	r25, Z+22	; 0x16
    5478:	80 91 6c 06 	lds	r24, 0x066C
    547c:	89 17       	cp	r24, r25
    547e:	28 f4       	brcc	.+10     	; 0x548a <vTaskResume+0x6a>
    5480:	e9 81       	ldd	r30, Y+1	; 0x01
    5482:	fa 81       	ldd	r31, Y+2	; 0x02
    5484:	86 89       	ldd	r24, Z+22	; 0x16
    5486:	80 93 6c 06 	sts	0x066C, r24
    548a:	e9 81       	ldd	r30, Y+1	; 0x01
    548c:	fa 81       	ldd	r31, Y+2	; 0x02
    548e:	86 89       	ldd	r24, Z+22	; 0x16
    5490:	28 2f       	mov	r18, r24
    5492:	30 e0       	ldi	r19, 0x00	; 0
    5494:	c9 01       	movw	r24, r18
    5496:	88 0f       	add	r24, r24
    5498:	99 1f       	adc	r25, r25
    549a:	88 0f       	add	r24, r24
    549c:	99 1f       	adc	r25, r25
    549e:	88 0f       	add	r24, r24
    54a0:	99 1f       	adc	r25, r25
    54a2:	82 0f       	add	r24, r18
    54a4:	93 1f       	adc	r25, r19
    54a6:	ac 01       	movw	r20, r24
    54a8:	49 58       	subi	r20, 0x89	; 137
    54aa:	59 4f       	sbci	r21, 0xF9	; 249
    54ac:	89 81       	ldd	r24, Y+1	; 0x01
    54ae:	9a 81       	ldd	r25, Y+2	; 0x02
    54b0:	9c 01       	movw	r18, r24
    54b2:	2e 5f       	subi	r18, 0xFE	; 254
    54b4:	3f 4f       	sbci	r19, 0xFF	; 255
    54b6:	ca 01       	movw	r24, r20
    54b8:	b9 01       	movw	r22, r18
    54ba:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    54be:	e9 81       	ldd	r30, Y+1	; 0x01
    54c0:	fa 81       	ldd	r31, Y+2	; 0x02
    54c2:	96 89       	ldd	r25, Z+22	; 0x16
    54c4:	e0 91 66 06 	lds	r30, 0x0666
    54c8:	f0 91 67 06 	lds	r31, 0x0667
    54cc:	86 89       	ldd	r24, Z+22	; 0x16
    54ce:	98 17       	cp	r25, r24
    54d0:	10 f0       	brcs	.+4      	; 0x54d6 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    54d2:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    54d6:	0f 90       	pop	r0
    54d8:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    54da:	0f 90       	pop	r0
    54dc:	0f 90       	pop	r0
    54de:	0f 90       	pop	r0
    54e0:	0f 90       	pop	r0
    54e2:	cf 91       	pop	r28
    54e4:	df 91       	pop	r29
    54e6:	08 95       	ret

000054e8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    54e8:	df 93       	push	r29
    54ea:	cf 93       	push	r28
    54ec:	00 d0       	rcall	.+0      	; 0x54ee <xTaskResumeFromISR+0x6>
    54ee:	00 d0       	rcall	.+0      	; 0x54f0 <xTaskResumeFromISR+0x8>
    54f0:	00 d0       	rcall	.+0      	; 0x54f2 <xTaskResumeFromISR+0xa>
    54f2:	cd b7       	in	r28, 0x3d	; 61
    54f4:	de b7       	in	r29, 0x3e	; 62
    54f6:	9e 83       	std	Y+6, r25	; 0x06
    54f8:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    54fa:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = xTaskToResume;
    54fc:	8d 81       	ldd	r24, Y+5	; 0x05
    54fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5500:	9b 83       	std	Y+3, r25	; 0x03
    5502:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5504:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    5506:	8a 81       	ldd	r24, Y+2	; 0x02
    5508:	9b 81       	ldd	r25, Y+3	; 0x03
    550a:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <prvTaskIsTaskSuspended>
    550e:	88 23       	and	r24, r24
    5510:	09 f4       	brne	.+2      	; 0x5514 <xTaskResumeFromISR+0x2c>
    5512:	46 c0       	rjmp	.+140    	; 0x55a0 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5514:	80 91 76 06 	lds	r24, 0x0676
    5518:	88 23       	and	r24, r24
    551a:	c1 f5       	brne	.+112    	; 0x558c <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    551c:	ea 81       	ldd	r30, Y+2	; 0x02
    551e:	fb 81       	ldd	r31, Y+3	; 0x03
    5520:	96 89       	ldd	r25, Z+22	; 0x16
    5522:	e0 91 66 06 	lds	r30, 0x0666
    5526:	f0 91 67 06 	lds	r31, 0x0667
    552a:	86 89       	ldd	r24, Z+22	; 0x16
    552c:	98 17       	cp	r25, r24
    552e:	10 f0       	brcs	.+4      	; 0x5534 <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5534:	8a 81       	ldd	r24, Y+2	; 0x02
    5536:	9b 81       	ldd	r25, Y+3	; 0x03
    5538:	02 96       	adiw	r24, 0x02	; 2
    553a:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    553e:	ea 81       	ldd	r30, Y+2	; 0x02
    5540:	fb 81       	ldd	r31, Y+3	; 0x03
    5542:	96 89       	ldd	r25, Z+22	; 0x16
    5544:	80 91 6c 06 	lds	r24, 0x066C
    5548:	89 17       	cp	r24, r25
    554a:	28 f4       	brcc	.+10     	; 0x5556 <xTaskResumeFromISR+0x6e>
    554c:	ea 81       	ldd	r30, Y+2	; 0x02
    554e:	fb 81       	ldd	r31, Y+3	; 0x03
    5550:	86 89       	ldd	r24, Z+22	; 0x16
    5552:	80 93 6c 06 	sts	0x066C, r24
    5556:	ea 81       	ldd	r30, Y+2	; 0x02
    5558:	fb 81       	ldd	r31, Y+3	; 0x03
    555a:	86 89       	ldd	r24, Z+22	; 0x16
    555c:	28 2f       	mov	r18, r24
    555e:	30 e0       	ldi	r19, 0x00	; 0
    5560:	c9 01       	movw	r24, r18
    5562:	88 0f       	add	r24, r24
    5564:	99 1f       	adc	r25, r25
    5566:	88 0f       	add	r24, r24
    5568:	99 1f       	adc	r25, r25
    556a:	88 0f       	add	r24, r24
    556c:	99 1f       	adc	r25, r25
    556e:	82 0f       	add	r24, r18
    5570:	93 1f       	adc	r25, r19
    5572:	ac 01       	movw	r20, r24
    5574:	49 58       	subi	r20, 0x89	; 137
    5576:	59 4f       	sbci	r21, 0xF9	; 249
    5578:	8a 81       	ldd	r24, Y+2	; 0x02
    557a:	9b 81       	ldd	r25, Y+3	; 0x03
    557c:	9c 01       	movw	r18, r24
    557e:	2e 5f       	subi	r18, 0xFE	; 254
    5580:	3f 4f       	sbci	r19, 0xFF	; 255
    5582:	ca 01       	movw	r24, r20
    5584:	b9 01       	movw	r22, r18
    5586:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    558a:	0a c0       	rjmp	.+20     	; 0x55a0 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    558c:	8a 81       	ldd	r24, Y+2	; 0x02
    558e:	9b 81       	ldd	r25, Y+3	; 0x03
    5590:	9c 01       	movw	r18, r24
    5592:	24 5f       	subi	r18, 0xF4	; 244
    5594:	3f 4f       	sbci	r19, 0xFF	; 255
    5596:	81 eb       	ldi	r24, 0xB1	; 177
    5598:	96 e0       	ldi	r25, 0x06	; 6
    559a:	b9 01       	movw	r22, r18
    559c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    55a0:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    55a2:	26 96       	adiw	r28, 0x06	; 6
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	f8 94       	cli
    55a8:	de bf       	out	0x3e, r29	; 62
    55aa:	0f be       	out	0x3f, r0	; 63
    55ac:	cd bf       	out	0x3d, r28	; 61
    55ae:	cf 91       	pop	r28
    55b0:	df 91       	pop	r29
    55b2:	08 95       	ret

000055b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    55b4:	ef 92       	push	r14
    55b6:	ff 92       	push	r15
    55b8:	0f 93       	push	r16
    55ba:	df 93       	push	r29
    55bc:	cf 93       	push	r28
    55be:	0f 92       	push	r0
    55c0:	cd b7       	in	r28, 0x3d	; 61
    55c2:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    55c4:	8e e2       	ldi	r24, 0x2E	; 46
    55c6:	9f e2       	ldi	r25, 0x2F	; 47
    55c8:	28 e7       	ldi	r18, 0x78	; 120
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	e4 e7       	ldi	r30, 0x74	; 116
    55ce:	f6 e0       	ldi	r31, 0x06	; 6
    55d0:	b9 01       	movw	r22, r18
    55d2:	45 e5       	ldi	r20, 0x55	; 85
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	00 e0       	ldi	r16, 0x00	; 0
    55dc:	7f 01       	movw	r14, r30
    55de:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <xTaskCreate>
    55e2:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
    55e6:	81 30       	cpi	r24, 0x01	; 1
    55e8:	81 f4       	brne	.+32     	; 0x560a <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    55ea:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    55ec:	8f ef       	ldi	r24, 0xFF	; 255
    55ee:	9f ef       	ldi	r25, 0xFF	; 255
    55f0:	90 93 73 06 	sts	0x0673, r25
    55f4:	80 93 72 06 	sts	0x0672, r24
		xSchedulerRunning = pdTRUE;
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	80 93 6d 06 	sts	0x066D, r24
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    55fe:	10 92 6b 06 	sts	0x066B, r1
    5602:	10 92 6a 06 	sts	0x066A, r1

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    5606:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    560a:	0f 90       	pop	r0
    560c:	cf 91       	pop	r28
    560e:	df 91       	pop	r29
    5610:	0f 91       	pop	r16
    5612:	ff 90       	pop	r15
    5614:	ef 90       	pop	r14
    5616:	08 95       	ret

00005618 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5618:	df 93       	push	r29
    561a:	cf 93       	push	r28
    561c:	cd b7       	in	r28, 0x3d	; 61
    561e:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5620:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    5622:	10 92 6d 06 	sts	0x066D, r1
	vPortEndScheduler();
    5626:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <vPortEndScheduler>
}
    562a:	cf 91       	pop	r28
    562c:	df 91       	pop	r29
    562e:	08 95       	ret

00005630 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5630:	df 93       	push	r29
    5632:	cf 93       	push	r28
    5634:	cd b7       	in	r28, 0x3d	; 61
    5636:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    5638:	80 91 76 06 	lds	r24, 0x0676
    563c:	8f 5f       	subi	r24, 0xFF	; 255
    563e:	80 93 76 06 	sts	0x0676, r24
}
    5642:	cf 91       	pop	r28
    5644:	df 91       	pop	r29
    5646:	08 95       	ret

00005648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    5648:	df 93       	push	r29
    564a:	cf 93       	push	r28
    564c:	00 d0       	rcall	.+0      	; 0x564e <xTaskResumeAll+0x6>
    564e:	00 d0       	rcall	.+0      	; 0x5650 <xTaskResumeAll+0x8>
    5650:	cd b7       	in	r28, 0x3d	; 61
    5652:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    5654:	1c 82       	std	Y+4, r1	; 0x04
    5656:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    5658:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    565a:	0f b6       	in	r0, 0x3f	; 63
    565c:	f8 94       	cli
    565e:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    5660:	80 91 76 06 	lds	r24, 0x0676
    5664:	81 50       	subi	r24, 0x01	; 1
    5666:	80 93 76 06 	sts	0x0676, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    566a:	80 91 76 06 	lds	r24, 0x0676
    566e:	88 23       	and	r24, r24
    5670:	09 f0       	breq	.+2      	; 0x5674 <xTaskResumeAll+0x2c>
    5672:	73 c0       	rjmp	.+230    	; 0x575a <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    5674:	80 91 69 06 	lds	r24, 0x0669
    5678:	88 23       	and	r24, r24
    567a:	09 f4       	brne	.+2      	; 0x567e <xTaskResumeAll+0x36>
    567c:	6e c0       	rjmp	.+220    	; 0x575a <xTaskResumeAll+0x112>
    567e:	45 c0       	rjmp	.+138    	; 0x570a <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5680:	e0 91 b6 06 	lds	r30, 0x06B6
    5684:	f0 91 b7 06 	lds	r31, 0x06B7
    5688:	86 81       	ldd	r24, Z+6	; 0x06
    568a:	97 81       	ldd	r25, Z+7	; 0x07
    568c:	9c 83       	std	Y+4, r25	; 0x04
    568e:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5690:	8b 81       	ldd	r24, Y+3	; 0x03
    5692:	9c 81       	ldd	r25, Y+4	; 0x04
    5694:	0c 96       	adiw	r24, 0x0c	; 12
    5696:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    569a:	8b 81       	ldd	r24, Y+3	; 0x03
    569c:	9c 81       	ldd	r25, Y+4	; 0x04
    569e:	02 96       	adiw	r24, 0x02	; 2
    56a0:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    56a4:	eb 81       	ldd	r30, Y+3	; 0x03
    56a6:	fc 81       	ldd	r31, Y+4	; 0x04
    56a8:	96 89       	ldd	r25, Z+22	; 0x16
    56aa:	80 91 6c 06 	lds	r24, 0x066C
    56ae:	89 17       	cp	r24, r25
    56b0:	28 f4       	brcc	.+10     	; 0x56bc <xTaskResumeAll+0x74>
    56b2:	eb 81       	ldd	r30, Y+3	; 0x03
    56b4:	fc 81       	ldd	r31, Y+4	; 0x04
    56b6:	86 89       	ldd	r24, Z+22	; 0x16
    56b8:	80 93 6c 06 	sts	0x066C, r24
    56bc:	eb 81       	ldd	r30, Y+3	; 0x03
    56be:	fc 81       	ldd	r31, Y+4	; 0x04
    56c0:	86 89       	ldd	r24, Z+22	; 0x16
    56c2:	28 2f       	mov	r18, r24
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	c9 01       	movw	r24, r18
    56c8:	88 0f       	add	r24, r24
    56ca:	99 1f       	adc	r25, r25
    56cc:	88 0f       	add	r24, r24
    56ce:	99 1f       	adc	r25, r25
    56d0:	88 0f       	add	r24, r24
    56d2:	99 1f       	adc	r25, r25
    56d4:	82 0f       	add	r24, r18
    56d6:	93 1f       	adc	r25, r19
    56d8:	ac 01       	movw	r20, r24
    56da:	49 58       	subi	r20, 0x89	; 137
    56dc:	59 4f       	sbci	r21, 0xF9	; 249
    56de:	8b 81       	ldd	r24, Y+3	; 0x03
    56e0:	9c 81       	ldd	r25, Y+4	; 0x04
    56e2:	9c 01       	movw	r18, r24
    56e4:	2e 5f       	subi	r18, 0xFE	; 254
    56e6:	3f 4f       	sbci	r19, 0xFF	; 255
    56e8:	ca 01       	movw	r24, r20
    56ea:	b9 01       	movw	r22, r18
    56ec:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    56f0:	eb 81       	ldd	r30, Y+3	; 0x03
    56f2:	fc 81       	ldd	r31, Y+4	; 0x04
    56f4:	96 89       	ldd	r25, Z+22	; 0x16
    56f6:	e0 91 66 06 	lds	r30, 0x0666
    56fa:	f0 91 67 06 	lds	r31, 0x0667
    56fe:	86 89       	ldd	r24, Z+22	; 0x16
    5700:	98 17       	cp	r25, r24
    5702:	18 f0       	brcs	.+6      	; 0x570a <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	80 93 6f 06 	sts	0x066F, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    570a:	80 91 b1 06 	lds	r24, 0x06B1
    570e:	88 23       	and	r24, r24
    5710:	09 f0       	breq	.+2      	; 0x5714 <xTaskResumeAll+0xcc>
    5712:	b6 cf       	rjmp	.-148    	; 0x5680 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    5714:	8b 81       	ldd	r24, Y+3	; 0x03
    5716:	9c 81       	ldd	r25, Y+4	; 0x04
    5718:	00 97       	sbiw	r24, 0x00	; 0
    571a:	11 f0       	breq	.+4      	; 0x5720 <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    571c:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    5720:	80 91 6e 06 	lds	r24, 0x066E
    5724:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    5726:	89 81       	ldd	r24, Y+1	; 0x01
    5728:	88 23       	and	r24, r24
    572a:	79 f0       	breq	.+30     	; 0x574a <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    572c:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskIncrementTick>
    5730:	88 23       	and	r24, r24
    5732:	19 f0       	breq	.+6      	; 0x573a <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	80 93 6f 06 	sts	0x066F, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    573a:	89 81       	ldd	r24, Y+1	; 0x01
    573c:	81 50       	subi	r24, 0x01	; 1
    573e:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    5740:	89 81       	ldd	r24, Y+1	; 0x01
    5742:	88 23       	and	r24, r24
    5744:	99 f7       	brne	.-26     	; 0x572c <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    5746:	10 92 6e 06 	sts	0x066E, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    574a:	80 91 6f 06 	lds	r24, 0x066F
    574e:	88 23       	and	r24, r24
    5750:	21 f0       	breq	.+8      	; 0x575a <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    5756:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    575a:	0f 90       	pop	r0
    575c:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    575e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5760:	0f 90       	pop	r0
    5762:	0f 90       	pop	r0
    5764:	0f 90       	pop	r0
    5766:	0f 90       	pop	r0
    5768:	cf 91       	pop	r28
    576a:	df 91       	pop	r29
    576c:	08 95       	ret

0000576e <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    576e:	df 93       	push	r29
    5770:	cf 93       	push	r28
    5772:	00 d0       	rcall	.+0      	; 0x5774 <xTaskGetTickCount+0x6>
    5774:	cd b7       	in	r28, 0x3d	; 61
    5776:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    5778:	0f b6       	in	r0, 0x3f	; 63
    577a:	f8 94       	cli
    577c:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    577e:	80 91 6a 06 	lds	r24, 0x066A
    5782:	90 91 6b 06 	lds	r25, 0x066B
    5786:	9a 83       	std	Y+2, r25	; 0x02
    5788:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    578a:	0f 90       	pop	r0
    578c:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    578e:	89 81       	ldd	r24, Y+1	; 0x01
    5790:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5792:	0f 90       	pop	r0
    5794:	0f 90       	pop	r0
    5796:	cf 91       	pop	r28
    5798:	df 91       	pop	r29
    579a:	08 95       	ret

0000579c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    579c:	df 93       	push	r29
    579e:	cf 93       	push	r28
    57a0:	00 d0       	rcall	.+0      	; 0x57a2 <xTaskGetTickCountFromISR+0x6>
    57a2:	0f 92       	push	r0
    57a4:	cd b7       	in	r28, 0x3d	; 61
    57a6:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    57a8:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    57aa:	80 91 6a 06 	lds	r24, 0x066A
    57ae:	90 91 6b 06 	lds	r25, 0x066B
    57b2:	9b 83       	std	Y+3, r25	; 0x03
    57b4:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    57b6:	8a 81       	ldd	r24, Y+2	; 0x02
    57b8:	9b 81       	ldd	r25, Y+3	; 0x03
}
    57ba:	0f 90       	pop	r0
    57bc:	0f 90       	pop	r0
    57be:	0f 90       	pop	r0
    57c0:	cf 91       	pop	r28
    57c2:	df 91       	pop	r29
    57c4:	08 95       	ret

000057c6 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    57c6:	df 93       	push	r29
    57c8:	cf 93       	push	r28
    57ca:	cd b7       	in	r28, 0x3d	; 61
    57cc:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    57ce:	80 91 69 06 	lds	r24, 0x0669
}
    57d2:	cf 91       	pop	r28
    57d4:	df 91       	pop	r29
    57d6:	08 95       	ret

000057d8 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    57d8:	df 93       	push	r29
    57da:	cf 93       	push	r28
    57dc:	00 d0       	rcall	.+0      	; 0x57de <pcTaskGetName+0x6>
    57de:	00 d0       	rcall	.+0      	; 0x57e0 <pcTaskGetName+0x8>
    57e0:	00 d0       	rcall	.+0      	; 0x57e2 <pcTaskGetName+0xa>
    57e2:	cd b7       	in	r28, 0x3d	; 61
    57e4:	de b7       	in	r29, 0x3e	; 62
    57e6:	9c 83       	std	Y+4, r25	; 0x04
    57e8:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    57ea:	8b 81       	ldd	r24, Y+3	; 0x03
    57ec:	9c 81       	ldd	r25, Y+4	; 0x04
    57ee:	00 97       	sbiw	r24, 0x00	; 0
    57f0:	39 f4       	brne	.+14     	; 0x5800 <pcTaskGetName+0x28>
    57f2:	80 91 66 06 	lds	r24, 0x0666
    57f6:	90 91 67 06 	lds	r25, 0x0667
    57fa:	9e 83       	std	Y+6, r25	; 0x06
    57fc:	8d 83       	std	Y+5, r24	; 0x05
    57fe:	04 c0       	rjmp	.+8      	; 0x5808 <pcTaskGetName+0x30>
    5800:	8b 81       	ldd	r24, Y+3	; 0x03
    5802:	9c 81       	ldd	r25, Y+4	; 0x04
    5804:	9e 83       	std	Y+6, r25	; 0x06
    5806:	8d 83       	std	Y+5, r24	; 0x05
    5808:	8d 81       	ldd	r24, Y+5	; 0x05
    580a:	9e 81       	ldd	r25, Y+6	; 0x06
    580c:	9a 83       	std	Y+2, r25	; 0x02
    580e:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    5810:	89 81       	ldd	r24, Y+1	; 0x01
    5812:	9a 81       	ldd	r25, Y+2	; 0x02
    5814:	49 96       	adiw	r24, 0x19	; 25
}
    5816:	26 96       	adiw	r28, 0x06	; 6
    5818:	0f b6       	in	r0, 0x3f	; 63
    581a:	f8 94       	cli
    581c:	de bf       	out	0x3e, r29	; 62
    581e:	0f be       	out	0x3f, r0	; 63
    5820:	cd bf       	out	0x3d, r28	; 61
    5822:	cf 91       	pop	r28
    5824:	df 91       	pop	r29
    5826:	08 95       	ret

00005828 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    5828:	df 93       	push	r29
    582a:	cf 93       	push	r28
    582c:	cd b7       	in	r28, 0x3d	; 61
    582e:	de b7       	in	r29, 0x3e	; 62
    5830:	29 97       	sbiw	r28, 0x09	; 9
    5832:	0f b6       	in	r0, 0x3f	; 63
    5834:	f8 94       	cli
    5836:	de bf       	out	0x3e, r29	; 62
    5838:	0f be       	out	0x3f, r0	; 63
    583a:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    583c:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    583e:	80 91 76 06 	lds	r24, 0x0676
    5842:	88 23       	and	r24, r24
    5844:	09 f0       	breq	.+2      	; 0x5848 <xTaskIncrementTick+0x20>
    5846:	c0 c0       	rjmp	.+384    	; 0x59c8 <xTaskIncrementTick+0x1a0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    5848:	80 91 6a 06 	lds	r24, 0x066A
    584c:	90 91 6b 06 	lds	r25, 0x066B
    5850:	01 96       	adiw	r24, 0x01	; 1
    5852:	9c 83       	std	Y+4, r25	; 0x04
    5854:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    5856:	8b 81       	ldd	r24, Y+3	; 0x03
    5858:	9c 81       	ldd	r25, Y+4	; 0x04
    585a:	90 93 6b 06 	sts	0x066B, r25
    585e:	80 93 6a 06 	sts	0x066A, r24

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    5862:	8b 81       	ldd	r24, Y+3	; 0x03
    5864:	9c 81       	ldd	r25, Y+4	; 0x04
    5866:	00 97       	sbiw	r24, 0x00	; 0
    5868:	d9 f4       	brne	.+54     	; 0x58a0 <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    586a:	80 91 ad 06 	lds	r24, 0x06AD
    586e:	90 91 ae 06 	lds	r25, 0x06AE
    5872:	9a 83       	std	Y+2, r25	; 0x02
    5874:	89 83       	std	Y+1, r24	; 0x01
    5876:	80 91 af 06 	lds	r24, 0x06AF
    587a:	90 91 b0 06 	lds	r25, 0x06B0
    587e:	90 93 ae 06 	sts	0x06AE, r25
    5882:	80 93 ad 06 	sts	0x06AD, r24
    5886:	89 81       	ldd	r24, Y+1	; 0x01
    5888:	9a 81       	ldd	r25, Y+2	; 0x02
    588a:	90 93 b0 06 	sts	0x06B0, r25
    588e:	80 93 af 06 	sts	0x06AF, r24
    5892:	80 91 70 06 	lds	r24, 0x0670
    5896:	8f 5f       	subi	r24, 0xFF	; 255
    5898:	80 93 70 06 	sts	0x0670, r24
    589c:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    58a0:	20 91 72 06 	lds	r18, 0x0672
    58a4:	30 91 73 06 	lds	r19, 0x0673
    58a8:	8b 81       	ldd	r24, Y+3	; 0x03
    58aa:	9c 81       	ldd	r25, Y+4	; 0x04
    58ac:	82 17       	cp	r24, r18
    58ae:	93 07       	cpc	r25, r19
    58b0:	08 f4       	brcc	.+2      	; 0x58b4 <xTaskIncrementTick+0x8c>
    58b2:	71 c0       	rjmp	.+226    	; 0x5996 <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    58b4:	e0 91 ad 06 	lds	r30, 0x06AD
    58b8:	f0 91 ae 06 	lds	r31, 0x06AE
    58bc:	80 81       	ld	r24, Z
    58be:	88 23       	and	r24, r24
    58c0:	39 f4       	brne	.+14     	; 0x58d0 <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    58c2:	8f ef       	ldi	r24, 0xFF	; 255
    58c4:	9f ef       	ldi	r25, 0xFF	; 255
    58c6:	90 93 73 06 	sts	0x0673, r25
    58ca:	80 93 72 06 	sts	0x0672, r24
    58ce:	63 c0       	rjmp	.+198    	; 0x5996 <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    58d0:	e0 91 ad 06 	lds	r30, 0x06AD
    58d4:	f0 91 ae 06 	lds	r31, 0x06AE
    58d8:	05 80       	ldd	r0, Z+5	; 0x05
    58da:	f6 81       	ldd	r31, Z+6	; 0x06
    58dc:	e0 2d       	mov	r30, r0
    58de:	86 81       	ldd	r24, Z+6	; 0x06
    58e0:	97 81       	ldd	r25, Z+7	; 0x07
    58e2:	99 87       	std	Y+9, r25	; 0x09
    58e4:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    58e6:	e8 85       	ldd	r30, Y+8	; 0x08
    58e8:	f9 85       	ldd	r31, Y+9	; 0x09
    58ea:	82 81       	ldd	r24, Z+2	; 0x02
    58ec:	93 81       	ldd	r25, Z+3	; 0x03
    58ee:	9f 83       	std	Y+7, r25	; 0x07
    58f0:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    58f2:	2b 81       	ldd	r18, Y+3	; 0x03
    58f4:	3c 81       	ldd	r19, Y+4	; 0x04
    58f6:	8e 81       	ldd	r24, Y+6	; 0x06
    58f8:	9f 81       	ldd	r25, Y+7	; 0x07
    58fa:	28 17       	cp	r18, r24
    58fc:	39 07       	cpc	r19, r25
    58fe:	38 f4       	brcc	.+14     	; 0x590e <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    5900:	8e 81       	ldd	r24, Y+6	; 0x06
    5902:	9f 81       	ldd	r25, Y+7	; 0x07
    5904:	90 93 73 06 	sts	0x0673, r25
    5908:	80 93 72 06 	sts	0x0672, r24
    590c:	44 c0       	rjmp	.+136    	; 0x5996 <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    590e:	88 85       	ldd	r24, Y+8	; 0x08
    5910:	99 85       	ldd	r25, Y+9	; 0x09
    5912:	02 96       	adiw	r24, 0x02	; 2
    5914:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5918:	e8 85       	ldd	r30, Y+8	; 0x08
    591a:	f9 85       	ldd	r31, Y+9	; 0x09
    591c:	84 89       	ldd	r24, Z+20	; 0x14
    591e:	95 89       	ldd	r25, Z+21	; 0x15
    5920:	00 97       	sbiw	r24, 0x00	; 0
    5922:	29 f0       	breq	.+10     	; 0x592e <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5924:	88 85       	ldd	r24, Y+8	; 0x08
    5926:	99 85       	ldd	r25, Y+9	; 0x09
    5928:	0c 96       	adiw	r24, 0x0c	; 12
    592a:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    592e:	e8 85       	ldd	r30, Y+8	; 0x08
    5930:	f9 85       	ldd	r31, Y+9	; 0x09
    5932:	96 89       	ldd	r25, Z+22	; 0x16
    5934:	80 91 6c 06 	lds	r24, 0x066C
    5938:	89 17       	cp	r24, r25
    593a:	28 f4       	brcc	.+10     	; 0x5946 <xTaskIncrementTick+0x11e>
    593c:	e8 85       	ldd	r30, Y+8	; 0x08
    593e:	f9 85       	ldd	r31, Y+9	; 0x09
    5940:	86 89       	ldd	r24, Z+22	; 0x16
    5942:	80 93 6c 06 	sts	0x066C, r24
    5946:	e8 85       	ldd	r30, Y+8	; 0x08
    5948:	f9 85       	ldd	r31, Y+9	; 0x09
    594a:	86 89       	ldd	r24, Z+22	; 0x16
    594c:	28 2f       	mov	r18, r24
    594e:	30 e0       	ldi	r19, 0x00	; 0
    5950:	c9 01       	movw	r24, r18
    5952:	88 0f       	add	r24, r24
    5954:	99 1f       	adc	r25, r25
    5956:	88 0f       	add	r24, r24
    5958:	99 1f       	adc	r25, r25
    595a:	88 0f       	add	r24, r24
    595c:	99 1f       	adc	r25, r25
    595e:	82 0f       	add	r24, r18
    5960:	93 1f       	adc	r25, r19
    5962:	ac 01       	movw	r20, r24
    5964:	49 58       	subi	r20, 0x89	; 137
    5966:	59 4f       	sbci	r21, 0xF9	; 249
    5968:	88 85       	ldd	r24, Y+8	; 0x08
    596a:	99 85       	ldd	r25, Y+9	; 0x09
    596c:	9c 01       	movw	r18, r24
    596e:	2e 5f       	subi	r18, 0xFE	; 254
    5970:	3f 4f       	sbci	r19, 0xFF	; 255
    5972:	ca 01       	movw	r24, r20
    5974:	b9 01       	movw	r22, r18
    5976:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    597a:	e8 85       	ldd	r30, Y+8	; 0x08
    597c:	f9 85       	ldd	r31, Y+9	; 0x09
    597e:	96 89       	ldd	r25, Z+22	; 0x16
    5980:	e0 91 66 06 	lds	r30, 0x0666
    5984:	f0 91 67 06 	lds	r31, 0x0667
    5988:	86 89       	ldd	r24, Z+22	; 0x16
    598a:	98 17       	cp	r25, r24
    598c:	08 f4       	brcc	.+2      	; 0x5990 <xTaskIncrementTick+0x168>
    598e:	92 cf       	rjmp	.-220    	; 0x58b4 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	8d 83       	std	Y+5, r24	; 0x05
    5994:	8f cf       	rjmp	.-226    	; 0x58b4 <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    5996:	e0 91 66 06 	lds	r30, 0x0666
    599a:	f0 91 67 06 	lds	r31, 0x0667
    599e:	86 89       	ldd	r24, Z+22	; 0x16
    59a0:	28 2f       	mov	r18, r24
    59a2:	30 e0       	ldi	r19, 0x00	; 0
    59a4:	c9 01       	movw	r24, r18
    59a6:	88 0f       	add	r24, r24
    59a8:	99 1f       	adc	r25, r25
    59aa:	88 0f       	add	r24, r24
    59ac:	99 1f       	adc	r25, r25
    59ae:	88 0f       	add	r24, r24
    59b0:	99 1f       	adc	r25, r25
    59b2:	82 0f       	add	r24, r18
    59b4:	93 1f       	adc	r25, r19
    59b6:	fc 01       	movw	r30, r24
    59b8:	e9 58       	subi	r30, 0x89	; 137
    59ba:	f9 4f       	sbci	r31, 0xF9	; 249
    59bc:	80 81       	ld	r24, Z
    59be:	82 30       	cpi	r24, 0x02	; 2
    59c0:	40 f0       	brcs	.+16     	; 0x59d2 <xTaskIncrementTick+0x1aa>
			{
				xSwitchRequired = pdTRUE;
    59c2:	81 e0       	ldi	r24, 0x01	; 1
    59c4:	8d 83       	std	Y+5, r24	; 0x05
    59c6:	05 c0       	rjmp	.+10     	; 0x59d2 <xTaskIncrementTick+0x1aa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    59c8:	80 91 6e 06 	lds	r24, 0x066E
    59cc:	8f 5f       	subi	r24, 0xFF	; 255
    59ce:	80 93 6e 06 	sts	0x066E, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    59d2:	80 91 6f 06 	lds	r24, 0x066F
    59d6:	88 23       	and	r24, r24
    59d8:	11 f0       	breq	.+4      	; 0x59de <xTaskIncrementTick+0x1b6>
		{
			xSwitchRequired = pdTRUE;
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    59de:	8d 81       	ldd	r24, Y+5	; 0x05
}
    59e0:	29 96       	adiw	r28, 0x09	; 9
    59e2:	0f b6       	in	r0, 0x3f	; 63
    59e4:	f8 94       	cli
    59e6:	de bf       	out	0x3e, r29	; 62
    59e8:	0f be       	out	0x3f, r0	; 63
    59ea:	cd bf       	out	0x3d, r28	; 61
    59ec:	cf 91       	pop	r28
    59ee:	df 91       	pop	r29
    59f0:	08 95       	ret

000059f2 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    59f2:	df 93       	push	r29
    59f4:	cf 93       	push	r28
    59f6:	00 d0       	rcall	.+0      	; 0x59f8 <vTaskSwitchContext+0x6>
    59f8:	0f 92       	push	r0
    59fa:	cd b7       	in	r28, 0x3d	; 61
    59fc:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    59fe:	80 91 76 06 	lds	r24, 0x0676
    5a02:	88 23       	and	r24, r24
    5a04:	21 f0       	breq	.+8      	; 0x5a0e <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	80 93 6f 06 	sts	0x066F, r24
    5a0c:	59 c0       	rjmp	.+178    	; 0x5ac0 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    5a0e:	10 92 6f 06 	sts	0x066F, r1
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5a12:	80 91 6c 06 	lds	r24, 0x066C
    5a16:	8b 83       	std	Y+3, r24	; 0x03
    5a18:	03 c0       	rjmp	.+6      	; 0x5a20 <vTaskSwitchContext+0x2e>
    5a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a1c:	81 50       	subi	r24, 0x01	; 1
    5a1e:	8b 83       	std	Y+3, r24	; 0x03
    5a20:	8b 81       	ldd	r24, Y+3	; 0x03
    5a22:	28 2f       	mov	r18, r24
    5a24:	30 e0       	ldi	r19, 0x00	; 0
    5a26:	c9 01       	movw	r24, r18
    5a28:	88 0f       	add	r24, r24
    5a2a:	99 1f       	adc	r25, r25
    5a2c:	88 0f       	add	r24, r24
    5a2e:	99 1f       	adc	r25, r25
    5a30:	88 0f       	add	r24, r24
    5a32:	99 1f       	adc	r25, r25
    5a34:	82 0f       	add	r24, r18
    5a36:	93 1f       	adc	r25, r19
    5a38:	fc 01       	movw	r30, r24
    5a3a:	e9 58       	subi	r30, 0x89	; 137
    5a3c:	f9 4f       	sbci	r31, 0xF9	; 249
    5a3e:	80 81       	ld	r24, Z
    5a40:	88 23       	and	r24, r24
    5a42:	59 f3       	breq	.-42     	; 0x5a1a <vTaskSwitchContext+0x28>
    5a44:	8b 81       	ldd	r24, Y+3	; 0x03
    5a46:	28 2f       	mov	r18, r24
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	c9 01       	movw	r24, r18
    5a4c:	88 0f       	add	r24, r24
    5a4e:	99 1f       	adc	r25, r25
    5a50:	88 0f       	add	r24, r24
    5a52:	99 1f       	adc	r25, r25
    5a54:	88 0f       	add	r24, r24
    5a56:	99 1f       	adc	r25, r25
    5a58:	82 0f       	add	r24, r18
    5a5a:	93 1f       	adc	r25, r19
    5a5c:	89 58       	subi	r24, 0x89	; 137
    5a5e:	99 4f       	sbci	r25, 0xF9	; 249
    5a60:	9a 83       	std	Y+2, r25	; 0x02
    5a62:	89 83       	std	Y+1, r24	; 0x01
    5a64:	e9 81       	ldd	r30, Y+1	; 0x01
    5a66:	fa 81       	ldd	r31, Y+2	; 0x02
    5a68:	01 80       	ldd	r0, Z+1	; 0x01
    5a6a:	f2 81       	ldd	r31, Z+2	; 0x02
    5a6c:	e0 2d       	mov	r30, r0
    5a6e:	82 81       	ldd	r24, Z+2	; 0x02
    5a70:	93 81       	ldd	r25, Z+3	; 0x03
    5a72:	e9 81       	ldd	r30, Y+1	; 0x01
    5a74:	fa 81       	ldd	r31, Y+2	; 0x02
    5a76:	92 83       	std	Z+2, r25	; 0x02
    5a78:	81 83       	std	Z+1, r24	; 0x01
    5a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    5a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    5a7e:	21 81       	ldd	r18, Z+1	; 0x01
    5a80:	32 81       	ldd	r19, Z+2	; 0x02
    5a82:	89 81       	ldd	r24, Y+1	; 0x01
    5a84:	9a 81       	ldd	r25, Y+2	; 0x02
    5a86:	03 96       	adiw	r24, 0x03	; 3
    5a88:	28 17       	cp	r18, r24
    5a8a:	39 07       	cpc	r19, r25
    5a8c:	59 f4       	brne	.+22     	; 0x5aa4 <vTaskSwitchContext+0xb2>
    5a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    5a90:	fa 81       	ldd	r31, Y+2	; 0x02
    5a92:	01 80       	ldd	r0, Z+1	; 0x01
    5a94:	f2 81       	ldd	r31, Z+2	; 0x02
    5a96:	e0 2d       	mov	r30, r0
    5a98:	82 81       	ldd	r24, Z+2	; 0x02
    5a9a:	93 81       	ldd	r25, Z+3	; 0x03
    5a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    5a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    5aa0:	92 83       	std	Z+2, r25	; 0x02
    5aa2:	81 83       	std	Z+1, r24	; 0x01
    5aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    5aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    5aa8:	01 80       	ldd	r0, Z+1	; 0x01
    5aaa:	f2 81       	ldd	r31, Z+2	; 0x02
    5aac:	e0 2d       	mov	r30, r0
    5aae:	86 81       	ldd	r24, Z+6	; 0x06
    5ab0:	97 81       	ldd	r25, Z+7	; 0x07
    5ab2:	90 93 67 06 	sts	0x0667, r25
    5ab6:	80 93 66 06 	sts	0x0666, r24
    5aba:	8b 81       	ldd	r24, Y+3	; 0x03
    5abc:	80 93 6c 06 	sts	0x066C, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    5ac0:	0f 90       	pop	r0
    5ac2:	0f 90       	pop	r0
    5ac4:	0f 90       	pop	r0
    5ac6:	cf 91       	pop	r28
    5ac8:	df 91       	pop	r29
    5aca:	08 95       	ret

00005acc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    5acc:	df 93       	push	r29
    5ace:	cf 93       	push	r28
    5ad0:	00 d0       	rcall	.+0      	; 0x5ad2 <vTaskPlaceOnEventList+0x6>
    5ad2:	00 d0       	rcall	.+0      	; 0x5ad4 <vTaskPlaceOnEventList+0x8>
    5ad4:	cd b7       	in	r28, 0x3d	; 61
    5ad6:	de b7       	in	r29, 0x3e	; 62
    5ad8:	9a 83       	std	Y+2, r25	; 0x02
    5ada:	89 83       	std	Y+1, r24	; 0x01
    5adc:	7c 83       	std	Y+4, r23	; 0x04
    5ade:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5ae0:	80 91 66 06 	lds	r24, 0x0666
    5ae4:	90 91 67 06 	lds	r25, 0x0667
    5ae8:	9c 01       	movw	r18, r24
    5aea:	24 5f       	subi	r18, 0xF4	; 244
    5aec:	3f 4f       	sbci	r19, 0xFF	; 255
    5aee:	89 81       	ldd	r24, Y+1	; 0x01
    5af0:	9a 81       	ldd	r25, Y+2	; 0x02
    5af2:	b9 01       	movw	r22, r18
    5af4:	0e 94 26 14 	call	0x284c	; 0x284c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5af8:	8b 81       	ldd	r24, Y+3	; 0x03
    5afa:	9c 81       	ldd	r25, Y+4	; 0x04
    5afc:	61 e0       	ldi	r22, 0x01	; 1
    5afe:	0e 94 ca 33 	call	0x6794	; 0x6794 <prvAddCurrentTaskToDelayedList>
}
    5b02:	0f 90       	pop	r0
    5b04:	0f 90       	pop	r0
    5b06:	0f 90       	pop	r0
    5b08:	0f 90       	pop	r0
    5b0a:	cf 91       	pop	r28
    5b0c:	df 91       	pop	r29
    5b0e:	08 95       	ret

00005b10 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    5b10:	df 93       	push	r29
    5b12:	cf 93       	push	r28
    5b14:	00 d0       	rcall	.+0      	; 0x5b16 <vTaskPlaceOnUnorderedEventList+0x6>
    5b16:	00 d0       	rcall	.+0      	; 0x5b18 <vTaskPlaceOnUnorderedEventList+0x8>
    5b18:	00 d0       	rcall	.+0      	; 0x5b1a <vTaskPlaceOnUnorderedEventList+0xa>
    5b1a:	cd b7       	in	r28, 0x3d	; 61
    5b1c:	de b7       	in	r29, 0x3e	; 62
    5b1e:	9a 83       	std	Y+2, r25	; 0x02
    5b20:	89 83       	std	Y+1, r24	; 0x01
    5b22:	7c 83       	std	Y+4, r23	; 0x04
    5b24:	6b 83       	std	Y+3, r22	; 0x03
    5b26:	5e 83       	std	Y+6, r21	; 0x06
    5b28:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    5b2a:	e0 91 66 06 	lds	r30, 0x0666
    5b2e:	f0 91 67 06 	lds	r31, 0x0667
    5b32:	8b 81       	ldd	r24, Y+3	; 0x03
    5b34:	9c 81       	ldd	r25, Y+4	; 0x04
    5b36:	90 68       	ori	r25, 0x80	; 128
    5b38:	95 87       	std	Z+13, r25	; 0x0d
    5b3a:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5b3c:	80 91 66 06 	lds	r24, 0x0666
    5b40:	90 91 67 06 	lds	r25, 0x0667
    5b44:	9c 01       	movw	r18, r24
    5b46:	24 5f       	subi	r18, 0xF4	; 244
    5b48:	3f 4f       	sbci	r19, 0xFF	; 255
    5b4a:	89 81       	ldd	r24, Y+1	; 0x01
    5b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b4e:	b9 01       	movw	r22, r18
    5b50:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5b54:	8d 81       	ldd	r24, Y+5	; 0x05
    5b56:	9e 81       	ldd	r25, Y+6	; 0x06
    5b58:	61 e0       	ldi	r22, 0x01	; 1
    5b5a:	0e 94 ca 33 	call	0x6794	; 0x6794 <prvAddCurrentTaskToDelayedList>
}
    5b5e:	26 96       	adiw	r28, 0x06	; 6
    5b60:	0f b6       	in	r0, 0x3f	; 63
    5b62:	f8 94       	cli
    5b64:	de bf       	out	0x3e, r29	; 62
    5b66:	0f be       	out	0x3f, r0	; 63
    5b68:	cd bf       	out	0x3d, r28	; 61
    5b6a:	cf 91       	pop	r28
    5b6c:	df 91       	pop	r29
    5b6e:	08 95       	ret

00005b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    5b70:	df 93       	push	r29
    5b72:	cf 93       	push	r28
    5b74:	00 d0       	rcall	.+0      	; 0x5b76 <xTaskRemoveFromEventList+0x6>
    5b76:	00 d0       	rcall	.+0      	; 0x5b78 <xTaskRemoveFromEventList+0x8>
    5b78:	0f 92       	push	r0
    5b7a:	cd b7       	in	r28, 0x3d	; 61
    5b7c:	de b7       	in	r29, 0x3e	; 62
    5b7e:	9d 83       	std	Y+5, r25	; 0x05
    5b80:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5b82:	ec 81       	ldd	r30, Y+4	; 0x04
    5b84:	fd 81       	ldd	r31, Y+5	; 0x05
    5b86:	05 80       	ldd	r0, Z+5	; 0x05
    5b88:	f6 81       	ldd	r31, Z+6	; 0x06
    5b8a:	e0 2d       	mov	r30, r0
    5b8c:	86 81       	ldd	r24, Z+6	; 0x06
    5b8e:	97 81       	ldd	r25, Z+7	; 0x07
    5b90:	9b 83       	std	Y+3, r25	; 0x03
    5b92:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5b94:	8a 81       	ldd	r24, Y+2	; 0x02
    5b96:	9b 81       	ldd	r25, Y+3	; 0x03
    5b98:	0c 96       	adiw	r24, 0x0c	; 12
    5b9a:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5b9e:	80 91 76 06 	lds	r24, 0x0676
    5ba2:	88 23       	and	r24, r24
    5ba4:	61 f5       	brne	.+88     	; 0x5bfe <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    5baa:	02 96       	adiw	r24, 0x02	; 2
    5bac:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    5bb0:	ea 81       	ldd	r30, Y+2	; 0x02
    5bb2:	fb 81       	ldd	r31, Y+3	; 0x03
    5bb4:	96 89       	ldd	r25, Z+22	; 0x16
    5bb6:	80 91 6c 06 	lds	r24, 0x066C
    5bba:	89 17       	cp	r24, r25
    5bbc:	28 f4       	brcc	.+10     	; 0x5bc8 <xTaskRemoveFromEventList+0x58>
    5bbe:	ea 81       	ldd	r30, Y+2	; 0x02
    5bc0:	fb 81       	ldd	r31, Y+3	; 0x03
    5bc2:	86 89       	ldd	r24, Z+22	; 0x16
    5bc4:	80 93 6c 06 	sts	0x066C, r24
    5bc8:	ea 81       	ldd	r30, Y+2	; 0x02
    5bca:	fb 81       	ldd	r31, Y+3	; 0x03
    5bcc:	86 89       	ldd	r24, Z+22	; 0x16
    5bce:	28 2f       	mov	r18, r24
    5bd0:	30 e0       	ldi	r19, 0x00	; 0
    5bd2:	c9 01       	movw	r24, r18
    5bd4:	88 0f       	add	r24, r24
    5bd6:	99 1f       	adc	r25, r25
    5bd8:	88 0f       	add	r24, r24
    5bda:	99 1f       	adc	r25, r25
    5bdc:	88 0f       	add	r24, r24
    5bde:	99 1f       	adc	r25, r25
    5be0:	82 0f       	add	r24, r18
    5be2:	93 1f       	adc	r25, r19
    5be4:	ac 01       	movw	r20, r24
    5be6:	49 58       	subi	r20, 0x89	; 137
    5be8:	59 4f       	sbci	r21, 0xF9	; 249
    5bea:	8a 81       	ldd	r24, Y+2	; 0x02
    5bec:	9b 81       	ldd	r25, Y+3	; 0x03
    5bee:	9c 01       	movw	r18, r24
    5bf0:	2e 5f       	subi	r18, 0xFE	; 254
    5bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf4:	ca 01       	movw	r24, r20
    5bf6:	b9 01       	movw	r22, r18
    5bf8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    5bfc:	0a c0       	rjmp	.+20     	; 0x5c12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    5c00:	9b 81       	ldd	r25, Y+3	; 0x03
    5c02:	9c 01       	movw	r18, r24
    5c04:	24 5f       	subi	r18, 0xF4	; 244
    5c06:	3f 4f       	sbci	r19, 0xFF	; 255
    5c08:	81 eb       	ldi	r24, 0xB1	; 177
    5c0a:	96 e0       	ldi	r25, 0x06	; 6
    5c0c:	b9 01       	movw	r22, r18
    5c0e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5c12:	ea 81       	ldd	r30, Y+2	; 0x02
    5c14:	fb 81       	ldd	r31, Y+3	; 0x03
    5c16:	96 89       	ldd	r25, Z+22	; 0x16
    5c18:	e0 91 66 06 	lds	r30, 0x0666
    5c1c:	f0 91 67 06 	lds	r31, 0x0667
    5c20:	86 89       	ldd	r24, Z+22	; 0x16
    5c22:	89 17       	cp	r24, r25
    5c24:	30 f4       	brcc	.+12     	; 0x5c32 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    5c26:	81 e0       	ldi	r24, 0x01	; 1
    5c28:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5c2a:	81 e0       	ldi	r24, 0x01	; 1
    5c2c:	80 93 6f 06 	sts	0x066F, r24
    5c30:	01 c0       	rjmp	.+2      	; 0x5c34 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    5c32:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    5c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    5c36:	0f 90       	pop	r0
    5c38:	0f 90       	pop	r0
    5c3a:	0f 90       	pop	r0
    5c3c:	0f 90       	pop	r0
    5c3e:	0f 90       	pop	r0
    5c40:	cf 91       	pop	r28
    5c42:	df 91       	pop	r29
    5c44:	08 95       	ret

00005c46 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    5c46:	df 93       	push	r29
    5c48:	cf 93       	push	r28
    5c4a:	00 d0       	rcall	.+0      	; 0x5c4c <vTaskRemoveFromUnorderedEventList+0x6>
    5c4c:	00 d0       	rcall	.+0      	; 0x5c4e <vTaskRemoveFromUnorderedEventList+0x8>
    5c4e:	00 d0       	rcall	.+0      	; 0x5c50 <vTaskRemoveFromUnorderedEventList+0xa>
    5c50:	cd b7       	in	r28, 0x3d	; 61
    5c52:	de b7       	in	r29, 0x3e	; 62
    5c54:	9c 83       	std	Y+4, r25	; 0x04
    5c56:	8b 83       	std	Y+3, r24	; 0x03
    5c58:	7e 83       	std	Y+6, r23	; 0x06
    5c5a:	6d 83       	std	Y+5, r22	; 0x05
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    5c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    5c60:	90 68       	ori	r25, 0x80	; 128
    5c62:	eb 81       	ldd	r30, Y+3	; 0x03
    5c64:	fc 81       	ldd	r31, Y+4	; 0x04
    5c66:	91 83       	std	Z+1, r25	; 0x01
    5c68:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5c6a:	eb 81       	ldd	r30, Y+3	; 0x03
    5c6c:	fc 81       	ldd	r31, Y+4	; 0x04
    5c6e:	86 81       	ldd	r24, Z+6	; 0x06
    5c70:	97 81       	ldd	r25, Z+7	; 0x07
    5c72:	9a 83       	std	Y+2, r25	; 0x02
    5c74:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    5c76:	8b 81       	ldd	r24, Y+3	; 0x03
    5c78:	9c 81       	ldd	r25, Y+4	; 0x04
    5c7a:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5c7e:	89 81       	ldd	r24, Y+1	; 0x01
    5c80:	9a 81       	ldd	r25, Y+2	; 0x02
    5c82:	02 96       	adiw	r24, 0x02	; 2
    5c84:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    5c88:	e9 81       	ldd	r30, Y+1	; 0x01
    5c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    5c8c:	96 89       	ldd	r25, Z+22	; 0x16
    5c8e:	80 91 6c 06 	lds	r24, 0x066C
    5c92:	89 17       	cp	r24, r25
    5c94:	28 f4       	brcc	.+10     	; 0x5ca0 <vTaskRemoveFromUnorderedEventList+0x5a>
    5c96:	e9 81       	ldd	r30, Y+1	; 0x01
    5c98:	fa 81       	ldd	r31, Y+2	; 0x02
    5c9a:	86 89       	ldd	r24, Z+22	; 0x16
    5c9c:	80 93 6c 06 	sts	0x066C, r24
    5ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    5ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    5ca4:	86 89       	ldd	r24, Z+22	; 0x16
    5ca6:	28 2f       	mov	r18, r24
    5ca8:	30 e0       	ldi	r19, 0x00	; 0
    5caa:	c9 01       	movw	r24, r18
    5cac:	88 0f       	add	r24, r24
    5cae:	99 1f       	adc	r25, r25
    5cb0:	88 0f       	add	r24, r24
    5cb2:	99 1f       	adc	r25, r25
    5cb4:	88 0f       	add	r24, r24
    5cb6:	99 1f       	adc	r25, r25
    5cb8:	82 0f       	add	r24, r18
    5cba:	93 1f       	adc	r25, r19
    5cbc:	ac 01       	movw	r20, r24
    5cbe:	49 58       	subi	r20, 0x89	; 137
    5cc0:	59 4f       	sbci	r21, 0xF9	; 249
    5cc2:	89 81       	ldd	r24, Y+1	; 0x01
    5cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc6:	9c 01       	movw	r18, r24
    5cc8:	2e 5f       	subi	r18, 0xFE	; 254
    5cca:	3f 4f       	sbci	r19, 0xFF	; 255
    5ccc:	ca 01       	movw	r24, r20
    5cce:	b9 01       	movw	r22, r18
    5cd0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    5cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    5cd8:	96 89       	ldd	r25, Z+22	; 0x16
    5cda:	e0 91 66 06 	lds	r30, 0x0666
    5cde:	f0 91 67 06 	lds	r31, 0x0667
    5ce2:	86 89       	ldd	r24, Z+22	; 0x16
    5ce4:	89 17       	cp	r24, r25
    5ce6:	18 f4       	brcc	.+6      	; 0x5cee <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    5ce8:	81 e0       	ldi	r24, 0x01	; 1
    5cea:	80 93 6f 06 	sts	0x066F, r24
	}
}
    5cee:	26 96       	adiw	r28, 0x06	; 6
    5cf0:	0f b6       	in	r0, 0x3f	; 63
    5cf2:	f8 94       	cli
    5cf4:	de bf       	out	0x3e, r29	; 62
    5cf6:	0f be       	out	0x3f, r0	; 63
    5cf8:	cd bf       	out	0x3d, r28	; 61
    5cfa:	cf 91       	pop	r28
    5cfc:	df 91       	pop	r29
    5cfe:	08 95       	ret

00005d00 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    5d00:	df 93       	push	r29
    5d02:	cf 93       	push	r28
    5d04:	00 d0       	rcall	.+0      	; 0x5d06 <vTaskSetTimeOutState+0x6>
    5d06:	cd b7       	in	r28, 0x3d	; 61
    5d08:	de b7       	in	r29, 0x3e	; 62
    5d0a:	9a 83       	std	Y+2, r25	; 0x02
    5d0c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    5d0e:	0f b6       	in	r0, 0x3f	; 63
    5d10:	f8 94       	cli
    5d12:	0f 92       	push	r0
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    5d14:	80 91 70 06 	lds	r24, 0x0670
    5d18:	e9 81       	ldd	r30, Y+1	; 0x01
    5d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    5d1c:	80 83       	st	Z, r24
		pxTimeOut->xTimeOnEntering = xTickCount;
    5d1e:	80 91 6a 06 	lds	r24, 0x066A
    5d22:	90 91 6b 06 	lds	r25, 0x066B
    5d26:	e9 81       	ldd	r30, Y+1	; 0x01
    5d28:	fa 81       	ldd	r31, Y+2	; 0x02
    5d2a:	92 83       	std	Z+2, r25	; 0x02
    5d2c:	81 83       	std	Z+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    5d2e:	0f 90       	pop	r0
    5d30:	0f be       	out	0x3f, r0	; 63
}
    5d32:	0f 90       	pop	r0
    5d34:	0f 90       	pop	r0
    5d36:	cf 91       	pop	r28
    5d38:	df 91       	pop	r29
    5d3a:	08 95       	ret

00005d3c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    5d3c:	df 93       	push	r29
    5d3e:	cf 93       	push	r28
    5d40:	00 d0       	rcall	.+0      	; 0x5d42 <vTaskInternalSetTimeOutState+0x6>
    5d42:	cd b7       	in	r28, 0x3d	; 61
    5d44:	de b7       	in	r29, 0x3e	; 62
    5d46:	9a 83       	std	Y+2, r25	; 0x02
    5d48:	89 83       	std	Y+1, r24	; 0x01
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5d4a:	80 91 70 06 	lds	r24, 0x0670
    5d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    5d50:	fa 81       	ldd	r31, Y+2	; 0x02
    5d52:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    5d54:	80 91 6a 06 	lds	r24, 0x066A
    5d58:	90 91 6b 06 	lds	r25, 0x066B
    5d5c:	e9 81       	ldd	r30, Y+1	; 0x01
    5d5e:	fa 81       	ldd	r31, Y+2	; 0x02
    5d60:	92 83       	std	Z+2, r25	; 0x02
    5d62:	81 83       	std	Z+1, r24	; 0x01
}
    5d64:	0f 90       	pop	r0
    5d66:	0f 90       	pop	r0
    5d68:	cf 91       	pop	r28
    5d6a:	df 91       	pop	r29
    5d6c:	08 95       	ret

00005d6e <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    5d6e:	df 93       	push	r29
    5d70:	cf 93       	push	r28
    5d72:	cd b7       	in	r28, 0x3d	; 61
    5d74:	de b7       	in	r29, 0x3e	; 62
    5d76:	29 97       	sbiw	r28, 0x09	; 9
    5d78:	0f b6       	in	r0, 0x3f	; 63
    5d7a:	f8 94       	cli
    5d7c:	de bf       	out	0x3e, r29	; 62
    5d7e:	0f be       	out	0x3f, r0	; 63
    5d80:	cd bf       	out	0x3d, r28	; 61
    5d82:	9f 83       	std	Y+7, r25	; 0x07
    5d84:	8e 83       	std	Y+6, r24	; 0x06
    5d86:	79 87       	std	Y+9, r23	; 0x09
    5d88:	68 87       	std	Y+8, r22	; 0x08
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5d8a:	0f b6       	in	r0, 0x3f	; 63
    5d8c:	f8 94       	cli
    5d8e:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    5d90:	80 91 6a 06 	lds	r24, 0x066A
    5d94:	90 91 6b 06 	lds	r25, 0x066B
    5d98:	9c 83       	std	Y+4, r25	; 0x04
    5d9a:	8b 83       	std	Y+3, r24	; 0x03
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5d9c:	ee 81       	ldd	r30, Y+6	; 0x06
    5d9e:	ff 81       	ldd	r31, Y+7	; 0x07
    5da0:	21 81       	ldd	r18, Z+1	; 0x01
    5da2:	32 81       	ldd	r19, Z+2	; 0x02
    5da4:	8b 81       	ldd	r24, Y+3	; 0x03
    5da6:	9c 81       	ldd	r25, Y+4	; 0x04
    5da8:	82 1b       	sub	r24, r18
    5daa:	93 0b       	sbc	r25, r19
    5dac:	9a 83       	std	Y+2, r25	; 0x02
    5dae:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    5db0:	e8 85       	ldd	r30, Y+8	; 0x08
    5db2:	f9 85       	ldd	r31, Y+9	; 0x09
    5db4:	80 81       	ld	r24, Z
    5db6:	91 81       	ldd	r25, Z+1	; 0x01
    5db8:	2f ef       	ldi	r18, 0xFF	; 255
    5dba:	8f 3f       	cpi	r24, 0xFF	; 255
    5dbc:	92 07       	cpc	r25, r18
    5dbe:	11 f4       	brne	.+4      	; 0x5dc4 <xTaskCheckForTimeOut+0x56>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    5dc0:	1d 82       	std	Y+5, r1	; 0x05
    5dc2:	36 c0       	rjmp	.+108    	; 0x5e30 <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5dc4:	ee 81       	ldd	r30, Y+6	; 0x06
    5dc6:	ff 81       	ldd	r31, Y+7	; 0x07
    5dc8:	90 81       	ld	r25, Z
    5dca:	80 91 70 06 	lds	r24, 0x0670
    5dce:	98 17       	cp	r25, r24
    5dd0:	61 f0       	breq	.+24     	; 0x5dea <xTaskCheckForTimeOut+0x7c>
    5dd2:	ee 81       	ldd	r30, Y+6	; 0x06
    5dd4:	ff 81       	ldd	r31, Y+7	; 0x07
    5dd6:	21 81       	ldd	r18, Z+1	; 0x01
    5dd8:	32 81       	ldd	r19, Z+2	; 0x02
    5dda:	8b 81       	ldd	r24, Y+3	; 0x03
    5ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    5dde:	82 17       	cp	r24, r18
    5de0:	93 07       	cpc	r25, r19
    5de2:	18 f0       	brcs	.+6      	; 0x5dea <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5de4:	81 e0       	ldi	r24, 0x01	; 1
    5de6:	8d 83       	std	Y+5, r24	; 0x05
    5de8:	23 c0       	rjmp	.+70     	; 0x5e30 <xTaskCheckForTimeOut+0xc2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    5dea:	e8 85       	ldd	r30, Y+8	; 0x08
    5dec:	f9 85       	ldd	r31, Y+9	; 0x09
    5dee:	20 81       	ld	r18, Z
    5df0:	31 81       	ldd	r19, Z+1	; 0x01
    5df2:	89 81       	ldd	r24, Y+1	; 0x01
    5df4:	9a 81       	ldd	r25, Y+2	; 0x02
    5df6:	82 17       	cp	r24, r18
    5df8:	93 07       	cpc	r25, r19
    5dfa:	a0 f4       	brcc	.+40     	; 0x5e24 <xTaskCheckForTimeOut+0xb6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    5dfc:	e8 85       	ldd	r30, Y+8	; 0x08
    5dfe:	f9 85       	ldd	r31, Y+9	; 0x09
    5e00:	20 81       	ld	r18, Z
    5e02:	31 81       	ldd	r19, Z+1	; 0x01
    5e04:	89 81       	ldd	r24, Y+1	; 0x01
    5e06:	9a 81       	ldd	r25, Y+2	; 0x02
    5e08:	a9 01       	movw	r20, r18
    5e0a:	48 1b       	sub	r20, r24
    5e0c:	59 0b       	sbc	r21, r25
    5e0e:	ca 01       	movw	r24, r20
    5e10:	e8 85       	ldd	r30, Y+8	; 0x08
    5e12:	f9 85       	ldd	r31, Y+9	; 0x09
    5e14:	91 83       	std	Z+1, r25	; 0x01
    5e16:	80 83       	st	Z, r24
			vTaskInternalSetTimeOutState( pxTimeOut );
    5e18:	8e 81       	ldd	r24, Y+6	; 0x06
    5e1a:	9f 81       	ldd	r25, Y+7	; 0x07
    5e1c:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    5e20:	1d 82       	std	Y+5, r1	; 0x05
    5e22:	06 c0       	rjmp	.+12     	; 0x5e30 <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			*pxTicksToWait = 0;
    5e24:	e8 85       	ldd	r30, Y+8	; 0x08
    5e26:	f9 85       	ldd	r31, Y+9	; 0x09
    5e28:	11 82       	std	Z+1, r1	; 0x01
    5e2a:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    5e2c:	81 e0       	ldi	r24, 0x01	; 1
    5e2e:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
	taskEXIT_CRITICAL();
    5e30:	0f 90       	pop	r0
    5e32:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    5e34:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5e36:	29 96       	adiw	r28, 0x09	; 9
    5e38:	0f b6       	in	r0, 0x3f	; 63
    5e3a:	f8 94       	cli
    5e3c:	de bf       	out	0x3e, r29	; 62
    5e3e:	0f be       	out	0x3f, r0	; 63
    5e40:	cd bf       	out	0x3d, r28	; 61
    5e42:	cf 91       	pop	r28
    5e44:	df 91       	pop	r29
    5e46:	08 95       	ret

00005e48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5e48:	df 93       	push	r29
    5e4a:	cf 93       	push	r28
    5e4c:	cd b7       	in	r28, 0x3d	; 61
    5e4e:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    5e50:	81 e0       	ldi	r24, 0x01	; 1
    5e52:	80 93 6f 06 	sts	0x066F, r24
}
    5e56:	cf 91       	pop	r28
    5e58:	df 91       	pop	r29
    5e5a:	08 95       	ret

00005e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5e5c:	df 93       	push	r29
    5e5e:	cf 93       	push	r28
    5e60:	00 d0       	rcall	.+0      	; 0x5e62 <prvIdleTask+0x6>
    5e62:	cd b7       	in	r28, 0x3d	; 61
    5e64:	de b7       	in	r29, 0x3e	; 62
    5e66:	9a 83       	std	Y+2, r25	; 0x02
    5e68:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    5e6a:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <prvCheckTasksWaitingTermination>
    5e6e:	fd cf       	rjmp	.-6      	; 0x5e6a <prvIdleTask+0xe>

00005e70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    5e70:	df 93       	push	r29
    5e72:	cf 93       	push	r28
    5e74:	0f 92       	push	r0
    5e76:	cd b7       	in	r28, 0x3d	; 61
    5e78:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    5e7a:	19 82       	std	Y+1, r1	; 0x01
    5e7c:	13 c0       	rjmp	.+38     	; 0x5ea4 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    5e7e:	89 81       	ldd	r24, Y+1	; 0x01
    5e80:	28 2f       	mov	r18, r24
    5e82:	30 e0       	ldi	r19, 0x00	; 0
    5e84:	c9 01       	movw	r24, r18
    5e86:	88 0f       	add	r24, r24
    5e88:	99 1f       	adc	r25, r25
    5e8a:	88 0f       	add	r24, r24
    5e8c:	99 1f       	adc	r25, r25
    5e8e:	88 0f       	add	r24, r24
    5e90:	99 1f       	adc	r25, r25
    5e92:	82 0f       	add	r24, r18
    5e94:	93 1f       	adc	r25, r19
    5e96:	89 58       	subi	r24, 0x89	; 137
    5e98:	99 4f       	sbci	r25, 0xF9	; 249
    5e9a:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    5e9e:	89 81       	ldd	r24, Y+1	; 0x01
    5ea0:	8f 5f       	subi	r24, 0xFF	; 255
    5ea2:	89 83       	std	Y+1, r24	; 0x01
    5ea4:	89 81       	ldd	r24, Y+1	; 0x01
    5ea6:	84 30       	cpi	r24, 0x04	; 4
    5ea8:	50 f3       	brcs	.-44     	; 0x5e7e <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    5eaa:	8b e9       	ldi	r24, 0x9B	; 155
    5eac:	96 e0       	ldi	r25, 0x06	; 6
    5eae:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    5eb2:	84 ea       	ldi	r24, 0xA4	; 164
    5eb4:	96 e0       	ldi	r25, 0x06	; 6
    5eb6:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    5eba:	81 eb       	ldi	r24, 0xB1	; 177
    5ebc:	96 e0       	ldi	r25, 0x06	; 6
    5ebe:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    5ec2:	8a eb       	ldi	r24, 0xBA	; 186
    5ec4:	96 e0       	ldi	r25, 0x06	; 6
    5ec6:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    5eca:	83 ec       	ldi	r24, 0xC3	; 195
    5ecc:	96 e0       	ldi	r25, 0x06	; 6
    5ece:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5ed2:	8b e9       	ldi	r24, 0x9B	; 155
    5ed4:	96 e0       	ldi	r25, 0x06	; 6
    5ed6:	90 93 ae 06 	sts	0x06AE, r25
    5eda:	80 93 ad 06 	sts	0x06AD, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5ede:	84 ea       	ldi	r24, 0xA4	; 164
    5ee0:	96 e0       	ldi	r25, 0x06	; 6
    5ee2:	90 93 b0 06 	sts	0x06B0, r25
    5ee6:	80 93 af 06 	sts	0x06AF, r24
}
    5eea:	0f 90       	pop	r0
    5eec:	cf 91       	pop	r28
    5eee:	df 91       	pop	r29
    5ef0:	08 95       	ret

00005ef2 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5ef2:	df 93       	push	r29
    5ef4:	cf 93       	push	r28
    5ef6:	00 d0       	rcall	.+0      	; 0x5ef8 <prvCheckTasksWaitingTermination+0x6>
    5ef8:	cd b7       	in	r28, 0x3d	; 61
    5efa:	de b7       	in	r29, 0x3e	; 62
    5efc:	20 c0       	rjmp	.+64     	; 0x5f3e <prvCheckTasksWaitingTermination+0x4c>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
    5efe:	0f b6       	in	r0, 0x3f	; 63
    5f00:	f8 94       	cli
    5f02:	0f 92       	push	r0
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5f04:	e0 91 bf 06 	lds	r30, 0x06BF
    5f08:	f0 91 c0 06 	lds	r31, 0x06C0
    5f0c:	86 81       	ldd	r24, Z+6	; 0x06
    5f0e:	97 81       	ldd	r25, Z+7	; 0x07
    5f10:	9a 83       	std	Y+2, r25	; 0x02
    5f12:	89 83       	std	Y+1, r24	; 0x01
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5f14:	89 81       	ldd	r24, Y+1	; 0x01
    5f16:	9a 81       	ldd	r25, Y+2	; 0x02
    5f18:	02 96       	adiw	r24, 0x02	; 2
    5f1a:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
				--uxCurrentNumberOfTasks;
    5f1e:	80 91 69 06 	lds	r24, 0x0669
    5f22:	81 50       	subi	r24, 0x01	; 1
    5f24:	80 93 69 06 	sts	0x0669, r24
				--uxDeletedTasksWaitingCleanUp;
    5f28:	80 91 68 06 	lds	r24, 0x0668
    5f2c:	81 50       	subi	r24, 0x01	; 1
    5f2e:	80 93 68 06 	sts	0x0668, r24
			}
			taskEXIT_CRITICAL();
    5f32:	0f 90       	pop	r0
    5f34:	0f be       	out	0x3f, r0	; 63

			prvDeleteTCB( pxTCB );
    5f36:	89 81       	ldd	r24, Y+1	; 0x01
    5f38:	9a 81       	ldd	r25, Y+2	; 0x02
    5f3a:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5f3e:	80 91 68 06 	lds	r24, 0x0668
    5f42:	88 23       	and	r24, r24
    5f44:	e1 f6       	brne	.-72     	; 0x5efe <prvCheckTasksWaitingTermination+0xc>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    5f46:	0f 90       	pop	r0
    5f48:	0f 90       	pop	r0
    5f4a:	cf 91       	pop	r28
    5f4c:	df 91       	pop	r29
    5f4e:	08 95       	ret

00005f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    5f50:	df 93       	push	r29
    5f52:	cf 93       	push	r28
    5f54:	00 d0       	rcall	.+0      	; 0x5f56 <prvDeleteTCB+0x6>
    5f56:	cd b7       	in	r28, 0x3d	; 61
    5f58:	de b7       	in	r29, 0x3e	; 62
    5f5a:	9a 83       	std	Y+2, r25	; 0x02
    5f5c:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    5f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    5f60:	fa 81       	ldd	r31, Y+2	; 0x02
    5f62:	87 89       	ldd	r24, Z+23	; 0x17
    5f64:	90 8d       	ldd	r25, Z+24	; 0x18
    5f66:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
			vPortFree( pxTCB );
    5f6a:	89 81       	ldd	r24, Y+1	; 0x01
    5f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f6e:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    5f72:	0f 90       	pop	r0
    5f74:	0f 90       	pop	r0
    5f76:	cf 91       	pop	r28
    5f78:	df 91       	pop	r29
    5f7a:	08 95       	ret

00005f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    5f7c:	df 93       	push	r29
    5f7e:	cf 93       	push	r28
    5f80:	00 d0       	rcall	.+0      	; 0x5f82 <prvResetNextTaskUnblockTime+0x6>
    5f82:	cd b7       	in	r28, 0x3d	; 61
    5f84:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5f86:	e0 91 ad 06 	lds	r30, 0x06AD
    5f8a:	f0 91 ae 06 	lds	r31, 0x06AE
    5f8e:	80 81       	ld	r24, Z
    5f90:	88 23       	and	r24, r24
    5f92:	39 f4       	brne	.+14     	; 0x5fa2 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    5f94:	8f ef       	ldi	r24, 0xFF	; 255
    5f96:	9f ef       	ldi	r25, 0xFF	; 255
    5f98:	90 93 73 06 	sts	0x0673, r25
    5f9c:	80 93 72 06 	sts	0x0672, r24
    5fa0:	13 c0       	rjmp	.+38     	; 0x5fc8 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5fa2:	e0 91 ad 06 	lds	r30, 0x06AD
    5fa6:	f0 91 ae 06 	lds	r31, 0x06AE
    5faa:	05 80       	ldd	r0, Z+5	; 0x05
    5fac:	f6 81       	ldd	r31, Z+6	; 0x06
    5fae:	e0 2d       	mov	r30, r0
    5fb0:	86 81       	ldd	r24, Z+6	; 0x06
    5fb2:	97 81       	ldd	r25, Z+7	; 0x07
    5fb4:	9a 83       	std	Y+2, r25	; 0x02
    5fb6:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    5fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    5fba:	fa 81       	ldd	r31, Y+2	; 0x02
    5fbc:	82 81       	ldd	r24, Z+2	; 0x02
    5fbe:	93 81       	ldd	r25, Z+3	; 0x03
    5fc0:	90 93 73 06 	sts	0x0673, r25
    5fc4:	80 93 72 06 	sts	0x0672, r24
	}
}
    5fc8:	0f 90       	pop	r0
    5fca:	0f 90       	pop	r0
    5fcc:	cf 91       	pop	r28
    5fce:	df 91       	pop	r29
    5fd0:	08 95       	ret

00005fd2 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    5fd2:	df 93       	push	r29
    5fd4:	cf 93       	push	r28
    5fd6:	00 d0       	rcall	.+0      	; 0x5fd8 <xTaskGetCurrentTaskHandle+0x6>
    5fd8:	cd b7       	in	r28, 0x3d	; 61
    5fda:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5fdc:	80 91 66 06 	lds	r24, 0x0666
    5fe0:	90 91 67 06 	lds	r25, 0x0667
    5fe4:	9a 83       	std	Y+2, r25	; 0x02
    5fe6:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    5fe8:	89 81       	ldd	r24, Y+1	; 0x01
    5fea:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    5fec:	0f 90       	pop	r0
    5fee:	0f 90       	pop	r0
    5ff0:	cf 91       	pop	r28
    5ff2:	df 91       	pop	r29
    5ff4:	08 95       	ret

00005ff6 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    5ff6:	df 93       	push	r29
    5ff8:	cf 93       	push	r28
    5ffa:	00 d0       	rcall	.+0      	; 0x5ffc <uxTaskResetEventItemValue+0x6>
    5ffc:	cd b7       	in	r28, 0x3d	; 61
    5ffe:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    6000:	e0 91 66 06 	lds	r30, 0x0666
    6004:	f0 91 67 06 	lds	r31, 0x0667
    6008:	84 85       	ldd	r24, Z+12	; 0x0c
    600a:	95 85       	ldd	r25, Z+13	; 0x0d
    600c:	9a 83       	std	Y+2, r25	; 0x02
    600e:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6010:	a0 91 66 06 	lds	r26, 0x0666
    6014:	b0 91 67 06 	lds	r27, 0x0667
    6018:	e0 91 66 06 	lds	r30, 0x0666
    601c:	f0 91 67 06 	lds	r31, 0x0667
    6020:	86 89       	ldd	r24, Z+22	; 0x16
    6022:	28 2f       	mov	r18, r24
    6024:	30 e0       	ldi	r19, 0x00	; 0
    6026:	84 e0       	ldi	r24, 0x04	; 4
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	82 1b       	sub	r24, r18
    602c:	93 0b       	sbc	r25, r19
    602e:	1d 96       	adiw	r26, 0x0d	; 13
    6030:	9c 93       	st	X, r25
    6032:	8e 93       	st	-X, r24
    6034:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    6036:	89 81       	ldd	r24, Y+1	; 0x01
    6038:	9a 81       	ldd	r25, Y+2	; 0x02
}
    603a:	0f 90       	pop	r0
    603c:	0f 90       	pop	r0
    603e:	cf 91       	pop	r28
    6040:	df 91       	pop	r29
    6042:	08 95       	ret

00006044 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    6044:	df 93       	push	r29
    6046:	cf 93       	push	r28
    6048:	cd b7       	in	r28, 0x3d	; 61
    604a:	de b7       	in	r29, 0x3e	; 62
    604c:	27 97       	sbiw	r28, 0x07	; 7
    604e:	0f b6       	in	r0, 0x3f	; 63
    6050:	f8 94       	cli
    6052:	de bf       	out	0x3e, r29	; 62
    6054:	0f be       	out	0x3f, r0	; 63
    6056:	cd bf       	out	0x3d, r28	; 61
    6058:	8d 83       	std	Y+5, r24	; 0x05
    605a:	7f 83       	std	Y+7, r23	; 0x07
    605c:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    605e:	0f b6       	in	r0, 0x3f	; 63
    6060:	f8 94       	cli
    6062:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    6064:	e0 91 66 06 	lds	r30, 0x0666
    6068:	f0 91 67 06 	lds	r31, 0x0667
    606c:	81 a1       	ldd	r24, Z+33	; 0x21
    606e:	92 a1       	ldd	r25, Z+34	; 0x22
    6070:	a3 a1       	ldd	r26, Z+35	; 0x23
    6072:	b4 a1       	ldd	r27, Z+36	; 0x24
    6074:	00 97       	sbiw	r24, 0x00	; 0
    6076:	a1 05       	cpc	r26, r1
    6078:	b1 05       	cpc	r27, r1
    607a:	89 f4       	brne	.+34     	; 0x609e <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    607c:	e0 91 66 06 	lds	r30, 0x0666
    6080:	f0 91 67 06 	lds	r31, 0x0667
    6084:	81 e0       	ldi	r24, 0x01	; 1
    6086:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    6088:	8e 81       	ldd	r24, Y+6	; 0x06
    608a:	9f 81       	ldd	r25, Y+7	; 0x07
    608c:	00 97       	sbiw	r24, 0x00	; 0
    608e:	39 f0       	breq	.+14     	; 0x609e <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    6090:	8e 81       	ldd	r24, Y+6	; 0x06
    6092:	9f 81       	ldd	r25, Y+7	; 0x07
    6094:	61 e0       	ldi	r22, 0x01	; 1
    6096:	0e 94 ca 33 	call	0x6794	; 0x6794 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    609a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    609e:	0f 90       	pop	r0
    60a0:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    60a2:	0f b6       	in	r0, 0x3f	; 63
    60a4:	f8 94       	cli
    60a6:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    60a8:	e0 91 66 06 	lds	r30, 0x0666
    60ac:	f0 91 67 06 	lds	r31, 0x0667
    60b0:	81 a1       	ldd	r24, Z+33	; 0x21
    60b2:	92 a1       	ldd	r25, Z+34	; 0x22
    60b4:	a3 a1       	ldd	r26, Z+35	; 0x23
    60b6:	b4 a1       	ldd	r27, Z+36	; 0x24
    60b8:	89 83       	std	Y+1, r24	; 0x01
    60ba:	9a 83       	std	Y+2, r25	; 0x02
    60bc:	ab 83       	std	Y+3, r26	; 0x03
    60be:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    60c0:	89 81       	ldd	r24, Y+1	; 0x01
    60c2:	9a 81       	ldd	r25, Y+2	; 0x02
    60c4:	ab 81       	ldd	r26, Y+3	; 0x03
    60c6:	bc 81       	ldd	r27, Y+4	; 0x04
    60c8:	00 97       	sbiw	r24, 0x00	; 0
    60ca:	a1 05       	cpc	r26, r1
    60cc:	b1 05       	cpc	r27, r1
    60ce:	d9 f0       	breq	.+54     	; 0x6106 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    60d0:	8d 81       	ldd	r24, Y+5	; 0x05
    60d2:	88 23       	and	r24, r24
    60d4:	49 f0       	breq	.+18     	; 0x60e8 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    60d6:	e0 91 66 06 	lds	r30, 0x0666
    60da:	f0 91 67 06 	lds	r31, 0x0667
    60de:	11 a2       	std	Z+33, r1	; 0x21
    60e0:	12 a2       	std	Z+34, r1	; 0x22
    60e2:	13 a2       	std	Z+35, r1	; 0x23
    60e4:	14 a2       	std	Z+36, r1	; 0x24
    60e6:	0f c0       	rjmp	.+30     	; 0x6106 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    60e8:	e0 91 66 06 	lds	r30, 0x0666
    60ec:	f0 91 67 06 	lds	r31, 0x0667
    60f0:	89 81       	ldd	r24, Y+1	; 0x01
    60f2:	9a 81       	ldd	r25, Y+2	; 0x02
    60f4:	ab 81       	ldd	r26, Y+3	; 0x03
    60f6:	bc 81       	ldd	r27, Y+4	; 0x04
    60f8:	01 97       	sbiw	r24, 0x01	; 1
    60fa:	a1 09       	sbc	r26, r1
    60fc:	b1 09       	sbc	r27, r1
    60fe:	81 a3       	std	Z+33, r24	; 0x21
    6100:	92 a3       	std	Z+34, r25	; 0x22
    6102:	a3 a3       	std	Z+35, r26	; 0x23
    6104:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    6106:	e0 91 66 06 	lds	r30, 0x0666
    610a:	f0 91 67 06 	lds	r31, 0x0667
    610e:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    6110:	0f 90       	pop	r0
    6112:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    6114:	89 81       	ldd	r24, Y+1	; 0x01
    6116:	9a 81       	ldd	r25, Y+2	; 0x02
    6118:	ab 81       	ldd	r26, Y+3	; 0x03
    611a:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    611c:	bc 01       	movw	r22, r24
    611e:	cd 01       	movw	r24, r26
    6120:	27 96       	adiw	r28, 0x07	; 7
    6122:	0f b6       	in	r0, 0x3f	; 63
    6124:	f8 94       	cli
    6126:	de bf       	out	0x3e, r29	; 62
    6128:	0f be       	out	0x3f, r0	; 63
    612a:	cd bf       	out	0x3d, r28	; 61
    612c:	cf 91       	pop	r28
    612e:	df 91       	pop	r29
    6130:	08 95       	ret

00006132 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    6132:	ef 92       	push	r14
    6134:	ff 92       	push	r15
    6136:	0f 93       	push	r16
    6138:	1f 93       	push	r17
    613a:	df 93       	push	r29
    613c:	cf 93       	push	r28
    613e:	cd b7       	in	r28, 0x3d	; 61
    6140:	de b7       	in	r29, 0x3e	; 62
    6142:	2d 97       	sbiw	r28, 0x0d	; 13
    6144:	0f b6       	in	r0, 0x3f	; 63
    6146:	f8 94       	cli
    6148:	de bf       	out	0x3e, r29	; 62
    614a:	0f be       	out	0x3f, r0	; 63
    614c:	cd bf       	out	0x3d, r28	; 61
    614e:	6a 83       	std	Y+2, r22	; 0x02
    6150:	7b 83       	std	Y+3, r23	; 0x03
    6152:	8c 83       	std	Y+4, r24	; 0x04
    6154:	9d 83       	std	Y+5, r25	; 0x05
    6156:	2e 83       	std	Y+6, r18	; 0x06
    6158:	3f 83       	std	Y+7, r19	; 0x07
    615a:	48 87       	std	Y+8, r20	; 0x08
    615c:	59 87       	std	Y+9, r21	; 0x09
    615e:	1b 87       	std	Y+11, r17	; 0x0b
    6160:	0a 87       	std	Y+10, r16	; 0x0a
    6162:	fd 86       	std	Y+13, r15	; 0x0d
    6164:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    6166:	0f b6       	in	r0, 0x3f	; 63
    6168:	f8 94       	cli
    616a:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    616c:	e0 91 66 06 	lds	r30, 0x0666
    6170:	f0 91 67 06 	lds	r31, 0x0667
    6174:	85 a1       	ldd	r24, Z+37	; 0x25
    6176:	82 30       	cpi	r24, 0x02	; 2
    6178:	49 f1       	breq	.+82     	; 0x61cc <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    617a:	e0 91 66 06 	lds	r30, 0x0666
    617e:	f0 91 67 06 	lds	r31, 0x0667
    6182:	21 a1       	ldd	r18, Z+33	; 0x21
    6184:	32 a1       	ldd	r19, Z+34	; 0x22
    6186:	43 a1       	ldd	r20, Z+35	; 0x23
    6188:	54 a1       	ldd	r21, Z+36	; 0x24
    618a:	8a 81       	ldd	r24, Y+2	; 0x02
    618c:	9b 81       	ldd	r25, Y+3	; 0x03
    618e:	ac 81       	ldd	r26, Y+4	; 0x04
    6190:	bd 81       	ldd	r27, Y+5	; 0x05
    6192:	80 95       	com	r24
    6194:	90 95       	com	r25
    6196:	a0 95       	com	r26
    6198:	b0 95       	com	r27
    619a:	82 23       	and	r24, r18
    619c:	93 23       	and	r25, r19
    619e:	a4 23       	and	r26, r20
    61a0:	b5 23       	and	r27, r21
    61a2:	81 a3       	std	Z+33, r24	; 0x21
    61a4:	92 a3       	std	Z+34, r25	; 0x22
    61a6:	a3 a3       	std	Z+35, r26	; 0x23
    61a8:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    61aa:	e0 91 66 06 	lds	r30, 0x0666
    61ae:	f0 91 67 06 	lds	r31, 0x0667
    61b2:	81 e0       	ldi	r24, 0x01	; 1
    61b4:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    61b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    61b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    61ba:	00 97       	sbiw	r24, 0x00	; 0
    61bc:	39 f0       	breq	.+14     	; 0x61cc <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    61be:	8c 85       	ldd	r24, Y+12	; 0x0c
    61c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    61c2:	61 e0       	ldi	r22, 0x01	; 1
    61c4:	0e 94 ca 33 	call	0x6794	; 0x6794 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    61c8:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    61cc:	0f 90       	pop	r0
    61ce:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    61d0:	0f b6       	in	r0, 0x3f	; 63
    61d2:	f8 94       	cli
    61d4:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    61d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    61d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    61da:	00 97       	sbiw	r24, 0x00	; 0
    61dc:	71 f0       	breq	.+28     	; 0x61fa <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    61de:	e0 91 66 06 	lds	r30, 0x0666
    61e2:	f0 91 67 06 	lds	r31, 0x0667
    61e6:	81 a1       	ldd	r24, Z+33	; 0x21
    61e8:	92 a1       	ldd	r25, Z+34	; 0x22
    61ea:	a3 a1       	ldd	r26, Z+35	; 0x23
    61ec:	b4 a1       	ldd	r27, Z+36	; 0x24
    61ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    61f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    61f2:	80 83       	st	Z, r24
    61f4:	91 83       	std	Z+1, r25	; 0x01
    61f6:	a2 83       	std	Z+2, r26	; 0x02
    61f8:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    61fa:	e0 91 66 06 	lds	r30, 0x0666
    61fe:	f0 91 67 06 	lds	r31, 0x0667
    6202:	85 a1       	ldd	r24, Z+37	; 0x25
    6204:	82 30       	cpi	r24, 0x02	; 2
    6206:	11 f0       	breq	.+4      	; 0x620c <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    6208:	19 82       	std	Y+1, r1	; 0x01
    620a:	1a c0       	rjmp	.+52     	; 0x6240 <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    620c:	e0 91 66 06 	lds	r30, 0x0666
    6210:	f0 91 67 06 	lds	r31, 0x0667
    6214:	21 a1       	ldd	r18, Z+33	; 0x21
    6216:	32 a1       	ldd	r19, Z+34	; 0x22
    6218:	43 a1       	ldd	r20, Z+35	; 0x23
    621a:	54 a1       	ldd	r21, Z+36	; 0x24
    621c:	8e 81       	ldd	r24, Y+6	; 0x06
    621e:	9f 81       	ldd	r25, Y+7	; 0x07
    6220:	a8 85       	ldd	r26, Y+8	; 0x08
    6222:	b9 85       	ldd	r27, Y+9	; 0x09
    6224:	80 95       	com	r24
    6226:	90 95       	com	r25
    6228:	a0 95       	com	r26
    622a:	b0 95       	com	r27
    622c:	82 23       	and	r24, r18
    622e:	93 23       	and	r25, r19
    6230:	a4 23       	and	r26, r20
    6232:	b5 23       	and	r27, r21
    6234:	81 a3       	std	Z+33, r24	; 0x21
    6236:	92 a3       	std	Z+34, r25	; 0x22
    6238:	a3 a3       	std	Z+35, r26	; 0x23
    623a:	b4 a3       	std	Z+36, r27	; 0x24
				xReturn = pdTRUE;
    623c:	81 e0       	ldi	r24, 0x01	; 1
    623e:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    6240:	e0 91 66 06 	lds	r30, 0x0666
    6244:	f0 91 67 06 	lds	r31, 0x0667
    6248:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    624a:	0f 90       	pop	r0
    624c:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    624e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    6250:	2d 96       	adiw	r28, 0x0d	; 13
    6252:	0f b6       	in	r0, 0x3f	; 63
    6254:	f8 94       	cli
    6256:	de bf       	out	0x3e, r29	; 62
    6258:	0f be       	out	0x3f, r0	; 63
    625a:	cd bf       	out	0x3d, r28	; 61
    625c:	cf 91       	pop	r28
    625e:	df 91       	pop	r29
    6260:	1f 91       	pop	r17
    6262:	0f 91       	pop	r16
    6264:	ff 90       	pop	r15
    6266:	ef 90       	pop	r14
    6268:	08 95       	ret

0000626a <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    626a:	0f 93       	push	r16
    626c:	1f 93       	push	r17
    626e:	df 93       	push	r29
    6270:	cf 93       	push	r28
    6272:	cd b7       	in	r28, 0x3d	; 61
    6274:	de b7       	in	r29, 0x3e	; 62
    6276:	2f 97       	sbiw	r28, 0x0f	; 15
    6278:	0f b6       	in	r0, 0x3f	; 63
    627a:	f8 94       	cli
    627c:	de bf       	out	0x3e, r29	; 62
    627e:	0f be       	out	0x3f, r0	; 63
    6280:	cd bf       	out	0x3d, r28	; 61
    6282:	9e 83       	std	Y+6, r25	; 0x06
    6284:	8d 83       	std	Y+5, r24	; 0x05
    6286:	4f 83       	std	Y+7, r20	; 0x07
    6288:	58 87       	std	Y+8, r21	; 0x08
    628a:	69 87       	std	Y+9, r22	; 0x09
    628c:	7a 87       	std	Y+10, r23	; 0x0a
    628e:	2b 87       	std	Y+11, r18	; 0x0b
    6290:	1d 87       	std	Y+13, r17	; 0x0d
    6292:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    6294:	81 e0       	ldi	r24, 0x01	; 1
    6296:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
    6298:	8d 81       	ldd	r24, Y+5	; 0x05
    629a:	9e 81       	ldd	r25, Y+6	; 0x06
    629c:	9c 83       	std	Y+4, r25	; 0x04
    629e:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    62a0:	0f b6       	in	r0, 0x3f	; 63
    62a2:	f8 94       	cli
    62a4:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    62a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    62a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    62aa:	00 97       	sbiw	r24, 0x00	; 0
    62ac:	61 f0       	breq	.+24     	; 0x62c6 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    62ae:	eb 81       	ldd	r30, Y+3	; 0x03
    62b0:	fc 81       	ldd	r31, Y+4	; 0x04
    62b2:	81 a1       	ldd	r24, Z+33	; 0x21
    62b4:	92 a1       	ldd	r25, Z+34	; 0x22
    62b6:	a3 a1       	ldd	r26, Z+35	; 0x23
    62b8:	b4 a1       	ldd	r27, Z+36	; 0x24
    62ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    62bc:	fd 85       	ldd	r31, Y+13	; 0x0d
    62be:	80 83       	st	Z, r24
    62c0:	91 83       	std	Z+1, r25	; 0x01
    62c2:	a2 83       	std	Z+2, r26	; 0x02
    62c4:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    62c6:	eb 81       	ldd	r30, Y+3	; 0x03
    62c8:	fc 81       	ldd	r31, Y+4	; 0x04
    62ca:	85 a1       	ldd	r24, Z+37	; 0x25
    62cc:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    62ce:	eb 81       	ldd	r30, Y+3	; 0x03
    62d0:	fc 81       	ldd	r31, Y+4	; 0x04
    62d2:	82 e0       	ldi	r24, 0x02	; 2
    62d4:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    62d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    62d8:	28 2f       	mov	r18, r24
    62da:	30 e0       	ldi	r19, 0x00	; 0
    62dc:	3f 87       	std	Y+15, r19	; 0x0f
    62de:	2e 87       	std	Y+14, r18	; 0x0e
    62e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    62e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    62e4:	82 30       	cpi	r24, 0x02	; 2
    62e6:	91 05       	cpc	r25, r1
    62e8:	59 f1       	breq	.+86     	; 0x6340 <xTaskGenericNotify+0xd6>
    62ea:	2e 85       	ldd	r18, Y+14	; 0x0e
    62ec:	3f 85       	ldd	r19, Y+15	; 0x0f
    62ee:	23 30       	cpi	r18, 0x03	; 3
    62f0:	31 05       	cpc	r19, r1
    62f2:	34 f4       	brge	.+12     	; 0x6300 <xTaskGenericNotify+0x96>
    62f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    62f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    62f8:	81 30       	cpi	r24, 0x01	; 1
    62fa:	91 05       	cpc	r25, r1
    62fc:	61 f0       	breq	.+24     	; 0x6316 <xTaskGenericNotify+0xac>
    62fe:	4a c0       	rjmp	.+148    	; 0x6394 <xTaskGenericNotify+0x12a>
    6300:	2e 85       	ldd	r18, Y+14	; 0x0e
    6302:	3f 85       	ldd	r19, Y+15	; 0x0f
    6304:	23 30       	cpi	r18, 0x03	; 3
    6306:	31 05       	cpc	r19, r1
    6308:	59 f1       	breq	.+86     	; 0x6360 <xTaskGenericNotify+0xf6>
    630a:	8e 85       	ldd	r24, Y+14	; 0x0e
    630c:	9f 85       	ldd	r25, Y+15	; 0x0f
    630e:	84 30       	cpi	r24, 0x04	; 4
    6310:	91 05       	cpc	r25, r1
    6312:	89 f1       	breq	.+98     	; 0x6376 <xTaskGenericNotify+0x10c>
    6314:	3f c0       	rjmp	.+126    	; 0x6394 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    6316:	eb 81       	ldd	r30, Y+3	; 0x03
    6318:	fc 81       	ldd	r31, Y+4	; 0x04
    631a:	21 a1       	ldd	r18, Z+33	; 0x21
    631c:	32 a1       	ldd	r19, Z+34	; 0x22
    631e:	43 a1       	ldd	r20, Z+35	; 0x23
    6320:	54 a1       	ldd	r21, Z+36	; 0x24
    6322:	8f 81       	ldd	r24, Y+7	; 0x07
    6324:	98 85       	ldd	r25, Y+8	; 0x08
    6326:	a9 85       	ldd	r26, Y+9	; 0x09
    6328:	ba 85       	ldd	r27, Y+10	; 0x0a
    632a:	82 2b       	or	r24, r18
    632c:	93 2b       	or	r25, r19
    632e:	a4 2b       	or	r26, r20
    6330:	b5 2b       	or	r27, r21
    6332:	eb 81       	ldd	r30, Y+3	; 0x03
    6334:	fc 81       	ldd	r31, Y+4	; 0x04
    6336:	81 a3       	std	Z+33, r24	; 0x21
    6338:	92 a3       	std	Z+34, r25	; 0x22
    633a:	a3 a3       	std	Z+35, r26	; 0x23
    633c:	b4 a3       	std	Z+36, r27	; 0x24
    633e:	2a c0       	rjmp	.+84     	; 0x6394 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    6340:	eb 81       	ldd	r30, Y+3	; 0x03
    6342:	fc 81       	ldd	r31, Y+4	; 0x04
    6344:	81 a1       	ldd	r24, Z+33	; 0x21
    6346:	92 a1       	ldd	r25, Z+34	; 0x22
    6348:	a3 a1       	ldd	r26, Z+35	; 0x23
    634a:	b4 a1       	ldd	r27, Z+36	; 0x24
    634c:	01 96       	adiw	r24, 0x01	; 1
    634e:	a1 1d       	adc	r26, r1
    6350:	b1 1d       	adc	r27, r1
    6352:	eb 81       	ldd	r30, Y+3	; 0x03
    6354:	fc 81       	ldd	r31, Y+4	; 0x04
    6356:	81 a3       	std	Z+33, r24	; 0x21
    6358:	92 a3       	std	Z+34, r25	; 0x22
    635a:	a3 a3       	std	Z+35, r26	; 0x23
    635c:	b4 a3       	std	Z+36, r27	; 0x24
    635e:	1a c0       	rjmp	.+52     	; 0x6394 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    6360:	eb 81       	ldd	r30, Y+3	; 0x03
    6362:	fc 81       	ldd	r31, Y+4	; 0x04
    6364:	8f 81       	ldd	r24, Y+7	; 0x07
    6366:	98 85       	ldd	r25, Y+8	; 0x08
    6368:	a9 85       	ldd	r26, Y+9	; 0x09
    636a:	ba 85       	ldd	r27, Y+10	; 0x0a
    636c:	81 a3       	std	Z+33, r24	; 0x21
    636e:	92 a3       	std	Z+34, r25	; 0x22
    6370:	a3 a3       	std	Z+35, r26	; 0x23
    6372:	b4 a3       	std	Z+36, r27	; 0x24
    6374:	0f c0       	rjmp	.+30     	; 0x6394 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    6376:	89 81       	ldd	r24, Y+1	; 0x01
    6378:	82 30       	cpi	r24, 0x02	; 2
    637a:	59 f0       	breq	.+22     	; 0x6392 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    637c:	eb 81       	ldd	r30, Y+3	; 0x03
    637e:	fc 81       	ldd	r31, Y+4	; 0x04
    6380:	8f 81       	ldd	r24, Y+7	; 0x07
    6382:	98 85       	ldd	r25, Y+8	; 0x08
    6384:	a9 85       	ldd	r26, Y+9	; 0x09
    6386:	ba 85       	ldd	r27, Y+10	; 0x0a
    6388:	81 a3       	std	Z+33, r24	; 0x21
    638a:	92 a3       	std	Z+34, r25	; 0x22
    638c:	a3 a3       	std	Z+35, r26	; 0x23
    638e:	b4 a3       	std	Z+36, r27	; 0x24
    6390:	01 c0       	rjmp	.+2      	; 0x6394 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    6392:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    6394:	89 81       	ldd	r24, Y+1	; 0x01
    6396:	81 30       	cpi	r24, 0x01	; 1
    6398:	b9 f5       	brne	.+110    	; 0x6408 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    639a:	8b 81       	ldd	r24, Y+3	; 0x03
    639c:	9c 81       	ldd	r25, Y+4	; 0x04
    639e:	02 96       	adiw	r24, 0x02	; 2
    63a0:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    63a4:	eb 81       	ldd	r30, Y+3	; 0x03
    63a6:	fc 81       	ldd	r31, Y+4	; 0x04
    63a8:	96 89       	ldd	r25, Z+22	; 0x16
    63aa:	80 91 6c 06 	lds	r24, 0x066C
    63ae:	89 17       	cp	r24, r25
    63b0:	28 f4       	brcc	.+10     	; 0x63bc <xTaskGenericNotify+0x152>
    63b2:	eb 81       	ldd	r30, Y+3	; 0x03
    63b4:	fc 81       	ldd	r31, Y+4	; 0x04
    63b6:	86 89       	ldd	r24, Z+22	; 0x16
    63b8:	80 93 6c 06 	sts	0x066C, r24
    63bc:	eb 81       	ldd	r30, Y+3	; 0x03
    63be:	fc 81       	ldd	r31, Y+4	; 0x04
    63c0:	86 89       	ldd	r24, Z+22	; 0x16
    63c2:	28 2f       	mov	r18, r24
    63c4:	30 e0       	ldi	r19, 0x00	; 0
    63c6:	c9 01       	movw	r24, r18
    63c8:	88 0f       	add	r24, r24
    63ca:	99 1f       	adc	r25, r25
    63cc:	88 0f       	add	r24, r24
    63ce:	99 1f       	adc	r25, r25
    63d0:	88 0f       	add	r24, r24
    63d2:	99 1f       	adc	r25, r25
    63d4:	82 0f       	add	r24, r18
    63d6:	93 1f       	adc	r25, r19
    63d8:	ac 01       	movw	r20, r24
    63da:	49 58       	subi	r20, 0x89	; 137
    63dc:	59 4f       	sbci	r21, 0xF9	; 249
    63de:	8b 81       	ldd	r24, Y+3	; 0x03
    63e0:	9c 81       	ldd	r25, Y+4	; 0x04
    63e2:	9c 01       	movw	r18, r24
    63e4:	2e 5f       	subi	r18, 0xFE	; 254
    63e6:	3f 4f       	sbci	r19, 0xFF	; 255
    63e8:	ca 01       	movw	r24, r20
    63ea:	b9 01       	movw	r22, r18
    63ec:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    63f0:	eb 81       	ldd	r30, Y+3	; 0x03
    63f2:	fc 81       	ldd	r31, Y+4	; 0x04
    63f4:	96 89       	ldd	r25, Z+22	; 0x16
    63f6:	e0 91 66 06 	lds	r30, 0x0666
    63fa:	f0 91 67 06 	lds	r31, 0x0667
    63fe:	86 89       	ldd	r24, Z+22	; 0x16
    6400:	89 17       	cp	r24, r25
    6402:	10 f4       	brcc	.+4      	; 0x6408 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    6404:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    6408:	0f 90       	pop	r0
    640a:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    640c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    640e:	2f 96       	adiw	r28, 0x0f	; 15
    6410:	0f b6       	in	r0, 0x3f	; 63
    6412:	f8 94       	cli
    6414:	de bf       	out	0x3e, r29	; 62
    6416:	0f be       	out	0x3f, r0	; 63
    6418:	cd bf       	out	0x3d, r28	; 61
    641a:	cf 91       	pop	r28
    641c:	df 91       	pop	r29
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	08 95       	ret

00006424 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    6424:	ef 92       	push	r14
    6426:	ff 92       	push	r15
    6428:	0f 93       	push	r16
    642a:	1f 93       	push	r17
    642c:	df 93       	push	r29
    642e:	cf 93       	push	r28
    6430:	cd b7       	in	r28, 0x3d	; 61
    6432:	de b7       	in	r29, 0x3e	; 62
    6434:	62 97       	sbiw	r28, 0x12	; 18
    6436:	0f b6       	in	r0, 0x3f	; 63
    6438:	f8 94       	cli
    643a:	de bf       	out	0x3e, r29	; 62
    643c:	0f be       	out	0x3f, r0	; 63
    643e:	cd bf       	out	0x3d, r28	; 61
    6440:	9f 83       	std	Y+7, r25	; 0x07
    6442:	8e 83       	std	Y+6, r24	; 0x06
    6444:	48 87       	std	Y+8, r20	; 0x08
    6446:	59 87       	std	Y+9, r21	; 0x09
    6448:	6a 87       	std	Y+10, r22	; 0x0a
    644a:	7b 87       	std	Y+11, r23	; 0x0b
    644c:	2c 87       	std	Y+12, r18	; 0x0c
    644e:	1e 87       	std	Y+14, r17	; 0x0e
    6450:	0d 87       	std	Y+13, r16	; 0x0d
    6452:	f8 8a       	std	Y+16, r15	; 0x10
    6454:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    6456:	81 e0       	ldi	r24, 0x01	; 1
    6458:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    645a:	8e 81       	ldd	r24, Y+6	; 0x06
    645c:	9f 81       	ldd	r25, Y+7	; 0x07
    645e:	9d 83       	std	Y+5, r25	; 0x05
    6460:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6462:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    6464:	8d 85       	ldd	r24, Y+13	; 0x0d
    6466:	9e 85       	ldd	r25, Y+14	; 0x0e
    6468:	00 97       	sbiw	r24, 0x00	; 0
    646a:	61 f0       	breq	.+24     	; 0x6484 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    646c:	ec 81       	ldd	r30, Y+4	; 0x04
    646e:	fd 81       	ldd	r31, Y+5	; 0x05
    6470:	81 a1       	ldd	r24, Z+33	; 0x21
    6472:	92 a1       	ldd	r25, Z+34	; 0x22
    6474:	a3 a1       	ldd	r26, Z+35	; 0x23
    6476:	b4 a1       	ldd	r27, Z+36	; 0x24
    6478:	ed 85       	ldd	r30, Y+13	; 0x0d
    647a:	fe 85       	ldd	r31, Y+14	; 0x0e
    647c:	80 83       	st	Z, r24
    647e:	91 83       	std	Z+1, r25	; 0x01
    6480:	a2 83       	std	Z+2, r26	; 0x02
    6482:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    6484:	ec 81       	ldd	r30, Y+4	; 0x04
    6486:	fd 81       	ldd	r31, Y+5	; 0x05
    6488:	85 a1       	ldd	r24, Z+37	; 0x25
    648a:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    648c:	ec 81       	ldd	r30, Y+4	; 0x04
    648e:	fd 81       	ldd	r31, Y+5	; 0x05
    6490:	82 e0       	ldi	r24, 0x02	; 2
    6492:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    6494:	8c 85       	ldd	r24, Y+12	; 0x0c
    6496:	28 2f       	mov	r18, r24
    6498:	30 e0       	ldi	r19, 0x00	; 0
    649a:	3a 8b       	std	Y+18, r19	; 0x12
    649c:	29 8b       	std	Y+17, r18	; 0x11
    649e:	89 89       	ldd	r24, Y+17	; 0x11
    64a0:	9a 89       	ldd	r25, Y+18	; 0x12
    64a2:	82 30       	cpi	r24, 0x02	; 2
    64a4:	91 05       	cpc	r25, r1
    64a6:	59 f1       	breq	.+86     	; 0x64fe <xTaskGenericNotifyFromISR+0xda>
    64a8:	29 89       	ldd	r18, Y+17	; 0x11
    64aa:	3a 89       	ldd	r19, Y+18	; 0x12
    64ac:	23 30       	cpi	r18, 0x03	; 3
    64ae:	31 05       	cpc	r19, r1
    64b0:	34 f4       	brge	.+12     	; 0x64be <xTaskGenericNotifyFromISR+0x9a>
    64b2:	89 89       	ldd	r24, Y+17	; 0x11
    64b4:	9a 89       	ldd	r25, Y+18	; 0x12
    64b6:	81 30       	cpi	r24, 0x01	; 1
    64b8:	91 05       	cpc	r25, r1
    64ba:	61 f0       	breq	.+24     	; 0x64d4 <xTaskGenericNotifyFromISR+0xb0>
    64bc:	4a c0       	rjmp	.+148    	; 0x6552 <xTaskGenericNotifyFromISR+0x12e>
    64be:	29 89       	ldd	r18, Y+17	; 0x11
    64c0:	3a 89       	ldd	r19, Y+18	; 0x12
    64c2:	23 30       	cpi	r18, 0x03	; 3
    64c4:	31 05       	cpc	r19, r1
    64c6:	59 f1       	breq	.+86     	; 0x651e <xTaskGenericNotifyFromISR+0xfa>
    64c8:	89 89       	ldd	r24, Y+17	; 0x11
    64ca:	9a 89       	ldd	r25, Y+18	; 0x12
    64cc:	84 30       	cpi	r24, 0x04	; 4
    64ce:	91 05       	cpc	r25, r1
    64d0:	89 f1       	breq	.+98     	; 0x6534 <xTaskGenericNotifyFromISR+0x110>
    64d2:	3f c0       	rjmp	.+126    	; 0x6552 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    64d4:	ec 81       	ldd	r30, Y+4	; 0x04
    64d6:	fd 81       	ldd	r31, Y+5	; 0x05
    64d8:	21 a1       	ldd	r18, Z+33	; 0x21
    64da:	32 a1       	ldd	r19, Z+34	; 0x22
    64dc:	43 a1       	ldd	r20, Z+35	; 0x23
    64de:	54 a1       	ldd	r21, Z+36	; 0x24
    64e0:	88 85       	ldd	r24, Y+8	; 0x08
    64e2:	99 85       	ldd	r25, Y+9	; 0x09
    64e4:	aa 85       	ldd	r26, Y+10	; 0x0a
    64e6:	bb 85       	ldd	r27, Y+11	; 0x0b
    64e8:	82 2b       	or	r24, r18
    64ea:	93 2b       	or	r25, r19
    64ec:	a4 2b       	or	r26, r20
    64ee:	b5 2b       	or	r27, r21
    64f0:	ec 81       	ldd	r30, Y+4	; 0x04
    64f2:	fd 81       	ldd	r31, Y+5	; 0x05
    64f4:	81 a3       	std	Z+33, r24	; 0x21
    64f6:	92 a3       	std	Z+34, r25	; 0x22
    64f8:	a3 a3       	std	Z+35, r26	; 0x23
    64fa:	b4 a3       	std	Z+36, r27	; 0x24
    64fc:	2a c0       	rjmp	.+84     	; 0x6552 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    64fe:	ec 81       	ldd	r30, Y+4	; 0x04
    6500:	fd 81       	ldd	r31, Y+5	; 0x05
    6502:	81 a1       	ldd	r24, Z+33	; 0x21
    6504:	92 a1       	ldd	r25, Z+34	; 0x22
    6506:	a3 a1       	ldd	r26, Z+35	; 0x23
    6508:	b4 a1       	ldd	r27, Z+36	; 0x24
    650a:	01 96       	adiw	r24, 0x01	; 1
    650c:	a1 1d       	adc	r26, r1
    650e:	b1 1d       	adc	r27, r1
    6510:	ec 81       	ldd	r30, Y+4	; 0x04
    6512:	fd 81       	ldd	r31, Y+5	; 0x05
    6514:	81 a3       	std	Z+33, r24	; 0x21
    6516:	92 a3       	std	Z+34, r25	; 0x22
    6518:	a3 a3       	std	Z+35, r26	; 0x23
    651a:	b4 a3       	std	Z+36, r27	; 0x24
    651c:	1a c0       	rjmp	.+52     	; 0x6552 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    651e:	ec 81       	ldd	r30, Y+4	; 0x04
    6520:	fd 81       	ldd	r31, Y+5	; 0x05
    6522:	88 85       	ldd	r24, Y+8	; 0x08
    6524:	99 85       	ldd	r25, Y+9	; 0x09
    6526:	aa 85       	ldd	r26, Y+10	; 0x0a
    6528:	bb 85       	ldd	r27, Y+11	; 0x0b
    652a:	81 a3       	std	Z+33, r24	; 0x21
    652c:	92 a3       	std	Z+34, r25	; 0x22
    652e:	a3 a3       	std	Z+35, r26	; 0x23
    6530:	b4 a3       	std	Z+36, r27	; 0x24
    6532:	0f c0       	rjmp	.+30     	; 0x6552 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    6534:	8b 81       	ldd	r24, Y+3	; 0x03
    6536:	82 30       	cpi	r24, 0x02	; 2
    6538:	59 f0       	breq	.+22     	; 0x6550 <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    653a:	ec 81       	ldd	r30, Y+4	; 0x04
    653c:	fd 81       	ldd	r31, Y+5	; 0x05
    653e:	88 85       	ldd	r24, Y+8	; 0x08
    6540:	99 85       	ldd	r25, Y+9	; 0x09
    6542:	aa 85       	ldd	r26, Y+10	; 0x0a
    6544:	bb 85       	ldd	r27, Y+11	; 0x0b
    6546:	81 a3       	std	Z+33, r24	; 0x21
    6548:	92 a3       	std	Z+34, r25	; 0x22
    654a:	a3 a3       	std	Z+35, r26	; 0x23
    654c:	b4 a3       	std	Z+36, r27	; 0x24
    654e:	01 c0       	rjmp	.+2      	; 0x6552 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    6550:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    6552:	8b 81       	ldd	r24, Y+3	; 0x03
    6554:	81 30       	cpi	r24, 0x01	; 1
    6556:	09 f0       	breq	.+2      	; 0x655a <xTaskGenericNotifyFromISR+0x136>
    6558:	4f c0       	rjmp	.+158    	; 0x65f8 <xTaskGenericNotifyFromISR+0x1d4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    655a:	80 91 76 06 	lds	r24, 0x0676
    655e:	88 23       	and	r24, r24
    6560:	61 f5       	brne	.+88     	; 0x65ba <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6562:	8c 81       	ldd	r24, Y+4	; 0x04
    6564:	9d 81       	ldd	r25, Y+5	; 0x05
    6566:	02 96       	adiw	r24, 0x02	; 2
    6568:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    656c:	ec 81       	ldd	r30, Y+4	; 0x04
    656e:	fd 81       	ldd	r31, Y+5	; 0x05
    6570:	96 89       	ldd	r25, Z+22	; 0x16
    6572:	80 91 6c 06 	lds	r24, 0x066C
    6576:	89 17       	cp	r24, r25
    6578:	28 f4       	brcc	.+10     	; 0x6584 <xTaskGenericNotifyFromISR+0x160>
    657a:	ec 81       	ldd	r30, Y+4	; 0x04
    657c:	fd 81       	ldd	r31, Y+5	; 0x05
    657e:	86 89       	ldd	r24, Z+22	; 0x16
    6580:	80 93 6c 06 	sts	0x066C, r24
    6584:	ec 81       	ldd	r30, Y+4	; 0x04
    6586:	fd 81       	ldd	r31, Y+5	; 0x05
    6588:	86 89       	ldd	r24, Z+22	; 0x16
    658a:	28 2f       	mov	r18, r24
    658c:	30 e0       	ldi	r19, 0x00	; 0
    658e:	c9 01       	movw	r24, r18
    6590:	88 0f       	add	r24, r24
    6592:	99 1f       	adc	r25, r25
    6594:	88 0f       	add	r24, r24
    6596:	99 1f       	adc	r25, r25
    6598:	88 0f       	add	r24, r24
    659a:	99 1f       	adc	r25, r25
    659c:	82 0f       	add	r24, r18
    659e:	93 1f       	adc	r25, r19
    65a0:	ac 01       	movw	r20, r24
    65a2:	49 58       	subi	r20, 0x89	; 137
    65a4:	59 4f       	sbci	r21, 0xF9	; 249
    65a6:	8c 81       	ldd	r24, Y+4	; 0x04
    65a8:	9d 81       	ldd	r25, Y+5	; 0x05
    65aa:	9c 01       	movw	r18, r24
    65ac:	2e 5f       	subi	r18, 0xFE	; 254
    65ae:	3f 4f       	sbci	r19, 0xFF	; 255
    65b0:	ca 01       	movw	r24, r20
    65b2:	b9 01       	movw	r22, r18
    65b4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    65b8:	0a c0       	rjmp	.+20     	; 0x65ce <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    65ba:	8c 81       	ldd	r24, Y+4	; 0x04
    65bc:	9d 81       	ldd	r25, Y+5	; 0x05
    65be:	9c 01       	movw	r18, r24
    65c0:	24 5f       	subi	r18, 0xF4	; 244
    65c2:	3f 4f       	sbci	r19, 0xFF	; 255
    65c4:	81 eb       	ldi	r24, 0xB1	; 177
    65c6:	96 e0       	ldi	r25, 0x06	; 6
    65c8:	b9 01       	movw	r22, r18
    65ca:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    65ce:	ec 81       	ldd	r30, Y+4	; 0x04
    65d0:	fd 81       	ldd	r31, Y+5	; 0x05
    65d2:	96 89       	ldd	r25, Z+22	; 0x16
    65d4:	e0 91 66 06 	lds	r30, 0x0666
    65d8:	f0 91 67 06 	lds	r31, 0x0667
    65dc:	86 89       	ldd	r24, Z+22	; 0x16
    65de:	89 17       	cp	r24, r25
    65e0:	58 f4       	brcc	.+22     	; 0x65f8 <xTaskGenericNotifyFromISR+0x1d4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    65e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    65e4:	98 89       	ldd	r25, Y+16	; 0x10
    65e6:	00 97       	sbiw	r24, 0x00	; 0
    65e8:	21 f0       	breq	.+8      	; 0x65f2 <xTaskGenericNotifyFromISR+0x1ce>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    65ea:	ef 85       	ldd	r30, Y+15	; 0x0f
    65ec:	f8 89       	ldd	r31, Y+16	; 0x10
    65ee:	81 e0       	ldi	r24, 0x01	; 1
    65f0:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    65f2:	81 e0       	ldi	r24, 0x01	; 1
    65f4:	80 93 6f 06 	sts	0x066F, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    65f8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    65fa:	62 96       	adiw	r28, 0x12	; 18
    65fc:	0f b6       	in	r0, 0x3f	; 63
    65fe:	f8 94       	cli
    6600:	de bf       	out	0x3e, r29	; 62
    6602:	0f be       	out	0x3f, r0	; 63
    6604:	cd bf       	out	0x3d, r28	; 61
    6606:	cf 91       	pop	r28
    6608:	df 91       	pop	r29
    660a:	1f 91       	pop	r17
    660c:	0f 91       	pop	r16
    660e:	ff 90       	pop	r15
    6610:	ef 90       	pop	r14
    6612:	08 95       	ret

00006614 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    6614:	df 93       	push	r29
    6616:	cf 93       	push	r28
    6618:	cd b7       	in	r28, 0x3d	; 61
    661a:	de b7       	in	r29, 0x3e	; 62
    661c:	28 97       	sbiw	r28, 0x08	; 8
    661e:	0f b6       	in	r0, 0x3f	; 63
    6620:	f8 94       	cli
    6622:	de bf       	out	0x3e, r29	; 62
    6624:	0f be       	out	0x3f, r0	; 63
    6626:	cd bf       	out	0x3d, r28	; 61
    6628:	9e 83       	std	Y+6, r25	; 0x06
    662a:	8d 83       	std	Y+5, r24	; 0x05
    662c:	78 87       	std	Y+8, r23	; 0x08
    662e:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    6630:	8d 81       	ldd	r24, Y+5	; 0x05
    6632:	9e 81       	ldd	r25, Y+6	; 0x06
    6634:	9c 83       	std	Y+4, r25	; 0x04
    6636:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6638:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    663a:	eb 81       	ldd	r30, Y+3	; 0x03
    663c:	fc 81       	ldd	r31, Y+4	; 0x04
    663e:	85 a1       	ldd	r24, Z+37	; 0x25
    6640:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    6642:	eb 81       	ldd	r30, Y+3	; 0x03
    6644:	fc 81       	ldd	r31, Y+4	; 0x04
    6646:	82 e0       	ldi	r24, 0x02	; 2
    6648:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    664a:	eb 81       	ldd	r30, Y+3	; 0x03
    664c:	fc 81       	ldd	r31, Y+4	; 0x04
    664e:	81 a1       	ldd	r24, Z+33	; 0x21
    6650:	92 a1       	ldd	r25, Z+34	; 0x22
    6652:	a3 a1       	ldd	r26, Z+35	; 0x23
    6654:	b4 a1       	ldd	r27, Z+36	; 0x24
    6656:	01 96       	adiw	r24, 0x01	; 1
    6658:	a1 1d       	adc	r26, r1
    665a:	b1 1d       	adc	r27, r1
    665c:	eb 81       	ldd	r30, Y+3	; 0x03
    665e:	fc 81       	ldd	r31, Y+4	; 0x04
    6660:	81 a3       	std	Z+33, r24	; 0x21
    6662:	92 a3       	std	Z+34, r25	; 0x22
    6664:	a3 a3       	std	Z+35, r26	; 0x23
    6666:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    6668:	8a 81       	ldd	r24, Y+2	; 0x02
    666a:	81 30       	cpi	r24, 0x01	; 1
    666c:	09 f0       	breq	.+2      	; 0x6670 <vTaskNotifyGiveFromISR+0x5c>
    666e:	4f c0       	rjmp	.+158    	; 0x670e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6670:	80 91 76 06 	lds	r24, 0x0676
    6674:	88 23       	and	r24, r24
    6676:	61 f5       	brne	.+88     	; 0x66d0 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6678:	8b 81       	ldd	r24, Y+3	; 0x03
    667a:	9c 81       	ldd	r25, Y+4	; 0x04
    667c:	02 96       	adiw	r24, 0x02	; 2
    667e:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    6682:	eb 81       	ldd	r30, Y+3	; 0x03
    6684:	fc 81       	ldd	r31, Y+4	; 0x04
    6686:	96 89       	ldd	r25, Z+22	; 0x16
    6688:	80 91 6c 06 	lds	r24, 0x066C
    668c:	89 17       	cp	r24, r25
    668e:	28 f4       	brcc	.+10     	; 0x669a <vTaskNotifyGiveFromISR+0x86>
    6690:	eb 81       	ldd	r30, Y+3	; 0x03
    6692:	fc 81       	ldd	r31, Y+4	; 0x04
    6694:	86 89       	ldd	r24, Z+22	; 0x16
    6696:	80 93 6c 06 	sts	0x066C, r24
    669a:	eb 81       	ldd	r30, Y+3	; 0x03
    669c:	fc 81       	ldd	r31, Y+4	; 0x04
    669e:	86 89       	ldd	r24, Z+22	; 0x16
    66a0:	28 2f       	mov	r18, r24
    66a2:	30 e0       	ldi	r19, 0x00	; 0
    66a4:	c9 01       	movw	r24, r18
    66a6:	88 0f       	add	r24, r24
    66a8:	99 1f       	adc	r25, r25
    66aa:	88 0f       	add	r24, r24
    66ac:	99 1f       	adc	r25, r25
    66ae:	88 0f       	add	r24, r24
    66b0:	99 1f       	adc	r25, r25
    66b2:	82 0f       	add	r24, r18
    66b4:	93 1f       	adc	r25, r19
    66b6:	ac 01       	movw	r20, r24
    66b8:	49 58       	subi	r20, 0x89	; 137
    66ba:	59 4f       	sbci	r21, 0xF9	; 249
    66bc:	8b 81       	ldd	r24, Y+3	; 0x03
    66be:	9c 81       	ldd	r25, Y+4	; 0x04
    66c0:	9c 01       	movw	r18, r24
    66c2:	2e 5f       	subi	r18, 0xFE	; 254
    66c4:	3f 4f       	sbci	r19, 0xFF	; 255
    66c6:	ca 01       	movw	r24, r20
    66c8:	b9 01       	movw	r22, r18
    66ca:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    66ce:	0a c0       	rjmp	.+20     	; 0x66e4 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    66d0:	8b 81       	ldd	r24, Y+3	; 0x03
    66d2:	9c 81       	ldd	r25, Y+4	; 0x04
    66d4:	9c 01       	movw	r18, r24
    66d6:	24 5f       	subi	r18, 0xF4	; 244
    66d8:	3f 4f       	sbci	r19, 0xFF	; 255
    66da:	81 eb       	ldi	r24, 0xB1	; 177
    66dc:	96 e0       	ldi	r25, 0x06	; 6
    66de:	b9 01       	movw	r22, r18
    66e0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    66e4:	eb 81       	ldd	r30, Y+3	; 0x03
    66e6:	fc 81       	ldd	r31, Y+4	; 0x04
    66e8:	96 89       	ldd	r25, Z+22	; 0x16
    66ea:	e0 91 66 06 	lds	r30, 0x0666
    66ee:	f0 91 67 06 	lds	r31, 0x0667
    66f2:	86 89       	ldd	r24, Z+22	; 0x16
    66f4:	89 17       	cp	r24, r25
    66f6:	58 f4       	brcc	.+22     	; 0x670e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    66f8:	8f 81       	ldd	r24, Y+7	; 0x07
    66fa:	98 85       	ldd	r25, Y+8	; 0x08
    66fc:	00 97       	sbiw	r24, 0x00	; 0
    66fe:	21 f0       	breq	.+8      	; 0x6708 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    6700:	ef 81       	ldd	r30, Y+7	; 0x07
    6702:	f8 85       	ldd	r31, Y+8	; 0x08
    6704:	81 e0       	ldi	r24, 0x01	; 1
    6706:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    6708:	81 e0       	ldi	r24, 0x01	; 1
    670a:	80 93 6f 06 	sts	0x066F, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    670e:	28 96       	adiw	r28, 0x08	; 8
    6710:	0f b6       	in	r0, 0x3f	; 63
    6712:	f8 94       	cli
    6714:	de bf       	out	0x3e, r29	; 62
    6716:	0f be       	out	0x3f, r0	; 63
    6718:	cd bf       	out	0x3d, r28	; 61
    671a:	cf 91       	pop	r28
    671c:	df 91       	pop	r29
    671e:	08 95       	ret

00006720 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    6720:	df 93       	push	r29
    6722:	cf 93       	push	r28
    6724:	cd b7       	in	r28, 0x3d	; 61
    6726:	de b7       	in	r29, 0x3e	; 62
    6728:	27 97       	sbiw	r28, 0x07	; 7
    672a:	0f b6       	in	r0, 0x3f	; 63
    672c:	f8 94       	cli
    672e:	de bf       	out	0x3e, r29	; 62
    6730:	0f be       	out	0x3f, r0	; 63
    6732:	cd bf       	out	0x3d, r28	; 61
    6734:	9d 83       	std	Y+5, r25	; 0x05
    6736:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    6738:	8c 81       	ldd	r24, Y+4	; 0x04
    673a:	9d 81       	ldd	r25, Y+5	; 0x05
    673c:	00 97       	sbiw	r24, 0x00	; 0
    673e:	39 f4       	brne	.+14     	; 0x674e <xTaskNotifyStateClear+0x2e>
    6740:	80 91 66 06 	lds	r24, 0x0666
    6744:	90 91 67 06 	lds	r25, 0x0667
    6748:	9f 83       	std	Y+7, r25	; 0x07
    674a:	8e 83       	std	Y+6, r24	; 0x06
    674c:	04 c0       	rjmp	.+8      	; 0x6756 <xTaskNotifyStateClear+0x36>
    674e:	8c 81       	ldd	r24, Y+4	; 0x04
    6750:	9d 81       	ldd	r25, Y+5	; 0x05
    6752:	9f 83       	std	Y+7, r25	; 0x07
    6754:	8e 83       	std	Y+6, r24	; 0x06
    6756:	8e 81       	ldd	r24, Y+6	; 0x06
    6758:	9f 81       	ldd	r25, Y+7	; 0x07
    675a:	9b 83       	std	Y+3, r25	; 0x03
    675c:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    675e:	0f b6       	in	r0, 0x3f	; 63
    6760:	f8 94       	cli
    6762:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    6764:	ea 81       	ldd	r30, Y+2	; 0x02
    6766:	fb 81       	ldd	r31, Y+3	; 0x03
    6768:	85 a1       	ldd	r24, Z+37	; 0x25
    676a:	82 30       	cpi	r24, 0x02	; 2
    676c:	31 f4       	brne	.+12     	; 0x677a <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    676e:	ea 81       	ldd	r30, Y+2	; 0x02
    6770:	fb 81       	ldd	r31, Y+3	; 0x03
    6772:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	89 83       	std	Y+1, r24	; 0x01
    6778:	01 c0       	rjmp	.+2      	; 0x677c <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    677a:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    677c:	0f 90       	pop	r0
    677e:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    6780:	89 81       	ldd	r24, Y+1	; 0x01
	}
    6782:	27 96       	adiw	r28, 0x07	; 7
    6784:	0f b6       	in	r0, 0x3f	; 63
    6786:	f8 94       	cli
    6788:	de bf       	out	0x3e, r29	; 62
    678a:	0f be       	out	0x3f, r0	; 63
    678c:	cd bf       	out	0x3d, r28	; 61
    678e:	cf 91       	pop	r28
    6790:	df 91       	pop	r29
    6792:	08 95       	ret

00006794 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    6794:	df 93       	push	r29
    6796:	cf 93       	push	r28
    6798:	cd b7       	in	r28, 0x3d	; 61
    679a:	de b7       	in	r29, 0x3e	; 62
    679c:	27 97       	sbiw	r28, 0x07	; 7
    679e:	0f b6       	in	r0, 0x3f	; 63
    67a0:	f8 94       	cli
    67a2:	de bf       	out	0x3e, r29	; 62
    67a4:	0f be       	out	0x3f, r0	; 63
    67a6:	cd bf       	out	0x3d, r28	; 61
    67a8:	9e 83       	std	Y+6, r25	; 0x06
    67aa:	8d 83       	std	Y+5, r24	; 0x05
    67ac:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    67ae:	80 91 6a 06 	lds	r24, 0x066A
    67b2:	90 91 6b 06 	lds	r25, 0x066B
    67b6:	9a 83       	std	Y+2, r25	; 0x02
    67b8:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    67ba:	80 91 66 06 	lds	r24, 0x0666
    67be:	90 91 67 06 	lds	r25, 0x0667
    67c2:	02 96       	adiw	r24, 0x02	; 2
    67c4:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    67c8:	8d 81       	ldd	r24, Y+5	; 0x05
    67ca:	9e 81       	ldd	r25, Y+6	; 0x06
    67cc:	2f ef       	ldi	r18, 0xFF	; 255
    67ce:	8f 3f       	cpi	r24, 0xFF	; 255
    67d0:	92 07       	cpc	r25, r18
    67d2:	81 f4       	brne	.+32     	; 0x67f4 <prvAddCurrentTaskToDelayedList+0x60>
    67d4:	8f 81       	ldd	r24, Y+7	; 0x07
    67d6:	88 23       	and	r24, r24
    67d8:	69 f0       	breq	.+26     	; 0x67f4 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    67da:	80 91 66 06 	lds	r24, 0x0666
    67de:	90 91 67 06 	lds	r25, 0x0667
    67e2:	9c 01       	movw	r18, r24
    67e4:	2e 5f       	subi	r18, 0xFE	; 254
    67e6:	3f 4f       	sbci	r19, 0xFF	; 255
    67e8:	83 ec       	ldi	r24, 0xC3	; 195
    67ea:	96 e0       	ldi	r25, 0x06	; 6
    67ec:	b9 01       	movw	r22, r18
    67ee:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    67f2:	43 c0       	rjmp	.+134    	; 0x687a <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    67f4:	29 81       	ldd	r18, Y+1	; 0x01
    67f6:	3a 81       	ldd	r19, Y+2	; 0x02
    67f8:	8d 81       	ldd	r24, Y+5	; 0x05
    67fa:	9e 81       	ldd	r25, Y+6	; 0x06
    67fc:	82 0f       	add	r24, r18
    67fe:	93 1f       	adc	r25, r19
    6800:	9c 83       	std	Y+4, r25	; 0x04
    6802:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    6804:	e0 91 66 06 	lds	r30, 0x0666
    6808:	f0 91 67 06 	lds	r31, 0x0667
    680c:	8b 81       	ldd	r24, Y+3	; 0x03
    680e:	9c 81       	ldd	r25, Y+4	; 0x04
    6810:	93 83       	std	Z+3, r25	; 0x03
    6812:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    6814:	2b 81       	ldd	r18, Y+3	; 0x03
    6816:	3c 81       	ldd	r19, Y+4	; 0x04
    6818:	89 81       	ldd	r24, Y+1	; 0x01
    681a:	9a 81       	ldd	r25, Y+2	; 0x02
    681c:	28 17       	cp	r18, r24
    681e:	39 07       	cpc	r19, r25
    6820:	70 f4       	brcc	.+28     	; 0x683e <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6822:	80 91 af 06 	lds	r24, 0x06AF
    6826:	90 91 b0 06 	lds	r25, 0x06B0
    682a:	20 91 66 06 	lds	r18, 0x0666
    682e:	30 91 67 06 	lds	r19, 0x0667
    6832:	2e 5f       	subi	r18, 0xFE	; 254
    6834:	3f 4f       	sbci	r19, 0xFF	; 255
    6836:	b9 01       	movw	r22, r18
    6838:	0e 94 26 14 	call	0x284c	; 0x284c <vListInsert>
    683c:	1e c0       	rjmp	.+60     	; 0x687a <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    683e:	40 91 ad 06 	lds	r20, 0x06AD
    6842:	50 91 ae 06 	lds	r21, 0x06AE
    6846:	80 91 66 06 	lds	r24, 0x0666
    684a:	90 91 67 06 	lds	r25, 0x0667
    684e:	9c 01       	movw	r18, r24
    6850:	2e 5f       	subi	r18, 0xFE	; 254
    6852:	3f 4f       	sbci	r19, 0xFF	; 255
    6854:	ca 01       	movw	r24, r20
    6856:	b9 01       	movw	r22, r18
    6858:	0e 94 26 14 	call	0x284c	; 0x284c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    685c:	20 91 72 06 	lds	r18, 0x0672
    6860:	30 91 73 06 	lds	r19, 0x0673
    6864:	8b 81       	ldd	r24, Y+3	; 0x03
    6866:	9c 81       	ldd	r25, Y+4	; 0x04
    6868:	82 17       	cp	r24, r18
    686a:	93 07       	cpc	r25, r19
    686c:	30 f4       	brcc	.+12     	; 0x687a <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    686e:	8b 81       	ldd	r24, Y+3	; 0x03
    6870:	9c 81       	ldd	r25, Y+4	; 0x04
    6872:	90 93 73 06 	sts	0x0673, r25
    6876:	80 93 72 06 	sts	0x0672, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    687a:	27 96       	adiw	r28, 0x07	; 7
    687c:	0f b6       	in	r0, 0x3f	; 63
    687e:	f8 94       	cli
    6880:	de bf       	out	0x3e, r29	; 62
    6882:	0f be       	out	0x3f, r0	; 63
    6884:	cd bf       	out	0x3d, r28	; 61
    6886:	cf 91       	pop	r28
    6888:	df 91       	pop	r29
    688a:	08 95       	ret

0000688c <__prologue_saves__>:
    688c:	2f 92       	push	r2
    688e:	3f 92       	push	r3
    6890:	4f 92       	push	r4
    6892:	5f 92       	push	r5
    6894:	6f 92       	push	r6
    6896:	7f 92       	push	r7
    6898:	8f 92       	push	r8
    689a:	9f 92       	push	r9
    689c:	af 92       	push	r10
    689e:	bf 92       	push	r11
    68a0:	cf 92       	push	r12
    68a2:	df 92       	push	r13
    68a4:	ef 92       	push	r14
    68a6:	ff 92       	push	r15
    68a8:	0f 93       	push	r16
    68aa:	1f 93       	push	r17
    68ac:	cf 93       	push	r28
    68ae:	df 93       	push	r29
    68b0:	cd b7       	in	r28, 0x3d	; 61
    68b2:	de b7       	in	r29, 0x3e	; 62
    68b4:	ca 1b       	sub	r28, r26
    68b6:	db 0b       	sbc	r29, r27
    68b8:	0f b6       	in	r0, 0x3f	; 63
    68ba:	f8 94       	cli
    68bc:	de bf       	out	0x3e, r29	; 62
    68be:	0f be       	out	0x3f, r0	; 63
    68c0:	cd bf       	out	0x3d, r28	; 61
    68c2:	09 94       	ijmp

000068c4 <__epilogue_restores__>:
    68c4:	2a 88       	ldd	r2, Y+18	; 0x12
    68c6:	39 88       	ldd	r3, Y+17	; 0x11
    68c8:	48 88       	ldd	r4, Y+16	; 0x10
    68ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    68cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    68ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    68d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    68d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    68d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    68d6:	b9 84       	ldd	r11, Y+9	; 0x09
    68d8:	c8 84       	ldd	r12, Y+8	; 0x08
    68da:	df 80       	ldd	r13, Y+7	; 0x07
    68dc:	ee 80       	ldd	r14, Y+6	; 0x06
    68de:	fd 80       	ldd	r15, Y+5	; 0x05
    68e0:	0c 81       	ldd	r16, Y+4	; 0x04
    68e2:	1b 81       	ldd	r17, Y+3	; 0x03
    68e4:	aa 81       	ldd	r26, Y+2	; 0x02
    68e6:	b9 81       	ldd	r27, Y+1	; 0x01
    68e8:	ce 0f       	add	r28, r30
    68ea:	d1 1d       	adc	r29, r1
    68ec:	0f b6       	in	r0, 0x3f	; 63
    68ee:	f8 94       	cli
    68f0:	de bf       	out	0x3e, r29	; 62
    68f2:	0f be       	out	0x3f, r0	; 63
    68f4:	cd bf       	out	0x3d, r28	; 61
    68f6:	ed 01       	movw	r28, r26
    68f8:	08 95       	ret

000068fa <memcpy>:
    68fa:	fb 01       	movw	r30, r22
    68fc:	dc 01       	movw	r26, r24
    68fe:	02 c0       	rjmp	.+4      	; 0x6904 <memcpy+0xa>
    6900:	01 90       	ld	r0, Z+
    6902:	0d 92       	st	X+, r0
    6904:	41 50       	subi	r20, 0x01	; 1
    6906:	50 40       	sbci	r21, 0x00	; 0
    6908:	d8 f7       	brcc	.-10     	; 0x6900 <memcpy+0x6>
    690a:	08 95       	ret

0000690c <memset>:
    690c:	dc 01       	movw	r26, r24
    690e:	01 c0       	rjmp	.+2      	; 0x6912 <memset+0x6>
    6910:	6d 93       	st	X+, r22
    6912:	41 50       	subi	r20, 0x01	; 1
    6914:	50 40       	sbci	r21, 0x00	; 0
    6916:	e0 f7       	brcc	.-8      	; 0x6910 <memset+0x4>
    6918:	08 95       	ret

0000691a <_exit>:
    691a:	f8 94       	cli

0000691c <__stop_program>:
    691c:	ff cf       	rjmp	.-2      	; 0x691c <__stop_program>
