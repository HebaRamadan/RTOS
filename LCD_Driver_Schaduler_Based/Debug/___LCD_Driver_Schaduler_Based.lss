
___LCD_Driver_Schaduler_Based.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000aa  00800060  00800060  00001724  2**0
                  ALLOC
  2 .stab         000018a8  00000000  00000000  00001724  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bbf  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__vector_10>
      2c:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 30       	cpi	r26, 0x0A	; 10
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 4d 0b 	call	0x169a	; 0x169a <main>
      74:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_vidSetPinDir>:
#include "../Lib/Bit_math.h"
#include "Dio_int.h"
#include "Dio_priv.h"

void Dio_vidSetPinDir(u8 Pin , u8 Dir)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
      84:	66 97       	sbiw	r28, 0x16	; 22
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	f8 94       	cli
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	0f be       	out	0x3f, r0	; 63
      8e:	cd bf       	out	0x3d, r28	; 61
      90:	8b 83       	std	Y+3, r24	; 0x03
      92:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
      94:	8b 81       	ldd	r24, Y+3	; 0x03
      96:	86 95       	lsr	r24
      98:	86 95       	lsr	r24
      9a:	86 95       	lsr	r24
      9c:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
      9e:	8b 81       	ldd	r24, Y+3	; 0x03
      a0:	87 70       	andi	r24, 0x07	; 7
      a2:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
      a4:	8a 81       	ldd	r24, Y+2	; 0x02
      a6:	28 2f       	mov	r18, r24
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	3e 8b       	std	Y+22, r19	; 0x16
      ac:	2d 8b       	std	Y+21, r18	; 0x15
      ae:	8d 89       	ldd	r24, Y+21	; 0x15
      b0:	9e 89       	ldd	r25, Y+22	; 0x16
      b2:	81 30       	cpi	r24, 0x01	; 1
      b4:	91 05       	cpc	r25, r1
      b6:	09 f4       	brne	.+2      	; 0xba <Dio_vidSetPinDir+0x3e>
      b8:	e1 c0       	rjmp	.+450    	; 0x27c <Dio_vidSetPinDir+0x200>
      ba:	2d 89       	ldd	r18, Y+21	; 0x15
      bc:	3e 89       	ldd	r19, Y+22	; 0x16
      be:	22 30       	cpi	r18, 0x02	; 2
      c0:	31 05       	cpc	r19, r1
      c2:	2c f4       	brge	.+10     	; 0xce <Dio_vidSetPinDir+0x52>
      c4:	8d 89       	ldd	r24, Y+21	; 0x15
      c6:	9e 89       	ldd	r25, Y+22	; 0x16
      c8:	00 97       	sbiw	r24, 0x00	; 0
      ca:	71 f0       	breq	.+28     	; 0xe8 <Dio_vidSetPinDir+0x6c>
      cc:	34 c3       	rjmp	.+1640   	; 0x736 <Dio_vidSetPinDir+0x6ba>
      ce:	2d 89       	ldd	r18, Y+21	; 0x15
      d0:	3e 89       	ldd	r19, Y+22	; 0x16
      d2:	22 30       	cpi	r18, 0x02	; 2
      d4:	31 05       	cpc	r19, r1
      d6:	09 f4       	brne	.+2      	; 0xda <Dio_vidSetPinDir+0x5e>
      d8:	9b c1       	rjmp	.+822    	; 0x410 <Dio_vidSetPinDir+0x394>
      da:	8d 89       	ldd	r24, Y+21	; 0x15
      dc:	9e 89       	ldd	r25, Y+22	; 0x16
      de:	83 30       	cpi	r24, 0x03	; 3
      e0:	91 05       	cpc	r25, r1
      e2:	09 f4       	brne	.+2      	; 0xe6 <Dio_vidSetPinDir+0x6a>
      e4:	5f c2       	rjmp	.+1214   	; 0x5a4 <Dio_vidSetPinDir+0x528>
      e6:	27 c3       	rjmp	.+1614   	; 0x736 <Dio_vidSetPinDir+0x6ba>
		case 0:
			if(Dir ==1)
      e8:	8c 81       	ldd	r24, Y+4	; 0x04
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	09 f0       	breq	.+2      	; 0xf0 <Dio_vidSetPinDir+0x74>
      ee:	63 c0       	rjmp	.+198    	; 0x1b6 <Dio_vidSetPinDir+0x13a>
				{
					switch(PinLoc)
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	28 2f       	mov	r18, r24
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	3c 8b       	std	Y+20, r19	; 0x14
      f8:	2b 8b       	std	Y+19, r18	; 0x13
      fa:	8b 89       	ldd	r24, Y+19	; 0x13
      fc:	9c 89       	ldd	r25, Y+20	; 0x14
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	91 05       	cpc	r25, r1
     102:	d9 f1       	breq	.+118    	; 0x17a <Dio_vidSetPinDir+0xfe>
     104:	2b 89       	ldd	r18, Y+19	; 0x13
     106:	3c 89       	ldd	r19, Y+20	; 0x14
     108:	24 30       	cpi	r18, 0x04	; 4
     10a:	31 05       	cpc	r19, r1
     10c:	7c f4       	brge	.+30     	; 0x12c <Dio_vidSetPinDir+0xb0>
     10e:	8b 89       	ldd	r24, Y+19	; 0x13
     110:	9c 89       	ldd	r25, Y+20	; 0x14
     112:	81 30       	cpi	r24, 0x01	; 1
     114:	91 05       	cpc	r25, r1
     116:	29 f1       	breq	.+74     	; 0x162 <Dio_vidSetPinDir+0xe6>
     118:	2b 89       	ldd	r18, Y+19	; 0x13
     11a:	3c 89       	ldd	r19, Y+20	; 0x14
     11c:	22 30       	cpi	r18, 0x02	; 2
     11e:	31 05       	cpc	r19, r1
     120:	34 f5       	brge	.+76     	; 0x16e <Dio_vidSetPinDir+0xf2>
     122:	8b 89       	ldd	r24, Y+19	; 0x13
     124:	9c 89       	ldd	r25, Y+20	; 0x14
     126:	00 97       	sbiw	r24, 0x00	; 0
     128:	b1 f0       	breq	.+44     	; 0x156 <Dio_vidSetPinDir+0xda>
     12a:	05 c3       	rjmp	.+1546   	; 0x736 <Dio_vidSetPinDir+0x6ba>
     12c:	2b 89       	ldd	r18, Y+19	; 0x13
     12e:	3c 89       	ldd	r19, Y+20	; 0x14
     130:	25 30       	cpi	r18, 0x05	; 5
     132:	31 05       	cpc	r19, r1
     134:	71 f1       	breq	.+92     	; 0x192 <Dio_vidSetPinDir+0x116>
     136:	8b 89       	ldd	r24, Y+19	; 0x13
     138:	9c 89       	ldd	r25, Y+20	; 0x14
     13a:	85 30       	cpi	r24, 0x05	; 5
     13c:	91 05       	cpc	r25, r1
     13e:	1c f1       	brlt	.+70     	; 0x186 <Dio_vidSetPinDir+0x10a>
     140:	2b 89       	ldd	r18, Y+19	; 0x13
     142:	3c 89       	ldd	r19, Y+20	; 0x14
     144:	26 30       	cpi	r18, 0x06	; 6
     146:	31 05       	cpc	r19, r1
     148:	51 f1       	breq	.+84     	; 0x19e <Dio_vidSetPinDir+0x122>
     14a:	8b 89       	ldd	r24, Y+19	; 0x13
     14c:	9c 89       	ldd	r25, Y+20	; 0x14
     14e:	87 30       	cpi	r24, 0x07	; 7
     150:	91 05       	cpc	r25, r1
     152:	59 f1       	breq	.+86     	; 0x1aa <Dio_vidSetPinDir+0x12e>
     154:	f0 c2       	rjmp	.+1504   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRA.Bits.Pin0 =1;
     156:	ea e3       	ldi	r30, 0x3A	; 58
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	81 60       	ori	r24, 0x01	; 1
     15e:	80 83       	st	Z, r24
     160:	ea c2       	rjmp	.+1492   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRA.Bits.Pin1 =1;
     162:	ea e3       	ldi	r30, 0x3A	; 58
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	82 60       	ori	r24, 0x02	; 2
     16a:	80 83       	st	Z, r24
     16c:	e4 c2       	rjmp	.+1480   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRA.Bits.Pin2 =1;
     16e:	ea e3       	ldi	r30, 0x3A	; 58
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	84 60       	ori	r24, 0x04	; 4
     176:	80 83       	st	Z, r24
     178:	de c2       	rjmp	.+1468   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRA.Bits.Pin3 =1;
     17a:	ea e3       	ldi	r30, 0x3A	; 58
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	88 60       	ori	r24, 0x08	; 8
     182:	80 83       	st	Z, r24
     184:	d8 c2       	rjmp	.+1456   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRA.Bits.Pin4 =1;
     186:	ea e3       	ldi	r30, 0x3A	; 58
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 83       	st	Z, r24
     190:	d2 c2       	rjmp	.+1444   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRA.Bits.Pin5 =1;
     192:	ea e3       	ldi	r30, 0x3A	; 58
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	80 62       	ori	r24, 0x20	; 32
     19a:	80 83       	st	Z, r24
     19c:	cc c2       	rjmp	.+1432   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRA.Bits.Pin6 =1;
     19e:	ea e3       	ldi	r30, 0x3A	; 58
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	80 64       	ori	r24, 0x40	; 64
     1a6:	80 83       	st	Z, r24
     1a8:	c6 c2       	rjmp	.+1420   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRA.Bits.Pin7 =1;
     1aa:	ea e3       	ldi	r30, 0x3A	; 58
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	80 68       	ori	r24, 0x80	; 128
     1b2:	80 83       	st	Z, r24
     1b4:	c0 c2       	rjmp	.+1408   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	28 2f       	mov	r18, r24
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	3a 8b       	std	Y+18, r19	; 0x12
     1be:	29 8b       	std	Y+17, r18	; 0x11
     1c0:	89 89       	ldd	r24, Y+17	; 0x11
     1c2:	9a 89       	ldd	r25, Y+18	; 0x12
     1c4:	83 30       	cpi	r24, 0x03	; 3
     1c6:	91 05       	cpc	r25, r1
     1c8:	d9 f1       	breq	.+118    	; 0x240 <Dio_vidSetPinDir+0x1c4>
     1ca:	29 89       	ldd	r18, Y+17	; 0x11
     1cc:	3a 89       	ldd	r19, Y+18	; 0x12
     1ce:	24 30       	cpi	r18, 0x04	; 4
     1d0:	31 05       	cpc	r19, r1
     1d2:	7c f4       	brge	.+30     	; 0x1f2 <Dio_vidSetPinDir+0x176>
     1d4:	89 89       	ldd	r24, Y+17	; 0x11
     1d6:	9a 89       	ldd	r25, Y+18	; 0x12
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	91 05       	cpc	r25, r1
     1dc:	29 f1       	breq	.+74     	; 0x228 <Dio_vidSetPinDir+0x1ac>
     1de:	29 89       	ldd	r18, Y+17	; 0x11
     1e0:	3a 89       	ldd	r19, Y+18	; 0x12
     1e2:	22 30       	cpi	r18, 0x02	; 2
     1e4:	31 05       	cpc	r19, r1
     1e6:	34 f5       	brge	.+76     	; 0x234 <Dio_vidSetPinDir+0x1b8>
     1e8:	89 89       	ldd	r24, Y+17	; 0x11
     1ea:	9a 89       	ldd	r25, Y+18	; 0x12
     1ec:	00 97       	sbiw	r24, 0x00	; 0
     1ee:	b1 f0       	breq	.+44     	; 0x21c <Dio_vidSetPinDir+0x1a0>
     1f0:	a2 c2       	rjmp	.+1348   	; 0x736 <Dio_vidSetPinDir+0x6ba>
     1f2:	29 89       	ldd	r18, Y+17	; 0x11
     1f4:	3a 89       	ldd	r19, Y+18	; 0x12
     1f6:	25 30       	cpi	r18, 0x05	; 5
     1f8:	31 05       	cpc	r19, r1
     1fa:	71 f1       	breq	.+92     	; 0x258 <Dio_vidSetPinDir+0x1dc>
     1fc:	89 89       	ldd	r24, Y+17	; 0x11
     1fe:	9a 89       	ldd	r25, Y+18	; 0x12
     200:	85 30       	cpi	r24, 0x05	; 5
     202:	91 05       	cpc	r25, r1
     204:	1c f1       	brlt	.+70     	; 0x24c <Dio_vidSetPinDir+0x1d0>
     206:	29 89       	ldd	r18, Y+17	; 0x11
     208:	3a 89       	ldd	r19, Y+18	; 0x12
     20a:	26 30       	cpi	r18, 0x06	; 6
     20c:	31 05       	cpc	r19, r1
     20e:	51 f1       	breq	.+84     	; 0x264 <Dio_vidSetPinDir+0x1e8>
     210:	89 89       	ldd	r24, Y+17	; 0x11
     212:	9a 89       	ldd	r25, Y+18	; 0x12
     214:	87 30       	cpi	r24, 0x07	; 7
     216:	91 05       	cpc	r25, r1
     218:	59 f1       	breq	.+86     	; 0x270 <Dio_vidSetPinDir+0x1f4>
     21a:	8d c2       	rjmp	.+1306   	; 0x736 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRA.Bits.Pin0 =0;
     21c:	ea e3       	ldi	r30, 0x3A	; 58
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8e 7f       	andi	r24, 0xFE	; 254
     224:	80 83       	st	Z, r24
     226:	87 c2       	rjmp	.+1294   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRA.Bits.Pin1 =0;
     228:	ea e3       	ldi	r30, 0x3A	; 58
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8d 7f       	andi	r24, 0xFD	; 253
     230:	80 83       	st	Z, r24
     232:	81 c2       	rjmp	.+1282   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRA.Bits.Pin2 =0;
     234:	ea e3       	ldi	r30, 0x3A	; 58
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	8b 7f       	andi	r24, 0xFB	; 251
     23c:	80 83       	st	Z, r24
     23e:	7b c2       	rjmp	.+1270   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRA.Bits.Pin3 =0;
     240:	ea e3       	ldi	r30, 0x3A	; 58
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	87 7f       	andi	r24, 0xF7	; 247
     248:	80 83       	st	Z, r24
     24a:	75 c2       	rjmp	.+1258   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRA.Bits.Pin4 =0;
     24c:	ea e3       	ldi	r30, 0x3A	; 58
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	8f 7e       	andi	r24, 0xEF	; 239
     254:	80 83       	st	Z, r24
     256:	6f c2       	rjmp	.+1246   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRA.Bits.Pin5 =0;
     258:	ea e3       	ldi	r30, 0x3A	; 58
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	8f 7d       	andi	r24, 0xDF	; 223
     260:	80 83       	st	Z, r24
     262:	69 c2       	rjmp	.+1234   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRA.Bits.Pin6 =0;
     264:	ea e3       	ldi	r30, 0x3A	; 58
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	8f 7b       	andi	r24, 0xBF	; 191
     26c:	80 83       	st	Z, r24
     26e:	63 c2       	rjmp	.+1222   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRA.Bits.Pin7 =0;
     270:	ea e3       	ldi	r30, 0x3A	; 58
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	8f 77       	andi	r24, 0x7F	; 127
     278:	80 83       	st	Z, r24
     27a:	5d c2       	rjmp	.+1210   	; 0x736 <Dio_vidSetPinDir+0x6ba>
				}
			}
		break;

		case 1:
			if(Dir ==1)
     27c:	8c 81       	ldd	r24, Y+4	; 0x04
     27e:	81 30       	cpi	r24, 0x01	; 1
     280:	09 f0       	breq	.+2      	; 0x284 <Dio_vidSetPinDir+0x208>
     282:	63 c0       	rjmp	.+198    	; 0x34a <Dio_vidSetPinDir+0x2ce>
				{
					switch(PinLoc)
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	28 2f       	mov	r18, r24
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	38 8b       	std	Y+16, r19	; 0x10
     28c:	2f 87       	std	Y+15, r18	; 0x0f
     28e:	8f 85       	ldd	r24, Y+15	; 0x0f
     290:	98 89       	ldd	r25, Y+16	; 0x10
     292:	83 30       	cpi	r24, 0x03	; 3
     294:	91 05       	cpc	r25, r1
     296:	d9 f1       	breq	.+118    	; 0x30e <Dio_vidSetPinDir+0x292>
     298:	2f 85       	ldd	r18, Y+15	; 0x0f
     29a:	38 89       	ldd	r19, Y+16	; 0x10
     29c:	24 30       	cpi	r18, 0x04	; 4
     29e:	31 05       	cpc	r19, r1
     2a0:	7c f4       	brge	.+30     	; 0x2c0 <Dio_vidSetPinDir+0x244>
     2a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     2a4:	98 89       	ldd	r25, Y+16	; 0x10
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	91 05       	cpc	r25, r1
     2aa:	29 f1       	breq	.+74     	; 0x2f6 <Dio_vidSetPinDir+0x27a>
     2ac:	2f 85       	ldd	r18, Y+15	; 0x0f
     2ae:	38 89       	ldd	r19, Y+16	; 0x10
     2b0:	22 30       	cpi	r18, 0x02	; 2
     2b2:	31 05       	cpc	r19, r1
     2b4:	34 f5       	brge	.+76     	; 0x302 <Dio_vidSetPinDir+0x286>
     2b6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2b8:	98 89       	ldd	r25, Y+16	; 0x10
     2ba:	00 97       	sbiw	r24, 0x00	; 0
     2bc:	b1 f0       	breq	.+44     	; 0x2ea <Dio_vidSetPinDir+0x26e>
     2be:	3b c2       	rjmp	.+1142   	; 0x736 <Dio_vidSetPinDir+0x6ba>
     2c0:	2f 85       	ldd	r18, Y+15	; 0x0f
     2c2:	38 89       	ldd	r19, Y+16	; 0x10
     2c4:	25 30       	cpi	r18, 0x05	; 5
     2c6:	31 05       	cpc	r19, r1
     2c8:	71 f1       	breq	.+92     	; 0x326 <Dio_vidSetPinDir+0x2aa>
     2ca:	8f 85       	ldd	r24, Y+15	; 0x0f
     2cc:	98 89       	ldd	r25, Y+16	; 0x10
     2ce:	85 30       	cpi	r24, 0x05	; 5
     2d0:	91 05       	cpc	r25, r1
     2d2:	1c f1       	brlt	.+70     	; 0x31a <Dio_vidSetPinDir+0x29e>
     2d4:	2f 85       	ldd	r18, Y+15	; 0x0f
     2d6:	38 89       	ldd	r19, Y+16	; 0x10
     2d8:	26 30       	cpi	r18, 0x06	; 6
     2da:	31 05       	cpc	r19, r1
     2dc:	51 f1       	breq	.+84     	; 0x332 <Dio_vidSetPinDir+0x2b6>
     2de:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e0:	98 89       	ldd	r25, Y+16	; 0x10
     2e2:	87 30       	cpi	r24, 0x07	; 7
     2e4:	91 05       	cpc	r25, r1
     2e6:	59 f1       	breq	.+86     	; 0x33e <Dio_vidSetPinDir+0x2c2>
     2e8:	26 c2       	rjmp	.+1100   	; 0x736 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRB.Bits.Pin0 =1;
     2ea:	e7 e3       	ldi	r30, 0x37	; 55
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	81 60       	ori	r24, 0x01	; 1
     2f2:	80 83       	st	Z, r24
     2f4:	20 c2       	rjmp	.+1088   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRB.Bits.Pin1 =1;
     2f6:	e7 e3       	ldi	r30, 0x37	; 55
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	82 60       	ori	r24, 0x02	; 2
     2fe:	80 83       	st	Z, r24
     300:	1a c2       	rjmp	.+1076   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRB.Bits.Pin2 =1;
     302:	e7 e3       	ldi	r30, 0x37	; 55
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	84 60       	ori	r24, 0x04	; 4
     30a:	80 83       	st	Z, r24
     30c:	14 c2       	rjmp	.+1064   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRB.Bits.Pin3 =1;
     30e:	e7 e3       	ldi	r30, 0x37	; 55
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	88 60       	ori	r24, 0x08	; 8
     316:	80 83       	st	Z, r24
     318:	0e c2       	rjmp	.+1052   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRB.Bits.Pin4 =1;
     31a:	e7 e3       	ldi	r30, 0x37	; 55
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	80 61       	ori	r24, 0x10	; 16
     322:	80 83       	st	Z, r24
     324:	08 c2       	rjmp	.+1040   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRB.Bits.Pin5 =1;
     326:	e7 e3       	ldi	r30, 0x37	; 55
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	80 62       	ori	r24, 0x20	; 32
     32e:	80 83       	st	Z, r24
     330:	02 c2       	rjmp	.+1028   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRB.Bits.Pin6 =1;
     332:	e7 e3       	ldi	r30, 0x37	; 55
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	80 64       	ori	r24, 0x40	; 64
     33a:	80 83       	st	Z, r24
     33c:	fc c1       	rjmp	.+1016   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRB.Bits.Pin7 =1;
     33e:	e7 e3       	ldi	r30, 0x37	; 55
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	80 68       	ori	r24, 0x80	; 128
     346:	80 83       	st	Z, r24
     348:	f6 c1       	rjmp	.+1004   	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	28 2f       	mov	r18, r24
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	3e 87       	std	Y+14, r19	; 0x0e
     352:	2d 87       	std	Y+13, r18	; 0x0d
     354:	8d 85       	ldd	r24, Y+13	; 0x0d
     356:	9e 85       	ldd	r25, Y+14	; 0x0e
     358:	83 30       	cpi	r24, 0x03	; 3
     35a:	91 05       	cpc	r25, r1
     35c:	d9 f1       	breq	.+118    	; 0x3d4 <Dio_vidSetPinDir+0x358>
     35e:	2d 85       	ldd	r18, Y+13	; 0x0d
     360:	3e 85       	ldd	r19, Y+14	; 0x0e
     362:	24 30       	cpi	r18, 0x04	; 4
     364:	31 05       	cpc	r19, r1
     366:	7c f4       	brge	.+30     	; 0x386 <Dio_vidSetPinDir+0x30a>
     368:	8d 85       	ldd	r24, Y+13	; 0x0d
     36a:	9e 85       	ldd	r25, Y+14	; 0x0e
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	91 05       	cpc	r25, r1
     370:	29 f1       	breq	.+74     	; 0x3bc <Dio_vidSetPinDir+0x340>
     372:	2d 85       	ldd	r18, Y+13	; 0x0d
     374:	3e 85       	ldd	r19, Y+14	; 0x0e
     376:	22 30       	cpi	r18, 0x02	; 2
     378:	31 05       	cpc	r19, r1
     37a:	34 f5       	brge	.+76     	; 0x3c8 <Dio_vidSetPinDir+0x34c>
     37c:	8d 85       	ldd	r24, Y+13	; 0x0d
     37e:	9e 85       	ldd	r25, Y+14	; 0x0e
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	b1 f0       	breq	.+44     	; 0x3b0 <Dio_vidSetPinDir+0x334>
     384:	d8 c1       	rjmp	.+944    	; 0x736 <Dio_vidSetPinDir+0x6ba>
     386:	2d 85       	ldd	r18, Y+13	; 0x0d
     388:	3e 85       	ldd	r19, Y+14	; 0x0e
     38a:	25 30       	cpi	r18, 0x05	; 5
     38c:	31 05       	cpc	r19, r1
     38e:	71 f1       	breq	.+92     	; 0x3ec <Dio_vidSetPinDir+0x370>
     390:	8d 85       	ldd	r24, Y+13	; 0x0d
     392:	9e 85       	ldd	r25, Y+14	; 0x0e
     394:	85 30       	cpi	r24, 0x05	; 5
     396:	91 05       	cpc	r25, r1
     398:	1c f1       	brlt	.+70     	; 0x3e0 <Dio_vidSetPinDir+0x364>
     39a:	2d 85       	ldd	r18, Y+13	; 0x0d
     39c:	3e 85       	ldd	r19, Y+14	; 0x0e
     39e:	26 30       	cpi	r18, 0x06	; 6
     3a0:	31 05       	cpc	r19, r1
     3a2:	51 f1       	breq	.+84     	; 0x3f8 <Dio_vidSetPinDir+0x37c>
     3a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     3a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     3a8:	87 30       	cpi	r24, 0x07	; 7
     3aa:	91 05       	cpc	r25, r1
     3ac:	59 f1       	breq	.+86     	; 0x404 <Dio_vidSetPinDir+0x388>
     3ae:	c3 c1       	rjmp	.+902    	; 0x736 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRB.Bits.Pin0 =0;
     3b0:	e7 e3       	ldi	r30, 0x37	; 55
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	8e 7f       	andi	r24, 0xFE	; 254
     3b8:	80 83       	st	Z, r24
     3ba:	bd c1       	rjmp	.+890    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRB.Bits.Pin1 =0;
     3bc:	e7 e3       	ldi	r30, 0x37	; 55
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	8d 7f       	andi	r24, 0xFD	; 253
     3c4:	80 83       	st	Z, r24
     3c6:	b7 c1       	rjmp	.+878    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRB.Bits.Pin2 =0;
     3c8:	e7 e3       	ldi	r30, 0x37	; 55
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	8b 7f       	andi	r24, 0xFB	; 251
     3d0:	80 83       	st	Z, r24
     3d2:	b1 c1       	rjmp	.+866    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRB.Bits.Pin3 =0;
     3d4:	e7 e3       	ldi	r30, 0x37	; 55
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	87 7f       	andi	r24, 0xF7	; 247
     3dc:	80 83       	st	Z, r24
     3de:	ab c1       	rjmp	.+854    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRB.Bits.Pin4 =0;
     3e0:	e7 e3       	ldi	r30, 0x37	; 55
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	8f 7e       	andi	r24, 0xEF	; 239
     3e8:	80 83       	st	Z, r24
     3ea:	a5 c1       	rjmp	.+842    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRB.Bits.Pin5 =0;
     3ec:	e7 e3       	ldi	r30, 0x37	; 55
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	8f 7d       	andi	r24, 0xDF	; 223
     3f4:	80 83       	st	Z, r24
     3f6:	9f c1       	rjmp	.+830    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRB.Bits.Pin6 =0;
     3f8:	e7 e3       	ldi	r30, 0x37	; 55
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	8f 7b       	andi	r24, 0xBF	; 191
     400:	80 83       	st	Z, r24
     402:	99 c1       	rjmp	.+818    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRB.Bits.Pin7 =0;
     404:	e7 e3       	ldi	r30, 0x37	; 55
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	8f 77       	andi	r24, 0x7F	; 127
     40c:	80 83       	st	Z, r24
     40e:	93 c1       	rjmp	.+806    	; 0x736 <Dio_vidSetPinDir+0x6ba>
				}
			}
			break;

		case 2:
			if(Dir ==1)
     410:	8c 81       	ldd	r24, Y+4	; 0x04
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	09 f0       	breq	.+2      	; 0x418 <Dio_vidSetPinDir+0x39c>
     416:	63 c0       	rjmp	.+198    	; 0x4de <Dio_vidSetPinDir+0x462>
				{
					switch(PinLoc)
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	3c 87       	std	Y+12, r19	; 0x0c
     420:	2b 87       	std	Y+11, r18	; 0x0b
     422:	8b 85       	ldd	r24, Y+11	; 0x0b
     424:	9c 85       	ldd	r25, Y+12	; 0x0c
     426:	83 30       	cpi	r24, 0x03	; 3
     428:	91 05       	cpc	r25, r1
     42a:	d9 f1       	breq	.+118    	; 0x4a2 <Dio_vidSetPinDir+0x426>
     42c:	2b 85       	ldd	r18, Y+11	; 0x0b
     42e:	3c 85       	ldd	r19, Y+12	; 0x0c
     430:	24 30       	cpi	r18, 0x04	; 4
     432:	31 05       	cpc	r19, r1
     434:	7c f4       	brge	.+30     	; 0x454 <Dio_vidSetPinDir+0x3d8>
     436:	8b 85       	ldd	r24, Y+11	; 0x0b
     438:	9c 85       	ldd	r25, Y+12	; 0x0c
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	91 05       	cpc	r25, r1
     43e:	29 f1       	breq	.+74     	; 0x48a <Dio_vidSetPinDir+0x40e>
     440:	2b 85       	ldd	r18, Y+11	; 0x0b
     442:	3c 85       	ldd	r19, Y+12	; 0x0c
     444:	22 30       	cpi	r18, 0x02	; 2
     446:	31 05       	cpc	r19, r1
     448:	34 f5       	brge	.+76     	; 0x496 <Dio_vidSetPinDir+0x41a>
     44a:	8b 85       	ldd	r24, Y+11	; 0x0b
     44c:	9c 85       	ldd	r25, Y+12	; 0x0c
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	b1 f0       	breq	.+44     	; 0x47e <Dio_vidSetPinDir+0x402>
     452:	71 c1       	rjmp	.+738    	; 0x736 <Dio_vidSetPinDir+0x6ba>
     454:	2b 85       	ldd	r18, Y+11	; 0x0b
     456:	3c 85       	ldd	r19, Y+12	; 0x0c
     458:	25 30       	cpi	r18, 0x05	; 5
     45a:	31 05       	cpc	r19, r1
     45c:	71 f1       	breq	.+92     	; 0x4ba <Dio_vidSetPinDir+0x43e>
     45e:	8b 85       	ldd	r24, Y+11	; 0x0b
     460:	9c 85       	ldd	r25, Y+12	; 0x0c
     462:	85 30       	cpi	r24, 0x05	; 5
     464:	91 05       	cpc	r25, r1
     466:	1c f1       	brlt	.+70     	; 0x4ae <Dio_vidSetPinDir+0x432>
     468:	2b 85       	ldd	r18, Y+11	; 0x0b
     46a:	3c 85       	ldd	r19, Y+12	; 0x0c
     46c:	26 30       	cpi	r18, 0x06	; 6
     46e:	31 05       	cpc	r19, r1
     470:	51 f1       	breq	.+84     	; 0x4c6 <Dio_vidSetPinDir+0x44a>
     472:	8b 85       	ldd	r24, Y+11	; 0x0b
     474:	9c 85       	ldd	r25, Y+12	; 0x0c
     476:	87 30       	cpi	r24, 0x07	; 7
     478:	91 05       	cpc	r25, r1
     47a:	59 f1       	breq	.+86     	; 0x4d2 <Dio_vidSetPinDir+0x456>
     47c:	5c c1       	rjmp	.+696    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRC.Bits.Pin0 =1;
     47e:	e4 e3       	ldi	r30, 0x34	; 52
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	81 60       	ori	r24, 0x01	; 1
     486:	80 83       	st	Z, r24
     488:	56 c1       	rjmp	.+684    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRC.Bits.Pin1 =1;
     48a:	e4 e3       	ldi	r30, 0x34	; 52
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	82 60       	ori	r24, 0x02	; 2
     492:	80 83       	st	Z, r24
     494:	50 c1       	rjmp	.+672    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRC.Bits.Pin2 =1;
     496:	e4 e3       	ldi	r30, 0x34	; 52
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	84 60       	ori	r24, 0x04	; 4
     49e:	80 83       	st	Z, r24
     4a0:	4a c1       	rjmp	.+660    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRC.Bits.Pin3 =1;
     4a2:	e4 e3       	ldi	r30, 0x34	; 52
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	88 60       	ori	r24, 0x08	; 8
     4aa:	80 83       	st	Z, r24
     4ac:	44 c1       	rjmp	.+648    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRC.Bits.Pin4 =1;
     4ae:	e4 e3       	ldi	r30, 0x34	; 52
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	80 61       	ori	r24, 0x10	; 16
     4b6:	80 83       	st	Z, r24
     4b8:	3e c1       	rjmp	.+636    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRC.Bits.Pin5 =1;
     4ba:	e4 e3       	ldi	r30, 0x34	; 52
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	80 62       	ori	r24, 0x20	; 32
     4c2:	80 83       	st	Z, r24
     4c4:	38 c1       	rjmp	.+624    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRC.Bits.Pin6 =1;
     4c6:	e4 e3       	ldi	r30, 0x34	; 52
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	80 64       	ori	r24, 0x40	; 64
     4ce:	80 83       	st	Z, r24
     4d0:	32 c1       	rjmp	.+612    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRC.Bits.Pin7 =1;
     4d2:	e4 e3       	ldi	r30, 0x34	; 52
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	80 68       	ori	r24, 0x80	; 128
     4da:	80 83       	st	Z, r24
     4dc:	2c c1       	rjmp	.+600    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	28 2f       	mov	r18, r24
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	3a 87       	std	Y+10, r19	; 0x0a
     4e6:	29 87       	std	Y+9, r18	; 0x09
     4e8:	89 85       	ldd	r24, Y+9	; 0x09
     4ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ec:	83 30       	cpi	r24, 0x03	; 3
     4ee:	91 05       	cpc	r25, r1
     4f0:	d9 f1       	breq	.+118    	; 0x568 <Dio_vidSetPinDir+0x4ec>
     4f2:	29 85       	ldd	r18, Y+9	; 0x09
     4f4:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f6:	24 30       	cpi	r18, 0x04	; 4
     4f8:	31 05       	cpc	r19, r1
     4fa:	7c f4       	brge	.+30     	; 0x51a <Dio_vidSetPinDir+0x49e>
     4fc:	89 85       	ldd	r24, Y+9	; 0x09
     4fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	91 05       	cpc	r25, r1
     504:	29 f1       	breq	.+74     	; 0x550 <Dio_vidSetPinDir+0x4d4>
     506:	29 85       	ldd	r18, Y+9	; 0x09
     508:	3a 85       	ldd	r19, Y+10	; 0x0a
     50a:	22 30       	cpi	r18, 0x02	; 2
     50c:	31 05       	cpc	r19, r1
     50e:	34 f5       	brge	.+76     	; 0x55c <Dio_vidSetPinDir+0x4e0>
     510:	89 85       	ldd	r24, Y+9	; 0x09
     512:	9a 85       	ldd	r25, Y+10	; 0x0a
     514:	00 97       	sbiw	r24, 0x00	; 0
     516:	b1 f0       	breq	.+44     	; 0x544 <Dio_vidSetPinDir+0x4c8>
     518:	0e c1       	rjmp	.+540    	; 0x736 <Dio_vidSetPinDir+0x6ba>
     51a:	29 85       	ldd	r18, Y+9	; 0x09
     51c:	3a 85       	ldd	r19, Y+10	; 0x0a
     51e:	25 30       	cpi	r18, 0x05	; 5
     520:	31 05       	cpc	r19, r1
     522:	71 f1       	breq	.+92     	; 0x580 <Dio_vidSetPinDir+0x504>
     524:	89 85       	ldd	r24, Y+9	; 0x09
     526:	9a 85       	ldd	r25, Y+10	; 0x0a
     528:	85 30       	cpi	r24, 0x05	; 5
     52a:	91 05       	cpc	r25, r1
     52c:	1c f1       	brlt	.+70     	; 0x574 <Dio_vidSetPinDir+0x4f8>
     52e:	29 85       	ldd	r18, Y+9	; 0x09
     530:	3a 85       	ldd	r19, Y+10	; 0x0a
     532:	26 30       	cpi	r18, 0x06	; 6
     534:	31 05       	cpc	r19, r1
     536:	51 f1       	breq	.+84     	; 0x58c <Dio_vidSetPinDir+0x510>
     538:	89 85       	ldd	r24, Y+9	; 0x09
     53a:	9a 85       	ldd	r25, Y+10	; 0x0a
     53c:	87 30       	cpi	r24, 0x07	; 7
     53e:	91 05       	cpc	r25, r1
     540:	59 f1       	breq	.+86     	; 0x598 <Dio_vidSetPinDir+0x51c>
     542:	f9 c0       	rjmp	.+498    	; 0x736 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRC.Bits.Pin0 =0;
     544:	e4 e3       	ldi	r30, 0x34	; 52
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	8e 7f       	andi	r24, 0xFE	; 254
     54c:	80 83       	st	Z, r24
     54e:	f3 c0       	rjmp	.+486    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRC.Bits.Pin1 =0;
     550:	e4 e3       	ldi	r30, 0x34	; 52
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	8d 7f       	andi	r24, 0xFD	; 253
     558:	80 83       	st	Z, r24
     55a:	ed c0       	rjmp	.+474    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRC.Bits.Pin2 =0;
     55c:	e4 e3       	ldi	r30, 0x34	; 52
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	8b 7f       	andi	r24, 0xFB	; 251
     564:	80 83       	st	Z, r24
     566:	e7 c0       	rjmp	.+462    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRC.Bits.Pin3 =0;
     568:	e4 e3       	ldi	r30, 0x34	; 52
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	80 81       	ld	r24, Z
     56e:	87 7f       	andi	r24, 0xF7	; 247
     570:	80 83       	st	Z, r24
     572:	e1 c0       	rjmp	.+450    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRC.Bits.Pin4 =0;
     574:	e4 e3       	ldi	r30, 0x34	; 52
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	8f 7e       	andi	r24, 0xEF	; 239
     57c:	80 83       	st	Z, r24
     57e:	db c0       	rjmp	.+438    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRC.Bits.Pin5 =0;
     580:	e4 e3       	ldi	r30, 0x34	; 52
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	8f 7d       	andi	r24, 0xDF	; 223
     588:	80 83       	st	Z, r24
     58a:	d5 c0       	rjmp	.+426    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRC.Bits.Pin6 =0;
     58c:	e4 e3       	ldi	r30, 0x34	; 52
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	8f 7b       	andi	r24, 0xBF	; 191
     594:	80 83       	st	Z, r24
     596:	cf c0       	rjmp	.+414    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRC.Bits.Pin7 =0;
     598:	e4 e3       	ldi	r30, 0x34	; 52
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	8f 77       	andi	r24, 0x7F	; 127
     5a0:	80 83       	st	Z, r24
     5a2:	c9 c0       	rjmp	.+402    	; 0x736 <Dio_vidSetPinDir+0x6ba>
			}
		break;


		case 3:
			if(Dir ==1)
     5a4:	8c 81       	ldd	r24, Y+4	; 0x04
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	09 f0       	breq	.+2      	; 0x5ac <Dio_vidSetPinDir+0x530>
     5aa:	63 c0       	rjmp	.+198    	; 0x672 <Dio_vidSetPinDir+0x5f6>
				{
					switch(PinLoc)
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	28 2f       	mov	r18, r24
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	38 87       	std	Y+8, r19	; 0x08
     5b4:	2f 83       	std	Y+7, r18	; 0x07
     5b6:	8f 81       	ldd	r24, Y+7	; 0x07
     5b8:	98 85       	ldd	r25, Y+8	; 0x08
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	91 05       	cpc	r25, r1
     5be:	d9 f1       	breq	.+118    	; 0x636 <Dio_vidSetPinDir+0x5ba>
     5c0:	2f 81       	ldd	r18, Y+7	; 0x07
     5c2:	38 85       	ldd	r19, Y+8	; 0x08
     5c4:	24 30       	cpi	r18, 0x04	; 4
     5c6:	31 05       	cpc	r19, r1
     5c8:	7c f4       	brge	.+30     	; 0x5e8 <Dio_vidSetPinDir+0x56c>
     5ca:	8f 81       	ldd	r24, Y+7	; 0x07
     5cc:	98 85       	ldd	r25, Y+8	; 0x08
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	91 05       	cpc	r25, r1
     5d2:	29 f1       	breq	.+74     	; 0x61e <Dio_vidSetPinDir+0x5a2>
     5d4:	2f 81       	ldd	r18, Y+7	; 0x07
     5d6:	38 85       	ldd	r19, Y+8	; 0x08
     5d8:	22 30       	cpi	r18, 0x02	; 2
     5da:	31 05       	cpc	r19, r1
     5dc:	34 f5       	brge	.+76     	; 0x62a <Dio_vidSetPinDir+0x5ae>
     5de:	8f 81       	ldd	r24, Y+7	; 0x07
     5e0:	98 85       	ldd	r25, Y+8	; 0x08
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	b1 f0       	breq	.+44     	; 0x612 <Dio_vidSetPinDir+0x596>
     5e6:	a7 c0       	rjmp	.+334    	; 0x736 <Dio_vidSetPinDir+0x6ba>
     5e8:	2f 81       	ldd	r18, Y+7	; 0x07
     5ea:	38 85       	ldd	r19, Y+8	; 0x08
     5ec:	25 30       	cpi	r18, 0x05	; 5
     5ee:	31 05       	cpc	r19, r1
     5f0:	71 f1       	breq	.+92     	; 0x64e <Dio_vidSetPinDir+0x5d2>
     5f2:	8f 81       	ldd	r24, Y+7	; 0x07
     5f4:	98 85       	ldd	r25, Y+8	; 0x08
     5f6:	85 30       	cpi	r24, 0x05	; 5
     5f8:	91 05       	cpc	r25, r1
     5fa:	1c f1       	brlt	.+70     	; 0x642 <Dio_vidSetPinDir+0x5c6>
     5fc:	2f 81       	ldd	r18, Y+7	; 0x07
     5fe:	38 85       	ldd	r19, Y+8	; 0x08
     600:	26 30       	cpi	r18, 0x06	; 6
     602:	31 05       	cpc	r19, r1
     604:	51 f1       	breq	.+84     	; 0x65a <Dio_vidSetPinDir+0x5de>
     606:	8f 81       	ldd	r24, Y+7	; 0x07
     608:	98 85       	ldd	r25, Y+8	; 0x08
     60a:	87 30       	cpi	r24, 0x07	; 7
     60c:	91 05       	cpc	r25, r1
     60e:	59 f1       	breq	.+86     	; 0x666 <Dio_vidSetPinDir+0x5ea>
     610:	92 c0       	rjmp	.+292    	; 0x736 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRD.Bits.Pin0 =1;
     612:	e1 e3       	ldi	r30, 0x31	; 49
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	81 60       	ori	r24, 0x01	; 1
     61a:	80 83       	st	Z, r24
     61c:	8c c0       	rjmp	.+280    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRD.Bits.Pin1 =1;
     61e:	e1 e3       	ldi	r30, 0x31	; 49
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	82 60       	ori	r24, 0x02	; 2
     626:	80 83       	st	Z, r24
     628:	86 c0       	rjmp	.+268    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRD.Bits.Pin2 =1;
     62a:	e1 e3       	ldi	r30, 0x31	; 49
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	84 60       	ori	r24, 0x04	; 4
     632:	80 83       	st	Z, r24
     634:	80 c0       	rjmp	.+256    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRD.Bits.Pin3 =1;
     636:	e1 e3       	ldi	r30, 0x31	; 49
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	88 60       	ori	r24, 0x08	; 8
     63e:	80 83       	st	Z, r24
     640:	7a c0       	rjmp	.+244    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRD.Bits.Pin4 =1;
     642:	e1 e3       	ldi	r30, 0x31	; 49
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	80 61       	ori	r24, 0x10	; 16
     64a:	80 83       	st	Z, r24
     64c:	74 c0       	rjmp	.+232    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRD.Bits.Pin5 =1;
     64e:	e1 e3       	ldi	r30, 0x31	; 49
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	80 62       	ori	r24, 0x20	; 32
     656:	80 83       	st	Z, r24
     658:	6e c0       	rjmp	.+220    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRD.Bits.Pin6 =1;
     65a:	e1 e3       	ldi	r30, 0x31	; 49
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	80 64       	ori	r24, 0x40	; 64
     662:	80 83       	st	Z, r24
     664:	68 c0       	rjmp	.+208    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRD.Bits.Pin7 =1;
     666:	e1 e3       	ldi	r30, 0x31	; 49
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	80 68       	ori	r24, 0x80	; 128
     66e:	80 83       	st	Z, r24
     670:	62 c0       	rjmp	.+196    	; 0x736 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	28 2f       	mov	r18, r24
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	3e 83       	std	Y+6, r19	; 0x06
     67a:	2d 83       	std	Y+5, r18	; 0x05
     67c:	8d 81       	ldd	r24, Y+5	; 0x05
     67e:	9e 81       	ldd	r25, Y+6	; 0x06
     680:	83 30       	cpi	r24, 0x03	; 3
     682:	91 05       	cpc	r25, r1
     684:	d9 f1       	breq	.+118    	; 0x6fc <Dio_vidSetPinDir+0x680>
     686:	2d 81       	ldd	r18, Y+5	; 0x05
     688:	3e 81       	ldd	r19, Y+6	; 0x06
     68a:	24 30       	cpi	r18, 0x04	; 4
     68c:	31 05       	cpc	r19, r1
     68e:	7c f4       	brge	.+30     	; 0x6ae <Dio_vidSetPinDir+0x632>
     690:	8d 81       	ldd	r24, Y+5	; 0x05
     692:	9e 81       	ldd	r25, Y+6	; 0x06
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	91 05       	cpc	r25, r1
     698:	29 f1       	breq	.+74     	; 0x6e4 <Dio_vidSetPinDir+0x668>
     69a:	2d 81       	ldd	r18, Y+5	; 0x05
     69c:	3e 81       	ldd	r19, Y+6	; 0x06
     69e:	22 30       	cpi	r18, 0x02	; 2
     6a0:	31 05       	cpc	r19, r1
     6a2:	34 f5       	brge	.+76     	; 0x6f0 <Dio_vidSetPinDir+0x674>
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	9e 81       	ldd	r25, Y+6	; 0x06
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	b1 f0       	breq	.+44     	; 0x6d8 <Dio_vidSetPinDir+0x65c>
     6ac:	44 c0       	rjmp	.+136    	; 0x736 <Dio_vidSetPinDir+0x6ba>
     6ae:	2d 81       	ldd	r18, Y+5	; 0x05
     6b0:	3e 81       	ldd	r19, Y+6	; 0x06
     6b2:	25 30       	cpi	r18, 0x05	; 5
     6b4:	31 05       	cpc	r19, r1
     6b6:	71 f1       	breq	.+92     	; 0x714 <Dio_vidSetPinDir+0x698>
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	9e 81       	ldd	r25, Y+6	; 0x06
     6bc:	85 30       	cpi	r24, 0x05	; 5
     6be:	91 05       	cpc	r25, r1
     6c0:	1c f1       	brlt	.+70     	; 0x708 <Dio_vidSetPinDir+0x68c>
     6c2:	2d 81       	ldd	r18, Y+5	; 0x05
     6c4:	3e 81       	ldd	r19, Y+6	; 0x06
     6c6:	26 30       	cpi	r18, 0x06	; 6
     6c8:	31 05       	cpc	r19, r1
     6ca:	51 f1       	breq	.+84     	; 0x720 <Dio_vidSetPinDir+0x6a4>
     6cc:	8d 81       	ldd	r24, Y+5	; 0x05
     6ce:	9e 81       	ldd	r25, Y+6	; 0x06
     6d0:	87 30       	cpi	r24, 0x07	; 7
     6d2:	91 05       	cpc	r25, r1
     6d4:	59 f1       	breq	.+86     	; 0x72c <Dio_vidSetPinDir+0x6b0>
     6d6:	2f c0       	rjmp	.+94     	; 0x736 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRD.Bits.Pin0 =0;
     6d8:	e1 e3       	ldi	r30, 0x31	; 49
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	80 83       	st	Z, r24
     6e2:	29 c0       	rjmp	.+82     	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRD.Bits.Pin1 =0;
     6e4:	e1 e3       	ldi	r30, 0x31	; 49
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	8d 7f       	andi	r24, 0xFD	; 253
     6ec:	80 83       	st	Z, r24
     6ee:	23 c0       	rjmp	.+70     	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRD.Bits.Pin2 =0;
     6f0:	e1 e3       	ldi	r30, 0x31	; 49
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	8b 7f       	andi	r24, 0xFB	; 251
     6f8:	80 83       	st	Z, r24
     6fa:	1d c0       	rjmp	.+58     	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRD.Bits.Pin3 =0;
     6fc:	e1 e3       	ldi	r30, 0x31	; 49
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	87 7f       	andi	r24, 0xF7	; 247
     704:	80 83       	st	Z, r24
     706:	17 c0       	rjmp	.+46     	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRD.Bits.Pin4 =0;
     708:	e1 e3       	ldi	r30, 0x31	; 49
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	8f 7e       	andi	r24, 0xEF	; 239
     710:	80 83       	st	Z, r24
     712:	11 c0       	rjmp	.+34     	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRD.Bits.Pin5 =0;
     714:	e1 e3       	ldi	r30, 0x31	; 49
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	8f 7d       	andi	r24, 0xDF	; 223
     71c:	80 83       	st	Z, r24
     71e:	0b c0       	rjmp	.+22     	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRD.Bits.Pin6 =0;
     720:	e1 e3       	ldi	r30, 0x31	; 49
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	8f 7b       	andi	r24, 0xBF	; 191
     728:	80 83       	st	Z, r24
     72a:	05 c0       	rjmp	.+10     	; 0x736 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRD.Bits.Pin7 =0;
     72c:	e1 e3       	ldi	r30, 0x31	; 49
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	8f 77       	andi	r24, 0x7F	; 127
     734:	80 83       	st	Z, r24
					break;
				}
			}
		break;
	}
}
     736:	66 96       	adiw	r28, 0x16	; 22
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	cf 91       	pop	r28
     744:	df 91       	pop	r29
     746:	08 95       	ret

00000748 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin , u8 Val)
{
     748:	df 93       	push	r29
     74a:	cf 93       	push	r28
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	66 97       	sbiw	r28, 0x16	; 22
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	8b 83       	std	Y+3, r24	; 0x03
     75e:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	86 95       	lsr	r24
     764:	86 95       	lsr	r24
     766:	86 95       	lsr	r24
     768:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	87 70       	andi	r24, 0x07	; 7
     76e:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	28 2f       	mov	r18, r24
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	3e 8b       	std	Y+22, r19	; 0x16
     778:	2d 8b       	std	Y+21, r18	; 0x15
     77a:	8d 89       	ldd	r24, Y+21	; 0x15
     77c:	9e 89       	ldd	r25, Y+22	; 0x16
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	91 05       	cpc	r25, r1
     782:	09 f4       	brne	.+2      	; 0x786 <Dio_vidSetPinVal+0x3e>
     784:	e1 c0       	rjmp	.+450    	; 0x948 <__stack+0xe9>
     786:	2d 89       	ldd	r18, Y+21	; 0x15
     788:	3e 89       	ldd	r19, Y+22	; 0x16
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 05       	cpc	r19, r1
     78e:	2c f4       	brge	.+10     	; 0x79a <Dio_vidSetPinVal+0x52>
     790:	8d 89       	ldd	r24, Y+21	; 0x15
     792:	9e 89       	ldd	r25, Y+22	; 0x16
     794:	00 97       	sbiw	r24, 0x00	; 0
     796:	71 f0       	breq	.+28     	; 0x7b4 <Dio_vidSetPinVal+0x6c>
     798:	34 c3       	rjmp	.+1640   	; 0xe02 <__stack+0x5a3>
     79a:	2d 89       	ldd	r18, Y+21	; 0x15
     79c:	3e 89       	ldd	r19, Y+22	; 0x16
     79e:	22 30       	cpi	r18, 0x02	; 2
     7a0:	31 05       	cpc	r19, r1
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <Dio_vidSetPinVal+0x5e>
     7a4:	9b c1       	rjmp	.+822    	; 0xadc <__stack+0x27d>
     7a6:	8d 89       	ldd	r24, Y+21	; 0x15
     7a8:	9e 89       	ldd	r25, Y+22	; 0x16
     7aa:	83 30       	cpi	r24, 0x03	; 3
     7ac:	91 05       	cpc	r25, r1
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <Dio_vidSetPinVal+0x6a>
     7b0:	5f c2       	rjmp	.+1214   	; 0xc70 <__stack+0x411>
     7b2:	27 c3       	rjmp	.+1614   	; 0xe02 <__stack+0x5a3>
		case 0:
			if(Val ==1)
     7b4:	8c 81       	ldd	r24, Y+4	; 0x04
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	09 f0       	breq	.+2      	; 0x7bc <Dio_vidSetPinVal+0x74>
     7ba:	63 c0       	rjmp	.+198    	; 0x882 <__stack+0x23>
				{
					switch(PinLoc)
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	28 2f       	mov	r18, r24
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	3c 8b       	std	Y+20, r19	; 0x14
     7c4:	2b 8b       	std	Y+19, r18	; 0x13
     7c6:	8b 89       	ldd	r24, Y+19	; 0x13
     7c8:	9c 89       	ldd	r25, Y+20	; 0x14
     7ca:	83 30       	cpi	r24, 0x03	; 3
     7cc:	91 05       	cpc	r25, r1
     7ce:	d9 f1       	breq	.+118    	; 0x846 <Dio_vidSetPinVal+0xfe>
     7d0:	2b 89       	ldd	r18, Y+19	; 0x13
     7d2:	3c 89       	ldd	r19, Y+20	; 0x14
     7d4:	24 30       	cpi	r18, 0x04	; 4
     7d6:	31 05       	cpc	r19, r1
     7d8:	7c f4       	brge	.+30     	; 0x7f8 <Dio_vidSetPinVal+0xb0>
     7da:	8b 89       	ldd	r24, Y+19	; 0x13
     7dc:	9c 89       	ldd	r25, Y+20	; 0x14
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	91 05       	cpc	r25, r1
     7e2:	29 f1       	breq	.+74     	; 0x82e <Dio_vidSetPinVal+0xe6>
     7e4:	2b 89       	ldd	r18, Y+19	; 0x13
     7e6:	3c 89       	ldd	r19, Y+20	; 0x14
     7e8:	22 30       	cpi	r18, 0x02	; 2
     7ea:	31 05       	cpc	r19, r1
     7ec:	34 f5       	brge	.+76     	; 0x83a <Dio_vidSetPinVal+0xf2>
     7ee:	8b 89       	ldd	r24, Y+19	; 0x13
     7f0:	9c 89       	ldd	r25, Y+20	; 0x14
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	b1 f0       	breq	.+44     	; 0x822 <Dio_vidSetPinVal+0xda>
     7f6:	05 c3       	rjmp	.+1546   	; 0xe02 <__stack+0x5a3>
     7f8:	2b 89       	ldd	r18, Y+19	; 0x13
     7fa:	3c 89       	ldd	r19, Y+20	; 0x14
     7fc:	25 30       	cpi	r18, 0x05	; 5
     7fe:	31 05       	cpc	r19, r1
     800:	71 f1       	breq	.+92     	; 0x85e <Dio_vidSetPinVal+0x116>
     802:	8b 89       	ldd	r24, Y+19	; 0x13
     804:	9c 89       	ldd	r25, Y+20	; 0x14
     806:	85 30       	cpi	r24, 0x05	; 5
     808:	91 05       	cpc	r25, r1
     80a:	1c f1       	brlt	.+70     	; 0x852 <Dio_vidSetPinVal+0x10a>
     80c:	2b 89       	ldd	r18, Y+19	; 0x13
     80e:	3c 89       	ldd	r19, Y+20	; 0x14
     810:	26 30       	cpi	r18, 0x06	; 6
     812:	31 05       	cpc	r19, r1
     814:	51 f1       	breq	.+84     	; 0x86a <__stack+0xb>
     816:	8b 89       	ldd	r24, Y+19	; 0x13
     818:	9c 89       	ldd	r25, Y+20	; 0x14
     81a:	87 30       	cpi	r24, 0x07	; 7
     81c:	91 05       	cpc	r25, r1
     81e:	59 f1       	breq	.+86     	; 0x876 <__stack+0x17>
     820:	f0 c2       	rjmp	.+1504   	; 0xe02 <__stack+0x5a3>
					{
						case 0:
							PORTA.Bits.Pin0 =1;
     822:	eb e3       	ldi	r30, 0x3B	; 59
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	81 60       	ori	r24, 0x01	; 1
     82a:	80 83       	st	Z, r24
     82c:	ea c2       	rjmp	.+1492   	; 0xe02 <__stack+0x5a3>
						break;

						case 1:
							PORTA.Bits.Pin1 =1;
     82e:	eb e3       	ldi	r30, 0x3B	; 59
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	82 60       	ori	r24, 0x02	; 2
     836:	80 83       	st	Z, r24
     838:	e4 c2       	rjmp	.+1480   	; 0xe02 <__stack+0x5a3>
						break;

						case 2:
							PORTA.Bits.Pin2 =1;
     83a:	eb e3       	ldi	r30, 0x3B	; 59
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	84 60       	ori	r24, 0x04	; 4
     842:	80 83       	st	Z, r24
     844:	de c2       	rjmp	.+1468   	; 0xe02 <__stack+0x5a3>
						break;

						case 3:
							PORTA.Bits.Pin3 =1;
     846:	eb e3       	ldi	r30, 0x3B	; 59
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	88 60       	ori	r24, 0x08	; 8
     84e:	80 83       	st	Z, r24
     850:	d8 c2       	rjmp	.+1456   	; 0xe02 <__stack+0x5a3>
						break;

						case 4:
							PORTA.Bits.Pin4 =1;
     852:	eb e3       	ldi	r30, 0x3B	; 59
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	80 61       	ori	r24, 0x10	; 16
     85a:	80 83       	st	Z, r24
     85c:	d2 c2       	rjmp	.+1444   	; 0xe02 <__stack+0x5a3>
						break;

						case 5:
							PORTA.Bits.Pin5 =1;
     85e:	eb e3       	ldi	r30, 0x3B	; 59
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	80 62       	ori	r24, 0x20	; 32
     866:	80 83       	st	Z, r24
     868:	cc c2       	rjmp	.+1432   	; 0xe02 <__stack+0x5a3>
						break;

						case 6:
							PORTA.Bits.Pin6 =1;
     86a:	eb e3       	ldi	r30, 0x3B	; 59
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	80 64       	ori	r24, 0x40	; 64
     872:	80 83       	st	Z, r24
     874:	c6 c2       	rjmp	.+1420   	; 0xe02 <__stack+0x5a3>
						break;

						case 7:
							PORTA.Bits.Pin7 =1;
     876:	eb e3       	ldi	r30, 0x3B	; 59
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	80 68       	ori	r24, 0x80	; 128
     87e:	80 83       	st	Z, r24
     880:	c0 c2       	rjmp	.+1408   	; 0xe02 <__stack+0x5a3>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	28 2f       	mov	r18, r24
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	3a 8b       	std	Y+18, r19	; 0x12
     88a:	29 8b       	std	Y+17, r18	; 0x11
     88c:	89 89       	ldd	r24, Y+17	; 0x11
     88e:	9a 89       	ldd	r25, Y+18	; 0x12
     890:	83 30       	cpi	r24, 0x03	; 3
     892:	91 05       	cpc	r25, r1
     894:	d9 f1       	breq	.+118    	; 0x90c <__stack+0xad>
     896:	29 89       	ldd	r18, Y+17	; 0x11
     898:	3a 89       	ldd	r19, Y+18	; 0x12
     89a:	24 30       	cpi	r18, 0x04	; 4
     89c:	31 05       	cpc	r19, r1
     89e:	7c f4       	brge	.+30     	; 0x8be <__stack+0x5f>
     8a0:	89 89       	ldd	r24, Y+17	; 0x11
     8a2:	9a 89       	ldd	r25, Y+18	; 0x12
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	91 05       	cpc	r25, r1
     8a8:	29 f1       	breq	.+74     	; 0x8f4 <__stack+0x95>
     8aa:	29 89       	ldd	r18, Y+17	; 0x11
     8ac:	3a 89       	ldd	r19, Y+18	; 0x12
     8ae:	22 30       	cpi	r18, 0x02	; 2
     8b0:	31 05       	cpc	r19, r1
     8b2:	34 f5       	brge	.+76     	; 0x900 <__stack+0xa1>
     8b4:	89 89       	ldd	r24, Y+17	; 0x11
     8b6:	9a 89       	ldd	r25, Y+18	; 0x12
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	a2 c2       	rjmp	.+1348   	; 0xe02 <__stack+0x5a3>
     8be:	29 89       	ldd	r18, Y+17	; 0x11
     8c0:	3a 89       	ldd	r19, Y+18	; 0x12
     8c2:	25 30       	cpi	r18, 0x05	; 5
     8c4:	31 05       	cpc	r19, r1
     8c6:	71 f1       	breq	.+92     	; 0x924 <__stack+0xc5>
     8c8:	89 89       	ldd	r24, Y+17	; 0x11
     8ca:	9a 89       	ldd	r25, Y+18	; 0x12
     8cc:	85 30       	cpi	r24, 0x05	; 5
     8ce:	91 05       	cpc	r25, r1
     8d0:	1c f1       	brlt	.+70     	; 0x918 <__stack+0xb9>
     8d2:	29 89       	ldd	r18, Y+17	; 0x11
     8d4:	3a 89       	ldd	r19, Y+18	; 0x12
     8d6:	26 30       	cpi	r18, 0x06	; 6
     8d8:	31 05       	cpc	r19, r1
     8da:	51 f1       	breq	.+84     	; 0x930 <__stack+0xd1>
     8dc:	89 89       	ldd	r24, Y+17	; 0x11
     8de:	9a 89       	ldd	r25, Y+18	; 0x12
     8e0:	87 30       	cpi	r24, 0x07	; 7
     8e2:	91 05       	cpc	r25, r1
     8e4:	59 f1       	breq	.+86     	; 0x93c <__stack+0xdd>
     8e6:	8d c2       	rjmp	.+1306   	; 0xe02 <__stack+0x5a3>
				{
					case 0:
						PORTA.Bits.Pin0 =0;
     8e8:	eb e3       	ldi	r30, 0x3B	; 59
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	8e 7f       	andi	r24, 0xFE	; 254
     8f0:	80 83       	st	Z, r24
     8f2:	87 c2       	rjmp	.+1294   	; 0xe02 <__stack+0x5a3>
					break;

					case 1:
						PORTA.Bits.Pin1 =0;
     8f4:	eb e3       	ldi	r30, 0x3B	; 59
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	8d 7f       	andi	r24, 0xFD	; 253
     8fc:	80 83       	st	Z, r24
     8fe:	81 c2       	rjmp	.+1282   	; 0xe02 <__stack+0x5a3>
					break;

					case 2:
						PORTA.Bits.Pin2 =0;
     900:	eb e3       	ldi	r30, 0x3B	; 59
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	8b 7f       	andi	r24, 0xFB	; 251
     908:	80 83       	st	Z, r24
     90a:	7b c2       	rjmp	.+1270   	; 0xe02 <__stack+0x5a3>
					break;

					case 3:
						PORTA.Bits.Pin3 =0;
     90c:	eb e3       	ldi	r30, 0x3B	; 59
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	87 7f       	andi	r24, 0xF7	; 247
     914:	80 83       	st	Z, r24
     916:	75 c2       	rjmp	.+1258   	; 0xe02 <__stack+0x5a3>
					break;

					case 4:
						PORTA.Bits.Pin4 =0;
     918:	eb e3       	ldi	r30, 0x3B	; 59
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8f 7e       	andi	r24, 0xEF	; 239
     920:	80 83       	st	Z, r24
     922:	6f c2       	rjmp	.+1246   	; 0xe02 <__stack+0x5a3>
					break;

					case 5:
						PORTA.Bits.Pin5 =0;
     924:	eb e3       	ldi	r30, 0x3B	; 59
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	8f 7d       	andi	r24, 0xDF	; 223
     92c:	80 83       	st	Z, r24
     92e:	69 c2       	rjmp	.+1234   	; 0xe02 <__stack+0x5a3>
					break;

					case 6:
						PORTA.Bits.Pin6 =0;
     930:	eb e3       	ldi	r30, 0x3B	; 59
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8f 7b       	andi	r24, 0xBF	; 191
     938:	80 83       	st	Z, r24
     93a:	63 c2       	rjmp	.+1222   	; 0xe02 <__stack+0x5a3>
					break;

					case 7:
						PORTA.Bits.Pin7 =0;
     93c:	eb e3       	ldi	r30, 0x3B	; 59
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	8f 77       	andi	r24, 0x7F	; 127
     944:	80 83       	st	Z, r24
     946:	5d c2       	rjmp	.+1210   	; 0xe02 <__stack+0x5a3>
				}
			}
		break;

		case 1:
			if(Val ==1)
     948:	8c 81       	ldd	r24, Y+4	; 0x04
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0xf1>
     94e:	63 c0       	rjmp	.+198    	; 0xa16 <__stack+0x1b7>
				{
					switch(PinLoc)
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	28 2f       	mov	r18, r24
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	38 8b       	std	Y+16, r19	; 0x10
     958:	2f 87       	std	Y+15, r18	; 0x0f
     95a:	8f 85       	ldd	r24, Y+15	; 0x0f
     95c:	98 89       	ldd	r25, Y+16	; 0x10
     95e:	83 30       	cpi	r24, 0x03	; 3
     960:	91 05       	cpc	r25, r1
     962:	d9 f1       	breq	.+118    	; 0x9da <__stack+0x17b>
     964:	2f 85       	ldd	r18, Y+15	; 0x0f
     966:	38 89       	ldd	r19, Y+16	; 0x10
     968:	24 30       	cpi	r18, 0x04	; 4
     96a:	31 05       	cpc	r19, r1
     96c:	7c f4       	brge	.+30     	; 0x98c <__stack+0x12d>
     96e:	8f 85       	ldd	r24, Y+15	; 0x0f
     970:	98 89       	ldd	r25, Y+16	; 0x10
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	91 05       	cpc	r25, r1
     976:	29 f1       	breq	.+74     	; 0x9c2 <__stack+0x163>
     978:	2f 85       	ldd	r18, Y+15	; 0x0f
     97a:	38 89       	ldd	r19, Y+16	; 0x10
     97c:	22 30       	cpi	r18, 0x02	; 2
     97e:	31 05       	cpc	r19, r1
     980:	34 f5       	brge	.+76     	; 0x9ce <__stack+0x16f>
     982:	8f 85       	ldd	r24, Y+15	; 0x0f
     984:	98 89       	ldd	r25, Y+16	; 0x10
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	b1 f0       	breq	.+44     	; 0x9b6 <__stack+0x157>
     98a:	3b c2       	rjmp	.+1142   	; 0xe02 <__stack+0x5a3>
     98c:	2f 85       	ldd	r18, Y+15	; 0x0f
     98e:	38 89       	ldd	r19, Y+16	; 0x10
     990:	25 30       	cpi	r18, 0x05	; 5
     992:	31 05       	cpc	r19, r1
     994:	71 f1       	breq	.+92     	; 0x9f2 <__stack+0x193>
     996:	8f 85       	ldd	r24, Y+15	; 0x0f
     998:	98 89       	ldd	r25, Y+16	; 0x10
     99a:	85 30       	cpi	r24, 0x05	; 5
     99c:	91 05       	cpc	r25, r1
     99e:	1c f1       	brlt	.+70     	; 0x9e6 <__stack+0x187>
     9a0:	2f 85       	ldd	r18, Y+15	; 0x0f
     9a2:	38 89       	ldd	r19, Y+16	; 0x10
     9a4:	26 30       	cpi	r18, 0x06	; 6
     9a6:	31 05       	cpc	r19, r1
     9a8:	51 f1       	breq	.+84     	; 0x9fe <__stack+0x19f>
     9aa:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ac:	98 89       	ldd	r25, Y+16	; 0x10
     9ae:	87 30       	cpi	r24, 0x07	; 7
     9b0:	91 05       	cpc	r25, r1
     9b2:	59 f1       	breq	.+86     	; 0xa0a <__stack+0x1ab>
     9b4:	26 c2       	rjmp	.+1100   	; 0xe02 <__stack+0x5a3>
					{
						case 0:
							PORTB.Bits.Pin0 =1;
     9b6:	e8 e3       	ldi	r30, 0x38	; 56
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	81 60       	ori	r24, 0x01	; 1
     9be:	80 83       	st	Z, r24
     9c0:	20 c2       	rjmp	.+1088   	; 0xe02 <__stack+0x5a3>
						break;

						case 1:
							PORTB.Bits.Pin1 =1;
     9c2:	e8 e3       	ldi	r30, 0x38	; 56
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	80 83       	st	Z, r24
     9cc:	1a c2       	rjmp	.+1076   	; 0xe02 <__stack+0x5a3>
						break;

						case 2:
							PORTB.Bits.Pin2 =1;
     9ce:	e8 e3       	ldi	r30, 0x38	; 56
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	84 60       	ori	r24, 0x04	; 4
     9d6:	80 83       	st	Z, r24
     9d8:	14 c2       	rjmp	.+1064   	; 0xe02 <__stack+0x5a3>
						break;

						case 3:
							PORTB.Bits.Pin3 =1;
     9da:	e8 e3       	ldi	r30, 0x38	; 56
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	88 60       	ori	r24, 0x08	; 8
     9e2:	80 83       	st	Z, r24
     9e4:	0e c2       	rjmp	.+1052   	; 0xe02 <__stack+0x5a3>
						break;

						case 4:
							PORTB.Bits.Pin4 =1;
     9e6:	e8 e3       	ldi	r30, 0x38	; 56
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	80 61       	ori	r24, 0x10	; 16
     9ee:	80 83       	st	Z, r24
     9f0:	08 c2       	rjmp	.+1040   	; 0xe02 <__stack+0x5a3>
						break;

						case 5:
							PORTB.Bits.Pin5 =1;
     9f2:	e8 e3       	ldi	r30, 0x38	; 56
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	80 62       	ori	r24, 0x20	; 32
     9fa:	80 83       	st	Z, r24
     9fc:	02 c2       	rjmp	.+1028   	; 0xe02 <__stack+0x5a3>
						break;

						case 6:
							PORTB.Bits.Pin6 =1;
     9fe:	e8 e3       	ldi	r30, 0x38	; 56
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	80 64       	ori	r24, 0x40	; 64
     a06:	80 83       	st	Z, r24
     a08:	fc c1       	rjmp	.+1016   	; 0xe02 <__stack+0x5a3>
						break;

						case 7:
							PORTB.Bits.Pin7 =1;
     a0a:	e8 e3       	ldi	r30, 0x38	; 56
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	80 68       	ori	r24, 0x80	; 128
     a12:	80 83       	st	Z, r24
     a14:	f6 c1       	rjmp	.+1004   	; 0xe02 <__stack+0x5a3>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	28 2f       	mov	r18, r24
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	3e 87       	std	Y+14, r19	; 0x0e
     a1e:	2d 87       	std	Y+13, r18	; 0x0d
     a20:	8d 85       	ldd	r24, Y+13	; 0x0d
     a22:	9e 85       	ldd	r25, Y+14	; 0x0e
     a24:	83 30       	cpi	r24, 0x03	; 3
     a26:	91 05       	cpc	r25, r1
     a28:	d9 f1       	breq	.+118    	; 0xaa0 <__stack+0x241>
     a2a:	2d 85       	ldd	r18, Y+13	; 0x0d
     a2c:	3e 85       	ldd	r19, Y+14	; 0x0e
     a2e:	24 30       	cpi	r18, 0x04	; 4
     a30:	31 05       	cpc	r19, r1
     a32:	7c f4       	brge	.+30     	; 0xa52 <__stack+0x1f3>
     a34:	8d 85       	ldd	r24, Y+13	; 0x0d
     a36:	9e 85       	ldd	r25, Y+14	; 0x0e
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	91 05       	cpc	r25, r1
     a3c:	29 f1       	breq	.+74     	; 0xa88 <__stack+0x229>
     a3e:	2d 85       	ldd	r18, Y+13	; 0x0d
     a40:	3e 85       	ldd	r19, Y+14	; 0x0e
     a42:	22 30       	cpi	r18, 0x02	; 2
     a44:	31 05       	cpc	r19, r1
     a46:	34 f5       	brge	.+76     	; 0xa94 <__stack+0x235>
     a48:	8d 85       	ldd	r24, Y+13	; 0x0d
     a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a4c:	00 97       	sbiw	r24, 0x00	; 0
     a4e:	b1 f0       	breq	.+44     	; 0xa7c <__stack+0x21d>
     a50:	d8 c1       	rjmp	.+944    	; 0xe02 <__stack+0x5a3>
     a52:	2d 85       	ldd	r18, Y+13	; 0x0d
     a54:	3e 85       	ldd	r19, Y+14	; 0x0e
     a56:	25 30       	cpi	r18, 0x05	; 5
     a58:	31 05       	cpc	r19, r1
     a5a:	71 f1       	breq	.+92     	; 0xab8 <__stack+0x259>
     a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a60:	85 30       	cpi	r24, 0x05	; 5
     a62:	91 05       	cpc	r25, r1
     a64:	1c f1       	brlt	.+70     	; 0xaac <__stack+0x24d>
     a66:	2d 85       	ldd	r18, Y+13	; 0x0d
     a68:	3e 85       	ldd	r19, Y+14	; 0x0e
     a6a:	26 30       	cpi	r18, 0x06	; 6
     a6c:	31 05       	cpc	r19, r1
     a6e:	51 f1       	breq	.+84     	; 0xac4 <__stack+0x265>
     a70:	8d 85       	ldd	r24, Y+13	; 0x0d
     a72:	9e 85       	ldd	r25, Y+14	; 0x0e
     a74:	87 30       	cpi	r24, 0x07	; 7
     a76:	91 05       	cpc	r25, r1
     a78:	59 f1       	breq	.+86     	; 0xad0 <__stack+0x271>
     a7a:	c3 c1       	rjmp	.+902    	; 0xe02 <__stack+0x5a3>
				{
					case 0:
						PORTB.Bits.Pin0 =0;
     a7c:	e8 e3       	ldi	r30, 0x38	; 56
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8e 7f       	andi	r24, 0xFE	; 254
     a84:	80 83       	st	Z, r24
     a86:	bd c1       	rjmp	.+890    	; 0xe02 <__stack+0x5a3>
					break;

					case 1:
						PORTB.Bits.Pin1 =0;
     a88:	e8 e3       	ldi	r30, 0x38	; 56
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	80 81       	ld	r24, Z
     a8e:	8d 7f       	andi	r24, 0xFD	; 253
     a90:	80 83       	st	Z, r24
     a92:	b7 c1       	rjmp	.+878    	; 0xe02 <__stack+0x5a3>
					break;

					case 2:
						PORTB.Bits.Pin2 =0;
     a94:	e8 e3       	ldi	r30, 0x38	; 56
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	8b 7f       	andi	r24, 0xFB	; 251
     a9c:	80 83       	st	Z, r24
     a9e:	b1 c1       	rjmp	.+866    	; 0xe02 <__stack+0x5a3>
					break;

					case 3:
						PORTB.Bits.Pin3 =0;
     aa0:	e8 e3       	ldi	r30, 0x38	; 56
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	87 7f       	andi	r24, 0xF7	; 247
     aa8:	80 83       	st	Z, r24
     aaa:	ab c1       	rjmp	.+854    	; 0xe02 <__stack+0x5a3>
					break;

					case 4:
						PORTB.Bits.Pin4 =0;
     aac:	e8 e3       	ldi	r30, 0x38	; 56
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	8f 7e       	andi	r24, 0xEF	; 239
     ab4:	80 83       	st	Z, r24
     ab6:	a5 c1       	rjmp	.+842    	; 0xe02 <__stack+0x5a3>
					break;

					case 5:
						PORTB.Bits.Pin5 =0;
     ab8:	e8 e3       	ldi	r30, 0x38	; 56
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	8f 7d       	andi	r24, 0xDF	; 223
     ac0:	80 83       	st	Z, r24
     ac2:	9f c1       	rjmp	.+830    	; 0xe02 <__stack+0x5a3>
					break;

					case 6:
						PORTB.Bits.Pin6 =0;
     ac4:	e8 e3       	ldi	r30, 0x38	; 56
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	8f 7b       	andi	r24, 0xBF	; 191
     acc:	80 83       	st	Z, r24
     ace:	99 c1       	rjmp	.+818    	; 0xe02 <__stack+0x5a3>
					break;

					case 7:
						PORTB.Bits.Pin7 =0;
     ad0:	e8 e3       	ldi	r30, 0x38	; 56
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	8f 77       	andi	r24, 0x7F	; 127
     ad8:	80 83       	st	Z, r24
     ada:	93 c1       	rjmp	.+806    	; 0xe02 <__stack+0x5a3>
				}
			}
			break;

		case 2:
			if(Val ==1)
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <__stack+0x285>
     ae2:	63 c0       	rjmp	.+198    	; 0xbaa <__stack+0x34b>
				{
					switch(PinLoc)
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	28 2f       	mov	r18, r24
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	3c 87       	std	Y+12, r19	; 0x0c
     aec:	2b 87       	std	Y+11, r18	; 0x0b
     aee:	8b 85       	ldd	r24, Y+11	; 0x0b
     af0:	9c 85       	ldd	r25, Y+12	; 0x0c
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	91 05       	cpc	r25, r1
     af6:	d9 f1       	breq	.+118    	; 0xb6e <__stack+0x30f>
     af8:	2b 85       	ldd	r18, Y+11	; 0x0b
     afa:	3c 85       	ldd	r19, Y+12	; 0x0c
     afc:	24 30       	cpi	r18, 0x04	; 4
     afe:	31 05       	cpc	r19, r1
     b00:	7c f4       	brge	.+30     	; 0xb20 <__stack+0x2c1>
     b02:	8b 85       	ldd	r24, Y+11	; 0x0b
     b04:	9c 85       	ldd	r25, Y+12	; 0x0c
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	91 05       	cpc	r25, r1
     b0a:	29 f1       	breq	.+74     	; 0xb56 <__stack+0x2f7>
     b0c:	2b 85       	ldd	r18, Y+11	; 0x0b
     b0e:	3c 85       	ldd	r19, Y+12	; 0x0c
     b10:	22 30       	cpi	r18, 0x02	; 2
     b12:	31 05       	cpc	r19, r1
     b14:	34 f5       	brge	.+76     	; 0xb62 <__stack+0x303>
     b16:	8b 85       	ldd	r24, Y+11	; 0x0b
     b18:	9c 85       	ldd	r25, Y+12	; 0x0c
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	b1 f0       	breq	.+44     	; 0xb4a <__stack+0x2eb>
     b1e:	71 c1       	rjmp	.+738    	; 0xe02 <__stack+0x5a3>
     b20:	2b 85       	ldd	r18, Y+11	; 0x0b
     b22:	3c 85       	ldd	r19, Y+12	; 0x0c
     b24:	25 30       	cpi	r18, 0x05	; 5
     b26:	31 05       	cpc	r19, r1
     b28:	71 f1       	breq	.+92     	; 0xb86 <__stack+0x327>
     b2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b2e:	85 30       	cpi	r24, 0x05	; 5
     b30:	91 05       	cpc	r25, r1
     b32:	1c f1       	brlt	.+70     	; 0xb7a <__stack+0x31b>
     b34:	2b 85       	ldd	r18, Y+11	; 0x0b
     b36:	3c 85       	ldd	r19, Y+12	; 0x0c
     b38:	26 30       	cpi	r18, 0x06	; 6
     b3a:	31 05       	cpc	r19, r1
     b3c:	51 f1       	breq	.+84     	; 0xb92 <__stack+0x333>
     b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     b40:	9c 85       	ldd	r25, Y+12	; 0x0c
     b42:	87 30       	cpi	r24, 0x07	; 7
     b44:	91 05       	cpc	r25, r1
     b46:	59 f1       	breq	.+86     	; 0xb9e <__stack+0x33f>
     b48:	5c c1       	rjmp	.+696    	; 0xe02 <__stack+0x5a3>
					{
						case 0:
							PORTC.Bits.Pin0 =1;
     b4a:	e5 e3       	ldi	r30, 0x35	; 53
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	81 60       	ori	r24, 0x01	; 1
     b52:	80 83       	st	Z, r24
     b54:	56 c1       	rjmp	.+684    	; 0xe02 <__stack+0x5a3>
						break;

						case 1:
							PORTC.Bits.Pin1 =1;
     b56:	e5 e3       	ldi	r30, 0x35	; 53
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	82 60       	ori	r24, 0x02	; 2
     b5e:	80 83       	st	Z, r24
     b60:	50 c1       	rjmp	.+672    	; 0xe02 <__stack+0x5a3>
						break;

						case 2:
							PORTC.Bits.Pin2 =1;
     b62:	e5 e3       	ldi	r30, 0x35	; 53
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	84 60       	ori	r24, 0x04	; 4
     b6a:	80 83       	st	Z, r24
     b6c:	4a c1       	rjmp	.+660    	; 0xe02 <__stack+0x5a3>
						break;

						case 3:
							PORTC.Bits.Pin3 =1;
     b6e:	e5 e3       	ldi	r30, 0x35	; 53
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	80 83       	st	Z, r24
     b78:	44 c1       	rjmp	.+648    	; 0xe02 <__stack+0x5a3>
						break;

						case 4:
							PORTC.Bits.Pin4 =1;
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 61       	ori	r24, 0x10	; 16
     b82:	80 83       	st	Z, r24
     b84:	3e c1       	rjmp	.+636    	; 0xe02 <__stack+0x5a3>
						break;

						case 5:
							PORTC.Bits.Pin5 =1;
     b86:	e5 e3       	ldi	r30, 0x35	; 53
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	80 83       	st	Z, r24
     b90:	38 c1       	rjmp	.+624    	; 0xe02 <__stack+0x5a3>
						break;

						case 6:
							PORTC.Bits.Pin6 =1;
     b92:	e5 e3       	ldi	r30, 0x35	; 53
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	80 64       	ori	r24, 0x40	; 64
     b9a:	80 83       	st	Z, r24
     b9c:	32 c1       	rjmp	.+612    	; 0xe02 <__stack+0x5a3>
						break;

						case 7:
							PORTC.Bits.Pin7 =1;
     b9e:	e5 e3       	ldi	r30, 0x35	; 53
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	80 83       	st	Z, r24
     ba8:	2c c1       	rjmp	.+600    	; 0xe02 <__stack+0x5a3>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	3a 87       	std	Y+10, r19	; 0x0a
     bb2:	29 87       	std	Y+9, r18	; 0x09
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	83 30       	cpi	r24, 0x03	; 3
     bba:	91 05       	cpc	r25, r1
     bbc:	d9 f1       	breq	.+118    	; 0xc34 <__stack+0x3d5>
     bbe:	29 85       	ldd	r18, Y+9	; 0x09
     bc0:	3a 85       	ldd	r19, Y+10	; 0x0a
     bc2:	24 30       	cpi	r18, 0x04	; 4
     bc4:	31 05       	cpc	r19, r1
     bc6:	7c f4       	brge	.+30     	; 0xbe6 <__stack+0x387>
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	91 05       	cpc	r25, r1
     bd0:	29 f1       	breq	.+74     	; 0xc1c <__stack+0x3bd>
     bd2:	29 85       	ldd	r18, Y+9	; 0x09
     bd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	34 f5       	brge	.+76     	; 0xc28 <__stack+0x3c9>
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	b1 f0       	breq	.+44     	; 0xc10 <__stack+0x3b1>
     be4:	0e c1       	rjmp	.+540    	; 0xe02 <__stack+0x5a3>
     be6:	29 85       	ldd	r18, Y+9	; 0x09
     be8:	3a 85       	ldd	r19, Y+10	; 0x0a
     bea:	25 30       	cpi	r18, 0x05	; 5
     bec:	31 05       	cpc	r19, r1
     bee:	71 f1       	breq	.+92     	; 0xc4c <__stack+0x3ed>
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	85 30       	cpi	r24, 0x05	; 5
     bf6:	91 05       	cpc	r25, r1
     bf8:	1c f1       	brlt	.+70     	; 0xc40 <__stack+0x3e1>
     bfa:	29 85       	ldd	r18, Y+9	; 0x09
     bfc:	3a 85       	ldd	r19, Y+10	; 0x0a
     bfe:	26 30       	cpi	r18, 0x06	; 6
     c00:	31 05       	cpc	r19, r1
     c02:	51 f1       	breq	.+84     	; 0xc58 <__stack+0x3f9>
     c04:	89 85       	ldd	r24, Y+9	; 0x09
     c06:	9a 85       	ldd	r25, Y+10	; 0x0a
     c08:	87 30       	cpi	r24, 0x07	; 7
     c0a:	91 05       	cpc	r25, r1
     c0c:	59 f1       	breq	.+86     	; 0xc64 <__stack+0x405>
     c0e:	f9 c0       	rjmp	.+498    	; 0xe02 <__stack+0x5a3>
				{
					case 0:
						PORTC.Bits.Pin0 =0;
     c10:	e5 e3       	ldi	r30, 0x35	; 53
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8e 7f       	andi	r24, 0xFE	; 254
     c18:	80 83       	st	Z, r24
     c1a:	f3 c0       	rjmp	.+486    	; 0xe02 <__stack+0x5a3>
					break;

					case 1:
						PORTC.Bits.Pin1 =0;
     c1c:	e5 e3       	ldi	r30, 0x35	; 53
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8d 7f       	andi	r24, 0xFD	; 253
     c24:	80 83       	st	Z, r24
     c26:	ed c0       	rjmp	.+474    	; 0xe02 <__stack+0x5a3>
					break;

					case 2:
						PORTC.Bits.Pin2 =0;
     c28:	e5 e3       	ldi	r30, 0x35	; 53
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	8b 7f       	andi	r24, 0xFB	; 251
     c30:	80 83       	st	Z, r24
     c32:	e7 c0       	rjmp	.+462    	; 0xe02 <__stack+0x5a3>
					break;

					case 3:
						PORTC.Bits.Pin3 =0;
     c34:	e5 e3       	ldi	r30, 0x35	; 53
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	87 7f       	andi	r24, 0xF7	; 247
     c3c:	80 83       	st	Z, r24
     c3e:	e1 c0       	rjmp	.+450    	; 0xe02 <__stack+0x5a3>
					break;

					case 4:
						PORTC.Bits.Pin4 =0;
     c40:	e5 e3       	ldi	r30, 0x35	; 53
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8f 7e       	andi	r24, 0xEF	; 239
     c48:	80 83       	st	Z, r24
     c4a:	db c0       	rjmp	.+438    	; 0xe02 <__stack+0x5a3>
					break;

					case 5:
						PORTC.Bits.Pin5 =0;
     c4c:	e5 e3       	ldi	r30, 0x35	; 53
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8f 7d       	andi	r24, 0xDF	; 223
     c54:	80 83       	st	Z, r24
     c56:	d5 c0       	rjmp	.+426    	; 0xe02 <__stack+0x5a3>
					break;

					case 6:
						PORTC.Bits.Pin6 =0;
     c58:	e5 e3       	ldi	r30, 0x35	; 53
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8f 7b       	andi	r24, 0xBF	; 191
     c60:	80 83       	st	Z, r24
     c62:	cf c0       	rjmp	.+414    	; 0xe02 <__stack+0x5a3>
					break;

					case 7:
						PORTC.Bits.Pin7 =0;
     c64:	e5 e3       	ldi	r30, 0x35	; 53
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8f 77       	andi	r24, 0x7F	; 127
     c6c:	80 83       	st	Z, r24
     c6e:	c9 c0       	rjmp	.+402    	; 0xe02 <__stack+0x5a3>
			}
		break;


		case 3:
			if(Val ==1)
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	09 f0       	breq	.+2      	; 0xc78 <__stack+0x419>
     c76:	63 c0       	rjmp	.+198    	; 0xd3e <__stack+0x4df>
				{
					switch(PinLoc)
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	38 87       	std	Y+8, r19	; 0x08
     c80:	2f 83       	std	Y+7, r18	; 0x07
     c82:	8f 81       	ldd	r24, Y+7	; 0x07
     c84:	98 85       	ldd	r25, Y+8	; 0x08
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	91 05       	cpc	r25, r1
     c8a:	d9 f1       	breq	.+118    	; 0xd02 <__stack+0x4a3>
     c8c:	2f 81       	ldd	r18, Y+7	; 0x07
     c8e:	38 85       	ldd	r19, Y+8	; 0x08
     c90:	24 30       	cpi	r18, 0x04	; 4
     c92:	31 05       	cpc	r19, r1
     c94:	7c f4       	brge	.+30     	; 0xcb4 <__stack+0x455>
     c96:	8f 81       	ldd	r24, Y+7	; 0x07
     c98:	98 85       	ldd	r25, Y+8	; 0x08
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	91 05       	cpc	r25, r1
     c9e:	29 f1       	breq	.+74     	; 0xcea <__stack+0x48b>
     ca0:	2f 81       	ldd	r18, Y+7	; 0x07
     ca2:	38 85       	ldd	r19, Y+8	; 0x08
     ca4:	22 30       	cpi	r18, 0x02	; 2
     ca6:	31 05       	cpc	r19, r1
     ca8:	34 f5       	brge	.+76     	; 0xcf6 <__stack+0x497>
     caa:	8f 81       	ldd	r24, Y+7	; 0x07
     cac:	98 85       	ldd	r25, Y+8	; 0x08
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	b1 f0       	breq	.+44     	; 0xcde <__stack+0x47f>
     cb2:	a7 c0       	rjmp	.+334    	; 0xe02 <__stack+0x5a3>
     cb4:	2f 81       	ldd	r18, Y+7	; 0x07
     cb6:	38 85       	ldd	r19, Y+8	; 0x08
     cb8:	25 30       	cpi	r18, 0x05	; 5
     cba:	31 05       	cpc	r19, r1
     cbc:	71 f1       	breq	.+92     	; 0xd1a <__stack+0x4bb>
     cbe:	8f 81       	ldd	r24, Y+7	; 0x07
     cc0:	98 85       	ldd	r25, Y+8	; 0x08
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	91 05       	cpc	r25, r1
     cc6:	1c f1       	brlt	.+70     	; 0xd0e <__stack+0x4af>
     cc8:	2f 81       	ldd	r18, Y+7	; 0x07
     cca:	38 85       	ldd	r19, Y+8	; 0x08
     ccc:	26 30       	cpi	r18, 0x06	; 6
     cce:	31 05       	cpc	r19, r1
     cd0:	51 f1       	breq	.+84     	; 0xd26 <__stack+0x4c7>
     cd2:	8f 81       	ldd	r24, Y+7	; 0x07
     cd4:	98 85       	ldd	r25, Y+8	; 0x08
     cd6:	87 30       	cpi	r24, 0x07	; 7
     cd8:	91 05       	cpc	r25, r1
     cda:	59 f1       	breq	.+86     	; 0xd32 <__stack+0x4d3>
     cdc:	92 c0       	rjmp	.+292    	; 0xe02 <__stack+0x5a3>
					{
						case 0:
							PORTD.Bits.Pin0 =1;
     cde:	e2 e3       	ldi	r30, 0x32	; 50
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24
     ce8:	8c c0       	rjmp	.+280    	; 0xe02 <__stack+0x5a3>
						break;

						case 1:
							PORTD.Bits.Pin1 =1;
     cea:	e2 e3       	ldi	r30, 0x32	; 50
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	82 60       	ori	r24, 0x02	; 2
     cf2:	80 83       	st	Z, r24
     cf4:	86 c0       	rjmp	.+268    	; 0xe02 <__stack+0x5a3>
						break;

						case 2:
							PORTD.Bits.Pin2 =1;
     cf6:	e2 e3       	ldi	r30, 0x32	; 50
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	80 83       	st	Z, r24
     d00:	80 c0       	rjmp	.+256    	; 0xe02 <__stack+0x5a3>
						break;

						case 3:
							PORTD.Bits.Pin3 =1;
     d02:	e2 e3       	ldi	r30, 0x32	; 50
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	88 60       	ori	r24, 0x08	; 8
     d0a:	80 83       	st	Z, r24
     d0c:	7a c0       	rjmp	.+244    	; 0xe02 <__stack+0x5a3>
						break;

						case 4:
							PORTD.Bits.Pin4 =1;
     d0e:	e2 e3       	ldi	r30, 0x32	; 50
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 61       	ori	r24, 0x10	; 16
     d16:	80 83       	st	Z, r24
     d18:	74 c0       	rjmp	.+232    	; 0xe02 <__stack+0x5a3>
						break;

						case 5:
							PORTD.Bits.Pin5 =1;
     d1a:	e2 e3       	ldi	r30, 0x32	; 50
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 62       	ori	r24, 0x20	; 32
     d22:	80 83       	st	Z, r24
     d24:	6e c0       	rjmp	.+220    	; 0xe02 <__stack+0x5a3>
						break;

						case 6:
							PORTD.Bits.Pin6 =1;
     d26:	e2 e3       	ldi	r30, 0x32	; 50
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 64       	ori	r24, 0x40	; 64
     d2e:	80 83       	st	Z, r24
     d30:	68 c0       	rjmp	.+208    	; 0xe02 <__stack+0x5a3>
						break;

						case 7:
							PORTD.Bits.Pin7 =1;
     d32:	e2 e3       	ldi	r30, 0x32	; 50
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	80 83       	st	Z, r24
     d3c:	62 c0       	rjmp	.+196    	; 0xe02 <__stack+0x5a3>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3e 83       	std	Y+6, r19	; 0x06
     d46:	2d 83       	std	Y+5, r18	; 0x05
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	91 05       	cpc	r25, r1
     d50:	d9 f1       	breq	.+118    	; 0xdc8 <__stack+0x569>
     d52:	2d 81       	ldd	r18, Y+5	; 0x05
     d54:	3e 81       	ldd	r19, Y+6	; 0x06
     d56:	24 30       	cpi	r18, 0x04	; 4
     d58:	31 05       	cpc	r19, r1
     d5a:	7c f4       	brge	.+30     	; 0xd7a <__stack+0x51b>
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	91 05       	cpc	r25, r1
     d64:	29 f1       	breq	.+74     	; 0xdb0 <__stack+0x551>
     d66:	2d 81       	ldd	r18, Y+5	; 0x05
     d68:	3e 81       	ldd	r19, Y+6	; 0x06
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	31 05       	cpc	r19, r1
     d6e:	34 f5       	brge	.+76     	; 0xdbc <__stack+0x55d>
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	b1 f0       	breq	.+44     	; 0xda4 <__stack+0x545>
     d78:	44 c0       	rjmp	.+136    	; 0xe02 <__stack+0x5a3>
     d7a:	2d 81       	ldd	r18, Y+5	; 0x05
     d7c:	3e 81       	ldd	r19, Y+6	; 0x06
     d7e:	25 30       	cpi	r18, 0x05	; 5
     d80:	31 05       	cpc	r19, r1
     d82:	71 f1       	breq	.+92     	; 0xde0 <__stack+0x581>
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	85 30       	cpi	r24, 0x05	; 5
     d8a:	91 05       	cpc	r25, r1
     d8c:	1c f1       	brlt	.+70     	; 0xdd4 <__stack+0x575>
     d8e:	2d 81       	ldd	r18, Y+5	; 0x05
     d90:	3e 81       	ldd	r19, Y+6	; 0x06
     d92:	26 30       	cpi	r18, 0x06	; 6
     d94:	31 05       	cpc	r19, r1
     d96:	51 f1       	breq	.+84     	; 0xdec <__stack+0x58d>
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	87 30       	cpi	r24, 0x07	; 7
     d9e:	91 05       	cpc	r25, r1
     da0:	59 f1       	breq	.+86     	; 0xdf8 <__stack+0x599>
     da2:	2f c0       	rjmp	.+94     	; 0xe02 <__stack+0x5a3>
				{
					case 0:
						PORTD.Bits.Pin0 =0;
     da4:	e2 e3       	ldi	r30, 0x32	; 50
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	8e 7f       	andi	r24, 0xFE	; 254
     dac:	80 83       	st	Z, r24
     dae:	29 c0       	rjmp	.+82     	; 0xe02 <__stack+0x5a3>
					break;

					case 1:
						PORTD.Bits.Pin1 =0;
     db0:	e2 e3       	ldi	r30, 0x32	; 50
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8d 7f       	andi	r24, 0xFD	; 253
     db8:	80 83       	st	Z, r24
     dba:	23 c0       	rjmp	.+70     	; 0xe02 <__stack+0x5a3>
					break;

					case 2:
						PORTD.Bits.Pin2 =0;
     dbc:	e2 e3       	ldi	r30, 0x32	; 50
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8b 7f       	andi	r24, 0xFB	; 251
     dc4:	80 83       	st	Z, r24
     dc6:	1d c0       	rjmp	.+58     	; 0xe02 <__stack+0x5a3>
					break;

					case 3:
						PORTD.Bits.Pin3 =0;
     dc8:	e2 e3       	ldi	r30, 0x32	; 50
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	87 7f       	andi	r24, 0xF7	; 247
     dd0:	80 83       	st	Z, r24
     dd2:	17 c0       	rjmp	.+46     	; 0xe02 <__stack+0x5a3>
					break;

					case 4:
						PORTD.Bits.Pin4 =0;
     dd4:	e2 e3       	ldi	r30, 0x32	; 50
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8f 7e       	andi	r24, 0xEF	; 239
     ddc:	80 83       	st	Z, r24
     dde:	11 c0       	rjmp	.+34     	; 0xe02 <__stack+0x5a3>
					break;

					case 5:
						PORTD.Bits.Pin5 =0;
     de0:	e2 e3       	ldi	r30, 0x32	; 50
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 7d       	andi	r24, 0xDF	; 223
     de8:	80 83       	st	Z, r24
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <__stack+0x5a3>
					break;

					case 6:
						PORTD.Bits.Pin6 =0;
     dec:	e2 e3       	ldi	r30, 0x32	; 50
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8f 7b       	andi	r24, 0xBF	; 191
     df4:	80 83       	st	Z, r24
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <__stack+0x5a3>
					break;

					case 7:
						PORTD.Bits.Pin7 =0;
     df8:	e2 e3       	ldi	r30, 0x32	; 50
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 77       	andi	r24, 0x7F	; 127
     e00:	80 83       	st	Z, r24
					break;
				}
			}
		break;
	}
}
     e02:	66 96       	adiw	r28, 0x16	; 22
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <Lcd_vidSendCommand>:
u8  arr_State[MAXIMUM_ELEMENT_IN_QUEUE] ;
u8 Queue_Write_Counter = 0;
u8 Queue_Read_Counter  = 0;

void Lcd_vidSendCommand(u8 Cmd)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	89 83       	std	Y+1, r24	; 0x01
	//Start to change in LCD control Reg to indicate it that you will receive command
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8LOW);  //make RS->0 to indicate LCD "you will receive command not data"
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);  //make RW->0 to indicate LCD "you will write in command Register"
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH); //make EN->1 to indicate LCD "Please LCD don't save any thing in your buffer until be sure all data sent "
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>

	//Make Data Ready To Sent
	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Cmd,0));
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	98 2f       	mov	r25, r24
     e3c:	91 70       	andi	r25, 0x01	; 1
     e3e:	88 e1       	ldi	r24, 0x18	; 24
     e40:	69 2f       	mov	r22, r25
     e42:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Cmd,1));
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	86 95       	lsr	r24
     e4a:	98 2f       	mov	r25, r24
     e4c:	91 70       	andi	r25, 0x01	; 1
     e4e:	89 e1       	ldi	r24, 0x19	; 25
     e50:	69 2f       	mov	r22, r25
     e52:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Cmd,2));
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	86 95       	lsr	r24
     e5a:	86 95       	lsr	r24
     e5c:	98 2f       	mov	r25, r24
     e5e:	91 70       	andi	r25, 0x01	; 1
     e60:	8a e1       	ldi	r24, 0x1A	; 26
     e62:	69 2f       	mov	r22, r25
     e64:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Cmd,3));
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	86 95       	lsr	r24
     e6c:	86 95       	lsr	r24
     e6e:	86 95       	lsr	r24
     e70:	98 2f       	mov	r25, r24
     e72:	91 70       	andi	r25, 0x01	; 1
     e74:	8b e1       	ldi	r24, 0x1B	; 27
     e76:	69 2f       	mov	r22, r25
     e78:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Cmd,4));
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	82 95       	swap	r24
     e80:	8f 70       	andi	r24, 0x0F	; 15
     e82:	98 2f       	mov	r25, r24
     e84:	91 70       	andi	r25, 0x01	; 1
     e86:	8c e1       	ldi	r24, 0x1C	; 28
     e88:	69 2f       	mov	r22, r25
     e8a:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Cmd,5));
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	82 95       	swap	r24
     e92:	86 95       	lsr	r24
     e94:	87 70       	andi	r24, 0x07	; 7
     e96:	98 2f       	mov	r25, r24
     e98:	91 70       	andi	r25, 0x01	; 1
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	69 2f       	mov	r22, r25
     e9e:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Cmd,6));
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	82 95       	swap	r24
     ea6:	86 95       	lsr	r24
     ea8:	86 95       	lsr	r24
     eaa:	83 70       	andi	r24, 0x03	; 3
     eac:	98 2f       	mov	r25, r24
     eae:	91 70       	andi	r25, 0x01	; 1
     eb0:	8e e1       	ldi	r24, 0x1E	; 30
     eb2:	69 2f       	mov	r22, r25
     eb4:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Cmd,7));
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	98 2f       	mov	r25, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	99 27       	eor	r25, r25
     ec0:	99 1f       	adc	r25, r25
     ec2:	84 e0       	ldi	r24, 0x04	; 4
     ec4:	69 2f       	mov	r22, r25
     ec6:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>

}
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <Lcd_vidInit>:


void Lcd_vidInit(void)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	0f 92       	push	r0
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
	 Dio_vidSetPinDir(LCD_u8RS_PIN , DIO_u8OUTPUT);
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8RW_PIN , DIO_u8OUTPUT);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8EN_PIN , DIO_u8OUTPUT);
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>

	 Dio_vidSetPinDir(LCD_u8D0_PIN , DIO_u8OUTPUT);
     ef4:	88 e1       	ldi	r24, 0x18	; 24
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D1_PIN , DIO_u8OUTPUT);
     efc:	89 e1       	ldi	r24, 0x19	; 25
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D2_PIN , DIO_u8OUTPUT);
     f04:	8a e1       	ldi	r24, 0x1A	; 26
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D3_PIN , DIO_u8OUTPUT);
     f0c:	8b e1       	ldi	r24, 0x1B	; 27
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D4_PIN , DIO_u8OUTPUT);
     f14:	8c e1       	ldi	r24, 0x1C	; 28
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D5_PIN , DIO_u8OUTPUT);
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D6_PIN , DIO_u8OUTPUT);
     f24:	8e e1       	ldi	r24, 0x1E	; 30
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D7_PIN , DIO_u8OUTPUT);
     f2c:	84 e0       	ldi	r24, 0x04	; 4
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_vidSetPinDir>


	 arr_Queue[Queue_Write_Counter]  = LCD_u8CMD_8_BIT_2x16_5x7;
     f34:	80 91 60 00 	lds	r24, 0x0060
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	fc 01       	movw	r30, r24
     f3e:	e8 56       	subi	r30, 0x68	; 104
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	88 e3       	ldi	r24, 0x38	; 56
     f44:	80 83       	st	Z, r24
	 arr_State[Queue_Write_Counter]  = COMMAND;
     f46:	80 91 60 00 	lds	r24, 0x0060
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	fc 01       	movw	r30, r24
     f50:	ea 59       	subi	r30, 0x9A	; 154
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 83       	st	Z, r24
	 Queue_Write_Counter++;
     f58:	80 91 60 00 	lds	r24, 0x0060
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	80 93 60 00 	sts	0x0060, r24

	 arr_Queue[Queue_Write_Counter]  = LCD_u8CMD_DISP_ON_CURS_OFF;
     f62:	80 91 60 00 	lds	r24, 0x0060
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	fc 01       	movw	r30, r24
     f6c:	e8 56       	subi	r30, 0x68	; 104
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	8c e0       	ldi	r24, 0x0C	; 12
     f72:	80 83       	st	Z, r24
	 arr_State[Queue_Write_Counter]  = COMMAND;
     f74:	80 91 60 00 	lds	r24, 0x0060
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	fc 01       	movw	r30, r24
     f7e:	ea 59       	subi	r30, 0x9A	; 154
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	80 83       	st	Z, r24
	 Queue_Write_Counter++;
     f86:	80 91 60 00 	lds	r24, 0x0060
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	80 93 60 00 	sts	0x0060, r24

	 arr_Queue[Queue_Write_Counter]  = LCD_u8CMD_CLR_Display;
     f90:	80 91 60 00 	lds	r24, 0x0060
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	fc 01       	movw	r30, r24
     f9a:	e8 56       	subi	r30, 0x68	; 104
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 83       	st	Z, r24
	 arr_State[Queue_Write_Counter]  = COMMAND;
     fa2:	80 91 60 00 	lds	r24, 0x0060
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	fc 01       	movw	r30, r24
     fac:	ea 59       	subi	r30, 0x9A	; 154
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	80 83       	st	Z, r24
	 Queue_Write_Counter++;
     fb4:	80 91 60 00 	lds	r24, 0x0060
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	80 93 60 00 	sts	0x0060, r24

	 u8 i;

	 for( i=3; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	13 c0       	rjmp	.+38     	; 0xfea <Lcd_vidInit+0x118>
	 {
		 arr_Queue[i]  = LCD_QUEUE_NULL;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	e8 56       	subi	r30, 0x68	; 104
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	80 83       	st	Z, r24
		 arr_State[i]  = LCD_QUEUE_NULL;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	ea 59       	subi	r30, 0x9A	; 154
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	80 83       	st	Z, r24
	 arr_State[Queue_Write_Counter]  = COMMAND;
	 Queue_Write_Counter++;

	 u8 i;

	 for( i=3; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	82 33       	cpi	r24, 0x32	; 50
     fee:	50 f3       	brcs	.-44     	; 0xfc4 <Lcd_vidInit+0xf2>
	 {
		 arr_Queue[i]  = LCD_QUEUE_NULL;
		 arr_State[i]  = LCD_QUEUE_NULL;
	 }

}
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <Lcd_vidWriteChar>:


void Lcd_vidWriteChar(u8 Char)

{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8HIGH);  //RS
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);   //RW
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH);  //EN
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>


	//Make Data Ready To Sent
	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Char,0));
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	98 2f       	mov	r25, r24
    1020:	91 70       	andi	r25, 0x01	; 1
    1022:	88 e1       	ldi	r24, 0x18	; 24
    1024:	69 2f       	mov	r22, r25
    1026:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Char,1));
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	86 95       	lsr	r24
    102e:	98 2f       	mov	r25, r24
    1030:	91 70       	andi	r25, 0x01	; 1
    1032:	89 e1       	ldi	r24, 0x19	; 25
    1034:	69 2f       	mov	r22, r25
    1036:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Char,2));
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	86 95       	lsr	r24
    103e:	86 95       	lsr	r24
    1040:	98 2f       	mov	r25, r24
    1042:	91 70       	andi	r25, 0x01	; 1
    1044:	8a e1       	ldi	r24, 0x1A	; 26
    1046:	69 2f       	mov	r22, r25
    1048:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Char,3));
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	86 95       	lsr	r24
    1050:	86 95       	lsr	r24
    1052:	86 95       	lsr	r24
    1054:	98 2f       	mov	r25, r24
    1056:	91 70       	andi	r25, 0x01	; 1
    1058:	8b e1       	ldi	r24, 0x1B	; 27
    105a:	69 2f       	mov	r22, r25
    105c:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Char,4));
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	82 95       	swap	r24
    1064:	8f 70       	andi	r24, 0x0F	; 15
    1066:	98 2f       	mov	r25, r24
    1068:	91 70       	andi	r25, 0x01	; 1
    106a:	8c e1       	ldi	r24, 0x1C	; 28
    106c:	69 2f       	mov	r22, r25
    106e:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Char,5));
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	82 95       	swap	r24
    1076:	86 95       	lsr	r24
    1078:	87 70       	andi	r24, 0x07	; 7
    107a:	98 2f       	mov	r25, r24
    107c:	91 70       	andi	r25, 0x01	; 1
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	69 2f       	mov	r22, r25
    1082:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Char,6));
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	82 95       	swap	r24
    108a:	86 95       	lsr	r24
    108c:	86 95       	lsr	r24
    108e:	83 70       	andi	r24, 0x03	; 3
    1090:	98 2f       	mov	r25, r24
    1092:	91 70       	andi	r25, 0x01	; 1
    1094:	8e e1       	ldi	r24, 0x1E	; 30
    1096:	69 2f       	mov	r22, r25
    1098:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Char,7));
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	98 2f       	mov	r25, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	69 2f       	mov	r22, r25
    10aa:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>

}
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <Lcd_vidEnableTrigger>:


void Lcd_vidEnableTrigger(void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62

	//make EN->0 to indicate LCD "NOW you can save bits in your buffer all data sent"
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>

}
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <Lcd_vidDisableTrigger>:


void Lcd_vidDisableTrigger(void)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH);
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	0e 94 a4 03 	call	0x748	; 0x748 <Dio_vidSetPinVal>
}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <Lcd_vidQueueChar>:


void Lcd_vidQueueChar(u8 Char)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
	arr_Queue[Queue_Write_Counter] = Char;
    10ee:	80 91 60 00 	lds	r24, 0x0060
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	fc 01       	movw	r30, r24
    10f8:	e8 56       	subi	r30, 0x68	; 104
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	80 83       	st	Z, r24
	arr_State[Queue_Write_Counter] = CHAR;
    1100:	80 91 60 00 	lds	r24, 0x0060
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	fc 01       	movw	r30, r24
    110a:	ea 59       	subi	r30, 0x9A	; 154
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	10 82       	st	Z, r1
	Queue_Write_Counter++;
    1110:	80 91 60 00 	lds	r24, 0x0060
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	80 93 60 00 	sts	0x0060, r24
}
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <Lcd_vidQueueCommand>:


void Lcd_vidQueueCommand(u8 Command)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
	arr_Queue[Queue_Write_Counter] = Command;
    112e:	80 91 60 00 	lds	r24, 0x0060
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	fc 01       	movw	r30, r24
    1138:	e8 56       	subi	r30, 0x68	; 104
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	80 83       	st	Z, r24
	arr_State[Queue_Write_Counter] = COMMAND;
    1140:	80 91 60 00 	lds	r24, 0x0060
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	fc 01       	movw	r30, r24
    114a:	ea 59       	subi	r30, 0x9A	; 154
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 83       	st	Z, r24
	Queue_Write_Counter++;
    1152:	80 91 60 00 	lds	r24, 0x0060
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	80 93 60 00 	sts	0x0060, r24
}
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <Lcd_vidQueueString>:


void Lcd_vidQueueString(u8 *Str)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <Lcd_vidQueueString+0x6>
    116a:	0f 92       	push	r0
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	9b 83       	std	Y+3, r25	; 0x03
    1172:	8a 83       	std	Y+2, r24	; 0x02
	u8 Index = 0 ;
    1174:	19 82       	std	Y+1, r1	; 0x01
    1176:	21 c0       	rjmp	.+66     	; 0x11ba <Lcd_vidQueueString+0x56>

	while( Str[Index] != '\0' )
	{
		arr_Queue[Queue_Write_Counter] = Str[Index];
    1178:	80 91 60 00 	lds	r24, 0x0060
    117c:	48 2f       	mov	r20, r24
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	fc 01       	movw	r30, r24
    118c:	e2 0f       	add	r30, r18
    118e:	f3 1f       	adc	r31, r19
    1190:	80 81       	ld	r24, Z
    1192:	fa 01       	movw	r30, r20
    1194:	e8 56       	subi	r30, 0x68	; 104
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 83       	st	Z, r24
		arr_State[Queue_Write_Counter] = CHAR;
    119a:	80 91 60 00 	lds	r24, 0x0060
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	fc 01       	movw	r30, r24
    11a4:	ea 59       	subi	r30, 0x9A	; 154
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	10 82       	st	Z, r1
		Index++;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	89 83       	std	Y+1, r24	; 0x01
		Queue_Write_Counter++;
    11b0:	80 91 60 00 	lds	r24, 0x0060
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	80 93 60 00 	sts	0x0060, r24

void Lcd_vidQueueString(u8 *Str)
{
	u8 Index = 0 ;

	while( Str[Index] != '\0' )
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	9b 81       	ldd	r25, Y+3	; 0x03
    11c4:	fc 01       	movw	r30, r24
    11c6:	e2 0f       	add	r30, r18
    11c8:	f3 1f       	adc	r31, r19
    11ca:	80 81       	ld	r24, Z
    11cc:	88 23       	and	r24, r24
    11ce:	a1 f6       	brne	.-88     	; 0x1178 <Lcd_vidQueueString+0x14>
		arr_Queue[Queue_Write_Counter] = Str[Index];
		arr_State[Queue_Write_Counter] = CHAR;
		Index++;
		Queue_Write_Counter++;
	}
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <Lcd_vidClearQueue>:


void Lcd_vidClearQueue(void)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	 u8 i;

	 for( i=0; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    11e6:	19 82       	std	Y+1, r1	; 0x01
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <Lcd_vidClearQueue+0x34>
	 {
		 arr_Queue[i]  = LCD_QUEUE_NULL;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	e8 56       	subi	r30, 0x68	; 104
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	80 83       	st	Z, r24
		 arr_State[i]  = LCD_QUEUE_NULL;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	fc 01       	movw	r30, r24
    1202:	ea 59       	subi	r30, 0x9A	; 154
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	80 83       	st	Z, r24

void Lcd_vidClearQueue(void)
{
	 u8 i;

	 for( i=0; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	82 33       	cpi	r24, 0x32	; 50
    1214:	50 f3       	brcs	.-44     	; 0x11ea <Lcd_vidClearQueue+0xe>
	 {
		 arr_Queue[i]  = LCD_QUEUE_NULL;
		 arr_State[i]  = LCD_QUEUE_NULL;
	 }
	 Queue_Write_Counter = 0;
    1216:	10 92 60 00 	sts	0x0060, r1
}
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <Lcd_u8ReadQueue>:


u8 Lcd_u8ReadQueue(void)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <Lcd_u8ReadQueue+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <Lcd_u8ReadQueue+0x8>
    122a:	00 d0       	rcall	.+0      	; 0x122c <Lcd_u8ReadQueue+0xa>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	u8 State_Value;
	u8 Byte;

	State_Value = arr_State[Queue_Read_Counter];
    1230:	80 91 61 00 	lds	r24, 0x0061
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	fc 01       	movw	r30, r24
    123a:	ea 59       	subi	r30, 0x9A	; 154
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	80 81       	ld	r24, Z
    1240:	8b 83       	std	Y+3, r24	; 0x03


	if( State_Value != LCD_QUEUE_NULL )
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	a9 f1       	breq	.+106    	; 0x12b2 <Lcd_u8ReadQueue+0x90>
	{
		switch(State_Value)
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3e 83       	std	Y+6, r19	; 0x06
    1250:	2d 83       	std	Y+5, r18	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	31 f0       	breq	.+12     	; 0x1266 <Lcd_u8ReadQueue+0x44>
    125a:	2d 81       	ldd	r18, Y+5	; 0x05
    125c:	3e 81       	ldd	r19, Y+6	; 0x06
    125e:	21 30       	cpi	r18, 0x01	; 1
    1260:	31 05       	cpc	r19, r1
    1262:	99 f0       	breq	.+38     	; 0x128a <Lcd_u8ReadQueue+0x68>
    1264:	23 c0       	rjmp	.+70     	; 0x12ac <Lcd_u8ReadQueue+0x8a>
		{
		case CHAR:
			Byte = arr_Queue[Queue_Read_Counter];
    1266:	80 91 61 00 	lds	r24, 0x0061
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	fc 01       	movw	r30, r24
    1270:	e8 56       	subi	r30, 0x68	; 104
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	80 81       	ld	r24, Z
    1276:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_vidWriteChar( Byte );
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	0e 94 fc 07 	call	0xff8	; 0xff8 <Lcd_vidWriteChar>
			Queue_Read_Counter++;
    127e:	80 91 61 00 	lds	r24, 0x0061
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	80 93 61 00 	sts	0x0061, r24
    1288:	11 c0       	rjmp	.+34     	; 0x12ac <Lcd_u8ReadQueue+0x8a>
			break;

		case COMMAND:
			Byte = arr_Queue[Queue_Read_Counter];
    128a:	80 91 61 00 	lds	r24, 0x0061
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	fc 01       	movw	r30, r24
    1294:	e8 56       	subi	r30, 0x68	; 104
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	80 81       	ld	r24, Z
    129a:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_vidSendCommand( Byte );
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	0e 94 0a 07 	call	0xe14	; 0xe14 <Lcd_vidSendCommand>
			Queue_Read_Counter++;
    12a2:	80 91 61 00 	lds	r24, 0x0061
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	80 93 61 00 	sts	0x0061, r24
			break;
		}
		return 1;
    12ac:	31 e0       	ldi	r19, 0x01	; 1
    12ae:	3c 83       	std	Y+4, r19	; 0x04
    12b0:	1e c0       	rjmp	.+60     	; 0x12ee <Lcd_u8ReadQueue+0xcc>
	}
	else
	{
		 u8 i;

		 for( i=0; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    12b2:	19 82       	std	Y+1, r1	; 0x01
    12b4:	13 c0       	rjmp	.+38     	; 0x12dc <Lcd_u8ReadQueue+0xba>
		 {
			 arr_Queue[i]  = LCD_QUEUE_NULL;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	fc 01       	movw	r30, r24
    12be:	e8 56       	subi	r30, 0x68	; 104
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	80 83       	st	Z, r24
			 arr_State[i]  = LCD_QUEUE_NULL;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	fc 01       	movw	r30, r24
    12ce:	ea 59       	subi	r30, 0x9A	; 154
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	80 83       	st	Z, r24
	}
	else
	{
		 u8 i;

		 for( i=0; i<MAXIMUM_ELEMENT_IN_QUEUE; i++ )
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	82 33       	cpi	r24, 0x32	; 50
    12e0:	50 f3       	brcs	.-44     	; 0x12b6 <Lcd_u8ReadQueue+0x94>
		 {
			 arr_Queue[i]  = LCD_QUEUE_NULL;
			 arr_State[i]  = LCD_QUEUE_NULL;
		 }
		 Queue_Write_Counter = 0;
    12e2:	10 92 60 00 	sts	0x0060, r1
		 Queue_Read_Counter  = 0;
    12e6:	10 92 61 00 	sts	0x0061, r1

		 return LCD_QUEUE_NULL;
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	8c 83       	std	Y+4, r24	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    12f0:	26 96       	adiw	r28, 0x06	; 6
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <RTO_vidInit>:
/* Create Array Of Pointer To Struct To Refer For Our Tasks */
Task_Type* apstrTaskArray[MAXIMUM_TASKS];


void RTO_vidInit(void)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	0f 92       	push	r0
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	for(i=0; i<MAXIMUM_TASKS; i++)
    130c:	19 82       	std	Y+1, r1	; 0x01
    130e:	0d c0       	rjmp	.+26     	; 0x132a <RTO_vidInit+0x28>
	{
		apstrTaskArray[i] = RTO_NULL;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	fc 01       	movw	r30, r24
    131c:	e6 53       	subi	r30, 0x36	; 54
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	11 82       	std	Z+1, r1	; 0x01
    1322:	10 82       	st	Z, r1


void RTO_vidInit(void)
{
	u8 i;
	for(i=0; i<MAXIMUM_TASKS; i++)
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	8f 5f       	subi	r24, 0xFF	; 255
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	8e 31       	cpi	r24, 0x1E	; 30
    132e:	80 f3       	brcs	.-32     	; 0x1310 <RTO_vidInit+0xe>
	{
		apstrTaskArray[i] = RTO_NULL;
	}

	/* Set Overflow Call Back Function */
	OVF_vidSetCB( TimerTick );
    1330:	88 e4       	ldi	r24, 0x48	; 72
    1332:	9a e0       	ldi	r25, 0x0A	; 10
    1334:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <OVF_vidSetCB>

	/* Initialize Counter Register */
	Timer0_vidSetCounterRegisterValue( 192 );
    1338:	80 ec       	ldi	r24, 0xC0	; 192
    133a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Timer0_vidSetCounterRegisterValue>

	/* Initialize Timer_0 */
	Timer0_vidInit();
    133e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer0_vidInit>
}
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <RTO_vidCreateQueueOfTasks>:



void RTO_vidCreateQueueOfTasks( Task_Type* TaskPointer , u8 Priorty_Of_Task)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <RTO_vidCreateQueueOfTasks+0x6>
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	6b 83       	std	Y+3, r22	; 0x03
	apstrTaskArray[ Priorty_Of_Task ] = TaskPointer ;
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	fc 01       	movw	r30, r24
    1368:	e6 53       	subi	r30, 0x36	; 54
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <RTO_vidScheduler>:



void RTO_vidScheduler(void)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	0f 92       	push	r0
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62

	u8 u8TaskCounter ;
	for( u8TaskCounter = 0; u8TaskCounter < MAXIMUM_TASKS; u8TaskCounter++)
    138a:	19 82       	std	Y+1, r1	; 0x01
    138c:	79 c0       	rjmp	.+242    	; 0x1480 <RTO_vidScheduler+0x100>
	{
		if( apstrTaskArray[u8TaskCounter] != RTO_NULL )
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	fc 01       	movw	r30, r24
    139a:	e6 53       	subi	r30, 0x36	; 54
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <RTO_vidScheduler+0x28>
    13a6:	69 c0       	rjmp	.+210    	; 0x147a <RTO_vidScheduler+0xfa>
		{
			if( apstrTaskArray[u8TaskCounter]->u8TaskState == TASK_RUNNING_STATE)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	fc 01       	movw	r30, r24
    13b4:	e6 53       	subi	r30, 0x36	; 54
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	01 90       	ld	r0, Z+
    13ba:	f0 81       	ld	r31, Z
    13bc:	e0 2d       	mov	r30, r0
    13be:	82 85       	ldd	r24, Z+10	; 0x0a
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <RTO_vidScheduler+0x46>
    13c4:	5a c0       	rjmp	.+180    	; 0x147a <RTO_vidScheduler+0xfa>
			{
				if( apstrTaskArray[u8TaskCounter]->u32FirstDelay == 0 )
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	fc 01       	movw	r30, r24
    13d2:	e6 53       	subi	r30, 0x36	; 54
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	01 90       	ld	r0, Z+
    13d8:	f0 81       	ld	r31, Z
    13da:	e0 2d       	mov	r30, r0
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	a2 81       	ldd	r26, Z+2	; 0x02
    13e2:	b3 81       	ldd	r27, Z+3	; 0x03
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	a1 05       	cpc	r26, r1
    13e8:	b1 05       	cpc	r27, r1
    13ea:	89 f5       	brne	.+98     	; 0x144e <RTO_vidScheduler+0xce>
				{
					apstrTaskArray[u8TaskCounter]->pfTaskCode();
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	fc 01       	movw	r30, r24
    13f8:	e6 53       	subi	r30, 0x36	; 54
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	01 90       	ld	r0, Z+
    13fe:	f0 81       	ld	r31, Z
    1400:	e0 2d       	mov	r30, r0
    1402:	00 84       	ldd	r0, Z+8	; 0x08
    1404:	f1 85       	ldd	r31, Z+9	; 0x09
    1406:	e0 2d       	mov	r30, r0
    1408:	09 95       	icall
					apstrTaskArray[u8TaskCounter]->u32FirstDelay = apstrTaskArray[u8TaskCounter]->u32Periodicity - 1;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	fc 01       	movw	r30, r24
    1416:	e6 53       	subi	r30, 0x36	; 54
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	20 81       	ld	r18, Z
    141c:	31 81       	ldd	r19, Z+1	; 0x01
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	fc 01       	movw	r30, r24
    142a:	e6 53       	subi	r30, 0x36	; 54
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	01 90       	ld	r0, Z+
    1430:	f0 81       	ld	r31, Z
    1432:	e0 2d       	mov	r30, r0
    1434:	84 81       	ldd	r24, Z+4	; 0x04
    1436:	95 81       	ldd	r25, Z+5	; 0x05
    1438:	a6 81       	ldd	r26, Z+6	; 0x06
    143a:	b7 81       	ldd	r27, Z+7	; 0x07
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	a1 09       	sbc	r26, r1
    1440:	b1 09       	sbc	r27, r1
    1442:	f9 01       	movw	r30, r18
    1444:	80 83       	st	Z, r24
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	a2 83       	std	Z+2, r26	; 0x02
    144a:	b3 83       	std	Z+3, r27	; 0x03
    144c:	16 c0       	rjmp	.+44     	; 0x147a <RTO_vidScheduler+0xfa>
				}
				else
				{
					apstrTaskArray[u8TaskCounter]->u32FirstDelay--;
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	fc 01       	movw	r30, r24
    145a:	e6 53       	subi	r30, 0x36	; 54
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	01 90       	ld	r0, Z+
    1460:	f0 81       	ld	r31, Z
    1462:	e0 2d       	mov	r30, r0
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	a2 81       	ldd	r26, Z+2	; 0x02
    146a:	b3 81       	ldd	r27, Z+3	; 0x03
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	a1 09       	sbc	r26, r1
    1470:	b1 09       	sbc	r27, r1
    1472:	80 83       	st	Z, r24
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	a2 83       	std	Z+2, r26	; 0x02
    1478:	b3 83       	std	Z+3, r27	; 0x03

void RTO_vidScheduler(void)
{

	u8 u8TaskCounter ;
	for( u8TaskCounter = 0; u8TaskCounter < MAXIMUM_TASKS; u8TaskCounter++)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	8e 31       	cpi	r24, 0x1E	; 30
    1484:	08 f4       	brcc	.+2      	; 0x1488 <RTO_vidScheduler+0x108>
    1486:	83 cf       	rjmp	.-250    	; 0x138e <RTO_vidScheduler+0xe>
				}
			}

		}
	}
}
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <TimerTick>:



void TimerTick(void)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	Ovf_Count ++;
    1498:	80 91 62 00 	lds	r24, 0x0062
    149c:	90 91 63 00 	lds	r25, 0x0063
    14a0:	a0 91 64 00 	lds	r26, 0x0064
    14a4:	b0 91 65 00 	lds	r27, 0x0065
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	a1 1d       	adc	r26, r1
    14ac:	b1 1d       	adc	r27, r1
    14ae:	80 93 62 00 	sts	0x0062, r24
    14b2:	90 93 63 00 	sts	0x0063, r25
    14b6:	a0 93 64 00 	sts	0x0064, r26
    14ba:	b0 93 65 00 	sts	0x0065, r27

	/* 32 overflow Mean 1msec -> (1 Tick) */

	if( Ovf_Count == 32 )
    14be:	80 91 62 00 	lds	r24, 0x0062
    14c2:	90 91 63 00 	lds	r25, 0x0063
    14c6:	a0 91 64 00 	lds	r26, 0x0064
    14ca:	b0 91 65 00 	lds	r27, 0x0065
    14ce:	80 32       	cpi	r24, 0x20	; 32
    14d0:	91 05       	cpc	r25, r1
    14d2:	a1 05       	cpc	r26, r1
    14d4:	b1 05       	cpc	r27, r1
    14d6:	69 f4       	brne	.+26     	; 0x14f2 <TimerTick+0x62>
	{
		/* Reinitialize Overflow Counter */
		Ovf_Count = 0;
    14d8:	10 92 62 00 	sts	0x0062, r1
    14dc:	10 92 63 00 	sts	0x0063, r1
    14e0:	10 92 64 00 	sts	0x0064, r1
    14e4:	10 92 65 00 	sts	0x0065, r1

		/* Initialize Counter Register */
		Timer0_vidSetCounterRegisterValue( 192 );
    14e8:	80 ec       	ldi	r24, 0xC0	; 192
    14ea:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Timer0_vidSetCounterRegisterValue>

		/* Scheduler Will Excute Every 1msec  */
		RTO_vidScheduler();
    14ee:	0e 94 c0 09 	call	0x1380	; 0x1380 <RTO_vidScheduler>
	}

}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <Timer0_vidInit>:

void(*Pfun_OVF)(void);
void(*Pfun_CMP)(void);

void Timer0_vidInit(void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_u8WFG_MODE == TIMER0_u8NORMAL_MODE
	//Select Normal Mode
	TCCR0.Bits.WGM00 = 0;
    1500:	e3 e5       	ldi	r30, 0x53	; 83
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8f 7b       	andi	r24, 0xBF	; 191
    1508:	80 83       	st	Z, r24
	TCCR0.Bits.WGM01 = 0;
    150a:	e3 e5       	ldi	r30, 0x53	; 83
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	87 7f       	andi	r24, 0xF7	; 247
    1512:	80 83       	st	Z, r24
#endif


#if TIMER0_u8COMPARE_MATCH_OUTPUT_MODE == TIMER0_u8OC0_DISCONNECTED
	//Select OCR0 disconnected (NO_COMPARE_MATCH)
	TCCR0.Bits.COM = 0;
    1514:	e3 e5       	ldi	r30, 0x53	; 83
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 7c       	andi	r24, 0xCF	; 207
    151c:	80 83       	st	Z, r24
	TCCR0.Bits.COM = 3;
#endif

#if TIMER0_u8PRESCALLER_VALU == TIMER0_u8FCPU_1
	//Select No Pre_scalling
	TCCR0.Bits.CS = 1;
    151e:	e3 e5       	ldi	r30, 0x53	; 83
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	88 7f       	andi	r24, 0xF8	; 248
    1526:	81 60       	ori	r24, 0x01	; 1
    1528:	80 83       	st	Z, r24
	TCCR0.Bits.CS = 7;
#endif

#if TIMER0_u8OVF_INTERRUPT == TIMER0_u8OVF_INTERRUPT_ENABLE
	//PIE of TIMER0 at overflow of counter register
	SREG.Bits.I_bit  =  1;
    152a:	ef e5       	ldi	r30, 0x5F	; 95
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 68       	ori	r24, 0x80	; 128
    1532:	80 83       	st	Z, r24
	TIMSK.Bits.TOIE0 =  1;
    1534:	e9 e5       	ldi	r30, 0x59	; 89
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	80 83       	st	Z, r24
	//PIE of TIMER0 at Compare Match Output Register
	SREG.Bits.I_bit  =  1;
	TIMSK.Bits.OCIE0 =  1;
#elif TIMER0_u8CMP_INTERRUPT == TIMER0_u8CMP_INTERRUPT_DISABLE
	//disable interrupt timer0 at Compare Match Output Register
	TIMSK.Bits.OCIE0 =  0;
    153e:	e9 e5       	ldi	r30, 0x59	; 89
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8d 7f       	andi	r24, 0xFD	; 253
    1546:	80 83       	st	Z, r24
#endif
}
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <Timer0_vidStopTimer>:

void Timer0_vidStopTimer(void)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
	//Stop Timer (NO Clock Source)
	TCCR0.Bits.CS = 0;
    1556:	e3 e5       	ldi	r30, 0x53	; 83
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 7f       	andi	r24, 0xF8	; 248
    155e:	80 83       	st	Z, r24
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <Timer0_vidSetCounterRegisterValue>:

void Timer0_vidSetCounterRegisterValue(u8 Val)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	89 83       	std	Y+1, r24	; 0x01
	//Set Value In Timer Counter Register	 (TCNT0)
	TCNT0.Byte = Val;
    1572:	e2 e5       	ldi	r30, 0x52	; 82
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	80 83       	st	Z, r24
}
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <Timer0_vidSetCompareRegisterValue>:

void Timer0_vidSetCompareRegisterValue(u8 Val)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	0f 92       	push	r0
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	89 83       	std	Y+1, r24	; 0x01
	//Set Value Of Timer Compare Match Register (OCR0)
	OCR0.Byte = Val;
    158e:	ec e5       	ldi	r30, 0x5C	; 92
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	80 83       	st	Z, r24
}
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <CMP_vidSetCB>:


void CMP_vidSetCB(void(*pf)(void))
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <CMP_vidSetCB+0x6>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMP = pf;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	90 93 07 01 	sts	0x0107, r25
    15b4:	80 93 06 01 	sts	0x0106, r24
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <OVF_vidSetCB>:


void OVF_vidSetCB(void(*pf)(void))
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <OVF_vidSetCB+0x6>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	89 83       	std	Y+1, r24	; 0x01
	Pfun_OVF = pf;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	90 93 09 01 	sts	0x0109, r25
    15d8:	80 93 08 01 	sts	0x0108, r24
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <__vector_10>:


void __vector_10 (void)
{
    15e6:	1f 92       	push	r1
    15e8:	0f 92       	push	r0
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	0f 92       	push	r0
    15ee:	11 24       	eor	r1, r1
    15f0:	2f 93       	push	r18
    15f2:	3f 93       	push	r19
    15f4:	4f 93       	push	r20
    15f6:	5f 93       	push	r21
    15f8:	6f 93       	push	r22
    15fa:	7f 93       	push	r23
    15fc:	8f 93       	push	r24
    15fe:	9f 93       	push	r25
    1600:	af 93       	push	r26
    1602:	bf 93       	push	r27
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMP();
    1610:	e0 91 06 01 	lds	r30, 0x0106
    1614:	f0 91 07 01 	lds	r31, 0x0107
    1618:	09 95       	icall
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <__vector_11>:

void __vector_11 (void)
{
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	4f 93       	push	r20
    1650:	5f 93       	push	r21
    1652:	6f 93       	push	r22
    1654:	7f 93       	push	r23
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
    165a:	af 93       	push	r26
    165c:	bf 93       	push	r27
    165e:	ef 93       	push	r30
    1660:	ff 93       	push	r31
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	Pfun_OVF();
    166a:	e0 91 08 01 	lds	r30, 0x0108
    166e:	f0 91 09 01 	lds	r31, 0x0109
    1672:	09 95       	icall
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <main>:
 *      Author: zas
 */


int main(void)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62

return 0;
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <_exit>:
    16ac:	f8 94       	cli

000016ae <__stop_program>:
    16ae:	ff cf       	rjmp	.-2      	; 0x16ae <__stop_program>
