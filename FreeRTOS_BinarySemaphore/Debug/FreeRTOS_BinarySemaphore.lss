
FreeRTOS_BinarySemaphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000069ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000069ca  00006a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000648  0080009c  0080009c  00006a9a  2**0
                  ALLOC
  3 .stab         00008cf4  00000000  00000000  00006a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000464a  00000000  00000000  0000f790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00013dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00013f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0001408a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00015cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00016bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001796c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00017acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00017d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00018527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f9 e6       	ldi	r31, 0x69	; 105
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3e       	cpi	r26, 0xE4	; 228
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 14 	call	0x29bc	; 0x29bc <main>
      8a:	0c 94 e3 34 	jmp	0x69c6	; 0x69c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e9       	ldi	r26, 0x93	; 147
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b8 34 	jmp	0x6970	; 0x6970 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a8 34 	jmp	0x6950	; 0x6950 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c4 34 	jmp	0x6988	; 0x6988 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a8 34 	jmp	0x6950	; 0x6950 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c4 34 	jmp	0x6988	; 0x6988 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b8 34 	jmp	0x6970	; 0x6970 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 34 	jmp	0x6950	; 0x6950 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c4 34 	jmp	0x6988	; 0x6988 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a8 34 	jmp	0x6950	; 0x6950 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c4 34 	jmp	0x6988	; 0x6988 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a8 34 	jmp	0x6950	; 0x6950 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c4 34 	jmp	0x6988	; 0x6988 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ac 34 	jmp	0x6958	; 0x6958 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c8 34 	jmp	0x6990	; 0x6990 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_vidSetPinDir>:
#include "../Lib/Bit_math.h"
#include "Dio_int.h"
#include "Dio_priv.h"

void Dio_vidSetPinDir(u8 Pin , u8 Dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	66 97       	sbiw	r28, 0x16	; 22
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	86 95       	lsr	r24
     b62:	86 95       	lsr	r24
     b64:	86 95       	lsr	r24
     b66:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	87 70       	andi	r24, 0x07	; 7
     b6c:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	3e 8b       	std	Y+22, r19	; 0x16
     b76:	2d 8b       	std	Y+21, r18	; 0x15
     b78:	8d 89       	ldd	r24, Y+21	; 0x15
     b7a:	9e 89       	ldd	r25, Y+22	; 0x16
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	91 05       	cpc	r25, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <Dio_vidSetPinDir+0x3e>
     b82:	e1 c0       	rjmp	.+450    	; 0xd46 <Dio_vidSetPinDir+0x200>
     b84:	2d 89       	ldd	r18, Y+21	; 0x15
     b86:	3e 89       	ldd	r19, Y+22	; 0x16
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	2c f4       	brge	.+10     	; 0xb98 <Dio_vidSetPinDir+0x52>
     b8e:	8d 89       	ldd	r24, Y+21	; 0x15
     b90:	9e 89       	ldd	r25, Y+22	; 0x16
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	71 f0       	breq	.+28     	; 0xbb2 <Dio_vidSetPinDir+0x6c>
     b96:	34 c3       	rjmp	.+1640   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     b98:	2d 89       	ldd	r18, Y+21	; 0x15
     b9a:	3e 89       	ldd	r19, Y+22	; 0x16
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	31 05       	cpc	r19, r1
     ba0:	09 f4       	brne	.+2      	; 0xba4 <Dio_vidSetPinDir+0x5e>
     ba2:	9b c1       	rjmp	.+822    	; 0xeda <Dio_vidSetPinDir+0x394>
     ba4:	8d 89       	ldd	r24, Y+21	; 0x15
     ba6:	9e 89       	ldd	r25, Y+22	; 0x16
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <Dio_vidSetPinDir+0x6a>
     bae:	5f c2       	rjmp	.+1214   	; 0x106e <Dio_vidSetPinDir+0x528>
     bb0:	27 c3       	rjmp	.+1614   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
		case 0:
			if(Dir ==1)
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	09 f0       	breq	.+2      	; 0xbba <Dio_vidSetPinDir+0x74>
     bb8:	63 c0       	rjmp	.+198    	; 0xc80 <Dio_vidSetPinDir+0x13a>
				{
					switch(PinLoc)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	3c 8b       	std	Y+20, r19	; 0x14
     bc2:	2b 8b       	std	Y+19, r18	; 0x13
     bc4:	8b 89       	ldd	r24, Y+19	; 0x13
     bc6:	9c 89       	ldd	r25, Y+20	; 0x14
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	d9 f1       	breq	.+118    	; 0xc44 <Dio_vidSetPinDir+0xfe>
     bce:	2b 89       	ldd	r18, Y+19	; 0x13
     bd0:	3c 89       	ldd	r19, Y+20	; 0x14
     bd2:	24 30       	cpi	r18, 0x04	; 4
     bd4:	31 05       	cpc	r19, r1
     bd6:	7c f4       	brge	.+30     	; 0xbf6 <Dio_vidSetPinDir+0xb0>
     bd8:	8b 89       	ldd	r24, Y+19	; 0x13
     bda:	9c 89       	ldd	r25, Y+20	; 0x14
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	91 05       	cpc	r25, r1
     be0:	29 f1       	breq	.+74     	; 0xc2c <Dio_vidSetPinDir+0xe6>
     be2:	2b 89       	ldd	r18, Y+19	; 0x13
     be4:	3c 89       	ldd	r19, Y+20	; 0x14
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	31 05       	cpc	r19, r1
     bea:	34 f5       	brge	.+76     	; 0xc38 <Dio_vidSetPinDir+0xf2>
     bec:	8b 89       	ldd	r24, Y+19	; 0x13
     bee:	9c 89       	ldd	r25, Y+20	; 0x14
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	b1 f0       	breq	.+44     	; 0xc20 <Dio_vidSetPinDir+0xda>
     bf4:	05 c3       	rjmp	.+1546   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     bf6:	2b 89       	ldd	r18, Y+19	; 0x13
     bf8:	3c 89       	ldd	r19, Y+20	; 0x14
     bfa:	25 30       	cpi	r18, 0x05	; 5
     bfc:	31 05       	cpc	r19, r1
     bfe:	71 f1       	breq	.+92     	; 0xc5c <Dio_vidSetPinDir+0x116>
     c00:	8b 89       	ldd	r24, Y+19	; 0x13
     c02:	9c 89       	ldd	r25, Y+20	; 0x14
     c04:	85 30       	cpi	r24, 0x05	; 5
     c06:	91 05       	cpc	r25, r1
     c08:	1c f1       	brlt	.+70     	; 0xc50 <Dio_vidSetPinDir+0x10a>
     c0a:	2b 89       	ldd	r18, Y+19	; 0x13
     c0c:	3c 89       	ldd	r19, Y+20	; 0x14
     c0e:	26 30       	cpi	r18, 0x06	; 6
     c10:	31 05       	cpc	r19, r1
     c12:	51 f1       	breq	.+84     	; 0xc68 <Dio_vidSetPinDir+0x122>
     c14:	8b 89       	ldd	r24, Y+19	; 0x13
     c16:	9c 89       	ldd	r25, Y+20	; 0x14
     c18:	87 30       	cpi	r24, 0x07	; 7
     c1a:	91 05       	cpc	r25, r1
     c1c:	59 f1       	breq	.+86     	; 0xc74 <Dio_vidSetPinDir+0x12e>
     c1e:	f0 c2       	rjmp	.+1504   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRA.Bits.Pin0 =1;
     c20:	ea e3       	ldi	r30, 0x3A	; 58
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	81 60       	ori	r24, 0x01	; 1
     c28:	80 83       	st	Z, r24
     c2a:	ea c2       	rjmp	.+1492   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRA.Bits.Pin1 =1;
     c2c:	ea e3       	ldi	r30, 0x3A	; 58
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	82 60       	ori	r24, 0x02	; 2
     c34:	80 83       	st	Z, r24
     c36:	e4 c2       	rjmp	.+1480   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRA.Bits.Pin2 =1;
     c38:	ea e3       	ldi	r30, 0x3A	; 58
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	84 60       	ori	r24, 0x04	; 4
     c40:	80 83       	st	Z, r24
     c42:	de c2       	rjmp	.+1468   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRA.Bits.Pin3 =1;
     c44:	ea e3       	ldi	r30, 0x3A	; 58
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	88 60       	ori	r24, 0x08	; 8
     c4c:	80 83       	st	Z, r24
     c4e:	d8 c2       	rjmp	.+1456   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRA.Bits.Pin4 =1;
     c50:	ea e3       	ldi	r30, 0x3A	; 58
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	80 61       	ori	r24, 0x10	; 16
     c58:	80 83       	st	Z, r24
     c5a:	d2 c2       	rjmp	.+1444   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRA.Bits.Pin5 =1;
     c5c:	ea e3       	ldi	r30, 0x3A	; 58
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 62       	ori	r24, 0x20	; 32
     c64:	80 83       	st	Z, r24
     c66:	cc c2       	rjmp	.+1432   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRA.Bits.Pin6 =1;
     c68:	ea e3       	ldi	r30, 0x3A	; 58
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	80 64       	ori	r24, 0x40	; 64
     c70:	80 83       	st	Z, r24
     c72:	c6 c2       	rjmp	.+1420   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRA.Bits.Pin7 =1;
     c74:	ea e3       	ldi	r30, 0x3A	; 58
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 68       	ori	r24, 0x80	; 128
     c7c:	80 83       	st	Z, r24
     c7e:	c0 c2       	rjmp	.+1408   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	3a 8b       	std	Y+18, r19	; 0x12
     c88:	29 8b       	std	Y+17, r18	; 0x11
     c8a:	89 89       	ldd	r24, Y+17	; 0x11
     c8c:	9a 89       	ldd	r25, Y+18	; 0x12
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	d9 f1       	breq	.+118    	; 0xd0a <Dio_vidSetPinDir+0x1c4>
     c94:	29 89       	ldd	r18, Y+17	; 0x11
     c96:	3a 89       	ldd	r19, Y+18	; 0x12
     c98:	24 30       	cpi	r18, 0x04	; 4
     c9a:	31 05       	cpc	r19, r1
     c9c:	7c f4       	brge	.+30     	; 0xcbc <Dio_vidSetPinDir+0x176>
     c9e:	89 89       	ldd	r24, Y+17	; 0x11
     ca0:	9a 89       	ldd	r25, Y+18	; 0x12
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	91 05       	cpc	r25, r1
     ca6:	29 f1       	breq	.+74     	; 0xcf2 <Dio_vidSetPinDir+0x1ac>
     ca8:	29 89       	ldd	r18, Y+17	; 0x11
     caa:	3a 89       	ldd	r19, Y+18	; 0x12
     cac:	22 30       	cpi	r18, 0x02	; 2
     cae:	31 05       	cpc	r19, r1
     cb0:	34 f5       	brge	.+76     	; 0xcfe <Dio_vidSetPinDir+0x1b8>
     cb2:	89 89       	ldd	r24, Y+17	; 0x11
     cb4:	9a 89       	ldd	r25, Y+18	; 0x12
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	b1 f0       	breq	.+44     	; 0xce6 <Dio_vidSetPinDir+0x1a0>
     cba:	a2 c2       	rjmp	.+1348   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     cbc:	29 89       	ldd	r18, Y+17	; 0x11
     cbe:	3a 89       	ldd	r19, Y+18	; 0x12
     cc0:	25 30       	cpi	r18, 0x05	; 5
     cc2:	31 05       	cpc	r19, r1
     cc4:	71 f1       	breq	.+92     	; 0xd22 <Dio_vidSetPinDir+0x1dc>
     cc6:	89 89       	ldd	r24, Y+17	; 0x11
     cc8:	9a 89       	ldd	r25, Y+18	; 0x12
     cca:	85 30       	cpi	r24, 0x05	; 5
     ccc:	91 05       	cpc	r25, r1
     cce:	1c f1       	brlt	.+70     	; 0xd16 <Dio_vidSetPinDir+0x1d0>
     cd0:	29 89       	ldd	r18, Y+17	; 0x11
     cd2:	3a 89       	ldd	r19, Y+18	; 0x12
     cd4:	26 30       	cpi	r18, 0x06	; 6
     cd6:	31 05       	cpc	r19, r1
     cd8:	51 f1       	breq	.+84     	; 0xd2e <Dio_vidSetPinDir+0x1e8>
     cda:	89 89       	ldd	r24, Y+17	; 0x11
     cdc:	9a 89       	ldd	r25, Y+18	; 0x12
     cde:	87 30       	cpi	r24, 0x07	; 7
     ce0:	91 05       	cpc	r25, r1
     ce2:	59 f1       	breq	.+86     	; 0xd3a <Dio_vidSetPinDir+0x1f4>
     ce4:	8d c2       	rjmp	.+1306   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRA.Bits.Pin0 =0;
     ce6:	ea e3       	ldi	r30, 0x3A	; 58
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	80 83       	st	Z, r24
     cf0:	87 c2       	rjmp	.+1294   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRA.Bits.Pin1 =0;
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8d 7f       	andi	r24, 0xFD	; 253
     cfa:	80 83       	st	Z, r24
     cfc:	81 c2       	rjmp	.+1282   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRA.Bits.Pin2 =0;
     cfe:	ea e3       	ldi	r30, 0x3A	; 58
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	80 83       	st	Z, r24
     d08:	7b c2       	rjmp	.+1270   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRA.Bits.Pin3 =0;
     d0a:	ea e3       	ldi	r30, 0x3A	; 58
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	87 7f       	andi	r24, 0xF7	; 247
     d12:	80 83       	st	Z, r24
     d14:	75 c2       	rjmp	.+1258   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRA.Bits.Pin4 =0;
     d16:	ea e3       	ldi	r30, 0x3A	; 58
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 7e       	andi	r24, 0xEF	; 239
     d1e:	80 83       	st	Z, r24
     d20:	6f c2       	rjmp	.+1246   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRA.Bits.Pin5 =0;
     d22:	ea e3       	ldi	r30, 0x3A	; 58
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8f 7d       	andi	r24, 0xDF	; 223
     d2a:	80 83       	st	Z, r24
     d2c:	69 c2       	rjmp	.+1234   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRA.Bits.Pin6 =0;
     d2e:	ea e3       	ldi	r30, 0x3A	; 58
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8f 7b       	andi	r24, 0xBF	; 191
     d36:	80 83       	st	Z, r24
     d38:	63 c2       	rjmp	.+1222   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRA.Bits.Pin7 =0;
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 77       	andi	r24, 0x7F	; 127
     d42:	80 83       	st	Z, r24
     d44:	5d c2       	rjmp	.+1210   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				}
			}
		break;

		case 1:
			if(Dir ==1)
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <Dio_vidSetPinDir+0x208>
     d4c:	63 c0       	rjmp	.+198    	; 0xe14 <Dio_vidSetPinDir+0x2ce>
				{
					switch(PinLoc)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	38 8b       	std	Y+16, r19	; 0x10
     d56:	2f 87       	std	Y+15, r18	; 0x0f
     d58:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5a:	98 89       	ldd	r25, Y+16	; 0x10
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	d9 f1       	breq	.+118    	; 0xdd8 <Dio_vidSetPinDir+0x292>
     d62:	2f 85       	ldd	r18, Y+15	; 0x0f
     d64:	38 89       	ldd	r19, Y+16	; 0x10
     d66:	24 30       	cpi	r18, 0x04	; 4
     d68:	31 05       	cpc	r19, r1
     d6a:	7c f4       	brge	.+30     	; 0xd8a <Dio_vidSetPinDir+0x244>
     d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6e:	98 89       	ldd	r25, Y+16	; 0x10
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	29 f1       	breq	.+74     	; 0xdc0 <Dio_vidSetPinDir+0x27a>
     d76:	2f 85       	ldd	r18, Y+15	; 0x0f
     d78:	38 89       	ldd	r19, Y+16	; 0x10
     d7a:	22 30       	cpi	r18, 0x02	; 2
     d7c:	31 05       	cpc	r19, r1
     d7e:	34 f5       	brge	.+76     	; 0xdcc <Dio_vidSetPinDir+0x286>
     d80:	8f 85       	ldd	r24, Y+15	; 0x0f
     d82:	98 89       	ldd	r25, Y+16	; 0x10
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	b1 f0       	breq	.+44     	; 0xdb4 <Dio_vidSetPinDir+0x26e>
     d88:	3b c2       	rjmp	.+1142   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     d8a:	2f 85       	ldd	r18, Y+15	; 0x0f
     d8c:	38 89       	ldd	r19, Y+16	; 0x10
     d8e:	25 30       	cpi	r18, 0x05	; 5
     d90:	31 05       	cpc	r19, r1
     d92:	71 f1       	breq	.+92     	; 0xdf0 <Dio_vidSetPinDir+0x2aa>
     d94:	8f 85       	ldd	r24, Y+15	; 0x0f
     d96:	98 89       	ldd	r25, Y+16	; 0x10
     d98:	85 30       	cpi	r24, 0x05	; 5
     d9a:	91 05       	cpc	r25, r1
     d9c:	1c f1       	brlt	.+70     	; 0xde4 <Dio_vidSetPinDir+0x29e>
     d9e:	2f 85       	ldd	r18, Y+15	; 0x0f
     da0:	38 89       	ldd	r19, Y+16	; 0x10
     da2:	26 30       	cpi	r18, 0x06	; 6
     da4:	31 05       	cpc	r19, r1
     da6:	51 f1       	breq	.+84     	; 0xdfc <Dio_vidSetPinDir+0x2b6>
     da8:	8f 85       	ldd	r24, Y+15	; 0x0f
     daa:	98 89       	ldd	r25, Y+16	; 0x10
     dac:	87 30       	cpi	r24, 0x07	; 7
     dae:	91 05       	cpc	r25, r1
     db0:	59 f1       	breq	.+86     	; 0xe08 <Dio_vidSetPinDir+0x2c2>
     db2:	26 c2       	rjmp	.+1100   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRB.Bits.Pin0 =1;
     db4:	e7 e3       	ldi	r30, 0x37	; 55
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	81 60       	ori	r24, 0x01	; 1
     dbc:	80 83       	st	Z, r24
     dbe:	20 c2       	rjmp	.+1088   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRB.Bits.Pin1 =1;
     dc0:	e7 e3       	ldi	r30, 0x37	; 55
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	80 83       	st	Z, r24
     dca:	1a c2       	rjmp	.+1076   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRB.Bits.Pin2 =1;
     dcc:	e7 e3       	ldi	r30, 0x37	; 55
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	84 60       	ori	r24, 0x04	; 4
     dd4:	80 83       	st	Z, r24
     dd6:	14 c2       	rjmp	.+1064   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRB.Bits.Pin3 =1;
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 60       	ori	r24, 0x08	; 8
     de0:	80 83       	st	Z, r24
     de2:	0e c2       	rjmp	.+1052   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRB.Bits.Pin4 =1;
     de4:	e7 e3       	ldi	r30, 0x37	; 55
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 61       	ori	r24, 0x10	; 16
     dec:	80 83       	st	Z, r24
     dee:	08 c2       	rjmp	.+1040   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRB.Bits.Pin5 =1;
     df0:	e7 e3       	ldi	r30, 0x37	; 55
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 62       	ori	r24, 0x20	; 32
     df8:	80 83       	st	Z, r24
     dfa:	02 c2       	rjmp	.+1028   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRB.Bits.Pin6 =1;
     dfc:	e7 e3       	ldi	r30, 0x37	; 55
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 64       	ori	r24, 0x40	; 64
     e04:	80 83       	st	Z, r24
     e06:	fc c1       	rjmp	.+1016   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRB.Bits.Pin7 =1;
     e08:	e7 e3       	ldi	r30, 0x37	; 55
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 68       	ori	r24, 0x80	; 128
     e10:	80 83       	st	Z, r24
     e12:	f6 c1       	rjmp	.+1004   	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	3e 87       	std	Y+14, r19	; 0x0e
     e1c:	2d 87       	std	Y+13, r18	; 0x0d
     e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e20:	9e 85       	ldd	r25, Y+14	; 0x0e
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	91 05       	cpc	r25, r1
     e26:	d9 f1       	breq	.+118    	; 0xe9e <Dio_vidSetPinDir+0x358>
     e28:	2d 85       	ldd	r18, Y+13	; 0x0d
     e2a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e2c:	24 30       	cpi	r18, 0x04	; 4
     e2e:	31 05       	cpc	r19, r1
     e30:	7c f4       	brge	.+30     	; 0xe50 <Dio_vidSetPinDir+0x30a>
     e32:	8d 85       	ldd	r24, Y+13	; 0x0d
     e34:	9e 85       	ldd	r25, Y+14	; 0x0e
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	91 05       	cpc	r25, r1
     e3a:	29 f1       	breq	.+74     	; 0xe86 <Dio_vidSetPinDir+0x340>
     e3c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e3e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	34 f5       	brge	.+76     	; 0xe92 <Dio_vidSetPinDir+0x34c>
     e46:	8d 85       	ldd	r24, Y+13	; 0x0d
     e48:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	b1 f0       	breq	.+44     	; 0xe7a <Dio_vidSetPinDir+0x334>
     e4e:	d8 c1       	rjmp	.+944    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     e50:	2d 85       	ldd	r18, Y+13	; 0x0d
     e52:	3e 85       	ldd	r19, Y+14	; 0x0e
     e54:	25 30       	cpi	r18, 0x05	; 5
     e56:	31 05       	cpc	r19, r1
     e58:	71 f1       	breq	.+92     	; 0xeb6 <Dio_vidSetPinDir+0x370>
     e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5e:	85 30       	cpi	r24, 0x05	; 5
     e60:	91 05       	cpc	r25, r1
     e62:	1c f1       	brlt	.+70     	; 0xeaa <Dio_vidSetPinDir+0x364>
     e64:	2d 85       	ldd	r18, Y+13	; 0x0d
     e66:	3e 85       	ldd	r19, Y+14	; 0x0e
     e68:	26 30       	cpi	r18, 0x06	; 6
     e6a:	31 05       	cpc	r19, r1
     e6c:	51 f1       	breq	.+84     	; 0xec2 <Dio_vidSetPinDir+0x37c>
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	87 30       	cpi	r24, 0x07	; 7
     e74:	91 05       	cpc	r25, r1
     e76:	59 f1       	breq	.+86     	; 0xece <Dio_vidSetPinDir+0x388>
     e78:	c3 c1       	rjmp	.+902    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRB.Bits.Pin0 =0;
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8e 7f       	andi	r24, 0xFE	; 254
     e82:	80 83       	st	Z, r24
     e84:	bd c1       	rjmp	.+890    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRB.Bits.Pin1 =0;
     e86:	e7 e3       	ldi	r30, 0x37	; 55
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8d 7f       	andi	r24, 0xFD	; 253
     e8e:	80 83       	st	Z, r24
     e90:	b7 c1       	rjmp	.+878    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRB.Bits.Pin2 =0;
     e92:	e7 e3       	ldi	r30, 0x37	; 55
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8b 7f       	andi	r24, 0xFB	; 251
     e9a:	80 83       	st	Z, r24
     e9c:	b1 c1       	rjmp	.+866    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRB.Bits.Pin3 =0;
     e9e:	e7 e3       	ldi	r30, 0x37	; 55
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	87 7f       	andi	r24, 0xF7	; 247
     ea6:	80 83       	st	Z, r24
     ea8:	ab c1       	rjmp	.+854    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRB.Bits.Pin4 =0;
     eaa:	e7 e3       	ldi	r30, 0x37	; 55
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	80 83       	st	Z, r24
     eb4:	a5 c1       	rjmp	.+842    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRB.Bits.Pin5 =0;
     eb6:	e7 e3       	ldi	r30, 0x37	; 55
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8f 7d       	andi	r24, 0xDF	; 223
     ebe:	80 83       	st	Z, r24
     ec0:	9f c1       	rjmp	.+830    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRB.Bits.Pin6 =0;
     ec2:	e7 e3       	ldi	r30, 0x37	; 55
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8f 7b       	andi	r24, 0xBF	; 191
     eca:	80 83       	st	Z, r24
     ecc:	99 c1       	rjmp	.+818    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRB.Bits.Pin7 =0;
     ece:	e7 e3       	ldi	r30, 0x37	; 55
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 77       	andi	r24, 0x7F	; 127
     ed6:	80 83       	st	Z, r24
     ed8:	93 c1       	rjmp	.+806    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				}
			}
			break;

		case 2:
			if(Dir ==1)
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	09 f0       	breq	.+2      	; 0xee2 <Dio_vidSetPinDir+0x39c>
     ee0:	63 c0       	rjmp	.+198    	; 0xfa8 <Dio_vidSetPinDir+0x462>
				{
					switch(PinLoc)
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	3c 87       	std	Y+12, r19	; 0x0c
     eea:	2b 87       	std	Y+11, r18	; 0x0b
     eec:	8b 85       	ldd	r24, Y+11	; 0x0b
     eee:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef0:	83 30       	cpi	r24, 0x03	; 3
     ef2:	91 05       	cpc	r25, r1
     ef4:	d9 f1       	breq	.+118    	; 0xf6c <Dio_vidSetPinDir+0x426>
     ef6:	2b 85       	ldd	r18, Y+11	; 0x0b
     ef8:	3c 85       	ldd	r19, Y+12	; 0x0c
     efa:	24 30       	cpi	r18, 0x04	; 4
     efc:	31 05       	cpc	r19, r1
     efe:	7c f4       	brge	.+30     	; 0xf1e <Dio_vidSetPinDir+0x3d8>
     f00:	8b 85       	ldd	r24, Y+11	; 0x0b
     f02:	9c 85       	ldd	r25, Y+12	; 0x0c
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	29 f1       	breq	.+74     	; 0xf54 <Dio_vidSetPinDir+0x40e>
     f0a:	2b 85       	ldd	r18, Y+11	; 0x0b
     f0c:	3c 85       	ldd	r19, Y+12	; 0x0c
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	34 f5       	brge	.+76     	; 0xf60 <Dio_vidSetPinDir+0x41a>
     f14:	8b 85       	ldd	r24, Y+11	; 0x0b
     f16:	9c 85       	ldd	r25, Y+12	; 0x0c
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	b1 f0       	breq	.+44     	; 0xf48 <Dio_vidSetPinDir+0x402>
     f1c:	71 c1       	rjmp	.+738    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     f1e:	2b 85       	ldd	r18, Y+11	; 0x0b
     f20:	3c 85       	ldd	r19, Y+12	; 0x0c
     f22:	25 30       	cpi	r18, 0x05	; 5
     f24:	31 05       	cpc	r19, r1
     f26:	71 f1       	breq	.+92     	; 0xf84 <Dio_vidSetPinDir+0x43e>
     f28:	8b 85       	ldd	r24, Y+11	; 0x0b
     f2a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f2c:	85 30       	cpi	r24, 0x05	; 5
     f2e:	91 05       	cpc	r25, r1
     f30:	1c f1       	brlt	.+70     	; 0xf78 <Dio_vidSetPinDir+0x432>
     f32:	2b 85       	ldd	r18, Y+11	; 0x0b
     f34:	3c 85       	ldd	r19, Y+12	; 0x0c
     f36:	26 30       	cpi	r18, 0x06	; 6
     f38:	31 05       	cpc	r19, r1
     f3a:	51 f1       	breq	.+84     	; 0xf90 <Dio_vidSetPinDir+0x44a>
     f3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f40:	87 30       	cpi	r24, 0x07	; 7
     f42:	91 05       	cpc	r25, r1
     f44:	59 f1       	breq	.+86     	; 0xf9c <Dio_vidSetPinDir+0x456>
     f46:	5c c1       	rjmp	.+696    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRC.Bits.Pin0 =1;
     f48:	e4 e3       	ldi	r30, 0x34	; 52
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
     f52:	56 c1       	rjmp	.+684    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRC.Bits.Pin1 =1;
     f54:	e4 e3       	ldi	r30, 0x34	; 52
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	80 83       	st	Z, r24
     f5e:	50 c1       	rjmp	.+672    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRC.Bits.Pin2 =1;
     f60:	e4 e3       	ldi	r30, 0x34	; 52
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	84 60       	ori	r24, 0x04	; 4
     f68:	80 83       	st	Z, r24
     f6a:	4a c1       	rjmp	.+660    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRC.Bits.Pin3 =1;
     f6c:	e4 e3       	ldi	r30, 0x34	; 52
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	88 60       	ori	r24, 0x08	; 8
     f74:	80 83       	st	Z, r24
     f76:	44 c1       	rjmp	.+648    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRC.Bits.Pin4 =1;
     f78:	e4 e3       	ldi	r30, 0x34	; 52
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 61       	ori	r24, 0x10	; 16
     f80:	80 83       	st	Z, r24
     f82:	3e c1       	rjmp	.+636    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRC.Bits.Pin5 =1;
     f84:	e4 e3       	ldi	r30, 0x34	; 52
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 62       	ori	r24, 0x20	; 32
     f8c:	80 83       	st	Z, r24
     f8e:	38 c1       	rjmp	.+624    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRC.Bits.Pin6 =1;
     f90:	e4 e3       	ldi	r30, 0x34	; 52
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 64       	ori	r24, 0x40	; 64
     f98:	80 83       	st	Z, r24
     f9a:	32 c1       	rjmp	.+612    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRC.Bits.Pin7 =1;
     f9c:	e4 e3       	ldi	r30, 0x34	; 52
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 68       	ori	r24, 0x80	; 128
     fa4:	80 83       	st	Z, r24
     fa6:	2c c1       	rjmp	.+600    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3a 87       	std	Y+10, r19	; 0x0a
     fb0:	29 87       	std	Y+9, r18	; 0x09
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	91 05       	cpc	r25, r1
     fba:	d9 f1       	breq	.+118    	; 0x1032 <Dio_vidSetPinDir+0x4ec>
     fbc:	29 85       	ldd	r18, Y+9	; 0x09
     fbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc0:	24 30       	cpi	r18, 0x04	; 4
     fc2:	31 05       	cpc	r19, r1
     fc4:	7c f4       	brge	.+30     	; 0xfe4 <Dio_vidSetPinDir+0x49e>
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	91 05       	cpc	r25, r1
     fce:	29 f1       	breq	.+74     	; 0x101a <Dio_vidSetPinDir+0x4d4>
     fd0:	29 85       	ldd	r18, Y+9	; 0x09
     fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	34 f5       	brge	.+76     	; 0x1026 <Dio_vidSetPinDir+0x4e0>
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	b1 f0       	breq	.+44     	; 0x100e <Dio_vidSetPinDir+0x4c8>
     fe2:	0e c1       	rjmp	.+540    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
     fe4:	29 85       	ldd	r18, Y+9	; 0x09
     fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe8:	25 30       	cpi	r18, 0x05	; 5
     fea:	31 05       	cpc	r19, r1
     fec:	71 f1       	breq	.+92     	; 0x104a <Dio_vidSetPinDir+0x504>
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff2:	85 30       	cpi	r24, 0x05	; 5
     ff4:	91 05       	cpc	r25, r1
     ff6:	1c f1       	brlt	.+70     	; 0x103e <Dio_vidSetPinDir+0x4f8>
     ff8:	29 85       	ldd	r18, Y+9	; 0x09
     ffa:	3a 85       	ldd	r19, Y+10	; 0x0a
     ffc:	26 30       	cpi	r18, 0x06	; 6
     ffe:	31 05       	cpc	r19, r1
    1000:	51 f1       	breq	.+84     	; 0x1056 <Dio_vidSetPinDir+0x510>
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	87 30       	cpi	r24, 0x07	; 7
    1008:	91 05       	cpc	r25, r1
    100a:	59 f1       	breq	.+86     	; 0x1062 <Dio_vidSetPinDir+0x51c>
    100c:	f9 c0       	rjmp	.+498    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRC.Bits.Pin0 =0;
    100e:	e4 e3       	ldi	r30, 0x34	; 52
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	80 83       	st	Z, r24
    1018:	f3 c0       	rjmp	.+486    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRC.Bits.Pin1 =0;
    101a:	e4 e3       	ldi	r30, 0x34	; 52
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8d 7f       	andi	r24, 0xFD	; 253
    1022:	80 83       	st	Z, r24
    1024:	ed c0       	rjmp	.+474    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRC.Bits.Pin2 =0;
    1026:	e4 e3       	ldi	r30, 0x34	; 52
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8b 7f       	andi	r24, 0xFB	; 251
    102e:	80 83       	st	Z, r24
    1030:	e7 c0       	rjmp	.+462    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRC.Bits.Pin3 =0;
    1032:	e4 e3       	ldi	r30, 0x34	; 52
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	87 7f       	andi	r24, 0xF7	; 247
    103a:	80 83       	st	Z, r24
    103c:	e1 c0       	rjmp	.+450    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRC.Bits.Pin4 =0;
    103e:	e4 e3       	ldi	r30, 0x34	; 52
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8f 7e       	andi	r24, 0xEF	; 239
    1046:	80 83       	st	Z, r24
    1048:	db c0       	rjmp	.+438    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRC.Bits.Pin5 =0;
    104a:	e4 e3       	ldi	r30, 0x34	; 52
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 7d       	andi	r24, 0xDF	; 223
    1052:	80 83       	st	Z, r24
    1054:	d5 c0       	rjmp	.+426    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRC.Bits.Pin6 =0;
    1056:	e4 e3       	ldi	r30, 0x34	; 52
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8f 7b       	andi	r24, 0xBF	; 191
    105e:	80 83       	st	Z, r24
    1060:	cf c0       	rjmp	.+414    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRC.Bits.Pin7 =0;
    1062:	e4 e3       	ldi	r30, 0x34	; 52
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8f 77       	andi	r24, 0x7F	; 127
    106a:	80 83       	st	Z, r24
    106c:	c9 c0       	rjmp	.+402    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
			}
		break;


		case 3:
			if(Dir ==1)
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	09 f0       	breq	.+2      	; 0x1076 <Dio_vidSetPinDir+0x530>
    1074:	63 c0       	rjmp	.+198    	; 0x113c <Dio_vidSetPinDir+0x5f6>
				{
					switch(PinLoc)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	38 87       	std	Y+8, r19	; 0x08
    107e:	2f 83       	std	Y+7, r18	; 0x07
    1080:	8f 81       	ldd	r24, Y+7	; 0x07
    1082:	98 85       	ldd	r25, Y+8	; 0x08
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	91 05       	cpc	r25, r1
    1088:	d9 f1       	breq	.+118    	; 0x1100 <Dio_vidSetPinDir+0x5ba>
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	38 85       	ldd	r19, Y+8	; 0x08
    108e:	24 30       	cpi	r18, 0x04	; 4
    1090:	31 05       	cpc	r19, r1
    1092:	7c f4       	brge	.+30     	; 0x10b2 <Dio_vidSetPinDir+0x56c>
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	98 85       	ldd	r25, Y+8	; 0x08
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	91 05       	cpc	r25, r1
    109c:	29 f1       	breq	.+74     	; 0x10e8 <Dio_vidSetPinDir+0x5a2>
    109e:	2f 81       	ldd	r18, Y+7	; 0x07
    10a0:	38 85       	ldd	r19, Y+8	; 0x08
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	34 f5       	brge	.+76     	; 0x10f4 <Dio_vidSetPinDir+0x5ae>
    10a8:	8f 81       	ldd	r24, Y+7	; 0x07
    10aa:	98 85       	ldd	r25, Y+8	; 0x08
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	b1 f0       	breq	.+44     	; 0x10dc <Dio_vidSetPinDir+0x596>
    10b0:	a7 c0       	rjmp	.+334    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
    10b2:	2f 81       	ldd	r18, Y+7	; 0x07
    10b4:	38 85       	ldd	r19, Y+8	; 0x08
    10b6:	25 30       	cpi	r18, 0x05	; 5
    10b8:	31 05       	cpc	r19, r1
    10ba:	71 f1       	breq	.+92     	; 0x1118 <Dio_vidSetPinDir+0x5d2>
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	98 85       	ldd	r25, Y+8	; 0x08
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	91 05       	cpc	r25, r1
    10c4:	1c f1       	brlt	.+70     	; 0x110c <Dio_vidSetPinDir+0x5c6>
    10c6:	2f 81       	ldd	r18, Y+7	; 0x07
    10c8:	38 85       	ldd	r19, Y+8	; 0x08
    10ca:	26 30       	cpi	r18, 0x06	; 6
    10cc:	31 05       	cpc	r19, r1
    10ce:	51 f1       	breq	.+84     	; 0x1124 <Dio_vidSetPinDir+0x5de>
    10d0:	8f 81       	ldd	r24, Y+7	; 0x07
    10d2:	98 85       	ldd	r25, Y+8	; 0x08
    10d4:	87 30       	cpi	r24, 0x07	; 7
    10d6:	91 05       	cpc	r25, r1
    10d8:	59 f1       	breq	.+86     	; 0x1130 <Dio_vidSetPinDir+0x5ea>
    10da:	92 c0       	rjmp	.+292    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					{
						case 0:
							DDRD.Bits.Pin0 =1;
    10dc:	e1 e3       	ldi	r30, 0x31	; 49
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	80 83       	st	Z, r24
    10e6:	8c c0       	rjmp	.+280    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 1:
							DDRD.Bits.Pin1 =1;
    10e8:	e1 e3       	ldi	r30, 0x31	; 49
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	82 60       	ori	r24, 0x02	; 2
    10f0:	80 83       	st	Z, r24
    10f2:	86 c0       	rjmp	.+268    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 2:
							DDRD.Bits.Pin2 =1;
    10f4:	e1 e3       	ldi	r30, 0x31	; 49
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	84 60       	ori	r24, 0x04	; 4
    10fc:	80 83       	st	Z, r24
    10fe:	80 c0       	rjmp	.+256    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 3:
							DDRD.Bits.Pin3 =1;
    1100:	e1 e3       	ldi	r30, 0x31	; 49
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	80 83       	st	Z, r24
    110a:	7a c0       	rjmp	.+244    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 4:
							DDRD.Bits.Pin4 =1;
    110c:	e1 e3       	ldi	r30, 0x31	; 49
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	80 83       	st	Z, r24
    1116:	74 c0       	rjmp	.+232    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 5:
							DDRD.Bits.Pin5 =1;
    1118:	e1 e3       	ldi	r30, 0x31	; 49
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	80 83       	st	Z, r24
    1122:	6e c0       	rjmp	.+220    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 6:
							DDRD.Bits.Pin6 =1;
    1124:	e1 e3       	ldi	r30, 0x31	; 49
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 64       	ori	r24, 0x40	; 64
    112c:	80 83       	st	Z, r24
    112e:	68 c0       	rjmp	.+208    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;

						case 7:
							DDRD.Bits.Pin7 =1;
    1130:	e1 e3       	ldi	r30, 0x31	; 49
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 68       	ori	r24, 0x80	; 128
    1138:	80 83       	st	Z, r24
    113a:	62 c0       	rjmp	.+196    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3e 83       	std	Y+6, r19	; 0x06
    1144:	2d 83       	std	Y+5, r18	; 0x05
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	d9 f1       	breq	.+118    	; 0x11c6 <Dio_vidSetPinDir+0x680>
    1150:	2d 81       	ldd	r18, Y+5	; 0x05
    1152:	3e 81       	ldd	r19, Y+6	; 0x06
    1154:	24 30       	cpi	r18, 0x04	; 4
    1156:	31 05       	cpc	r19, r1
    1158:	7c f4       	brge	.+30     	; 0x1178 <Dio_vidSetPinDir+0x632>
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	29 f1       	breq	.+74     	; 0x11ae <Dio_vidSetPinDir+0x668>
    1164:	2d 81       	ldd	r18, Y+5	; 0x05
    1166:	3e 81       	ldd	r19, Y+6	; 0x06
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	34 f5       	brge	.+76     	; 0x11ba <Dio_vidSetPinDir+0x674>
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	b1 f0       	breq	.+44     	; 0x11a2 <Dio_vidSetPinDir+0x65c>
    1176:	44 c0       	rjmp	.+136    	; 0x1200 <Dio_vidSetPinDir+0x6ba>
    1178:	2d 81       	ldd	r18, Y+5	; 0x05
    117a:	3e 81       	ldd	r19, Y+6	; 0x06
    117c:	25 30       	cpi	r18, 0x05	; 5
    117e:	31 05       	cpc	r19, r1
    1180:	71 f1       	breq	.+92     	; 0x11de <Dio_vidSetPinDir+0x698>
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	85 30       	cpi	r24, 0x05	; 5
    1188:	91 05       	cpc	r25, r1
    118a:	1c f1       	brlt	.+70     	; 0x11d2 <Dio_vidSetPinDir+0x68c>
    118c:	2d 81       	ldd	r18, Y+5	; 0x05
    118e:	3e 81       	ldd	r19, Y+6	; 0x06
    1190:	26 30       	cpi	r18, 0x06	; 6
    1192:	31 05       	cpc	r19, r1
    1194:	51 f1       	breq	.+84     	; 0x11ea <Dio_vidSetPinDir+0x6a4>
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	87 30       	cpi	r24, 0x07	; 7
    119c:	91 05       	cpc	r25, r1
    119e:	59 f1       	breq	.+86     	; 0x11f6 <Dio_vidSetPinDir+0x6b0>
    11a0:	2f c0       	rjmp	.+94     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
				{
					case 0:
						DDRD.Bits.Pin0 =0;
    11a2:	e1 e3       	ldi	r30, 0x31	; 49
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8e 7f       	andi	r24, 0xFE	; 254
    11aa:	80 83       	st	Z, r24
    11ac:	29 c0       	rjmp	.+82     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 1:
						DDRD.Bits.Pin1 =0;
    11ae:	e1 e3       	ldi	r30, 0x31	; 49
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8d 7f       	andi	r24, 0xFD	; 253
    11b6:	80 83       	st	Z, r24
    11b8:	23 c0       	rjmp	.+70     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 2:
						DDRD.Bits.Pin2 =0;
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8b 7f       	andi	r24, 0xFB	; 251
    11c2:	80 83       	st	Z, r24
    11c4:	1d c0       	rjmp	.+58     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 3:
						DDRD.Bits.Pin3 =0;
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	87 7f       	andi	r24, 0xF7	; 247
    11ce:	80 83       	st	Z, r24
    11d0:	17 c0       	rjmp	.+46     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 4:
						DDRD.Bits.Pin4 =0;
    11d2:	e1 e3       	ldi	r30, 0x31	; 49
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7e       	andi	r24, 0xEF	; 239
    11da:	80 83       	st	Z, r24
    11dc:	11 c0       	rjmp	.+34     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 5:
						DDRD.Bits.Pin5 =0;
    11de:	e1 e3       	ldi	r30, 0x31	; 49
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8f 7d       	andi	r24, 0xDF	; 223
    11e6:	80 83       	st	Z, r24
    11e8:	0b c0       	rjmp	.+22     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 6:
						DDRD.Bits.Pin6 =0;
    11ea:	e1 e3       	ldi	r30, 0x31	; 49
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	80 83       	st	Z, r24
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <Dio_vidSetPinDir+0x6ba>
					break;

					case 7:
						DDRD.Bits.Pin7 =0;
    11f6:	e1 e3       	ldi	r30, 0x31	; 49
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 77       	andi	r24, 0x7F	; 127
    11fe:	80 83       	st	Z, r24
					break;
				}
			}
		break;
	}
}
    1200:	66 96       	adiw	r28, 0x16	; 22
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin , u8 Val)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	66 97       	sbiw	r28, 0x16	; 22
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	8b 83       	std	Y+3, r24	; 0x03
    1228:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	86 95       	lsr	r24
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	87 70       	andi	r24, 0x07	; 7
    1238:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3e 8b       	std	Y+22, r19	; 0x16
    1242:	2d 8b       	std	Y+21, r18	; 0x15
    1244:	8d 89       	ldd	r24, Y+21	; 0x15
    1246:	9e 89       	ldd	r25, Y+22	; 0x16
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	09 f4       	brne	.+2      	; 0x1250 <Dio_vidSetPinVal+0x3e>
    124e:	e1 c0       	rjmp	.+450    	; 0x1412 <Dio_vidSetPinVal+0x200>
    1250:	2d 89       	ldd	r18, Y+21	; 0x15
    1252:	3e 89       	ldd	r19, Y+22	; 0x16
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <Dio_vidSetPinVal+0x52>
    125a:	8d 89       	ldd	r24, Y+21	; 0x15
    125c:	9e 89       	ldd	r25, Y+22	; 0x16
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	71 f0       	breq	.+28     	; 0x127e <Dio_vidSetPinVal+0x6c>
    1262:	34 c3       	rjmp	.+1640   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    1264:	2d 89       	ldd	r18, Y+21	; 0x15
    1266:	3e 89       	ldd	r19, Y+22	; 0x16
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <Dio_vidSetPinVal+0x5e>
    126e:	9b c1       	rjmp	.+822    	; 0x15a6 <Dio_vidSetPinVal+0x394>
    1270:	8d 89       	ldd	r24, Y+21	; 0x15
    1272:	9e 89       	ldd	r25, Y+22	; 0x16
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	91 05       	cpc	r25, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <Dio_vidSetPinVal+0x6a>
    127a:	5f c2       	rjmp	.+1214   	; 0x173a <Dio_vidSetPinVal+0x528>
    127c:	27 c3       	rjmp	.+1614   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
		case 0:
			if(Val ==1)
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	09 f0       	breq	.+2      	; 0x1286 <Dio_vidSetPinVal+0x74>
    1284:	63 c0       	rjmp	.+198    	; 0x134c <Dio_vidSetPinVal+0x13a>
				{
					switch(PinLoc)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3c 8b       	std	Y+20, r19	; 0x14
    128e:	2b 8b       	std	Y+19, r18	; 0x13
    1290:	8b 89       	ldd	r24, Y+19	; 0x13
    1292:	9c 89       	ldd	r25, Y+20	; 0x14
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	d9 f1       	breq	.+118    	; 0x1310 <Dio_vidSetPinVal+0xfe>
    129a:	2b 89       	ldd	r18, Y+19	; 0x13
    129c:	3c 89       	ldd	r19, Y+20	; 0x14
    129e:	24 30       	cpi	r18, 0x04	; 4
    12a0:	31 05       	cpc	r19, r1
    12a2:	7c f4       	brge	.+30     	; 0x12c2 <Dio_vidSetPinVal+0xb0>
    12a4:	8b 89       	ldd	r24, Y+19	; 0x13
    12a6:	9c 89       	ldd	r25, Y+20	; 0x14
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	29 f1       	breq	.+74     	; 0x12f8 <Dio_vidSetPinVal+0xe6>
    12ae:	2b 89       	ldd	r18, Y+19	; 0x13
    12b0:	3c 89       	ldd	r19, Y+20	; 0x14
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	34 f5       	brge	.+76     	; 0x1304 <Dio_vidSetPinVal+0xf2>
    12b8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ba:	9c 89       	ldd	r25, Y+20	; 0x14
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	b1 f0       	breq	.+44     	; 0x12ec <Dio_vidSetPinVal+0xda>
    12c0:	05 c3       	rjmp	.+1546   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    12c2:	2b 89       	ldd	r18, Y+19	; 0x13
    12c4:	3c 89       	ldd	r19, Y+20	; 0x14
    12c6:	25 30       	cpi	r18, 0x05	; 5
    12c8:	31 05       	cpc	r19, r1
    12ca:	71 f1       	breq	.+92     	; 0x1328 <Dio_vidSetPinVal+0x116>
    12cc:	8b 89       	ldd	r24, Y+19	; 0x13
    12ce:	9c 89       	ldd	r25, Y+20	; 0x14
    12d0:	85 30       	cpi	r24, 0x05	; 5
    12d2:	91 05       	cpc	r25, r1
    12d4:	1c f1       	brlt	.+70     	; 0x131c <Dio_vidSetPinVal+0x10a>
    12d6:	2b 89       	ldd	r18, Y+19	; 0x13
    12d8:	3c 89       	ldd	r19, Y+20	; 0x14
    12da:	26 30       	cpi	r18, 0x06	; 6
    12dc:	31 05       	cpc	r19, r1
    12de:	51 f1       	breq	.+84     	; 0x1334 <Dio_vidSetPinVal+0x122>
    12e0:	8b 89       	ldd	r24, Y+19	; 0x13
    12e2:	9c 89       	ldd	r25, Y+20	; 0x14
    12e4:	87 30       	cpi	r24, 0x07	; 7
    12e6:	91 05       	cpc	r25, r1
    12e8:	59 f1       	breq	.+86     	; 0x1340 <Dio_vidSetPinVal+0x12e>
    12ea:	f0 c2       	rjmp	.+1504   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTA.Bits.Pin0 =1;
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	80 83       	st	Z, r24
    12f6:	ea c2       	rjmp	.+1492   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTA.Bits.Pin1 =1;
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	82 60       	ori	r24, 0x02	; 2
    1300:	80 83       	st	Z, r24
    1302:	e4 c2       	rjmp	.+1480   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTA.Bits.Pin2 =1;
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	84 60       	ori	r24, 0x04	; 4
    130c:	80 83       	st	Z, r24
    130e:	de c2       	rjmp	.+1468   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTA.Bits.Pin3 =1;
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	80 83       	st	Z, r24
    131a:	d8 c2       	rjmp	.+1456   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTA.Bits.Pin4 =1;
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 61       	ori	r24, 0x10	; 16
    1324:	80 83       	st	Z, r24
    1326:	d2 c2       	rjmp	.+1444   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTA.Bits.Pin5 =1;
    1328:	eb e3       	ldi	r30, 0x3B	; 59
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 62       	ori	r24, 0x20	; 32
    1330:	80 83       	st	Z, r24
    1332:	cc c2       	rjmp	.+1432   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTA.Bits.Pin6 =1;
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	80 64       	ori	r24, 0x40	; 64
    133c:	80 83       	st	Z, r24
    133e:	c6 c2       	rjmp	.+1420   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTA.Bits.Pin7 =1;
    1340:	eb e3       	ldi	r30, 0x3B	; 59
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	80 83       	st	Z, r24
    134a:	c0 c2       	rjmp	.+1408   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3a 8b       	std	Y+18, r19	; 0x12
    1354:	29 8b       	std	Y+17, r18	; 0x11
    1356:	89 89       	ldd	r24, Y+17	; 0x11
    1358:	9a 89       	ldd	r25, Y+18	; 0x12
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	d9 f1       	breq	.+118    	; 0x13d6 <Dio_vidSetPinVal+0x1c4>
    1360:	29 89       	ldd	r18, Y+17	; 0x11
    1362:	3a 89       	ldd	r19, Y+18	; 0x12
    1364:	24 30       	cpi	r18, 0x04	; 4
    1366:	31 05       	cpc	r19, r1
    1368:	7c f4       	brge	.+30     	; 0x1388 <Dio_vidSetPinVal+0x176>
    136a:	89 89       	ldd	r24, Y+17	; 0x11
    136c:	9a 89       	ldd	r25, Y+18	; 0x12
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	29 f1       	breq	.+74     	; 0x13be <Dio_vidSetPinVal+0x1ac>
    1374:	29 89       	ldd	r18, Y+17	; 0x11
    1376:	3a 89       	ldd	r19, Y+18	; 0x12
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	34 f5       	brge	.+76     	; 0x13ca <Dio_vidSetPinVal+0x1b8>
    137e:	89 89       	ldd	r24, Y+17	; 0x11
    1380:	9a 89       	ldd	r25, Y+18	; 0x12
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	b1 f0       	breq	.+44     	; 0x13b2 <Dio_vidSetPinVal+0x1a0>
    1386:	a2 c2       	rjmp	.+1348   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    1388:	29 89       	ldd	r18, Y+17	; 0x11
    138a:	3a 89       	ldd	r19, Y+18	; 0x12
    138c:	25 30       	cpi	r18, 0x05	; 5
    138e:	31 05       	cpc	r19, r1
    1390:	71 f1       	breq	.+92     	; 0x13ee <Dio_vidSetPinVal+0x1dc>
    1392:	89 89       	ldd	r24, Y+17	; 0x11
    1394:	9a 89       	ldd	r25, Y+18	; 0x12
    1396:	85 30       	cpi	r24, 0x05	; 5
    1398:	91 05       	cpc	r25, r1
    139a:	1c f1       	brlt	.+70     	; 0x13e2 <Dio_vidSetPinVal+0x1d0>
    139c:	29 89       	ldd	r18, Y+17	; 0x11
    139e:	3a 89       	ldd	r19, Y+18	; 0x12
    13a0:	26 30       	cpi	r18, 0x06	; 6
    13a2:	31 05       	cpc	r19, r1
    13a4:	51 f1       	breq	.+84     	; 0x13fa <Dio_vidSetPinVal+0x1e8>
    13a6:	89 89       	ldd	r24, Y+17	; 0x11
    13a8:	9a 89       	ldd	r25, Y+18	; 0x12
    13aa:	87 30       	cpi	r24, 0x07	; 7
    13ac:	91 05       	cpc	r25, r1
    13ae:	59 f1       	breq	.+86     	; 0x1406 <Dio_vidSetPinVal+0x1f4>
    13b0:	8d c2       	rjmp	.+1306   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTA.Bits.Pin0 =0;
    13b2:	eb e3       	ldi	r30, 0x3B	; 59
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8e 7f       	andi	r24, 0xFE	; 254
    13ba:	80 83       	st	Z, r24
    13bc:	87 c2       	rjmp	.+1294   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTA.Bits.Pin1 =0;
    13be:	eb e3       	ldi	r30, 0x3B	; 59
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8d 7f       	andi	r24, 0xFD	; 253
    13c6:	80 83       	st	Z, r24
    13c8:	81 c2       	rjmp	.+1282   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTA.Bits.Pin2 =0;
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8b 7f       	andi	r24, 0xFB	; 251
    13d2:	80 83       	st	Z, r24
    13d4:	7b c2       	rjmp	.+1270   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTA.Bits.Pin3 =0;
    13d6:	eb e3       	ldi	r30, 0x3B	; 59
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	87 7f       	andi	r24, 0xF7	; 247
    13de:	80 83       	st	Z, r24
    13e0:	75 c2       	rjmp	.+1258   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTA.Bits.Pin4 =0;
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8f 7e       	andi	r24, 0xEF	; 239
    13ea:	80 83       	st	Z, r24
    13ec:	6f c2       	rjmp	.+1246   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTA.Bits.Pin5 =0;
    13ee:	eb e3       	ldi	r30, 0x3B	; 59
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 7d       	andi	r24, 0xDF	; 223
    13f6:	80 83       	st	Z, r24
    13f8:	69 c2       	rjmp	.+1234   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTA.Bits.Pin6 =0;
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 7b       	andi	r24, 0xBF	; 191
    1402:	80 83       	st	Z, r24
    1404:	63 c2       	rjmp	.+1222   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTA.Bits.Pin7 =0;
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8f 77       	andi	r24, 0x7F	; 127
    140e:	80 83       	st	Z, r24
    1410:	5d c2       	rjmp	.+1210   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				}
			}
		break;

		case 1:
			if(Val ==1)
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	09 f0       	breq	.+2      	; 0x141a <Dio_vidSetPinVal+0x208>
    1418:	63 c0       	rjmp	.+198    	; 0x14e0 <Dio_vidSetPinVal+0x2ce>
				{
					switch(PinLoc)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	38 8b       	std	Y+16, r19	; 0x10
    1422:	2f 87       	std	Y+15, r18	; 0x0f
    1424:	8f 85       	ldd	r24, Y+15	; 0x0f
    1426:	98 89       	ldd	r25, Y+16	; 0x10
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	d9 f1       	breq	.+118    	; 0x14a4 <Dio_vidSetPinVal+0x292>
    142e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1430:	38 89       	ldd	r19, Y+16	; 0x10
    1432:	24 30       	cpi	r18, 0x04	; 4
    1434:	31 05       	cpc	r19, r1
    1436:	7c f4       	brge	.+30     	; 0x1456 <Dio_vidSetPinVal+0x244>
    1438:	8f 85       	ldd	r24, Y+15	; 0x0f
    143a:	98 89       	ldd	r25, Y+16	; 0x10
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	29 f1       	breq	.+74     	; 0x148c <Dio_vidSetPinVal+0x27a>
    1442:	2f 85       	ldd	r18, Y+15	; 0x0f
    1444:	38 89       	ldd	r19, Y+16	; 0x10
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	34 f5       	brge	.+76     	; 0x1498 <Dio_vidSetPinVal+0x286>
    144c:	8f 85       	ldd	r24, Y+15	; 0x0f
    144e:	98 89       	ldd	r25, Y+16	; 0x10
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	b1 f0       	breq	.+44     	; 0x1480 <Dio_vidSetPinVal+0x26e>
    1454:	3b c2       	rjmp	.+1142   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    1456:	2f 85       	ldd	r18, Y+15	; 0x0f
    1458:	38 89       	ldd	r19, Y+16	; 0x10
    145a:	25 30       	cpi	r18, 0x05	; 5
    145c:	31 05       	cpc	r19, r1
    145e:	71 f1       	breq	.+92     	; 0x14bc <Dio_vidSetPinVal+0x2aa>
    1460:	8f 85       	ldd	r24, Y+15	; 0x0f
    1462:	98 89       	ldd	r25, Y+16	; 0x10
    1464:	85 30       	cpi	r24, 0x05	; 5
    1466:	91 05       	cpc	r25, r1
    1468:	1c f1       	brlt	.+70     	; 0x14b0 <Dio_vidSetPinVal+0x29e>
    146a:	2f 85       	ldd	r18, Y+15	; 0x0f
    146c:	38 89       	ldd	r19, Y+16	; 0x10
    146e:	26 30       	cpi	r18, 0x06	; 6
    1470:	31 05       	cpc	r19, r1
    1472:	51 f1       	breq	.+84     	; 0x14c8 <Dio_vidSetPinVal+0x2b6>
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	98 89       	ldd	r25, Y+16	; 0x10
    1478:	87 30       	cpi	r24, 0x07	; 7
    147a:	91 05       	cpc	r25, r1
    147c:	59 f1       	breq	.+86     	; 0x14d4 <Dio_vidSetPinVal+0x2c2>
    147e:	26 c2       	rjmp	.+1100   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTB.Bits.Pin0 =1;
    1480:	e8 e3       	ldi	r30, 0x38	; 56
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	81 60       	ori	r24, 0x01	; 1
    1488:	80 83       	st	Z, r24
    148a:	20 c2       	rjmp	.+1088   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTB.Bits.Pin1 =1;
    148c:	e8 e3       	ldi	r30, 0x38	; 56
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	82 60       	ori	r24, 0x02	; 2
    1494:	80 83       	st	Z, r24
    1496:	1a c2       	rjmp	.+1076   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTB.Bits.Pin2 =1;
    1498:	e8 e3       	ldi	r30, 0x38	; 56
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	84 60       	ori	r24, 0x04	; 4
    14a0:	80 83       	st	Z, r24
    14a2:	14 c2       	rjmp	.+1064   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTB.Bits.Pin3 =1;
    14a4:	e8 e3       	ldi	r30, 0x38	; 56
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	88 60       	ori	r24, 0x08	; 8
    14ac:	80 83       	st	Z, r24
    14ae:	0e c2       	rjmp	.+1052   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTB.Bits.Pin4 =1;
    14b0:	e8 e3       	ldi	r30, 0x38	; 56
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 61       	ori	r24, 0x10	; 16
    14b8:	80 83       	st	Z, r24
    14ba:	08 c2       	rjmp	.+1040   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTB.Bits.Pin5 =1;
    14bc:	e8 e3       	ldi	r30, 0x38	; 56
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 62       	ori	r24, 0x20	; 32
    14c4:	80 83       	st	Z, r24
    14c6:	02 c2       	rjmp	.+1028   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTB.Bits.Pin6 =1;
    14c8:	e8 e3       	ldi	r30, 0x38	; 56
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 64       	ori	r24, 0x40	; 64
    14d0:	80 83       	st	Z, r24
    14d2:	fc c1       	rjmp	.+1016   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTB.Bits.Pin7 =1;
    14d4:	e8 e3       	ldi	r30, 0x38	; 56
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	80 68       	ori	r24, 0x80	; 128
    14dc:	80 83       	st	Z, r24
    14de:	f6 c1       	rjmp	.+1004   	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3e 87       	std	Y+14, r19	; 0x0e
    14e8:	2d 87       	std	Y+13, r18	; 0x0d
    14ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	91 05       	cpc	r25, r1
    14f2:	d9 f1       	breq	.+118    	; 0x156a <Dio_vidSetPinVal+0x358>
    14f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    14f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14f8:	24 30       	cpi	r18, 0x04	; 4
    14fa:	31 05       	cpc	r19, r1
    14fc:	7c f4       	brge	.+30     	; 0x151c <Dio_vidSetPinVal+0x30a>
    14fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1500:	9e 85       	ldd	r25, Y+14	; 0x0e
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	91 05       	cpc	r25, r1
    1506:	29 f1       	breq	.+74     	; 0x1552 <Dio_vidSetPinVal+0x340>
    1508:	2d 85       	ldd	r18, Y+13	; 0x0d
    150a:	3e 85       	ldd	r19, Y+14	; 0x0e
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	34 f5       	brge	.+76     	; 0x155e <Dio_vidSetPinVal+0x34c>
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	b1 f0       	breq	.+44     	; 0x1546 <Dio_vidSetPinVal+0x334>
    151a:	d8 c1       	rjmp	.+944    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    151c:	2d 85       	ldd	r18, Y+13	; 0x0d
    151e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1520:	25 30       	cpi	r18, 0x05	; 5
    1522:	31 05       	cpc	r19, r1
    1524:	71 f1       	breq	.+92     	; 0x1582 <Dio_vidSetPinVal+0x370>
    1526:	8d 85       	ldd	r24, Y+13	; 0x0d
    1528:	9e 85       	ldd	r25, Y+14	; 0x0e
    152a:	85 30       	cpi	r24, 0x05	; 5
    152c:	91 05       	cpc	r25, r1
    152e:	1c f1       	brlt	.+70     	; 0x1576 <Dio_vidSetPinVal+0x364>
    1530:	2d 85       	ldd	r18, Y+13	; 0x0d
    1532:	3e 85       	ldd	r19, Y+14	; 0x0e
    1534:	26 30       	cpi	r18, 0x06	; 6
    1536:	31 05       	cpc	r19, r1
    1538:	51 f1       	breq	.+84     	; 0x158e <Dio_vidSetPinVal+0x37c>
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	87 30       	cpi	r24, 0x07	; 7
    1540:	91 05       	cpc	r25, r1
    1542:	59 f1       	breq	.+86     	; 0x159a <Dio_vidSetPinVal+0x388>
    1544:	c3 c1       	rjmp	.+902    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTB.Bits.Pin0 =0;
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8e 7f       	andi	r24, 0xFE	; 254
    154e:	80 83       	st	Z, r24
    1550:	bd c1       	rjmp	.+890    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTB.Bits.Pin1 =0;
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	8d 7f       	andi	r24, 0xFD	; 253
    155a:	80 83       	st	Z, r24
    155c:	b7 c1       	rjmp	.+878    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTB.Bits.Pin2 =0;
    155e:	e8 e3       	ldi	r30, 0x38	; 56
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8b 7f       	andi	r24, 0xFB	; 251
    1566:	80 83       	st	Z, r24
    1568:	b1 c1       	rjmp	.+866    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTB.Bits.Pin3 =0;
    156a:	e8 e3       	ldi	r30, 0x38	; 56
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	87 7f       	andi	r24, 0xF7	; 247
    1572:	80 83       	st	Z, r24
    1574:	ab c1       	rjmp	.+854    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTB.Bits.Pin4 =0;
    1576:	e8 e3       	ldi	r30, 0x38	; 56
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	8f 7e       	andi	r24, 0xEF	; 239
    157e:	80 83       	st	Z, r24
    1580:	a5 c1       	rjmp	.+842    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTB.Bits.Pin5 =0;
    1582:	e8 e3       	ldi	r30, 0x38	; 56
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 7d       	andi	r24, 0xDF	; 223
    158a:	80 83       	st	Z, r24
    158c:	9f c1       	rjmp	.+830    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTB.Bits.Pin6 =0;
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8f 7b       	andi	r24, 0xBF	; 191
    1596:	80 83       	st	Z, r24
    1598:	99 c1       	rjmp	.+818    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTB.Bits.Pin7 =0;
    159a:	e8 e3       	ldi	r30, 0x38	; 56
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8f 77       	andi	r24, 0x7F	; 127
    15a2:	80 83       	st	Z, r24
    15a4:	93 c1       	rjmp	.+806    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				}
			}
			break;

		case 2:
			if(Val ==1)
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	09 f0       	breq	.+2      	; 0x15ae <Dio_vidSetPinVal+0x39c>
    15ac:	63 c0       	rjmp	.+198    	; 0x1674 <Dio_vidSetPinVal+0x462>
				{
					switch(PinLoc)
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 87       	std	Y+12, r19	; 0x0c
    15b6:	2b 87       	std	Y+11, r18	; 0x0b
    15b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	d9 f1       	breq	.+118    	; 0x1638 <Dio_vidSetPinVal+0x426>
    15c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    15c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    15c6:	24 30       	cpi	r18, 0x04	; 4
    15c8:	31 05       	cpc	r19, r1
    15ca:	7c f4       	brge	.+30     	; 0x15ea <Dio_vidSetPinVal+0x3d8>
    15cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	29 f1       	breq	.+74     	; 0x1620 <Dio_vidSetPinVal+0x40e>
    15d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    15d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	34 f5       	brge	.+76     	; 0x162c <Dio_vidSetPinVal+0x41a>
    15e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	b1 f0       	breq	.+44     	; 0x1614 <Dio_vidSetPinVal+0x402>
    15e8:	71 c1       	rjmp	.+738    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    15ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    15ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    15ee:	25 30       	cpi	r18, 0x05	; 5
    15f0:	31 05       	cpc	r19, r1
    15f2:	71 f1       	breq	.+92     	; 0x1650 <Dio_vidSetPinVal+0x43e>
    15f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f8:	85 30       	cpi	r24, 0x05	; 5
    15fa:	91 05       	cpc	r25, r1
    15fc:	1c f1       	brlt	.+70     	; 0x1644 <Dio_vidSetPinVal+0x432>
    15fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1600:	3c 85       	ldd	r19, Y+12	; 0x0c
    1602:	26 30       	cpi	r18, 0x06	; 6
    1604:	31 05       	cpc	r19, r1
    1606:	51 f1       	breq	.+84     	; 0x165c <Dio_vidSetPinVal+0x44a>
    1608:	8b 85       	ldd	r24, Y+11	; 0x0b
    160a:	9c 85       	ldd	r25, Y+12	; 0x0c
    160c:	87 30       	cpi	r24, 0x07	; 7
    160e:	91 05       	cpc	r25, r1
    1610:	59 f1       	breq	.+86     	; 0x1668 <Dio_vidSetPinVal+0x456>
    1612:	5c c1       	rjmp	.+696    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTC.Bits.Pin0 =1;
    1614:	e5 e3       	ldi	r30, 0x35	; 53
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	80 83       	st	Z, r24
    161e:	56 c1       	rjmp	.+684    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTC.Bits.Pin1 =1;
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	82 60       	ori	r24, 0x02	; 2
    1628:	80 83       	st	Z, r24
    162a:	50 c1       	rjmp	.+672    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTC.Bits.Pin2 =1;
    162c:	e5 e3       	ldi	r30, 0x35	; 53
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	84 60       	ori	r24, 0x04	; 4
    1634:	80 83       	st	Z, r24
    1636:	4a c1       	rjmp	.+660    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTC.Bits.Pin3 =1;
    1638:	e5 e3       	ldi	r30, 0x35	; 53
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	88 60       	ori	r24, 0x08	; 8
    1640:	80 83       	st	Z, r24
    1642:	44 c1       	rjmp	.+648    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTC.Bits.Pin4 =1;
    1644:	e5 e3       	ldi	r30, 0x35	; 53
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	80 61       	ori	r24, 0x10	; 16
    164c:	80 83       	st	Z, r24
    164e:	3e c1       	rjmp	.+636    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTC.Bits.Pin5 =1;
    1650:	e5 e3       	ldi	r30, 0x35	; 53
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	80 62       	ori	r24, 0x20	; 32
    1658:	80 83       	st	Z, r24
    165a:	38 c1       	rjmp	.+624    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTC.Bits.Pin6 =1;
    165c:	e5 e3       	ldi	r30, 0x35	; 53
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 64       	ori	r24, 0x40	; 64
    1664:	80 83       	st	Z, r24
    1666:	32 c1       	rjmp	.+612    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTC.Bits.Pin7 =1;
    1668:	e5 e3       	ldi	r30, 0x35	; 53
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 68       	ori	r24, 0x80	; 128
    1670:	80 83       	st	Z, r24
    1672:	2c c1       	rjmp	.+600    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3a 87       	std	Y+10, r19	; 0x0a
    167c:	29 87       	std	Y+9, r18	; 0x09
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	d9 f1       	breq	.+118    	; 0x16fe <Dio_vidSetPinVal+0x4ec>
    1688:	29 85       	ldd	r18, Y+9	; 0x09
    168a:	3a 85       	ldd	r19, Y+10	; 0x0a
    168c:	24 30       	cpi	r18, 0x04	; 4
    168e:	31 05       	cpc	r19, r1
    1690:	7c f4       	brge	.+30     	; 0x16b0 <Dio_vidSetPinVal+0x49e>
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	29 f1       	breq	.+74     	; 0x16e6 <Dio_vidSetPinVal+0x4d4>
    169c:	29 85       	ldd	r18, Y+9	; 0x09
    169e:	3a 85       	ldd	r19, Y+10	; 0x0a
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	34 f5       	brge	.+76     	; 0x16f2 <Dio_vidSetPinVal+0x4e0>
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	b1 f0       	breq	.+44     	; 0x16da <Dio_vidSetPinVal+0x4c8>
    16ae:	0e c1       	rjmp	.+540    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    16b0:	29 85       	ldd	r18, Y+9	; 0x09
    16b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b4:	25 30       	cpi	r18, 0x05	; 5
    16b6:	31 05       	cpc	r19, r1
    16b8:	71 f1       	breq	.+92     	; 0x1716 <Dio_vidSetPinVal+0x504>
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16be:	85 30       	cpi	r24, 0x05	; 5
    16c0:	91 05       	cpc	r25, r1
    16c2:	1c f1       	brlt	.+70     	; 0x170a <Dio_vidSetPinVal+0x4f8>
    16c4:	29 85       	ldd	r18, Y+9	; 0x09
    16c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16c8:	26 30       	cpi	r18, 0x06	; 6
    16ca:	31 05       	cpc	r19, r1
    16cc:	51 f1       	breq	.+84     	; 0x1722 <Dio_vidSetPinVal+0x510>
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	87 30       	cpi	r24, 0x07	; 7
    16d4:	91 05       	cpc	r25, r1
    16d6:	59 f1       	breq	.+86     	; 0x172e <Dio_vidSetPinVal+0x51c>
    16d8:	f9 c0       	rjmp	.+498    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTC.Bits.Pin0 =0;
    16da:	e5 e3       	ldi	r30, 0x35	; 53
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8e 7f       	andi	r24, 0xFE	; 254
    16e2:	80 83       	st	Z, r24
    16e4:	f3 c0       	rjmp	.+486    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTC.Bits.Pin1 =0;
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8d 7f       	andi	r24, 0xFD	; 253
    16ee:	80 83       	st	Z, r24
    16f0:	ed c0       	rjmp	.+474    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTC.Bits.Pin2 =0;
    16f2:	e5 e3       	ldi	r30, 0x35	; 53
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8b 7f       	andi	r24, 0xFB	; 251
    16fa:	80 83       	st	Z, r24
    16fc:	e7 c0       	rjmp	.+462    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTC.Bits.Pin3 =0;
    16fe:	e5 e3       	ldi	r30, 0x35	; 53
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	80 83       	st	Z, r24
    1708:	e1 c0       	rjmp	.+450    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTC.Bits.Pin4 =0;
    170a:	e5 e3       	ldi	r30, 0x35	; 53
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8f 7e       	andi	r24, 0xEF	; 239
    1712:	80 83       	st	Z, r24
    1714:	db c0       	rjmp	.+438    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTC.Bits.Pin5 =0;
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8f 7d       	andi	r24, 0xDF	; 223
    171e:	80 83       	st	Z, r24
    1720:	d5 c0       	rjmp	.+426    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTC.Bits.Pin6 =0;
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8f 7b       	andi	r24, 0xBF	; 191
    172a:	80 83       	st	Z, r24
    172c:	cf c0       	rjmp	.+414    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTC.Bits.Pin7 =0;
    172e:	e5 e3       	ldi	r30, 0x35	; 53
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 77       	andi	r24, 0x7F	; 127
    1736:	80 83       	st	Z, r24
    1738:	c9 c0       	rjmp	.+402    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
			}
		break;


		case 3:
			if(Val ==1)
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	09 f0       	breq	.+2      	; 0x1742 <Dio_vidSetPinVal+0x530>
    1740:	63 c0       	rjmp	.+198    	; 0x1808 <Dio_vidSetPinVal+0x5f6>
				{
					switch(PinLoc)
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	38 87       	std	Y+8, r19	; 0x08
    174a:	2f 83       	std	Y+7, r18	; 0x07
    174c:	8f 81       	ldd	r24, Y+7	; 0x07
    174e:	98 85       	ldd	r25, Y+8	; 0x08
    1750:	83 30       	cpi	r24, 0x03	; 3
    1752:	91 05       	cpc	r25, r1
    1754:	d9 f1       	breq	.+118    	; 0x17cc <Dio_vidSetPinVal+0x5ba>
    1756:	2f 81       	ldd	r18, Y+7	; 0x07
    1758:	38 85       	ldd	r19, Y+8	; 0x08
    175a:	24 30       	cpi	r18, 0x04	; 4
    175c:	31 05       	cpc	r19, r1
    175e:	7c f4       	brge	.+30     	; 0x177e <Dio_vidSetPinVal+0x56c>
    1760:	8f 81       	ldd	r24, Y+7	; 0x07
    1762:	98 85       	ldd	r25, Y+8	; 0x08
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	29 f1       	breq	.+74     	; 0x17b4 <Dio_vidSetPinVal+0x5a2>
    176a:	2f 81       	ldd	r18, Y+7	; 0x07
    176c:	38 85       	ldd	r19, Y+8	; 0x08
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	34 f5       	brge	.+76     	; 0x17c0 <Dio_vidSetPinVal+0x5ae>
    1774:	8f 81       	ldd	r24, Y+7	; 0x07
    1776:	98 85       	ldd	r25, Y+8	; 0x08
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	b1 f0       	breq	.+44     	; 0x17a8 <Dio_vidSetPinVal+0x596>
    177c:	a7 c0       	rjmp	.+334    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    177e:	2f 81       	ldd	r18, Y+7	; 0x07
    1780:	38 85       	ldd	r19, Y+8	; 0x08
    1782:	25 30       	cpi	r18, 0x05	; 5
    1784:	31 05       	cpc	r19, r1
    1786:	71 f1       	breq	.+92     	; 0x17e4 <Dio_vidSetPinVal+0x5d2>
    1788:	8f 81       	ldd	r24, Y+7	; 0x07
    178a:	98 85       	ldd	r25, Y+8	; 0x08
    178c:	85 30       	cpi	r24, 0x05	; 5
    178e:	91 05       	cpc	r25, r1
    1790:	1c f1       	brlt	.+70     	; 0x17d8 <Dio_vidSetPinVal+0x5c6>
    1792:	2f 81       	ldd	r18, Y+7	; 0x07
    1794:	38 85       	ldd	r19, Y+8	; 0x08
    1796:	26 30       	cpi	r18, 0x06	; 6
    1798:	31 05       	cpc	r19, r1
    179a:	51 f1       	breq	.+84     	; 0x17f0 <Dio_vidSetPinVal+0x5de>
    179c:	8f 81       	ldd	r24, Y+7	; 0x07
    179e:	98 85       	ldd	r25, Y+8	; 0x08
    17a0:	87 30       	cpi	r24, 0x07	; 7
    17a2:	91 05       	cpc	r25, r1
    17a4:	59 f1       	breq	.+86     	; 0x17fc <Dio_vidSetPinVal+0x5ea>
    17a6:	92 c0       	rjmp	.+292    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTD.Bits.Pin0 =1;
    17a8:	e2 e3       	ldi	r30, 0x32	; 50
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	81 60       	ori	r24, 0x01	; 1
    17b0:	80 83       	st	Z, r24
    17b2:	8c c0       	rjmp	.+280    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTD.Bits.Pin1 =1;
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	82 60       	ori	r24, 0x02	; 2
    17bc:	80 83       	st	Z, r24
    17be:	86 c0       	rjmp	.+268    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTD.Bits.Pin2 =1;
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	84 60       	ori	r24, 0x04	; 4
    17c8:	80 83       	st	Z, r24
    17ca:	80 c0       	rjmp	.+256    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTD.Bits.Pin3 =1;
    17cc:	e2 e3       	ldi	r30, 0x32	; 50
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	88 60       	ori	r24, 0x08	; 8
    17d4:	80 83       	st	Z, r24
    17d6:	7a c0       	rjmp	.+244    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTD.Bits.Pin4 =1;
    17d8:	e2 e3       	ldi	r30, 0x32	; 50
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 61       	ori	r24, 0x10	; 16
    17e0:	80 83       	st	Z, r24
    17e2:	74 c0       	rjmp	.+232    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTD.Bits.Pin5 =1;
    17e4:	e2 e3       	ldi	r30, 0x32	; 50
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 62       	ori	r24, 0x20	; 32
    17ec:	80 83       	st	Z, r24
    17ee:	6e c0       	rjmp	.+220    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTD.Bits.Pin6 =1;
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 64       	ori	r24, 0x40	; 64
    17f8:	80 83       	st	Z, r24
    17fa:	68 c0       	rjmp	.+208    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTD.Bits.Pin7 =1;
    17fc:	e2 e3       	ldi	r30, 0x32	; 50
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	80 83       	st	Z, r24
    1806:	62 c0       	rjmp	.+196    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3e 83       	std	Y+6, r19	; 0x06
    1810:	2d 83       	std	Y+5, r18	; 0x05
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	d9 f1       	breq	.+118    	; 0x1892 <Dio_vidSetPinVal+0x680>
    181c:	2d 81       	ldd	r18, Y+5	; 0x05
    181e:	3e 81       	ldd	r19, Y+6	; 0x06
    1820:	24 30       	cpi	r18, 0x04	; 4
    1822:	31 05       	cpc	r19, r1
    1824:	7c f4       	brge	.+30     	; 0x1844 <Dio_vidSetPinVal+0x632>
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	91 05       	cpc	r25, r1
    182e:	29 f1       	breq	.+74     	; 0x187a <Dio_vidSetPinVal+0x668>
    1830:	2d 81       	ldd	r18, Y+5	; 0x05
    1832:	3e 81       	ldd	r19, Y+6	; 0x06
    1834:	22 30       	cpi	r18, 0x02	; 2
    1836:	31 05       	cpc	r19, r1
    1838:	34 f5       	brge	.+76     	; 0x1886 <Dio_vidSetPinVal+0x674>
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	b1 f0       	breq	.+44     	; 0x186e <Dio_vidSetPinVal+0x65c>
    1842:	44 c0       	rjmp	.+136    	; 0x18cc <Dio_vidSetPinVal+0x6ba>
    1844:	2d 81       	ldd	r18, Y+5	; 0x05
    1846:	3e 81       	ldd	r19, Y+6	; 0x06
    1848:	25 30       	cpi	r18, 0x05	; 5
    184a:	31 05       	cpc	r19, r1
    184c:	71 f1       	breq	.+92     	; 0x18aa <Dio_vidSetPinVal+0x698>
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	85 30       	cpi	r24, 0x05	; 5
    1854:	91 05       	cpc	r25, r1
    1856:	1c f1       	brlt	.+70     	; 0x189e <Dio_vidSetPinVal+0x68c>
    1858:	2d 81       	ldd	r18, Y+5	; 0x05
    185a:	3e 81       	ldd	r19, Y+6	; 0x06
    185c:	26 30       	cpi	r18, 0x06	; 6
    185e:	31 05       	cpc	r19, r1
    1860:	51 f1       	breq	.+84     	; 0x18b6 <Dio_vidSetPinVal+0x6a4>
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	87 30       	cpi	r24, 0x07	; 7
    1868:	91 05       	cpc	r25, r1
    186a:	59 f1       	breq	.+86     	; 0x18c2 <Dio_vidSetPinVal+0x6b0>
    186c:	2f c0       	rjmp	.+94     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTD.Bits.Pin0 =0;
    186e:	e2 e3       	ldi	r30, 0x32	; 50
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	8e 7f       	andi	r24, 0xFE	; 254
    1876:	80 83       	st	Z, r24
    1878:	29 c0       	rjmp	.+82     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTD.Bits.Pin1 =0;
    187a:	e2 e3       	ldi	r30, 0x32	; 50
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8d 7f       	andi	r24, 0xFD	; 253
    1882:	80 83       	st	Z, r24
    1884:	23 c0       	rjmp	.+70     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTD.Bits.Pin2 =0;
    1886:	e2 e3       	ldi	r30, 0x32	; 50
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8b 7f       	andi	r24, 0xFB	; 251
    188e:	80 83       	st	Z, r24
    1890:	1d c0       	rjmp	.+58     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTD.Bits.Pin3 =0;
    1892:	e2 e3       	ldi	r30, 0x32	; 50
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	87 7f       	andi	r24, 0xF7	; 247
    189a:	80 83       	st	Z, r24
    189c:	17 c0       	rjmp	.+46     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTD.Bits.Pin4 =0;
    189e:	e2 e3       	ldi	r30, 0x32	; 50
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8f 7e       	andi	r24, 0xEF	; 239
    18a6:	80 83       	st	Z, r24
    18a8:	11 c0       	rjmp	.+34     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTD.Bits.Pin5 =0;
    18aa:	e2 e3       	ldi	r30, 0x32	; 50
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8f 7d       	andi	r24, 0xDF	; 223
    18b2:	80 83       	st	Z, r24
    18b4:	0b c0       	rjmp	.+22     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTD.Bits.Pin6 =0;
    18b6:	e2 e3       	ldi	r30, 0x32	; 50
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7b       	andi	r24, 0xBF	; 191
    18be:	80 83       	st	Z, r24
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTD.Bits.Pin7 =0;
    18c2:	e2 e3       	ldi	r30, 0x32	; 50
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8f 77       	andi	r24, 0x7F	; 127
    18ca:	80 83       	st	Z, r24
					break;
				}
			}
		break;
	}
}
    18cc:	66 96       	adiw	r28, 0x16	; 22
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <Lcd_vidSendCommand>:
#include <util/delay.h>
#include "Lcd_int.h"
#include "Dio_int.h"
#include "Lcd_cfg.h"
void Lcd_vidSendCommand(u8 Cmd)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	2f 97       	sbiw	r28, 0x0f	; 15
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	8f 87       	std	Y+15, r24	; 0x0f
	//Start to change in LCD control Reg to indicate it that you will receive command
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8LOW);  //make RS->0 to indicate LCD "you will receive command not data"
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);  //make RW->0 to indicate LCD "you will write in command Register"
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH); //make EN->1 to indicate LCD "Please LCD don't save any thing in your buffer until be sure all data sent "
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>

	//In prof_code we can't send all data '8_bit'  for PORT at the same time so we use GET_BIT
	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Cmd,0));
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	98 2f       	mov	r25, r24
    1910:	91 70       	andi	r25, 0x01	; 1
    1912:	88 e1       	ldi	r24, 0x18	; 24
    1914:	69 2f       	mov	r22, r25
    1916:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Cmd,1));
    191a:	8f 85       	ldd	r24, Y+15	; 0x0f
    191c:	86 95       	lsr	r24
    191e:	98 2f       	mov	r25, r24
    1920:	91 70       	andi	r25, 0x01	; 1
    1922:	89 e1       	ldi	r24, 0x19	; 25
    1924:	69 2f       	mov	r22, r25
    1926:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Cmd,2));
    192a:	8f 85       	ldd	r24, Y+15	; 0x0f
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	98 2f       	mov	r25, r24
    1932:	91 70       	andi	r25, 0x01	; 1
    1934:	8a e1       	ldi	r24, 0x1A	; 26
    1936:	69 2f       	mov	r22, r25
    1938:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Cmd,3));
    193c:	8f 85       	ldd	r24, Y+15	; 0x0f
    193e:	86 95       	lsr	r24
    1940:	86 95       	lsr	r24
    1942:	86 95       	lsr	r24
    1944:	98 2f       	mov	r25, r24
    1946:	91 70       	andi	r25, 0x01	; 1
    1948:	8b e1       	ldi	r24, 0x1B	; 27
    194a:	69 2f       	mov	r22, r25
    194c:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Cmd,4));
    1950:	8f 85       	ldd	r24, Y+15	; 0x0f
    1952:	82 95       	swap	r24
    1954:	8f 70       	andi	r24, 0x0F	; 15
    1956:	98 2f       	mov	r25, r24
    1958:	91 70       	andi	r25, 0x01	; 1
    195a:	8c e1       	ldi	r24, 0x1C	; 28
    195c:	69 2f       	mov	r22, r25
    195e:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Cmd,5));
    1962:	8f 85       	ldd	r24, Y+15	; 0x0f
    1964:	82 95       	swap	r24
    1966:	86 95       	lsr	r24
    1968:	87 70       	andi	r24, 0x07	; 7
    196a:	98 2f       	mov	r25, r24
    196c:	91 70       	andi	r25, 0x01	; 1
    196e:	8d e1       	ldi	r24, 0x1D	; 29
    1970:	69 2f       	mov	r22, r25
    1972:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Cmd,6));
    1976:	8f 85       	ldd	r24, Y+15	; 0x0f
    1978:	82 95       	swap	r24
    197a:	86 95       	lsr	r24
    197c:	86 95       	lsr	r24
    197e:	83 70       	andi	r24, 0x03	; 3
    1980:	98 2f       	mov	r25, r24
    1982:	91 70       	andi	r25, 0x01	; 1
    1984:	8e e1       	ldi	r24, 0x1E	; 30
    1986:	69 2f       	mov	r22, r25
    1988:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Cmd,7));
    198c:	8f 85       	ldd	r24, Y+15	; 0x0f
    198e:	98 2f       	mov	r25, r24
    1990:	99 1f       	adc	r25, r25
    1992:	99 27       	eor	r25, r25
    1994:	99 1f       	adc	r25, r25
    1996:	8f e1       	ldi	r24, 0x1F	; 31
    1998:	69 2f       	mov	r22, r25
    199a:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a0 e0       	ldi	r26, 0x00	; 0
    19a4:	b0 e4       	ldi	r27, 0x40	; 64
    19a6:	8b 87       	std	Y+11, r24	; 0x0b
    19a8:	9c 87       	std	Y+12, r25	; 0x0c
    19aa:	ad 87       	std	Y+13, r26	; 0x0d
    19ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8f 83       	std	Y+7, r24	; 0x07
    19c8:	98 87       	std	Y+8, r25	; 0x08
    19ca:	a9 87       	std	Y+9, r26	; 0x09
    19cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    19f0:	6f 81       	ldd	r22, Y+7	; 0x07
    19f2:	78 85       	ldd	r23, Y+8	; 0x08
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <Lcd_vidSendCommand+0x172>
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <Lcd_vidSendCommand+0x160>
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <Lcd_vidSendCommand+0x154>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <Lcd_vidSendCommand+0x19c>
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //make EN->0 to indicate LCD "NOW you can save bits in your buffer all data sent"
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>

}
    1a8a:	2f 96       	adiw	r28, 0x0f	; 15
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <Lcd_vidInit>:

void Lcd_vidInit(void)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	aa 97       	sbiw	r28, 0x2a	; 42
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
	 Dio_vidSetPinDir(LCD_u8RS_PIN , DIO_u8OUTPUT);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8RW_PIN , DIO_u8OUTPUT);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8EN_PIN , DIO_u8OUTPUT);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	61 e0       	ldi	r22, 0x01	; 1
    1ac4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	 Dio_vidSetPinDir(LCD_u8D0_PIN , DIO_u8OUTPUT);
    1ac8:	88 e1       	ldi	r24, 0x18	; 24
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D1_PIN , DIO_u8OUTPUT);
    1ad0:	89 e1       	ldi	r24, 0x19	; 25
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D2_PIN , DIO_u8OUTPUT);
    1ad8:	8a e1       	ldi	r24, 0x1A	; 26
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D3_PIN , DIO_u8OUTPUT);
    1ae0:	8b e1       	ldi	r24, 0x1B	; 27
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D4_PIN , DIO_u8OUTPUT);
    1ae8:	8c e1       	ldi	r24, 0x1C	; 28
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D5_PIN , DIO_u8OUTPUT);
    1af0:	8d e1       	ldi	r24, 0x1D	; 29
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D6_PIN , DIO_u8OUTPUT);
    1af8:	8e e1       	ldi	r24, 0x1E	; 30
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D7_PIN , DIO_u8OUTPUT);
    1b00:	8f e1       	ldi	r24, 0x1F	; 31
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_vidSetPinDir>

	Lcd_vidSendCommand(LCD_u8CMD_8_BIT_2x16_5x7); //LCD_8BIT_2x16_5x7
    1b08:	88 e3       	ldi	r24, 0x38	; 56
    1b0a:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e4       	ldi	r27, 0x40	; 64
    1b16:	8f a3       	std	Y+39, r24	; 0x27
    1b18:	98 a7       	std	Y+40, r25	; 0x28
    1b1a:	a9 a7       	std	Y+41, r26	; 0x29
    1b1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b20:	78 a5       	ldd	r23, Y+40	; 0x28
    1b22:	89 a5       	ldd	r24, Y+41	; 0x29
    1b24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a ef       	ldi	r20, 0xFA	; 250
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8b a3       	std	Y+35, r24	; 0x23
    1b38:	9c a3       	std	Y+36, r25	; 0x24
    1b3a:	ad a3       	std	Y+37, r26	; 0x25
    1b3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b40:	7c a1       	ldd	r23, Y+36	; 0x24
    1b42:	8d a1       	ldd	r24, Y+37	; 0x25
    1b44:	9e a1       	ldd	r25, Y+38	; 0x26
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <Lcd_vidInit+0xc4>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9a a3       	std	Y+34, r25	; 0x22
    1b5c:	89 a3       	std	Y+33, r24	; 0x21
    1b5e:	3f c0       	rjmp	.+126    	; 0x1bde <Lcd_vidInit+0x142>
	else if (__tmp > 65535)
    1b60:	6b a1       	ldd	r22, Y+35	; 0x23
    1b62:	7c a1       	ldd	r23, Y+36	; 0x24
    1b64:	8d a1       	ldd	r24, Y+37	; 0x25
    1b66:	9e a1       	ldd	r25, Y+38	; 0x26
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	4c f5       	brge	.+82     	; 0x1bca <Lcd_vidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	6f a1       	ldd	r22, Y+39	; 0x27
    1b7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9a a3       	std	Y+34, r25	; 0x22
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <Lcd_vidInit+0x124>
    1ba2:	88 ec       	ldi	r24, 0xC8	; 200
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	98 a3       	std	Y+32, r25	; 0x20
    1ba8:	8f 8f       	std	Y+31, r24	; 0x1f
    1baa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bac:	98 a1       	ldd	r25, Y+32	; 0x20
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <Lcd_vidInit+0x112>
    1bb2:	98 a3       	std	Y+32, r25	; 0x20
    1bb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9a a3       	std	Y+34, r25	; 0x22
    1bbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <Lcd_vidInit+0x106>
    1bc8:	14 c0       	rjmp	.+40     	; 0x1bf2 <Lcd_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	6b a1       	ldd	r22, Y+35	; 0x23
    1bcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bce:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9a a3       	std	Y+34, r25	; 0x22
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
    1bde:	89 a1       	ldd	r24, Y+33	; 0x21
    1be0:	9a a1       	ldd	r25, Y+34	; 0x22
    1be2:	9e 8f       	std	Y+30, r25	; 0x1e
    1be4:	8d 8f       	std	Y+29, r24	; 0x1d
    1be6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <Lcd_vidInit+0x14e>
    1bee:	9e 8f       	std	Y+30, r25	; 0x1e
    1bf0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8CMD_DISP_ON_CURS_OFF);
    1bf2:	8c e0       	ldi	r24, 0x0C	; 12
    1bf4:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e4       	ldi	r27, 0x40	; 64
    1c00:	89 8f       	std	Y+25, r24	; 0x19
    1c02:	9a 8f       	std	Y+26, r25	; 0x1a
    1c04:	ab 8f       	std	Y+27, r26	; 0x1b
    1c06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a ef       	ldi	r20, 0xFA	; 250
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8d 8b       	std	Y+21, r24	; 0x15
    1c22:	9e 8b       	std	Y+22, r25	; 0x16
    1c24:	af 8b       	std	Y+23, r26	; 0x17
    1c26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <Lcd_vidInit+0x1ae>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 8b       	std	Y+20, r25	; 0x14
    1c46:	8b 8b       	std	Y+19, r24	; 0x13
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <Lcd_vidInit+0x22c>
	else if (__tmp > 65535)
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <Lcd_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <Lcd_vidInit+0x20e>
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9a 8b       	std	Y+18, r25	; 0x12
    1c92:	89 8b       	std	Y+17, r24	; 0x11
    1c94:	89 89       	ldd	r24, Y+17	; 0x11
    1c96:	9a 89       	ldd	r25, Y+18	; 0x12
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <Lcd_vidInit+0x1fc>
    1c9c:	9a 8b       	std	Y+18, r25	; 0x12
    1c9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cac:	9c 89       	ldd	r25, Y+20	; 0x14
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <Lcd_vidInit+0x1f0>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <Lcd_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cba:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
    1cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd2:	98 89       	ldd	r25, Y+16	; 0x10
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <Lcd_vidInit+0x238>
    1cd8:	98 8b       	std	Y+16, r25	; 0x10
    1cda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8CMD_CLR_Display);
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e0       	ldi	r26, 0x00	; 0
    1ce8:	b0 e4       	ldi	r27, 0x40	; 64
    1cea:	8b 87       	std	Y+11, r24	; 0x0b
    1cec:	9c 87       	std	Y+12, r25	; 0x0c
    1cee:	ad 87       	std	Y+13, r26	; 0x0d
    1cf0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a ef       	ldi	r20, 0xFA	; 250
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	8f 83       	std	Y+7, r24	; 0x07
    1d0c:	98 87       	std	Y+8, r25	; 0x08
    1d0e:	a9 87       	std	Y+9, r26	; 0x09
    1d10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d12:	6f 81       	ldd	r22, Y+7	; 0x07
    1d14:	78 85       	ldd	r23, Y+8	; 0x08
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <Lcd_vidInit+0x298>
		__ticks = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9e 83       	std	Y+6, r25	; 0x06
    1d30:	8d 83       	std	Y+5, r24	; 0x05
    1d32:	3f c0       	rjmp	.+126    	; 0x1db2 <Lcd_vidInit+0x316>
	else if (__tmp > 65535)
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	4c f5       	brge	.+82     	; 0x1d9e <Lcd_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <Lcd_vidInit+0x2f8>
    1d76:	88 ec       	ldi	r24, 0xC8	; 200
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <Lcd_vidInit+0x2e6>
    1d86:	9c 83       	std	Y+4, r25	; 0x04
    1d88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	9e 81       	ldd	r25, Y+6	; 0x06
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <Lcd_vidInit+0x2da>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <Lcd_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1da0:	78 85       	ldd	r23, Y+8	; 0x08
    1da2:	89 85       	ldd	r24, Y+9	; 0x09
    1da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <Lcd_vidInit+0x322>
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1dc6:	aa 96       	adiw	r28, 0x2a	; 42
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Char)

{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	2f 97       	sbiw	r28, 0x0f	; 15
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8HIGH);  //RS
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);  //RW
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH);  //EN
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Char,0));
    1e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e08:	98 2f       	mov	r25, r24
    1e0a:	91 70       	andi	r25, 0x01	; 1
    1e0c:	88 e1       	ldi	r24, 0x18	; 24
    1e0e:	69 2f       	mov	r22, r25
    1e10:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Char,1));
    1e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e16:	86 95       	lsr	r24
    1e18:	98 2f       	mov	r25, r24
    1e1a:	91 70       	andi	r25, 0x01	; 1
    1e1c:	89 e1       	ldi	r24, 0x19	; 25
    1e1e:	69 2f       	mov	r22, r25
    1e20:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Char,2));
    1e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e26:	86 95       	lsr	r24
    1e28:	86 95       	lsr	r24
    1e2a:	98 2f       	mov	r25, r24
    1e2c:	91 70       	andi	r25, 0x01	; 1
    1e2e:	8a e1       	ldi	r24, 0x1A	; 26
    1e30:	69 2f       	mov	r22, r25
    1e32:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Char,3));
    1e36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e38:	86 95       	lsr	r24
    1e3a:	86 95       	lsr	r24
    1e3c:	86 95       	lsr	r24
    1e3e:	98 2f       	mov	r25, r24
    1e40:	91 70       	andi	r25, 0x01	; 1
    1e42:	8b e1       	ldi	r24, 0x1B	; 27
    1e44:	69 2f       	mov	r22, r25
    1e46:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Char,4));
    1e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4c:	82 95       	swap	r24
    1e4e:	8f 70       	andi	r24, 0x0F	; 15
    1e50:	98 2f       	mov	r25, r24
    1e52:	91 70       	andi	r25, 0x01	; 1
    1e54:	8c e1       	ldi	r24, 0x1C	; 28
    1e56:	69 2f       	mov	r22, r25
    1e58:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Char,5));
    1e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5e:	82 95       	swap	r24
    1e60:	86 95       	lsr	r24
    1e62:	87 70       	andi	r24, 0x07	; 7
    1e64:	98 2f       	mov	r25, r24
    1e66:	91 70       	andi	r25, 0x01	; 1
    1e68:	8d e1       	ldi	r24, 0x1D	; 29
    1e6a:	69 2f       	mov	r22, r25
    1e6c:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Char,6));
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	82 95       	swap	r24
    1e74:	86 95       	lsr	r24
    1e76:	86 95       	lsr	r24
    1e78:	83 70       	andi	r24, 0x03	; 3
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	91 70       	andi	r25, 0x01	; 1
    1e7e:	8e e1       	ldi	r24, 0x1E	; 30
    1e80:	69 2f       	mov	r22, r25
    1e82:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Char,7));
    1e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e88:	98 2f       	mov	r25, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	99 27       	eor	r25, r25
    1e8e:	99 1f       	adc	r25, r25
    1e90:	8f e1       	ldi	r24, 0x1F	; 31
    1e92:	69 2f       	mov	r22, r25
    1e94:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e0       	ldi	r26, 0x00	; 0
    1e9e:	b0 e4       	ldi	r27, 0x40	; 64
    1ea0:	8b 87       	std	Y+11, r24	; 0x0b
    1ea2:	9c 87       	std	Y+12, r25	; 0x0c
    1ea4:	ad 87       	std	Y+13, r26	; 0x0d
    1ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8f 83       	std	Y+7, r24	; 0x07
    1ec2:	98 87       	std	Y+8, r25	; 0x08
    1ec4:	a9 87       	std	Y+9, r26	; 0x09
    1ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <Lcd_vidWriteChar+0x172>
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <Lcd_vidWriteChar+0x160>
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <Lcd_vidWriteChar+0x154>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <Lcd_vidWriteChar+0x19c>
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //EN
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	0e 94 09 09 	call	0x1212	; 0x1212 <Dio_vidSetPinVal>
}
    1f84:	2f 96       	adiw	r28, 0x0f	; 15
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <Lcd_vidWriteStr>:

void Lcd_vidWriteStr(u8 *Str){
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <Lcd_vidWriteStr+0x6>
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	0a c0       	rjmp	.+20     	; 0x1fba <Lcd_vidWriteStr+0x24>

	while(* Str != '\0')
	{
		Lcd_vidWriteChar(* Str);
    1fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1faa:	80 81       	ld	r24, Z
    1fac:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Lcd_vidWriteChar>
		Str++;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //EN
}

void Lcd_vidWriteStr(u8 *Str){

	while(* Str != '\0')
    1fba:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 23       	and	r24, r24
    1fc2:	89 f7       	brne	.-30     	; 0x1fa6 <Lcd_vidWriteStr+0x10>
	{
		Lcd_vidWriteChar(* Str);
		Str++;
	}
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <xEventGroupCreate+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    1fd8:	8b e0       	ldi	r24, 0x0B	; 11
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	49 f0       	breq	.+18     	; 0x1ffe <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    1fec:	e9 81       	ldd	r30, Y+1	; 0x01
    1fee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff0:	11 82       	std	Z+1, r1	; 0x01
    1ff2:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	02 96       	adiw	r24, 0x02	; 2
    1ffa:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	60 97       	sbiw	r28, 0x10	; 16
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	9a 87       	std	Y+10, r25	; 0x0a
    2022:	89 87       	std	Y+9, r24	; 0x09
    2024:	7c 87       	std	Y+12, r23	; 0x0c
    2026:	6b 87       	std	Y+11, r22	; 0x0b
    2028:	5e 87       	std	Y+14, r21	; 0x0e
    202a:	4d 87       	std	Y+13, r20	; 0x0d
    202c:	38 8b       	std	Y+16, r19	; 0x10
    202e:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	9c 83       	std	Y+4, r25	; 0x04
    2036:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    2038:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    203a:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    203e:	eb 81       	ldd	r30, Y+3	; 0x03
    2040:	fc 81       	ldd	r31, Y+4	; 0x04
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	98 87       	std	Y+8, r25	; 0x08
    2048:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    204a:	89 85       	ldd	r24, Y+9	; 0x09
    204c:	9a 85       	ldd	r25, Y+10	; 0x0a
    204e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2050:	3c 85       	ldd	r19, Y+12	; 0x0c
    2052:	b9 01       	movw	r22, r18
    2054:	0e 94 dd 11 	call	0x23ba	; 0x23ba <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    2058:	2f 81       	ldd	r18, Y+7	; 0x07
    205a:	38 85       	ldd	r19, Y+8	; 0x08
    205c:	8b 85       	ldd	r24, Y+11	; 0x0b
    205e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2060:	28 2b       	or	r18, r24
    2062:	39 2b       	or	r19, r25
    2064:	8d 85       	ldd	r24, Y+13	; 0x0d
    2066:	9e 85       	ldd	r25, Y+14	; 0x0e
    2068:	28 23       	and	r18, r24
    206a:	39 23       	and	r19, r25
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	28 17       	cp	r18, r24
    2072:	39 07       	cpc	r19, r25
    2074:	c9 f4       	brne	.+50     	; 0x20a8 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    2076:	2f 81       	ldd	r18, Y+7	; 0x07
    2078:	38 85       	ldd	r19, Y+8	; 0x08
    207a:	8b 85       	ldd	r24, Y+11	; 0x0b
    207c:	9c 85       	ldd	r25, Y+12	; 0x0c
    207e:	82 2b       	or	r24, r18
    2080:	93 2b       	or	r25, r19
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    2086:	eb 81       	ldd	r30, Y+3	; 0x03
    2088:	fc 81       	ldd	r31, Y+4	; 0x04
    208a:	20 81       	ld	r18, Z
    208c:	31 81       	ldd	r19, Z+1	; 0x01
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	80 95       	com	r24
    2094:	90 95       	com	r25
    2096:	82 23       	and	r24, r18
    2098:	93 23       	and	r25, r19
    209a:	eb 81       	ldd	r30, Y+3	; 0x03
    209c:	fc 81       	ldd	r31, Y+4	; 0x04
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	80 83       	st	Z, r24

			xTicksToWait = 0;
    20a2:	18 8a       	std	Y+16, r1	; 0x10
    20a4:	1f 86       	std	Y+15, r1	; 0x0f
    20a6:	1e c0       	rjmp	.+60     	; 0x20e4 <xEventGroupSync+0xd8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    20a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20aa:	98 89       	ldd	r25, Y+16	; 0x10
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	91 f0       	breq	.+36     	; 0x20d4 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	bc 01       	movw	r22, r24
    20b6:	6e 5f       	subi	r22, 0xFE	; 254
    20b8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    20bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20be:	9c 01       	movw	r18, r24
    20c0:	35 60       	ori	r19, 0x05	; 5
    20c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    20c4:	58 89       	ldd	r21, Y+16	; 0x10
    20c6:	cb 01       	movw	r24, r22
    20c8:	b9 01       	movw	r22, r18
    20ca:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    20ce:	1e 82       	std	Y+6, r1	; 0x06
    20d0:	1d 82       	std	Y+5, r1	; 0x05
    20d2:	08 c0       	rjmp	.+16     	; 0x20e4 <xEventGroupSync+0xd8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    20d4:	eb 81       	ldd	r30, Y+3	; 0x03
    20d6:	fc 81       	ldd	r31, Y+4	; 0x04
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
				xTimeoutOccurred = pdTRUE;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    20e4:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    20e8:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <xEventGroupSync+0xe8>
    20f2:	3a c0       	rjmp	.+116    	; 0x2168 <xEventGroupSync+0x15c>
	{
		if( xAlreadyYielded == pdFALSE )
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	88 23       	and	r24, r24
    20f8:	11 f4       	brne	.+4      	; 0x20fe <xEventGroupSync+0xf2>
		{
			portYIELD_WITHIN_API();
    20fa:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    20fe:	0e 94 51 30 	call	0x60a2	; 0x60a2 <uxTaskResetEventItemValue>
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	80 70       	andi	r24, 0x00	; 0
    210c:	92 70       	andi	r25, 0x02	; 2
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	31 f5       	brne	.+76     	; 0x215e <xEventGroupSync+0x152>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    2118:	eb 81       	ldd	r30, Y+3	; 0x03
    211a:	fc 81       	ldd	r31, Y+4	; 0x04
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    2124:	2d 81       	ldd	r18, Y+5	; 0x05
    2126:	3e 81       	ldd	r19, Y+6	; 0x06
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	28 23       	and	r18, r24
    212e:	39 23       	and	r19, r25
    2130:	8d 85       	ldd	r24, Y+13	; 0x0d
    2132:	9e 85       	ldd	r25, Y+14	; 0x0e
    2134:	28 17       	cp	r18, r24
    2136:	39 07       	cpc	r19, r25
    2138:	71 f4       	brne	.+28     	; 0x2156 <xEventGroupSync+0x14a>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    213a:	eb 81       	ldd	r30, Y+3	; 0x03
    213c:	fc 81       	ldd	r31, Y+4	; 0x04
    213e:	20 81       	ld	r18, Z
    2140:	31 81       	ldd	r19, Z+1	; 0x01
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	80 95       	com	r24
    2148:	90 95       	com	r25
    214a:	82 23       	and	r24, r18
    214c:	93 23       	and	r25, r19
    214e:	eb 81       	ldd	r30, Y+3	; 0x03
    2150:	fc 81       	ldd	r31, Y+4	; 0x04
    2152:	91 83       	std	Z+1, r25	; 0x01
    2154:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	90 70       	andi	r25, 0x00	; 0
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
}
    216c:	60 96       	adiw	r28, 0x10	; 16
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	63 97       	sbiw	r28, 0x13	; 19
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	9d 87       	std	Y+13, r25	; 0x0d
    2198:	8c 87       	std	Y+12, r24	; 0x0c
    219a:	7f 87       	std	Y+15, r23	; 0x0f
    219c:	6e 87       	std	Y+14, r22	; 0x0e
    219e:	48 8b       	std	Y+16, r20	; 0x10
    21a0:	29 8b       	std	Y+17, r18	; 0x11
    21a2:	1b 8b       	std	Y+19, r17	; 0x13
    21a4:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = xEventGroup;
    21a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    21aa:	9b 87       	std	Y+11, r25	; 0x0b
    21ac:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    21ae:	1f 82       	std	Y+7, r1	; 0x07
    21b0:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    21b2:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    21b4:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    21b8:	ea 85       	ldd	r30, Y+10	; 0x0a
    21ba:	fb 85       	ldd	r31, Y+11	; 0x0b
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    21ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    21cc:	b9 01       	movw	r22, r18
    21ce:	49 89       	ldd	r20, Y+17	; 0x11
    21d0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <prvTestWaitCondition>
    21d4:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	88 23       	and	r24, r24
    21da:	c1 f0       	breq	.+48     	; 0x220c <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	99 87       	std	Y+9, r25	; 0x09
    21e2:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    21e4:	1b 8a       	std	Y+19, r1	; 0x13
    21e6:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    21e8:	88 89       	ldd	r24, Y+16	; 0x10
    21ea:	88 23       	and	r24, r24
    21ec:	e9 f1       	breq	.+122    	; 0x2268 <xEventGroupWaitBits+0xea>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    21ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    21f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    21f2:	20 81       	ld	r18, Z
    21f4:	31 81       	ldd	r19, Z+1	; 0x01
    21f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    21f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    21fa:	80 95       	com	r24
    21fc:	90 95       	com	r25
    21fe:	82 23       	and	r24, r18
    2200:	93 23       	and	r25, r19
    2202:	ea 85       	ldd	r30, Y+10	; 0x0a
    2204:	fb 85       	ldd	r31, Y+11	; 0x0b
    2206:	91 83       	std	Z+1, r25	; 0x01
    2208:	80 83       	st	Z, r24
    220a:	2e c0       	rjmp	.+92     	; 0x2268 <xEventGroupWaitBits+0xea>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    220c:	8a 89       	ldd	r24, Y+18	; 0x12
    220e:	9b 89       	ldd	r25, Y+19	; 0x13
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	39 f4       	brne	.+14     	; 0x2222 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	99 87       	std	Y+9, r25	; 0x09
    221a:	88 87       	std	Y+8, r24	; 0x08
			xTimeoutOccurred = pdTRUE;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	8b 83       	std	Y+3, r24	; 0x03
    2220:	23 c0       	rjmp	.+70     	; 0x2268 <xEventGroupWaitBits+0xea>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    2222:	88 89       	ldd	r24, Y+16	; 0x10
    2224:	88 23       	and	r24, r24
    2226:	29 f0       	breq	.+10     	; 0x2232 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	91 60       	ori	r25, 0x01	; 1
    222e:	9f 83       	std	Y+7, r25	; 0x07
    2230:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    2232:	89 89       	ldd	r24, Y+17	; 0x11
    2234:	88 23       	and	r24, r24
    2236:	29 f0       	breq	.+10     	; 0x2242 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    2238:	8e 81       	ldd	r24, Y+6	; 0x06
    223a:	9f 81       	ldd	r25, Y+7	; 0x07
    223c:	94 60       	ori	r25, 0x04	; 4
    223e:	9f 83       	std	Y+7, r25	; 0x07
    2240:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    2242:	8a 85       	ldd	r24, Y+10	; 0x0a
    2244:	9b 85       	ldd	r25, Y+11	; 0x0b
    2246:	bc 01       	movw	r22, r24
    2248:	6e 5f       	subi	r22, 0xFE	; 254
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	2e 85       	ldd	r18, Y+14	; 0x0e
    224e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2250:	8e 81       	ldd	r24, Y+6	; 0x06
    2252:	9f 81       	ldd	r25, Y+7	; 0x07
    2254:	28 2b       	or	r18, r24
    2256:	39 2b       	or	r19, r25
    2258:	4a 89       	ldd	r20, Y+18	; 0x12
    225a:	5b 89       	ldd	r21, Y+19	; 0x13
    225c:	cb 01       	movw	r24, r22
    225e:	b9 01       	movw	r22, r18
    2260:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    2264:	19 86       	std	Y+9, r1	; 0x09
    2266:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    2268:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    226c:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    226e:	8a 89       	ldd	r24, Y+18	; 0x12
    2270:	9b 89       	ldd	r25, Y+19	; 0x13
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	09 f4       	brne	.+2      	; 0x2278 <xEventGroupWaitBits+0xfa>
    2276:	3c c0       	rjmp	.+120    	; 0x22f0 <xEventGroupWaitBits+0x172>
	{
		if( xAlreadyYielded == pdFALSE )
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	88 23       	and	r24, r24
    227c:	11 f4       	brne	.+4      	; 0x2282 <xEventGroupWaitBits+0x104>
		{
			portYIELD_WITHIN_API();
    227e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    2282:	0e 94 51 30 	call	0x60a2	; 0x60a2 <uxTaskResetEventItemValue>
    2286:	99 87       	std	Y+9, r25	; 0x09
    2288:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    228a:	88 85       	ldd	r24, Y+8	; 0x08
    228c:	99 85       	ldd	r25, Y+9	; 0x09
    228e:	80 70       	andi	r24, 0x00	; 0
    2290:	92 70       	andi	r25, 0x02	; 2
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	41 f5       	brne	.+80     	; 0x22e6 <xEventGroupWaitBits+0x168>
		{
			taskENTER_CRITICAL();
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    229c:	ea 85       	ldd	r30, Y+10	; 0x0a
    229e:	fb 85       	ldd	r31, Y+11	; 0x0b
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	99 87       	std	Y+9, r25	; 0x09
    22a6:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    22a8:	88 85       	ldd	r24, Y+8	; 0x08
    22aa:	99 85       	ldd	r25, Y+9	; 0x09
    22ac:	2e 85       	ldd	r18, Y+14	; 0x0e
    22ae:	3f 85       	ldd	r19, Y+15	; 0x0f
    22b0:	b9 01       	movw	r22, r18
    22b2:	49 89       	ldd	r20, Y+17	; 0x11
    22b4:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <prvTestWaitCondition>
    22b8:	88 23       	and	r24, r24
    22ba:	89 f0       	breq	.+34     	; 0x22de <xEventGroupWaitBits+0x160>
				{
					if( xClearOnExit != pdFALSE )
    22bc:	88 89       	ldd	r24, Y+16	; 0x10
    22be:	88 23       	and	r24, r24
    22c0:	71 f0       	breq	.+28     	; 0x22de <xEventGroupWaitBits+0x160>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    22c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    22c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    22c6:	20 81       	ld	r18, Z
    22c8:	31 81       	ldd	r19, Z+1	; 0x01
    22ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    22cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ce:	80 95       	com	r24
    22d0:	90 95       	com	r25
    22d2:	82 23       	and	r24, r18
    22d4:	93 23       	and	r25, r19
    22d6:	ea 85       	ldd	r30, Y+10	; 0x0a
    22d8:	fb 85       	ldd	r31, Y+11	; 0x0b
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	80 83       	st	Z, r24
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	8b 83       	std	Y+3, r24	; 0x03
			}
			taskEXIT_CRITICAL();
    22e2:	0f 90       	pop	r0
    22e4:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    22e6:	88 85       	ldd	r24, Y+8	; 0x08
    22e8:	99 85       	ldd	r25, Y+9	; 0x09
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	99 87       	std	Y+9, r25	; 0x09
    22ee:	88 87       	std	Y+8, r24	; 0x08
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    22f0:	88 85       	ldd	r24, Y+8	; 0x08
    22f2:	99 85       	ldd	r25, Y+9	; 0x09
}
    22f4:	63 96       	adiw	r28, 0x13	; 19
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	28 97       	sbiw	r28, 0x08	; 8
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	78 87       	std	Y+8, r23	; 0x08
    2324:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = xEventGroup;
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    2340:	eb 81       	ldd	r30, Y+3	; 0x03
    2342:	fc 81       	ldd	r31, Y+4	; 0x04
    2344:	20 81       	ld	r18, Z
    2346:	31 81       	ldd	r19, Z+1	; 0x01
    2348:	8f 81       	ldd	r24, Y+7	; 0x07
    234a:	98 85       	ldd	r25, Y+8	; 0x08
    234c:	80 95       	com	r24
    234e:	90 95       	com	r25
    2350:	82 23       	and	r24, r18
    2352:	93 23       	and	r25, r19
    2354:	eb 81       	ldd	r30, Y+3	; 0x03
    2356:	fc 81       	ldd	r31, Y+4	; 0x04
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2364:	28 96       	adiw	r28, 0x08	; 8
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	27 97       	sbiw	r28, 0x07	; 7
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	9f 83       	std	Y+7, r25	; 0x07
    238c:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
    238e:	8e 81       	ldd	r24, Y+6	; 0x06
    2390:	9f 81       	ldd	r25, Y+7	; 0x07
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2396:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    2398:	eb 81       	ldd	r30, Y+3	; 0x03
    239a:	fc 81       	ldd	r31, Y+4	; 0x04
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    23a8:	27 96       	adiw	r28, 0x07	; 7
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	65 97       	sbiw	r28, 0x15	; 21
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	9b 8b       	std	Y+19, r25	; 0x13
    23d0:	8a 8b       	std	Y+18, r24	; 0x12
    23d2:	7d 8b       	std	Y+21, r23	; 0x15
    23d4:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    23d6:	19 86       	std	Y+9, r1	; 0x09
    23d8:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = xEventGroup;
    23da:	8a 89       	ldd	r24, Y+18	; 0x12
    23dc:	9b 89       	ldd	r25, Y+19	; 0x13
    23de:	9b 83       	std	Y+3, r25	; 0x03
    23e0:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    23e2:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	9b 81       	ldd	r25, Y+3	; 0x03
    23e8:	02 96       	adiw	r24, 0x02	; 2
    23ea:	9b 87       	std	Y+11, r25	; 0x0b
    23ec:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    23ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f2:	03 96       	adiw	r24, 0x03	; 3
    23f4:	9d 87       	std	Y+13, r25	; 0x0d
    23f6:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    23f8:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    23fc:	ea 85       	ldd	r30, Y+10	; 0x0a
    23fe:	fb 85       	ldd	r31, Y+11	; 0x0b
    2400:	85 81       	ldd	r24, Z+5	; 0x05
    2402:	96 81       	ldd	r25, Z+6	; 0x06
    2404:	99 8b       	std	Y+17, r25	; 0x11
    2406:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    2408:	ea 81       	ldd	r30, Y+2	; 0x02
    240a:	fb 81       	ldd	r31, Y+3	; 0x03
    240c:	20 81       	ld	r18, Z
    240e:	31 81       	ldd	r19, Z+1	; 0x01
    2410:	8c 89       	ldd	r24, Y+20	; 0x14
    2412:	9d 89       	ldd	r25, Y+21	; 0x15
    2414:	82 2b       	or	r24, r18
    2416:	93 2b       	or	r25, r19
    2418:	ea 81       	ldd	r30, Y+2	; 0x02
    241a:	fb 81       	ldd	r31, Y+3	; 0x03
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	59 c0       	rjmp	.+178    	; 0x24d4 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    2422:	e8 89       	ldd	r30, Y+16	; 0x10
    2424:	f9 89       	ldd	r31, Y+17	; 0x11
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	9f 87       	std	Y+15, r25	; 0x0f
    242c:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    242e:	e8 89       	ldd	r30, Y+16	; 0x10
    2430:	f9 89       	ldd	r31, Y+17	; 0x11
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	9f 83       	std	Y+7, r25	; 0x07
    2438:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    243a:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    243c:	8e 81       	ldd	r24, Y+6	; 0x06
    243e:	9f 81       	ldd	r25, Y+7	; 0x07
    2440:	80 70       	andi	r24, 0x00	; 0
    2442:	9d 83       	std	Y+5, r25	; 0x05
    2444:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    2446:	8e 81       	ldd	r24, Y+6	; 0x06
    2448:	9f 81       	ldd	r25, Y+7	; 0x07
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	9f 83       	std	Y+7, r25	; 0x07
    244e:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	9d 81       	ldd	r25, Y+5	; 0x05
    2454:	80 70       	andi	r24, 0x00	; 0
    2456:	94 70       	andi	r25, 0x04	; 4
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f4       	brne	.+26     	; 0x2476 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    245c:	ea 81       	ldd	r30, Y+2	; 0x02
    245e:	fb 81       	ldd	r31, Y+3	; 0x03
    2460:	20 81       	ld	r18, Z
    2462:	31 81       	ldd	r19, Z+1	; 0x01
    2464:	8e 81       	ldd	r24, Y+6	; 0x06
    2466:	9f 81       	ldd	r25, Y+7	; 0x07
    2468:	82 23       	and	r24, r18
    246a:	93 23       	and	r25, r19
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	91 f0       	breq	.+36     	; 0x2494 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    2476:	ea 81       	ldd	r30, Y+2	; 0x02
    2478:	fb 81       	ldd	r31, Y+3	; 0x03
    247a:	20 81       	ld	r18, Z
    247c:	31 81       	ldd	r19, Z+1	; 0x01
    247e:	8e 81       	ldd	r24, Y+6	; 0x06
    2480:	9f 81       	ldd	r25, Y+7	; 0x07
    2482:	28 23       	and	r18, r24
    2484:	39 23       	and	r19, r25
    2486:	8e 81       	ldd	r24, Y+6	; 0x06
    2488:	9f 81       	ldd	r25, Y+7	; 0x07
    248a:	28 17       	cp	r18, r24
    248c:	39 07       	cpc	r19, r25
    248e:	11 f4       	brne	.+4      	; 0x2494 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	88 23       	and	r24, r24
    2498:	c9 f0       	breq	.+50     	; 0x24cc <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    249a:	8c 81       	ldd	r24, Y+4	; 0x04
    249c:	9d 81       	ldd	r25, Y+5	; 0x05
    249e:	80 70       	andi	r24, 0x00	; 0
    24a0:	91 70       	andi	r25, 0x01	; 1
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	41 f0       	breq	.+16     	; 0x24b6 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    24a6:	88 85       	ldd	r24, Y+8	; 0x08
    24a8:	99 85       	ldd	r25, Y+9	; 0x09
    24aa:	2e 81       	ldd	r18, Y+6	; 0x06
    24ac:	3f 81       	ldd	r19, Y+7	; 0x07
    24ae:	82 2b       	or	r24, r18
    24b0:	93 2b       	or	r25, r19
    24b2:	99 87       	std	Y+9, r25	; 0x09
    24b4:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    24b6:	ea 81       	ldd	r30, Y+2	; 0x02
    24b8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	9c 01       	movw	r18, r24
    24c0:	32 60       	ori	r19, 0x02	; 2
    24c2:	88 89       	ldd	r24, Y+16	; 0x10
    24c4:	99 89       	ldd	r25, Y+17	; 0x11
    24c6:	b9 01       	movw	r22, r18
    24c8:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    24cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    24d0:	99 8b       	std	Y+17, r25	; 0x11
    24d2:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    24d4:	28 89       	ldd	r18, Y+16	; 0x10
    24d6:	39 89       	ldd	r19, Y+17	; 0x11
    24d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24da:	9d 85       	ldd	r25, Y+13	; 0x0d
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <xEventGroupSetBits+0x12a>
    24e2:	9f cf       	rjmp	.-194    	; 0x2422 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    24e4:	ea 81       	ldd	r30, Y+2	; 0x02
    24e6:	fb 81       	ldd	r31, Y+3	; 0x03
    24e8:	20 81       	ld	r18, Z
    24ea:	31 81       	ldd	r19, Z+1	; 0x01
    24ec:	88 85       	ldd	r24, Y+8	; 0x08
    24ee:	99 85       	ldd	r25, Y+9	; 0x09
    24f0:	80 95       	com	r24
    24f2:	90 95       	com	r25
    24f4:	82 23       	and	r24, r18
    24f6:	93 23       	and	r25, r19
    24f8:	ea 81       	ldd	r30, Y+2	; 0x02
    24fa:	fb 81       	ldd	r31, Y+3	; 0x03
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    2500:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    2504:	ea 81       	ldd	r30, Y+2	; 0x02
    2506:	fb 81       	ldd	r31, Y+3	; 0x03
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
}
    250c:	65 96       	adiw	r28, 0x15	; 21
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	00 d0       	rcall	.+0      	; 0x2524 <vEventGroupDelete+0x6>
    2524:	00 d0       	rcall	.+0      	; 0x2526 <vEventGroupDelete+0x8>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <vEventGroupDelete+0xa>
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = xEventGroup;
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	02 96       	adiw	r24, 0x02	; 2
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    2542:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
    2546:	08 c0       	rjmp	.+16     	; 0x2558 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    2548:	e9 81       	ldd	r30, Y+1	; 0x01
    254a:	fa 81       	ldd	r31, Y+2	; 0x02
    254c:	85 81       	ldd	r24, Z+5	; 0x05
    254e:	96 81       	ldd	r25, Z+6	; 0x06
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	72 e0       	ldi	r23, 0x02	; 2
    2554:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    2558:	e9 81       	ldd	r30, Y+1	; 0x01
    255a:	fa 81       	ldd	r31, Y+2	; 0x02
    255c:	80 81       	ld	r24, Z
    255e:	88 23       	and	r24, r24
    2560:	99 f7       	brne	.-26     	; 0x2548 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    256a:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
}
    256e:	26 96       	adiw	r28, 0x06	; 6
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <vEventGroupSetBitsCallback+0x6>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <vEventGroupSetBitsCallback+0x8>
    2588:	00 d0       	rcall	.+0      	; 0x258a <vEventGroupSetBitsCallback+0xa>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	4b 83       	std	Y+3, r20	; 0x03
    2594:	5c 83       	std	Y+4, r21	; 0x04
    2596:	6d 83       	std	Y+5, r22	; 0x05
    2598:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	9a 81       	ldd	r25, Y+2	; 0x02
    259e:	2b 81       	ldd	r18, Y+3	; 0x03
    25a0:	3c 81       	ldd	r19, Y+4	; 0x04
    25a2:	b9 01       	movw	r22, r18
    25a4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <xEventGroupSetBits>
}
    25a8:	26 96       	adiw	r28, 0x06	; 6
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <vEventGroupClearBitsCallback+0x6>
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <vEventGroupClearBitsCallback+0x8>
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <vEventGroupClearBitsCallback+0xa>
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	4b 83       	std	Y+3, r20	; 0x03
    25ce:	5c 83       	std	Y+4, r21	; 0x04
    25d0:	6d 83       	std	Y+5, r22	; 0x05
    25d2:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	2b 81       	ldd	r18, Y+3	; 0x03
    25da:	3c 81       	ldd	r19, Y+4	; 0x04
    25dc:	b9 01       	movw	r22, r18
    25de:	0e 94 85 11 	call	0x230a	; 0x230a <xEventGroupClearBits>
}
    25e2:	26 96       	adiw	r28, 0x06	; 6
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <prvTestWaitCondition+0x6>
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <prvTestWaitCondition+0x8>
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <prvTestWaitCondition+0xa>
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	9b 83       	std	Y+3, r25	; 0x03
    2604:	8a 83       	std	Y+2, r24	; 0x02
    2606:	7d 83       	std	Y+5, r23	; 0x05
    2608:	6c 83       	std	Y+4, r22	; 0x04
    260a:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    260c:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    260e:	8e 81       	ldd	r24, Y+6	; 0x06
    2610:	88 23       	and	r24, r24
    2612:	59 f4       	brne	.+22     	; 0x262a <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	2c 81       	ldd	r18, Y+4	; 0x04
    261a:	3d 81       	ldd	r19, Y+5	; 0x05
    261c:	82 23       	and	r24, r18
    261e:	93 23       	and	r25, r19
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	81 f0       	breq	.+32     	; 0x2644 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    262a:	2a 81       	ldd	r18, Y+2	; 0x02
    262c:	3b 81       	ldd	r19, Y+3	; 0x03
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	28 23       	and	r18, r24
    2634:	39 23       	and	r19, r25
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	28 17       	cp	r18, r24
    263c:	39 07       	cpc	r19, r25
    263e:	11 f4       	brne	.+4      	; 0x2644 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    2644:	89 81       	ldd	r24, Y+1	; 0x01
}
    2646:	26 96       	adiw	r28, 0x06	; 6
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <pvPortMalloc+0x6>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <pvPortMalloc+0x8>
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    2668:	1a 82       	std	Y+2, r1	; 0x02
    266a:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    266c:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    2670:	80 91 9e 00 	lds	r24, 0x009E
    2674:	90 91 9f 00 	lds	r25, 0x009F
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	31 f4       	brne	.+12     	; 0x2688 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    267c:	81 ea       	ldi	r24, 0xA1	; 161
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	90 93 9f 00 	sts	0x009F, r25
    2684:	80 93 9e 00 	sts	0x009E, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2688:	80 91 9c 00 	lds	r24, 0x009C
    268c:	90 91 9d 00 	lds	r25, 0x009D
    2690:	2b 81       	ldd	r18, Y+3	; 0x03
    2692:	3c 81       	ldd	r19, Y+4	; 0x04
    2694:	82 0f       	add	r24, r18
    2696:	93 1f       	adc	r25, r19
    2698:	25 e0       	ldi	r18, 0x05	; 5
    269a:	8b 3d       	cpi	r24, 0xDB	; 219
    269c:	92 07       	cpc	r25, r18
    269e:	38 f5       	brcc	.+78     	; 0x26ee <pvPortMalloc+0x96>
    26a0:	20 91 9c 00 	lds	r18, 0x009C
    26a4:	30 91 9d 00 	lds	r19, 0x009D
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	28 0f       	add	r18, r24
    26ae:	39 1f       	adc	r19, r25
    26b0:	80 91 9c 00 	lds	r24, 0x009C
    26b4:	90 91 9d 00 	lds	r25, 0x009D
    26b8:	82 17       	cp	r24, r18
    26ba:	93 07       	cpc	r25, r19
    26bc:	c0 f4       	brcc	.+48     	; 0x26ee <pvPortMalloc+0x96>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    26be:	20 91 9e 00 	lds	r18, 0x009E
    26c2:	30 91 9f 00 	lds	r19, 0x009F
    26c6:	80 91 9c 00 	lds	r24, 0x009C
    26ca:	90 91 9d 00 	lds	r25, 0x009D
    26ce:	82 0f       	add	r24, r18
    26d0:	93 1f       	adc	r25, r19
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    26d6:	20 91 9c 00 	lds	r18, 0x009C
    26da:	30 91 9d 00 	lds	r19, 0x009D
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	90 93 9d 00 	sts	0x009D, r25
    26ea:	80 93 9c 00 	sts	0x009C, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    26ee:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <vPortFree+0x6>
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2724:	10 92 9d 00 	sts	0x009D, r1
    2728:	10 92 9c 00 	sts	0x009C, r1
}
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    273a:	20 91 9c 00 	lds	r18, 0x009C
    273e:	30 91 9d 00 	lds	r19, 0x009D
    2742:	8b ed       	ldi	r24, 0xDB	; 219
    2744:	95 e0       	ldi	r25, 0x05	; 5
    2746:	82 1b       	sub	r24, r18
    2748:	93 0b       	sbc	r25, r19
}
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <vListInitialise+0x6>
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	03 96       	adiw	r24, 0x03	; 3
    2764:	e9 81       	ldd	r30, Y+1	; 0x01
    2766:	fa 81       	ldd	r31, Y+2	; 0x02
    2768:	92 83       	std	Z+2, r25	; 0x02
    276a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    276c:	e9 81       	ldd	r30, Y+1	; 0x01
    276e:	fa 81       	ldd	r31, Y+2	; 0x02
    2770:	8f ef       	ldi	r24, 0xFF	; 255
    2772:	9f ef       	ldi	r25, 0xFF	; 255
    2774:	94 83       	std	Z+4, r25	; 0x04
    2776:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	03 96       	adiw	r24, 0x03	; 3
    277e:	e9 81       	ldd	r30, Y+1	; 0x01
    2780:	fa 81       	ldd	r31, Y+2	; 0x02
    2782:	96 83       	std	Z+6, r25	; 0x06
    2784:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	03 96       	adiw	r24, 0x03	; 3
    278c:	e9 81       	ldd	r30, Y+1	; 0x01
    278e:	fa 81       	ldd	r31, Y+2	; 0x02
    2790:	90 87       	std	Z+8, r25	; 0x08
    2792:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2794:	e9 81       	ldd	r30, Y+1	; 0x01
    2796:	fa 81       	ldd	r31, Y+2	; 0x02
    2798:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <vListInitialiseItem+0x6>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    27b2:	e9 81       	ldd	r30, Y+1	; 0x01
    27b4:	fa 81       	ldd	r31, Y+2	; 0x02
    27b6:	11 86       	std	Z+9, r1	; 0x09
    27b8:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <vListInsertEnd+0x6>
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <vListInsertEnd+0x8>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <vListInsertEnd+0xa>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
    27d6:	7e 83       	std	Y+6, r23	; 0x06
    27d8:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    27da:	eb 81       	ldd	r30, Y+3	; 0x03
    27dc:	fc 81       	ldd	r31, Y+4	; 0x04
    27de:	81 81       	ldd	r24, Z+1	; 0x01
    27e0:	92 81       	ldd	r25, Z+2	; 0x02
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    27e6:	ed 81       	ldd	r30, Y+5	; 0x05
    27e8:	fe 81       	ldd	r31, Y+6	; 0x06
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	93 83       	std	Z+3, r25	; 0x03
    27f0:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    27f2:	e9 81       	ldd	r30, Y+1	; 0x01
    27f4:	fa 81       	ldd	r31, Y+2	; 0x02
    27f6:	84 81       	ldd	r24, Z+4	; 0x04
    27f8:	95 81       	ldd	r25, Z+5	; 0x05
    27fa:	ed 81       	ldd	r30, Y+5	; 0x05
    27fc:	fe 81       	ldd	r31, Y+6	; 0x06
    27fe:	95 83       	std	Z+5, r25	; 0x05
    2800:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2802:	e9 81       	ldd	r30, Y+1	; 0x01
    2804:	fa 81       	ldd	r31, Y+2	; 0x02
    2806:	04 80       	ldd	r0, Z+4	; 0x04
    2808:	f5 81       	ldd	r31, Z+5	; 0x05
    280a:	e0 2d       	mov	r30, r0
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	93 83       	std	Z+3, r25	; 0x03
    2812:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    2814:	e9 81       	ldd	r30, Y+1	; 0x01
    2816:	fa 81       	ldd	r31, Y+2	; 0x02
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	95 83       	std	Z+5, r25	; 0x05
    281e:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    2820:	ed 81       	ldd	r30, Y+5	; 0x05
    2822:	fe 81       	ldd	r31, Y+6	; 0x06
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	91 87       	std	Z+9, r25	; 0x09
    282a:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    282c:	eb 81       	ldd	r30, Y+3	; 0x03
    282e:	fc 81       	ldd	r31, Y+4	; 0x04
    2830:	80 81       	ld	r24, Z
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	eb 81       	ldd	r30, Y+3	; 0x03
    2836:	fc 81       	ldd	r31, Y+4	; 0x04
    2838:	80 83       	st	Z, r24
}
    283a:	26 96       	adiw	r28, 0x06	; 6
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	28 97       	sbiw	r28, 0x08	; 8
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	78 87       	std	Y+8, r23	; 0x08
    2866:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2868:	ef 81       	ldd	r30, Y+7	; 0x07
    286a:	f8 85       	ldd	r31, Y+8	; 0x08
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	2f ef       	ldi	r18, 0xFF	; 255
    287a:	8f 3f       	cpi	r24, 0xFF	; 255
    287c:	92 07       	cpc	r25, r18
    287e:	39 f4       	brne	.+14     	; 0x288e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2880:	ed 81       	ldd	r30, Y+5	; 0x05
    2882:	fe 81       	ldd	r31, Y+6	; 0x06
    2884:	87 81       	ldd	r24, Z+7	; 0x07
    2886:	90 85       	ldd	r25, Z+8	; 0x08
    2888:	9c 83       	std	Y+4, r25	; 0x04
    288a:	8b 83       	std	Y+3, r24	; 0x03
    288c:	18 c0       	rjmp	.+48     	; 0x28be <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	03 96       	adiw	r24, 0x03	; 3
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    2898:	06 c0       	rjmp	.+12     	; 0x28a6 <vListInsert+0x5a>
    289a:	eb 81       	ldd	r30, Y+3	; 0x03
    289c:	fc 81       	ldd	r31, Y+4	; 0x04
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	9c 83       	std	Y+4, r25	; 0x04
    28a4:	8b 83       	std	Y+3, r24	; 0x03
    28a6:	eb 81       	ldd	r30, Y+3	; 0x03
    28a8:	fc 81       	ldd	r31, Y+4	; 0x04
    28aa:	02 80       	ldd	r0, Z+2	; 0x02
    28ac:	f3 81       	ldd	r31, Z+3	; 0x03
    28ae:	e0 2d       	mov	r30, r0
    28b0:	20 81       	ld	r18, Z
    28b2:	31 81       	ldd	r19, Z+1	; 0x01
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	82 17       	cp	r24, r18
    28ba:	93 07       	cpc	r25, r19
    28bc:	70 f7       	brcc	.-36     	; 0x289a <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    28be:	eb 81       	ldd	r30, Y+3	; 0x03
    28c0:	fc 81       	ldd	r31, Y+4	; 0x04
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	ef 81       	ldd	r30, Y+7	; 0x07
    28c8:	f8 85       	ldd	r31, Y+8	; 0x08
    28ca:	93 83       	std	Z+3, r25	; 0x03
    28cc:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    28ce:	ef 81       	ldd	r30, Y+7	; 0x07
    28d0:	f8 85       	ldd	r31, Y+8	; 0x08
    28d2:	02 80       	ldd	r0, Z+2	; 0x02
    28d4:	f3 81       	ldd	r31, Z+3	; 0x03
    28d6:	e0 2d       	mov	r30, r0
    28d8:	8f 81       	ldd	r24, Y+7	; 0x07
    28da:	98 85       	ldd	r25, Y+8	; 0x08
    28dc:	95 83       	std	Z+5, r25	; 0x05
    28de:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    28e0:	ef 81       	ldd	r30, Y+7	; 0x07
    28e2:	f8 85       	ldd	r31, Y+8	; 0x08
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	9c 81       	ldd	r25, Y+4	; 0x04
    28e8:	95 83       	std	Z+5, r25	; 0x05
    28ea:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    28ec:	eb 81       	ldd	r30, Y+3	; 0x03
    28ee:	fc 81       	ldd	r31, Y+4	; 0x04
    28f0:	8f 81       	ldd	r24, Y+7	; 0x07
    28f2:	98 85       	ldd	r25, Y+8	; 0x08
    28f4:	93 83       	std	Z+3, r25	; 0x03
    28f6:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    28f8:	ef 81       	ldd	r30, Y+7	; 0x07
    28fa:	f8 85       	ldd	r31, Y+8	; 0x08
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	91 87       	std	Z+9, r25	; 0x09
    2902:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2904:	ed 81       	ldd	r30, Y+5	; 0x05
    2906:	fe 81       	ldd	r31, Y+6	; 0x06
    2908:	80 81       	ld	r24, Z
    290a:	8f 5f       	subi	r24, 0xFF	; 255
    290c:	ed 81       	ldd	r30, Y+5	; 0x05
    290e:	fe 81       	ldd	r31, Y+6	; 0x06
    2910:	80 83       	st	Z, r24
}
    2912:	28 96       	adiw	r28, 0x08	; 8
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	00 d0       	rcall	.+0      	; 0x292a <uxListRemove+0x6>
    292a:	00 d0       	rcall	.+0      	; 0x292c <uxListRemove+0x8>
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	9c 83       	std	Y+4, r25	; 0x04
    2932:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2934:	eb 81       	ldd	r30, Y+3	; 0x03
    2936:	fc 81       	ldd	r31, Y+4	; 0x04
    2938:	80 85       	ldd	r24, Z+8	; 0x08
    293a:	91 85       	ldd	r25, Z+9	; 0x09
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2940:	eb 81       	ldd	r30, Y+3	; 0x03
    2942:	fc 81       	ldd	r31, Y+4	; 0x04
    2944:	a2 81       	ldd	r26, Z+2	; 0x02
    2946:	b3 81       	ldd	r27, Z+3	; 0x03
    2948:	eb 81       	ldd	r30, Y+3	; 0x03
    294a:	fc 81       	ldd	r31, Y+4	; 0x04
    294c:	84 81       	ldd	r24, Z+4	; 0x04
    294e:	95 81       	ldd	r25, Z+5	; 0x05
    2950:	15 96       	adiw	r26, 0x05	; 5
    2952:	9c 93       	st	X, r25
    2954:	8e 93       	st	-X, r24
    2956:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2958:	eb 81       	ldd	r30, Y+3	; 0x03
    295a:	fc 81       	ldd	r31, Y+4	; 0x04
    295c:	a4 81       	ldd	r26, Z+4	; 0x04
    295e:	b5 81       	ldd	r27, Z+5	; 0x05
    2960:	eb 81       	ldd	r30, Y+3	; 0x03
    2962:	fc 81       	ldd	r31, Y+4	; 0x04
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	13 96       	adiw	r26, 0x03	; 3
    296a:	9c 93       	st	X, r25
    296c:	8e 93       	st	-X, r24
    296e:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2970:	e9 81       	ldd	r30, Y+1	; 0x01
    2972:	fa 81       	ldd	r31, Y+2	; 0x02
    2974:	21 81       	ldd	r18, Z+1	; 0x01
    2976:	32 81       	ldd	r19, Z+2	; 0x02
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	28 17       	cp	r18, r24
    297e:	39 07       	cpc	r19, r25
    2980:	41 f4       	brne	.+16     	; 0x2992 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2982:	eb 81       	ldd	r30, Y+3	; 0x03
    2984:	fc 81       	ldd	r31, Y+4	; 0x04
    2986:	84 81       	ldd	r24, Z+4	; 0x04
    2988:	95 81       	ldd	r25, Z+5	; 0x05
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	92 83       	std	Z+2, r25	; 0x02
    2990:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    2992:	eb 81       	ldd	r30, Y+3	; 0x03
    2994:	fc 81       	ldd	r31, Y+4	; 0x04
    2996:	11 86       	std	Z+9, r1	; 0x09
    2998:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    299a:	e9 81       	ldd	r30, Y+1	; 0x01
    299c:	fa 81       	ldd	r31, Y+2	; 0x02
    299e:	80 81       	ld	r24, Z
    29a0:	81 50       	subi	r24, 0x01	; 1
    29a2:	e9 81       	ldd	r30, Y+1	; 0x01
    29a4:	fa 81       	ldd	r31, Y+2	; 0x02
    29a6:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    29a8:	e9 81       	ldd	r30, Y+1	; 0x01
    29aa:	fa 81       	ldd	r31, Y+2	; 0x02
    29ac:	80 81       	ld	r24, Z
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <main>:

/* Define global Variable as Semaphore */
 xSemaphoreHandle LCD_SEM;

int main(void)
{
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
	/* Initialize LCD */
	Lcd_vidInit();
    29ca:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <Lcd_vidInit>


	/* Create Semaphore */
	vSemaphoreCreateBinary(LCD_SEM);
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	43 e0       	ldi	r20, 0x03	; 3
    29d4:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <xQueueGenericCreate>
    29d8:	90 93 e3 06 	sts	0x06E3, r25
    29dc:	80 93 e2 06 	sts	0x06E2, r24
    29e0:	80 91 e2 06 	lds	r24, 0x06E2
    29e4:	90 91 e3 06 	lds	r25, 0x06E3
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	59 f0       	breq	.+22     	; 0x2a02 <main+0x46>
    29ec:	80 91 e2 06 	lds	r24, 0x06E2
    29f0:	90 91 e3 06 	lds	r25, 0x06E3
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	0e 94 6d 19 	call	0x32da	; 0x32da <xQueueGenericSend>



	/* Create Tasks */
	xTaskCreate( LCD_Task1_Func , "TASK_1" , 200 , NULL , TASK1_PRIORITY , NULL );
    2a02:	87 e2       	ldi	r24, 0x27	; 39
    2a04:	95 e1       	ldi	r25, 0x15	; 21
    2a06:	20 e6       	ldi	r18, 0x60	; 96
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	b9 01       	movw	r22, r18
    2a0c:	48 ec       	ldi	r20, 0xC8	; 200
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	02 e0       	ldi	r16, 0x02	; 2
    2a16:	ee 24       	eor	r14, r14
    2a18:	ff 24       	eor	r15, r15
    2a1a:	0e 94 11 27 	call	0x4e22	; 0x4e22 <xTaskCreate>
	xTaskCreate( LCD_Task2_Func , "TASK_2" , 200 , NULL , TASK2_PRIORITY , NULL );
    2a1e:	87 e5       	ldi	r24, 0x57	; 87
    2a20:	95 e1       	ldi	r25, 0x15	; 21
    2a22:	27 e6       	ldi	r18, 0x67	; 103
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	b9 01       	movw	r22, r18
    2a28:	48 ec       	ldi	r20, 0xC8	; 200
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	02 e0       	ldi	r16, 0x02	; 2
    2a32:	ee 24       	eor	r14, r14
    2a34:	ff 24       	eor	r15, r15
    2a36:	0e 94 11 27 	call	0x4e22	; 0x4e22 <xTaskCreate>


	/* Start Scheduler */
	vTaskStartScheduler();
    2a3a:	0e 94 30 2b 	call	0x5660	; 0x5660 <vTaskStartScheduler>

	return 0;
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
}
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	0f 91       	pop	r16
    2a48:	ff 90       	pop	r15
    2a4a:	ef 90       	pop	r14
    2a4c:	08 95       	ret

00002a4e <LCD_Task1_Func>:

void LCD_Task1_Func( void *pvParameter )
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <LCD_Task1_Func+0x6>
    2a54:	0f 92       	push	r0
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	9b 83       	std	Y+3, r25	; 0x03
    2a5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
    2a5e:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		/* task Take Semaphore (if Semaphore not available make task wait for 0xffff ticks) */
		Ret = xSemaphoreTake(LCD_SEM , portMAX_DELAY);
    2a60:	80 91 e2 06 	lds	r24, 0x06E2
    2a64:	90 91 e3 06 	lds	r25, 0x06E3
    2a68:	6f ef       	ldi	r22, 0xFF	; 255
    2a6a:	7f ef       	ldi	r23, 0xFF	; 255
    2a6c:	0e 94 6d 1b 	call	0x36da	; 0x36da <xQueueSemaphoreTake>
    2a70:	89 83       	std	Y+1, r24	; 0x01
		if( Ret ==1 )
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	59 f4       	brne	.+22     	; 0x2a8e <LCD_Task1_Func+0x40>
		{
			Lcd_vidSendCommand(0x01);
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
			Lcd_vidWriteStr("FreeRTOS Task 1");
    2a7e:	8e e6       	ldi	r24, 0x6E	; 110
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <Lcd_vidWriteStr>

			vTaskDelay(1000);
    2a86:	88 ee       	ldi	r24, 0xE8	; 232
    2a88:	93 e0       	ldi	r25, 0x03	; 3
    2a8a:	0e 94 a1 29 	call	0x5342	; 0x5342 <vTaskDelay>
		}
		/* Release Semaphore */
		xSemaphoreGive(LCD_SEM);
    2a8e:	80 91 e2 06 	lds	r24, 0x06E2
    2a92:	90 91 e3 06 	lds	r25, 0x06E3
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	0e 94 6d 19 	call	0x32da	; 0x32da <xQueueGenericSend>
		vTaskDelay(1000);
    2aa4:	88 ee       	ldi	r24, 0xE8	; 232
    2aa6:	93 e0       	ldi	r25, 0x03	; 3
    2aa8:	0e 94 a1 29 	call	0x5342	; 0x5342 <vTaskDelay>
    2aac:	d9 cf       	rjmp	.-78     	; 0x2a60 <LCD_Task1_Func+0x12>

00002aae <LCD_Task2_Func>:
	}
}

void LCD_Task2_Func( void *pvParameter )
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <LCD_Task2_Func+0x6>
    2ab4:	0f 92       	push	r0
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	9b 83       	std	Y+3, r25	; 0x03
    2abc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Ret = 0;
    2abe:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		/* task Take Semaphore (if Semaphore not available make task wait for 0xffff ticks) */
		Ret = xSemaphoreTake(LCD_SEM , portMAX_DELAY);
    2ac0:	80 91 e2 06 	lds	r24, 0x06E2
    2ac4:	90 91 e3 06 	lds	r25, 0x06E3
    2ac8:	6f ef       	ldi	r22, 0xFF	; 255
    2aca:	7f ef       	ldi	r23, 0xFF	; 255
    2acc:	0e 94 6d 1b 	call	0x36da	; 0x36da <xQueueSemaphoreTake>
    2ad0:	89 83       	std	Y+1, r24	; 0x01

		if( Ret == 1 )
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	59 f4       	brne	.+22     	; 0x2aee <LCD_Task2_Func+0x40>
		{
			Lcd_vidSendCommand(0x01);
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	0e 94 6f 0c 	call	0x18de	; 0x18de <Lcd_vidSendCommand>
			Lcd_vidWriteStr("FreeRTOS Task 2");
    2ade:	8e e7       	ldi	r24, 0x7E	; 126
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <Lcd_vidWriteStr>
			vTaskDelay(1000);
    2ae6:	88 ee       	ldi	r24, 0xE8	; 232
    2ae8:	93 e0       	ldi	r25, 0x03	; 3
    2aea:	0e 94 a1 29 	call	0x5342	; 0x5342 <vTaskDelay>
		}

		/* Release Semaphore */
		xSemaphoreGive(LCD_SEM);
    2aee:	80 91 e2 06 	lds	r24, 0x06E2
    2af2:	90 91 e3 06 	lds	r25, 0x06E3
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	70 e0       	ldi	r23, 0x00	; 0
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	0e 94 6d 19 	call	0x32da	; 0x32da <xQueueGenericSend>
		vTaskDelay(1000);
    2b04:	88 ee       	ldi	r24, 0xE8	; 232
    2b06:	93 e0       	ldi	r25, 0x03	; 3
    2b08:	0e 94 a1 29 	call	0x5342	; 0x5342 <vTaskDelay>
    2b0c:	d9 cf       	rjmp	.-78     	; 0x2ac0 <LCD_Task2_Func+0x12>

00002b0e <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	28 97       	sbiw	r28, 0x08	; 8
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	9c 83       	std	Y+4, r25	; 0x04
    2b24:	8b 83       	std	Y+3, r24	; 0x03
    2b26:	7e 83       	std	Y+6, r23	; 0x06
    2b28:	6d 83       	std	Y+5, r22	; 0x05
    2b2a:	58 87       	std	Y+8, r21	; 0x08
    2b2c:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b30:	fc 81       	ldd	r31, Y+4	; 0x04
    2b32:	81 e1       	ldi	r24, 0x11	; 17
    2b34:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	9c 83       	std	Y+4, r25	; 0x04
    2b3e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2b40:	eb 81       	ldd	r30, Y+3	; 0x03
    2b42:	fc 81       	ldd	r31, Y+4	; 0x04
    2b44:	82 e2       	ldi	r24, 0x22	; 34
    2b46:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	9c 83       	std	Y+4, r25	; 0x04
    2b50:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2b52:	eb 81       	ldd	r30, Y+3	; 0x03
    2b54:	fc 81       	ldd	r31, Y+4	; 0x04
    2b56:	83 e3       	ldi	r24, 0x33	; 51
    2b58:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    2b64:	8d 81       	ldd	r24, Y+5	; 0x05
    2b66:	9e 81       	ldd	r25, Y+6	; 0x06
    2b68:	9a 83       	std	Y+2, r25	; 0x02
    2b6a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b70:	fc 81       	ldd	r31, Y+4	; 0x04
    2b72:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	9c 81       	ldd	r25, Y+4	; 0x04
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	9c 83       	std	Y+4, r25	; 0x04
    2b7c:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	89 2f       	mov	r24, r25
    2b84:	99 27       	eor	r25, r25
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b90:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	9c 81       	ldd	r25, Y+4	; 0x04
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	9c 83       	std	Y+4, r25	; 0x04
    2b9a:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    2b9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba0:	10 82       	st	Z, r1
	pxTopOfStack--;
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	9c 83       	std	Y+4, r25	; 0x04
    2baa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2bac:	eb 81       	ldd	r30, Y+3	; 0x03
    2bae:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb0:	80 e8       	ldi	r24, 0x80	; 128
    2bb2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9c 83       	std	Y+4, r25	; 0x04
    2bbc:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    2bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc2:	10 82       	st	Z, r1
	pxTopOfStack--;
    2bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    2bce:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	9c 83       	std	Y+4, r25	; 0x04
    2bde:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    2be0:	eb 81       	ldd	r30, Y+3	; 0x03
    2be2:	fc 81       	ldd	r31, Y+4	; 0x04
    2be4:	83 e0       	ldi	r24, 0x03	; 3
    2be6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	9c 81       	ldd	r25, Y+4	; 0x04
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	9c 83       	std	Y+4, r25	; 0x04
    2bf0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    2bf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf6:	84 e0       	ldi	r24, 0x04	; 4
    2bf8:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    2c04:	eb 81       	ldd	r30, Y+3	; 0x03
    2c06:	fc 81       	ldd	r31, Y+4	; 0x04
    2c08:	85 e0       	ldi	r24, 0x05	; 5
    2c0a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    2c16:	eb 81       	ldd	r30, Y+3	; 0x03
    2c18:	fc 81       	ldd	r31, Y+4	; 0x04
    2c1a:	86 e0       	ldi	r24, 0x06	; 6
    2c1c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	9c 81       	ldd	r25, Y+4	; 0x04
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9c 83       	std	Y+4, r25	; 0x04
    2c26:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    2c28:	eb 81       	ldd	r30, Y+3	; 0x03
    2c2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c2c:	87 e0       	ldi	r24, 0x07	; 7
    2c2e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	9c 81       	ldd	r25, Y+4	; 0x04
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	9c 83       	std	Y+4, r25	; 0x04
    2c38:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    2c3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c3e:	88 e0       	ldi	r24, 0x08	; 8
    2c40:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	9c 83       	std	Y+4, r25	; 0x04
    2c4a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    2c4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c50:	89 e0       	ldi	r24, 0x09	; 9
    2c52:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	9c 81       	ldd	r25, Y+4	; 0x04
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    2c5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c60:	fc 81       	ldd	r31, Y+4	; 0x04
    2c62:	80 e1       	ldi	r24, 0x10	; 16
    2c64:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    2c70:	eb 81       	ldd	r30, Y+3	; 0x03
    2c72:	fc 81       	ldd	r31, Y+4	; 0x04
    2c74:	81 e1       	ldi	r24, 0x11	; 17
    2c76:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2c82:	eb 81       	ldd	r30, Y+3	; 0x03
    2c84:	fc 81       	ldd	r31, Y+4	; 0x04
    2c86:	82 e1       	ldi	r24, 0x12	; 18
    2c88:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	9c 83       	std	Y+4, r25	; 0x04
    2c92:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    2c94:	eb 81       	ldd	r30, Y+3	; 0x03
    2c96:	fc 81       	ldd	r31, Y+4	; 0x04
    2c98:	83 e1       	ldi	r24, 0x13	; 19
    2c9a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	9c 83       	std	Y+4, r25	; 0x04
    2ca4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    2ca6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca8:	fc 81       	ldd	r31, Y+4	; 0x04
    2caa:	84 e1       	ldi	r24, 0x14	; 20
    2cac:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    2cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2cba:	fc 81       	ldd	r31, Y+4	; 0x04
    2cbc:	85 e1       	ldi	r24, 0x15	; 21
    2cbe:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    2cca:	eb 81       	ldd	r30, Y+3	; 0x03
    2ccc:	fc 81       	ldd	r31, Y+4	; 0x04
    2cce:	86 e1       	ldi	r24, 0x16	; 22
    2cd0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    2cdc:	eb 81       	ldd	r30, Y+3	; 0x03
    2cde:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce0:	87 e1       	ldi	r24, 0x17	; 23
    2ce2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	9c 83       	std	Y+4, r25	; 0x04
    2cec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    2cee:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf2:	88 e1       	ldi	r24, 0x18	; 24
    2cf4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	9c 83       	std	Y+4, r25	; 0x04
    2cfe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2d00:	eb 81       	ldd	r30, Y+3	; 0x03
    2d02:	fc 81       	ldd	r31, Y+4	; 0x04
    2d04:	89 e1       	ldi	r24, 0x19	; 25
    2d06:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	9c 83       	std	Y+4, r25	; 0x04
    2d10:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2d12:	eb 81       	ldd	r30, Y+3	; 0x03
    2d14:	fc 81       	ldd	r31, Y+4	; 0x04
    2d16:	80 e2       	ldi	r24, 0x20	; 32
    2d18:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2d24:	eb 81       	ldd	r30, Y+3	; 0x03
    2d26:	fc 81       	ldd	r31, Y+4	; 0x04
    2d28:	81 e2       	ldi	r24, 0x21	; 33
    2d2a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	9c 83       	std	Y+4, r25	; 0x04
    2d34:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    2d36:	eb 81       	ldd	r30, Y+3	; 0x03
    2d38:	fc 81       	ldd	r31, Y+4	; 0x04
    2d3a:	82 e2       	ldi	r24, 0x22	; 34
    2d3c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	9c 81       	ldd	r25, Y+4	; 0x04
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	9c 83       	std	Y+4, r25	; 0x04
    2d46:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    2d48:	eb 81       	ldd	r30, Y+3	; 0x03
    2d4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d4c:	83 e2       	ldi	r24, 0x23	; 35
    2d4e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9c 83       	std	Y+4, r25	; 0x04
    2d58:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    2d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d5c:	98 85       	ldd	r25, Y+8	; 0x08
    2d5e:	9a 83       	std	Y+2, r25	; 0x02
    2d60:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	eb 81       	ldd	r30, Y+3	; 0x03
    2d66:	fc 81       	ldd	r31, Y+4	; 0x04
    2d68:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	89 2f       	mov	r24, r25
    2d7a:	99 27       	eor	r25, r25
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	eb 81       	ldd	r30, Y+3	; 0x03
    2d84:	fc 81       	ldd	r31, Y+4	; 0x04
    2d86:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	9c 83       	std	Y+4, r25	; 0x04
    2d90:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2d92:	eb 81       	ldd	r30, Y+3	; 0x03
    2d94:	fc 81       	ldd	r31, Y+4	; 0x04
    2d96:	86 e2       	ldi	r24, 0x26	; 38
    2d98:	80 83       	st	Z, r24
	pxTopOfStack--;
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    2da4:	eb 81       	ldd	r30, Y+3	; 0x03
    2da6:	fc 81       	ldd	r31, Y+4	; 0x04
    2da8:	87 e2       	ldi	r24, 0x27	; 39
    2daa:	80 83       	st	Z, r24
	pxTopOfStack--;
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	9c 83       	std	Y+4, r25	; 0x04
    2db4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    2db6:	eb 81       	ldd	r30, Y+3	; 0x03
    2db8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dba:	88 e2       	ldi	r24, 0x28	; 40
    2dbc:	80 83       	st	Z, r24
	pxTopOfStack--;
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	9c 83       	std	Y+4, r25	; 0x04
    2dc6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    2dc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dca:	fc 81       	ldd	r31, Y+4	; 0x04
    2dcc:	89 e2       	ldi	r24, 0x29	; 41
    2dce:	80 83       	st	Z, r24
	pxTopOfStack--;
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9c 83       	std	Y+4, r25	; 0x04
    2dd8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    2dda:	eb 81       	ldd	r30, Y+3	; 0x03
    2ddc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dde:	80 e3       	ldi	r24, 0x30	; 48
    2de0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	9c 81       	ldd	r25, Y+4	; 0x04
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    2dec:	eb 81       	ldd	r30, Y+3	; 0x03
    2dee:	fc 81       	ldd	r31, Y+4	; 0x04
    2df0:	81 e3       	ldi	r24, 0x31	; 49
    2df2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	9c 81       	ldd	r25, Y+4	; 0x04
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2e02:	28 96       	adiw	r28, 0x08	; 8
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2e1c:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2e20:	a0 91 7c 06 	lds	r26, 0x067C
    2e24:	b0 91 7d 06 	lds	r27, 0x067D
    2e28:	cd 91       	ld	r28, X+
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	dd 91       	ld	r29, X+
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	ff 91       	pop	r31
    2e32:	ef 91       	pop	r30
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	bf 91       	pop	r27
    2e3a:	af 91       	pop	r26
    2e3c:	9f 91       	pop	r25
    2e3e:	8f 91       	pop	r24
    2e40:	7f 91       	pop	r23
    2e42:	6f 91       	pop	r22
    2e44:	5f 91       	pop	r21
    2e46:	4f 91       	pop	r20
    2e48:	3f 91       	pop	r19
    2e4a:	2f 91       	pop	r18
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	df 90       	pop	r13
    2e56:	cf 90       	pop	r12
    2e58:	bf 90       	pop	r11
    2e5a:	af 90       	pop	r10
    2e5c:	9f 90       	pop	r9
    2e5e:	8f 90       	pop	r8
    2e60:	7f 90       	pop	r7
    2e62:	6f 90       	pop	r6
    2e64:	5f 90       	pop	r5
    2e66:	4f 90       	pop	r4
    2e68:	3f 90       	pop	r3
    2e6a:	2f 90       	pop	r2
    2e6c:	1f 90       	pop	r1
    2e6e:	0f 90       	pop	r0
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2e74:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
}
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2e8c:	0f 92       	push	r0
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	0f 92       	push	r0
    2e94:	1f 92       	push	r1
    2e96:	11 24       	eor	r1, r1
    2e98:	2f 92       	push	r2
    2e9a:	3f 92       	push	r3
    2e9c:	4f 92       	push	r4
    2e9e:	5f 92       	push	r5
    2ea0:	6f 92       	push	r6
    2ea2:	7f 92       	push	r7
    2ea4:	8f 92       	push	r8
    2ea6:	9f 92       	push	r9
    2ea8:	af 92       	push	r10
    2eaa:	bf 92       	push	r11
    2eac:	cf 92       	push	r12
    2eae:	df 92       	push	r13
    2eb0:	ef 92       	push	r14
    2eb2:	ff 92       	push	r15
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	2f 93       	push	r18
    2eba:	3f 93       	push	r19
    2ebc:	4f 93       	push	r20
    2ebe:	5f 93       	push	r21
    2ec0:	6f 93       	push	r22
    2ec2:	7f 93       	push	r23
    2ec4:	8f 93       	push	r24
    2ec6:	9f 93       	push	r25
    2ec8:	af 93       	push	r26
    2eca:	bf 93       	push	r27
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
    2ed0:	ef 93       	push	r30
    2ed2:	ff 93       	push	r31
    2ed4:	a0 91 7c 06 	lds	r26, 0x067C
    2ed8:	b0 91 7d 06 	lds	r27, 0x067D
    2edc:	0d b6       	in	r0, 0x3d	; 61
    2ede:	0d 92       	st	X+, r0
    2ee0:	0e b6       	in	r0, 0x3e	; 62
    2ee2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2ee4:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2ee8:	a0 91 7c 06 	lds	r26, 0x067C
    2eec:	b0 91 7d 06 	lds	r27, 0x067D
    2ef0:	cd 91       	ld	r28, X+
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	dd 91       	ld	r29, X+
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	ff 91       	pop	r31
    2efa:	ef 91       	pop	r30
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	bf 91       	pop	r27
    2f02:	af 91       	pop	r26
    2f04:	9f 91       	pop	r25
    2f06:	8f 91       	pop	r24
    2f08:	7f 91       	pop	r23
    2f0a:	6f 91       	pop	r22
    2f0c:	5f 91       	pop	r21
    2f0e:	4f 91       	pop	r20
    2f10:	3f 91       	pop	r19
    2f12:	2f 91       	pop	r18
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	cf 90       	pop	r12
    2f20:	bf 90       	pop	r11
    2f22:	af 90       	pop	r10
    2f24:	9f 90       	pop	r9
    2f26:	8f 90       	pop	r8
    2f28:	7f 90       	pop	r7
    2f2a:	6f 90       	pop	r6
    2f2c:	5f 90       	pop	r5
    2f2e:	4f 90       	pop	r4
    2f30:	3f 90       	pop	r3
    2f32:	2f 90       	pop	r2
    2f34:	1f 90       	pop	r1
    2f36:	0f 90       	pop	r0
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2f3c:	08 95       	ret

00002f3e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2f3e:	0f 92       	push	r0
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	0f 92       	push	r0
    2f46:	1f 92       	push	r1
    2f48:	11 24       	eor	r1, r1
    2f4a:	2f 92       	push	r2
    2f4c:	3f 92       	push	r3
    2f4e:	4f 92       	push	r4
    2f50:	5f 92       	push	r5
    2f52:	6f 92       	push	r6
    2f54:	7f 92       	push	r7
    2f56:	8f 92       	push	r8
    2f58:	9f 92       	push	r9
    2f5a:	af 92       	push	r10
    2f5c:	bf 92       	push	r11
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	2f 93       	push	r18
    2f6c:	3f 93       	push	r19
    2f6e:	4f 93       	push	r20
    2f70:	5f 93       	push	r21
    2f72:	6f 93       	push	r22
    2f74:	7f 93       	push	r23
    2f76:	8f 93       	push	r24
    2f78:	9f 93       	push	r25
    2f7a:	af 93       	push	r26
    2f7c:	bf 93       	push	r27
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	ef 93       	push	r30
    2f84:	ff 93       	push	r31
    2f86:	a0 91 7c 06 	lds	r26, 0x067C
    2f8a:	b0 91 7d 06 	lds	r27, 0x067D
    2f8e:	0d b6       	in	r0, 0x3d	; 61
    2f90:	0d 92       	st	X+, r0
    2f92:	0e b6       	in	r0, 0x3e	; 62
    2f94:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2f96:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <xTaskIncrementTick>
    2f9a:	88 23       	and	r24, r24
    2f9c:	11 f0       	breq	.+4      	; 0x2fa2 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    2f9e:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    2fa2:	a0 91 7c 06 	lds	r26, 0x067C
    2fa6:	b0 91 7d 06 	lds	r27, 0x067D
    2faa:	cd 91       	ld	r28, X+
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	dd 91       	ld	r29, X+
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	ff 91       	pop	r31
    2fb4:	ef 91       	pop	r30
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	bf 91       	pop	r27
    2fbc:	af 91       	pop	r26
    2fbe:	9f 91       	pop	r25
    2fc0:	8f 91       	pop	r24
    2fc2:	7f 91       	pop	r23
    2fc4:	6f 91       	pop	r22
    2fc6:	5f 91       	pop	r21
    2fc8:	4f 91       	pop	r20
    2fca:	3f 91       	pop	r19
    2fcc:	2f 91       	pop	r18
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	df 90       	pop	r13
    2fd8:	cf 90       	pop	r12
    2fda:	bf 90       	pop	r11
    2fdc:	af 90       	pop	r10
    2fde:	9f 90       	pop	r9
    2fe0:	8f 90       	pop	r8
    2fe2:	7f 90       	pop	r7
    2fe4:	6f 90       	pop	r6
    2fe6:	5f 90       	pop	r5
    2fe8:	4f 90       	pop	r4
    2fea:	3f 90       	pop	r3
    2fec:	2f 90       	pop	r2
    2fee:	1f 90       	pop	r1
    2ff0:	0f 90       	pop	r0
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2ff6:	08 95       	ret

00002ff8 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <prvSetupTimerInterrupt+0x6>
    2ffe:	00 d0       	rcall	.+0      	; 0x3000 <prvSetupTimerInterrupt+0x8>
    3000:	00 d0       	rcall	.+0      	; 0x3002 <prvSetupTimerInterrupt+0xa>
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    3006:	80 e4       	ldi	r24, 0x40	; 64
    3008:	9f e1       	ldi	r25, 0x1F	; 31
    300a:	a0 e0       	ldi	r26, 0x00	; 0
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	8b 83       	std	Y+3, r24	; 0x03
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	ad 83       	std	Y+5, r26	; 0x05
    3014:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	9c 81       	ldd	r25, Y+4	; 0x04
    301a:	ad 81       	ldd	r26, Y+5	; 0x05
    301c:	be 81       	ldd	r27, Y+6	; 0x06
    301e:	68 94       	set
    3020:	15 f8       	bld	r1, 5
    3022:	b6 95       	lsr	r27
    3024:	a7 95       	ror	r26
    3026:	97 95       	ror	r25
    3028:	87 95       	ror	r24
    302a:	16 94       	lsr	r1
    302c:	d1 f7       	brne	.-12     	; 0x3022 <prvSetupTimerInterrupt+0x2a>
    302e:	8b 83       	std	Y+3, r24	; 0x03
    3030:	9c 83       	std	Y+4, r25	; 0x04
    3032:	ad 83       	std	Y+5, r26	; 0x05
    3034:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	ad 81       	ldd	r26, Y+5	; 0x05
    303c:	be 81       	ldd	r27, Y+6	; 0x06
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	a1 09       	sbc	r26, r1
    3042:	b1 09       	sbc	r27, r1
    3044:	8b 83       	std	Y+3, r24	; 0x03
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	ad 83       	std	Y+5, r26	; 0x05
    304a:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	9c 81       	ldd	r25, Y+4	; 0x04
    3054:	ad 81       	ldd	r26, Y+5	; 0x05
    3056:	be 81       	ldd	r27, Y+6	; 0x06
    3058:	89 2f       	mov	r24, r25
    305a:	9a 2f       	mov	r25, r26
    305c:	ab 2f       	mov	r26, r27
    305e:	bb 27       	eor	r27, r27
    3060:	8b 83       	std	Y+3, r24	; 0x03
    3062:	9c 83       	std	Y+4, r25	; 0x04
    3064:	ad 83       	std	Y+5, r26	; 0x05
    3066:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    306c:	eb e4       	ldi	r30, 0x4B	; 75
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    3074:	ea e4       	ldi	r30, 0x4A	; 74
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    307c:	8b e0       	ldi	r24, 0x0B	; 11
    307e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    3080:	ee e4       	ldi	r30, 0x4E	; 78
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    3088:	e9 e5       	ldi	r30, 0x59	; 89
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	80 61       	ori	r24, 0x10	; 16
    3094:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    3096:	e9 e5       	ldi	r30, 0x59	; 89
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	80 83       	st	Z, r24
}
    309e:	26 96       	adiw	r28, 0x06	; 6
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    30b0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <vPortYieldFromTick>
		asm volatile ( "reti" );
    30b4:	18 95       	reti

000030b6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <xQueueGenericReset+0x6>
    30bc:	00 d0       	rcall	.+0      	; 0x30be <xQueueGenericReset+0x8>
    30be:	0f 92       	push	r0
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
    30c8:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = xQueue;
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	9a 83       	std	Y+2, r25	; 0x02
    30d0:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	0f 92       	push	r0
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    30d8:	e9 81       	ldd	r30, Y+1	; 0x01
    30da:	fa 81       	ldd	r31, Y+2	; 0x02
    30dc:	40 81       	ld	r20, Z
    30de:	51 81       	ldd	r21, Z+1	; 0x01
    30e0:	e9 81       	ldd	r30, Y+1	; 0x01
    30e2:	fa 81       	ldd	r31, Y+2	; 0x02
    30e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    30e6:	28 2f       	mov	r18, r24
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	e9 81       	ldd	r30, Y+1	; 0x01
    30ec:	fa 81       	ldd	r31, Y+2	; 0x02
    30ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    30f0:	88 2f       	mov	r24, r24
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	bc 01       	movw	r22, r24
    30f6:	26 9f       	mul	r18, r22
    30f8:	c0 01       	movw	r24, r0
    30fa:	27 9f       	mul	r18, r23
    30fc:	90 0d       	add	r25, r0
    30fe:	36 9f       	mul	r19, r22
    3100:	90 0d       	add	r25, r0
    3102:	11 24       	eor	r1, r1
    3104:	84 0f       	add	r24, r20
    3106:	95 1f       	adc	r25, r21
    3108:	e9 81       	ldd	r30, Y+1	; 0x01
    310a:	fa 81       	ldd	r31, Y+2	; 0x02
    310c:	95 83       	std	Z+5, r25	; 0x05
    310e:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    3110:	e9 81       	ldd	r30, Y+1	; 0x01
    3112:	fa 81       	ldd	r31, Y+2	; 0x02
    3114:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3116:	e9 81       	ldd	r30, Y+1	; 0x01
    3118:	fa 81       	ldd	r31, Y+2	; 0x02
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	e9 81       	ldd	r30, Y+1	; 0x01
    3120:	fa 81       	ldd	r31, Y+2	; 0x02
    3122:	93 83       	std	Z+3, r25	; 0x03
    3124:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    3126:	e9 81       	ldd	r30, Y+1	; 0x01
    3128:	fa 81       	ldd	r31, Y+2	; 0x02
    312a:	40 81       	ld	r20, Z
    312c:	51 81       	ldd	r21, Z+1	; 0x01
    312e:	e9 81       	ldd	r30, Y+1	; 0x01
    3130:	fa 81       	ldd	r31, Y+2	; 0x02
    3132:	83 8d       	ldd	r24, Z+27	; 0x1b
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9c 01       	movw	r18, r24
    313a:	21 50       	subi	r18, 0x01	; 1
    313c:	30 40       	sbci	r19, 0x00	; 0
    313e:	e9 81       	ldd	r30, Y+1	; 0x01
    3140:	fa 81       	ldd	r31, Y+2	; 0x02
    3142:	84 8d       	ldd	r24, Z+28	; 0x1c
    3144:	88 2f       	mov	r24, r24
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	bc 01       	movw	r22, r24
    314a:	26 9f       	mul	r18, r22
    314c:	c0 01       	movw	r24, r0
    314e:	27 9f       	mul	r18, r23
    3150:	90 0d       	add	r25, r0
    3152:	36 9f       	mul	r19, r22
    3154:	90 0d       	add	r25, r0
    3156:	11 24       	eor	r1, r1
    3158:	84 0f       	add	r24, r20
    315a:	95 1f       	adc	r25, r21
    315c:	e9 81       	ldd	r30, Y+1	; 0x01
    315e:	fa 81       	ldd	r31, Y+2	; 0x02
    3160:	97 83       	std	Z+7, r25	; 0x07
    3162:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	8f ef       	ldi	r24, 0xFF	; 255
    316a:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    316c:	e9 81       	ldd	r30, Y+1	; 0x01
    316e:	fa 81       	ldd	r31, Y+2	; 0x02
    3170:	8f ef       	ldi	r24, 0xFF	; 255
    3172:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	88 23       	and	r24, r24
    3178:	79 f4       	brne	.+30     	; 0x3198 <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    317a:	e9 81       	ldd	r30, Y+1	; 0x01
    317c:	fa 81       	ldd	r31, Y+2	; 0x02
    317e:	80 85       	ldd	r24, Z+8	; 0x08
    3180:	88 23       	and	r24, r24
    3182:	a1 f0       	breq	.+40     	; 0x31ac <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	08 96       	adiw	r24, 0x08	; 8
    318a:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    318e:	88 23       	and	r24, r24
    3190:	69 f0       	breq	.+26     	; 0x31ac <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    3192:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
    3196:	0a c0       	rjmp	.+20     	; 0x31ac <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	08 96       	adiw	r24, 0x08	; 8
    319e:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	41 96       	adiw	r24, 0x11	; 17
    31a8:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    31ac:	0f 90       	pop	r0
    31ae:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
}
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    31c2:	0f 93       	push	r16
    31c4:	1f 93       	push	r17
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	29 97       	sbiw	r28, 0x09	; 9
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	8f 83       	std	Y+7, r24	; 0x07
    31dc:	68 87       	std	Y+8, r22	; 0x08
    31de:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    31e0:	88 85       	ldd	r24, Y+8	; 0x08
    31e2:	88 23       	and	r24, r24
    31e4:	19 f4       	brne	.+6      	; 0x31ec <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    31e6:	1c 82       	std	Y+4, r1	; 0x04
    31e8:	1b 82       	std	Y+3, r1	; 0x03
    31ea:	10 c0       	rjmp	.+32     	; 0x320c <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    31ec:	8f 81       	ldd	r24, Y+7	; 0x07
    31ee:	28 2f       	mov	r18, r24
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	88 85       	ldd	r24, Y+8	; 0x08
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	ac 01       	movw	r20, r24
    31fa:	24 9f       	mul	r18, r20
    31fc:	c0 01       	movw	r24, r0
    31fe:	25 9f       	mul	r18, r21
    3200:	90 0d       	add	r25, r0
    3202:	34 9f       	mul	r19, r20
    3204:	90 0d       	add	r25, r0
    3206:	11 24       	eor	r1, r1
    3208:	9c 83       	std	Y+4, r25	; 0x04
    320a:	8b 83       	std	Y+3, r24	; 0x03
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	9c 81       	ldd	r25, Y+4	; 0x04
    3210:	4f 96       	adiw	r24, 0x1f	; 31
    3212:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    321a:	8d 81       	ldd	r24, Y+5	; 0x05
    321c:	9e 81       	ldd	r25, Y+6	; 0x06
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	a1 f0       	breq	.+40     	; 0x324a <xQueueGenericCreate+0x88>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    3222:	8d 81       	ldd	r24, Y+5	; 0x05
    3224:	9e 81       	ldd	r25, Y+6	; 0x06
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
    322e:	4f 96       	adiw	r24, 0x1f	; 31
    3230:	9a 83       	std	Y+2, r25	; 0x02
    3232:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    3234:	29 81       	ldd	r18, Y+1	; 0x01
    3236:	3a 81       	ldd	r19, Y+2	; 0x02
    3238:	ed 81       	ldd	r30, Y+5	; 0x05
    323a:	fe 81       	ldd	r31, Y+6	; 0x06
    323c:	8f 81       	ldd	r24, Y+7	; 0x07
    323e:	68 85       	ldd	r22, Y+8	; 0x08
    3240:	a9 01       	movw	r20, r18
    3242:	29 85       	ldd	r18, Y+9	; 0x09
    3244:	8f 01       	movw	r16, r30
    3246:	0e 94 32 19 	call	0x3264	; 0x3264 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    324a:	8d 81       	ldd	r24, Y+5	; 0x05
    324c:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    324e:	29 96       	adiw	r28, 0x09	; 9
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	1f 91       	pop	r17
    3260:	0f 91       	pop	r16
    3262:	08 95       	ret

00003264 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	27 97       	sbiw	r28, 0x07	; 7
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	6a 83       	std	Y+2, r22	; 0x02
    3280:	5c 83       	std	Y+4, r21	; 0x04
    3282:	4b 83       	std	Y+3, r20	; 0x03
    3284:	2d 83       	std	Y+5, r18	; 0x05
    3286:	1f 83       	std	Y+7, r17	; 0x07
    3288:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	88 23       	and	r24, r24
    328e:	39 f4       	brne	.+14     	; 0x329e <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    3290:	8e 81       	ldd	r24, Y+6	; 0x06
    3292:	9f 81       	ldd	r25, Y+7	; 0x07
    3294:	ee 81       	ldd	r30, Y+6	; 0x06
    3296:	ff 81       	ldd	r31, Y+7	; 0x07
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	80 83       	st	Z, r24
    329c:	06 c0       	rjmp	.+12     	; 0x32aa <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	9c 81       	ldd	r25, Y+4	; 0x04
    32a2:	ee 81       	ldd	r30, Y+6	; 0x06
    32a4:	ff 81       	ldd	r31, Y+7	; 0x07
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    32aa:	ee 81       	ldd	r30, Y+6	; 0x06
    32ac:	ff 81       	ldd	r31, Y+7	; 0x07
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    32b2:	ee 81       	ldd	r30, Y+6	; 0x06
    32b4:	ff 81       	ldd	r31, Y+7	; 0x07
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    32ba:	8e 81       	ldd	r24, Y+6	; 0x06
    32bc:	9f 81       	ldd	r25, Y+7	; 0x07
    32be:	61 e0       	ldi	r22, 0x01	; 1
    32c0:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    32c4:	27 96       	adiw	r28, 0x07	; 7
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	f8 94       	cli
    32ca:	de bf       	out	0x3e, r29	; 62
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	cd bf       	out	0x3d, r28	; 61
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	08 95       	ret

000032da <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	2f 97       	sbiw	r28, 0x0f	; 15
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	99 87       	std	Y+9, r25	; 0x09
    32f0:	88 87       	std	Y+8, r24	; 0x08
    32f2:	7b 87       	std	Y+11, r23	; 0x0b
    32f4:	6a 87       	std	Y+10, r22	; 0x0a
    32f6:	5d 87       	std	Y+13, r21	; 0x0d
    32f8:	4c 87       	std	Y+12, r20	; 0x0c
    32fa:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    32fc:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    32fe:	88 85       	ldd	r24, Y+8	; 0x08
    3300:	99 85       	ldd	r25, Y+9	; 0x09
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 83       	std	Y+1, r24	; 0x01
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    330c:	e9 81       	ldd	r30, Y+1	; 0x01
    330e:	fa 81       	ldd	r31, Y+2	; 0x02
    3310:	92 8d       	ldd	r25, Z+26	; 0x1a
    3312:	e9 81       	ldd	r30, Y+1	; 0x01
    3314:	fa 81       	ldd	r31, Y+2	; 0x02
    3316:	83 8d       	ldd	r24, Z+27	; 0x1b
    3318:	98 17       	cp	r25, r24
    331a:	18 f0       	brcs	.+6      	; 0x3322 <xQueueGenericSend+0x48>
    331c:	8e 85       	ldd	r24, Y+14	; 0x0e
    331e:	82 30       	cpi	r24, 0x02	; 2
    3320:	11 f5       	brne	.+68     	; 0x3366 <xQueueGenericSend+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	9a 81       	ldd	r25, Y+2	; 0x02
    3326:	2a 85       	ldd	r18, Y+10	; 0x0a
    3328:	3b 85       	ldd	r19, Y+11	; 0x0b
    332a:	b9 01       	movw	r22, r18
    332c:	4e 85       	ldd	r20, Y+14	; 0x0e
    332e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <prvCopyDataToQueue>
    3332:	8b 83       	std	Y+3, r24	; 0x03

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3334:	e9 81       	ldd	r30, Y+1	; 0x01
    3336:	fa 81       	ldd	r31, Y+2	; 0x02
    3338:	81 89       	ldd	r24, Z+17	; 0x11
    333a:	88 23       	and	r24, r24
    333c:	51 f0       	breq	.+20     	; 0x3352 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
    3342:	41 96       	adiw	r24, 0x11	; 17
    3344:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    3348:	88 23       	and	r24, r24
    334a:	41 f0       	breq	.+16     	; 0x335c <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    334c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
    3350:	05 c0       	rjmp	.+10     	; 0x335c <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	88 23       	and	r24, r24
    3356:	11 f0       	breq	.+4      	; 0x335c <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    3358:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    335c:	0f 90       	pop	r0
    335e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	8f 87       	std	Y+15, r24	; 0x0f
    3364:	5c c0       	rjmp	.+184    	; 0x341e <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3366:	8c 85       	ldd	r24, Y+12	; 0x0c
    3368:	9d 85       	ldd	r25, Y+13	; 0x0d
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	21 f4       	brne	.+8      	; 0x3376 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    336e:	0f 90       	pop	r0
    3370:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3372:	1f 86       	std	Y+15, r1	; 0x0f
    3374:	54 c0       	rjmp	.+168    	; 0x341e <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    3376:	8c 81       	ldd	r24, Y+4	; 0x04
    3378:	88 23       	and	r24, r24
    337a:	31 f4       	brne	.+12     	; 0x3388 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    337c:	ce 01       	movw	r24, r28
    337e:	05 96       	adiw	r24, 0x05	; 5
    3380:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3388:	0f 90       	pop	r0
    338a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    338c:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	0f 92       	push	r0
    3396:	e9 81       	ldd	r30, Y+1	; 0x01
    3398:	fa 81       	ldd	r31, Y+2	; 0x02
    339a:	85 8d       	ldd	r24, Z+29	; 0x1d
    339c:	8f 3f       	cpi	r24, 0xFF	; 255
    339e:	19 f4       	brne	.+6      	; 0x33a6 <xQueueGenericSend+0xcc>
    33a0:	e9 81       	ldd	r30, Y+1	; 0x01
    33a2:	fa 81       	ldd	r31, Y+2	; 0x02
    33a4:	15 8e       	std	Z+29, r1	; 0x1d
    33a6:	e9 81       	ldd	r30, Y+1	; 0x01
    33a8:	fa 81       	ldd	r31, Y+2	; 0x02
    33aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    33ac:	8f 3f       	cpi	r24, 0xFF	; 255
    33ae:	19 f4       	brne	.+6      	; 0x33b6 <xQueueGenericSend+0xdc>
    33b0:	e9 81       	ldd	r30, Y+1	; 0x01
    33b2:	fa 81       	ldd	r31, Y+2	; 0x02
    33b4:	16 8e       	std	Z+30, r1	; 0x1e
    33b6:	0f 90       	pop	r0
    33b8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    33ba:	ce 01       	movw	r24, r28
    33bc:	05 96       	adiw	r24, 0x05	; 5
    33be:	9e 01       	movw	r18, r28
    33c0:	24 5f       	subi	r18, 0xF4	; 244
    33c2:	3f 4f       	sbci	r19, 0xFF	; 255
    33c4:	b9 01       	movw	r22, r18
    33c6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <xTaskCheckForTimeOut>
    33ca:	88 23       	and	r24, r24
    33cc:	09 f5       	brne	.+66     	; 0x3410 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	9a 81       	ldd	r25, Y+2	; 0x02
    33d2:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <prvIsQueueFull>
    33d6:	88 23       	and	r24, r24
    33d8:	a1 f0       	breq	.+40     	; 0x3402 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	08 96       	adiw	r24, 0x08	; 8
    33e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    33e2:	3d 85       	ldd	r19, Y+13	; 0x0d
    33e4:	b9 01       	movw	r22, r18
    33e6:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    33f2:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    33f6:	88 23       	and	r24, r24
    33f8:	09 f0       	breq	.+2      	; 0x33fc <xQueueGenericSend+0x122>
    33fa:	85 cf       	rjmp	.-246    	; 0x3306 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    33fc:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
    3400:	82 cf       	rjmp	.-252    	; 0x3306 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	9a 81       	ldd	r25, Y+2	; 0x02
    3406:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    340a:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    340e:	7b cf       	rjmp	.-266    	; 0x3306 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	9a 81       	ldd	r25, Y+2	; 0x02
    3414:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3418:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    341c:	1f 86       	std	Y+15, r1	; 0x0f
    341e:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	} /*lint -restore */
}
    3420:	2f 96       	adiw	r28, 0x0f	; 15
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	2c 97       	sbiw	r28, 0x0c	; 12
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	9f 83       	std	Y+7, r25	; 0x07
    3448:	8e 83       	std	Y+6, r24	; 0x06
    344a:	79 87       	std	Y+9, r23	; 0x09
    344c:	68 87       	std	Y+8, r22	; 0x08
    344e:	5b 87       	std	Y+11, r21	; 0x0b
    3450:	4a 87       	std	Y+10, r20	; 0x0a
    3452:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    3454:	8e 81       	ldd	r24, Y+6	; 0x06
    3456:	9f 81       	ldd	r25, Y+7	; 0x07
    3458:	9b 83       	std	Y+3, r25	; 0x03
    345a:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    345c:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    345e:	ea 81       	ldd	r30, Y+2	; 0x02
    3460:	fb 81       	ldd	r31, Y+3	; 0x03
    3462:	92 8d       	ldd	r25, Z+26	; 0x1a
    3464:	ea 81       	ldd	r30, Y+2	; 0x02
    3466:	fb 81       	ldd	r31, Y+3	; 0x03
    3468:	83 8d       	ldd	r24, Z+27	; 0x1b
    346a:	98 17       	cp	r25, r24
    346c:	18 f0       	brcs	.+6      	; 0x3474 <xQueueGenericSendFromISR+0x42>
    346e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3470:	82 30       	cpi	r24, 0x02	; 2
    3472:	61 f5       	brne	.+88     	; 0x34cc <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    3474:	ea 81       	ldd	r30, Y+2	; 0x02
    3476:	fb 81       	ldd	r31, Y+3	; 0x03
    3478:	86 8d       	ldd	r24, Z+30	; 0x1e
    347a:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	9b 81       	ldd	r25, Y+3	; 0x03
    3480:	28 85       	ldd	r18, Y+8	; 0x08
    3482:	39 85       	ldd	r19, Y+9	; 0x09
    3484:	b9 01       	movw	r22, r18
    3486:	4c 85       	ldd	r20, Y+12	; 0x0c
    3488:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	8f 3f       	cpi	r24, 0xFF	; 255
    3490:	a9 f4       	brne	.+42     	; 0x34bc <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3492:	ea 81       	ldd	r30, Y+2	; 0x02
    3494:	fb 81       	ldd	r31, Y+3	; 0x03
    3496:	81 89       	ldd	r24, Z+17	; 0x11
    3498:	88 23       	and	r24, r24
    349a:	a9 f0       	breq	.+42     	; 0x34c6 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	9b 81       	ldd	r25, Y+3	; 0x03
    34a0:	41 96       	adiw	r24, 0x11	; 17
    34a2:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    34a6:	88 23       	and	r24, r24
    34a8:	71 f0       	breq	.+28     	; 0x34c6 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    34aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	51 f0       	breq	.+20     	; 0x34c6 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    34b2:	ea 85       	ldd	r30, Y+10	; 0x0a
    34b4:	fb 85       	ldd	r31, Y+11	; 0x0b
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	80 83       	st	Z, r24
    34ba:	05 c0       	rjmp	.+10     	; 0x34c6 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	8f 5f       	subi	r24, 0xFF	; 255
    34c0:	ea 81       	ldd	r30, Y+2	; 0x02
    34c2:	fb 81       	ldd	r31, Y+3	; 0x03
    34c4:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	8d 83       	std	Y+5, r24	; 0x05
    34ca:	01 c0       	rjmp	.+2      	; 0x34ce <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    34cc:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    34ce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    34d0:	2c 96       	adiw	r28, 0x0c	; 12
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	de bf       	out	0x3e, r29	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	2a 97       	sbiw	r28, 0x0a	; 10
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	98 87       	std	Y+8, r25	; 0x08
    34f8:	8f 83       	std	Y+7, r24	; 0x07
    34fa:	7a 87       	std	Y+10, r23	; 0x0a
    34fc:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    34fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3500:	98 85       	ldd	r25, Y+8	; 0x08
    3502:	9c 83       	std	Y+4, r25	; 0x04
    3504:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3506:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3508:	eb 81       	ldd	r30, Y+3	; 0x03
    350a:	fc 81       	ldd	r31, Y+4	; 0x04
    350c:	82 8d       	ldd	r24, Z+26	; 0x1a
    350e:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    3510:	eb 81       	ldd	r30, Y+3	; 0x03
    3512:	fc 81       	ldd	r31, Y+4	; 0x04
    3514:	93 8d       	ldd	r25, Z+27	; 0x1b
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	89 17       	cp	r24, r25
    351a:	48 f5       	brcc	.+82     	; 0x356e <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    351c:	eb 81       	ldd	r30, Y+3	; 0x03
    351e:	fc 81       	ldd	r31, Y+4	; 0x04
    3520:	86 8d       	ldd	r24, Z+30	; 0x1e
    3522:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	8f 5f       	subi	r24, 0xFF	; 255
    3528:	eb 81       	ldd	r30, Y+3	; 0x03
    352a:	fc 81       	ldd	r31, Y+4	; 0x04
    352c:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	8f 3f       	cpi	r24, 0xFF	; 255
    3532:	a9 f4       	brne	.+42     	; 0x355e <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3534:	eb 81       	ldd	r30, Y+3	; 0x03
    3536:	fc 81       	ldd	r31, Y+4	; 0x04
    3538:	81 89       	ldd	r24, Z+17	; 0x11
    353a:	88 23       	and	r24, r24
    353c:	a9 f0       	breq	.+42     	; 0x3568 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    353e:	8b 81       	ldd	r24, Y+3	; 0x03
    3540:	9c 81       	ldd	r25, Y+4	; 0x04
    3542:	41 96       	adiw	r24, 0x11	; 17
    3544:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    3548:	88 23       	and	r24, r24
    354a:	71 f0       	breq	.+28     	; 0x3568 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    354c:	89 85       	ldd	r24, Y+9	; 0x09
    354e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	51 f0       	breq	.+20     	; 0x3568 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3554:	e9 85       	ldd	r30, Y+9	; 0x09
    3556:	fa 85       	ldd	r31, Y+10	; 0x0a
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	80 83       	st	Z, r24
    355c:	05 c0       	rjmp	.+10     	; 0x3568 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	8f 5f       	subi	r24, 0xFF	; 255
    3562:	eb 81       	ldd	r30, Y+3	; 0x03
    3564:	fc 81       	ldd	r31, Y+4	; 0x04
    3566:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	8e 83       	std	Y+6, r24	; 0x06
    356c:	01 c0       	rjmp	.+2      	; 0x3570 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    356e:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3570:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3572:	2a 96       	adiw	r28, 0x0a	; 10
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	08 95       	ret

00003584 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    3584:	df 93       	push	r29
    3586:	cf 93       	push	r28
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	2e 97       	sbiw	r28, 0x0e	; 14
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	cd bf       	out	0x3d, r28	; 61
    3598:	99 87       	std	Y+9, r25	; 0x09
    359a:	88 87       	std	Y+8, r24	; 0x08
    359c:	7b 87       	std	Y+11, r23	; 0x0b
    359e:	6a 87       	std	Y+10, r22	; 0x0a
    35a0:	5d 87       	std	Y+13, r21	; 0x0d
    35a2:	4c 87       	std	Y+12, r20	; 0x0c
BaseType_t xEntryTimeSet = pdFALSE;
    35a4:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    35a6:	88 85       	ldd	r24, Y+8	; 0x08
    35a8:	99 85       	ldd	r25, Y+9	; 0x09
    35aa:	9b 83       	std	Y+3, r25	; 0x03
    35ac:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    35b4:	ea 81       	ldd	r30, Y+2	; 0x02
    35b6:	fb 81       	ldd	r31, Y+3	; 0x03
    35b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ba:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	88 23       	and	r24, r24
    35c0:	f9 f0       	breq	.+62     	; 0x3600 <xQueueReceive+0x7c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    35c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    35ca:	b9 01       	movw	r22, r18
    35cc:	0e 94 65 1e 	call	0x3cca	; 0x3cca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	81 50       	subi	r24, 0x01	; 1
    35d4:	ea 81       	ldd	r30, Y+2	; 0x02
    35d6:	fb 81       	ldd	r31, Y+3	; 0x03
    35d8:	82 8f       	std	Z+26, r24	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    35da:	ea 81       	ldd	r30, Y+2	; 0x02
    35dc:	fb 81       	ldd	r31, Y+3	; 0x03
    35de:	80 85       	ldd	r24, Z+8	; 0x08
    35e0:	88 23       	and	r24, r24
    35e2:	49 f0       	breq	.+18     	; 0x35f6 <xQueueReceive+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	9b 81       	ldd	r25, Y+3	; 0x03
    35e8:	08 96       	adiw	r24, 0x08	; 8
    35ea:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    35ee:	88 23       	and	r24, r24
    35f0:	11 f0       	breq	.+4      	; 0x35f6 <xQueueReceive+0x72>
					{
						queueYIELD_IF_USING_PREEMPTION();
    35f2:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    35f6:	0f 90       	pop	r0
    35f8:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	8e 87       	std	Y+14, r24	; 0x0e
    35fe:	63 c0       	rjmp	.+198    	; 0x36c6 <xQueueReceive+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3600:	8c 85       	ldd	r24, Y+12	; 0x0c
    3602:	9d 85       	ldd	r25, Y+13	; 0x0d
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	21 f4       	brne	.+8      	; 0x3610 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3608:	0f 90       	pop	r0
    360a:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    360c:	1e 86       	std	Y+14, r1	; 0x0e
    360e:	5b c0       	rjmp	.+182    	; 0x36c6 <xQueueReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
    3610:	8c 81       	ldd	r24, Y+4	; 0x04
    3612:	88 23       	and	r24, r24
    3614:	31 f4       	brne	.+12     	; 0x3622 <xQueueReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    3616:	ce 01       	movw	r24, r28
    3618:	05 96       	adiw	r24, 0x05	; 5
    361a:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3622:	0f 90       	pop	r0
    3624:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3626:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	0f 92       	push	r0
    3630:	ea 81       	ldd	r30, Y+2	; 0x02
    3632:	fb 81       	ldd	r31, Y+3	; 0x03
    3634:	85 8d       	ldd	r24, Z+29	; 0x1d
    3636:	8f 3f       	cpi	r24, 0xFF	; 255
    3638:	19 f4       	brne	.+6      	; 0x3640 <xQueueReceive+0xbc>
    363a:	ea 81       	ldd	r30, Y+2	; 0x02
    363c:	fb 81       	ldd	r31, Y+3	; 0x03
    363e:	15 8e       	std	Z+29, r1	; 0x1d
    3640:	ea 81       	ldd	r30, Y+2	; 0x02
    3642:	fb 81       	ldd	r31, Y+3	; 0x03
    3644:	86 8d       	ldd	r24, Z+30	; 0x1e
    3646:	8f 3f       	cpi	r24, 0xFF	; 255
    3648:	19 f4       	brne	.+6      	; 0x3650 <xQueueReceive+0xcc>
    364a:	ea 81       	ldd	r30, Y+2	; 0x02
    364c:	fb 81       	ldd	r31, Y+3	; 0x03
    364e:	16 8e       	std	Z+30, r1	; 0x1e
    3650:	0f 90       	pop	r0
    3652:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3654:	ce 01       	movw	r24, r28
    3656:	05 96       	adiw	r24, 0x05	; 5
    3658:	9e 01       	movw	r18, r28
    365a:	24 5f       	subi	r18, 0xF4	; 244
    365c:	3f 4f       	sbci	r19, 0xFF	; 255
    365e:	b9 01       	movw	r22, r18
    3660:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <xTaskCheckForTimeOut>
    3664:	88 23       	and	r24, r24
    3666:	09 f5       	brne	.+66     	; 0x36aa <xQueueReceive+0x126>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3668:	8a 81       	ldd	r24, Y+2	; 0x02
    366a:	9b 81       	ldd	r25, Y+3	; 0x03
    366c:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <prvIsQueueEmpty>
    3670:	88 23       	and	r24, r24
    3672:	a1 f0       	breq	.+40     	; 0x369c <xQueueReceive+0x118>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	9b 81       	ldd	r25, Y+3	; 0x03
    3678:	41 96       	adiw	r24, 0x11	; 17
    367a:	2c 85       	ldd	r18, Y+12	; 0x0c
    367c:	3d 85       	ldd	r19, Y+13	; 0x0d
    367e:	b9 01       	movw	r22, r18
    3680:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3684:	8a 81       	ldd	r24, Y+2	; 0x02
    3686:	9b 81       	ldd	r25, Y+3	; 0x03
    3688:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    368c:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    3690:	88 23       	and	r24, r24
    3692:	09 f0       	breq	.+2      	; 0x3696 <xQueueReceive+0x112>
    3694:	8c cf       	rjmp	.-232    	; 0x35ae <xQueueReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    3696:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
    369a:	89 cf       	rjmp	.-238    	; 0x35ae <xQueueReceive+0x2a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	9b 81       	ldd	r25, Y+3	; 0x03
    36a0:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    36a4:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    36a8:	82 cf       	rjmp	.-252    	; 0x35ae <xQueueReceive+0x2a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	9b 81       	ldd	r25, Y+3	; 0x03
    36ae:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    36b2:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ba:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <prvIsQueueEmpty>
    36be:	88 23       	and	r24, r24
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <xQueueReceive+0x140>
    36c2:	75 cf       	rjmp	.-278    	; 0x35ae <xQueueReceive+0x2a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    36c4:	1e 86       	std	Y+14, r1	; 0x0e
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    36c6:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    36c8:	2e 96       	adiw	r28, 0x0e	; 14
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	2c 97       	sbiw	r28, 0x0c	; 12
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	99 87       	std	Y+9, r25	; 0x09
    36f0:	88 87       	std	Y+8, r24	; 0x08
    36f2:	7b 87       	std	Y+11, r23	; 0x0b
    36f4:	6a 87       	std	Y+10, r22	; 0x0a
BaseType_t xEntryTimeSet = pdFALSE;
    36f6:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    36f8:	88 85       	ldd	r24, Y+8	; 0x08
    36fa:	99 85       	ldd	r25, Y+9	; 0x09
    36fc:	9b 83       	std	Y+3, r25	; 0x03
    36fe:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    3706:	ea 81       	ldd	r30, Y+2	; 0x02
    3708:	fb 81       	ldd	r31, Y+3	; 0x03
    370a:	82 8d       	ldd	r24, Z+26	; 0x1a
    370c:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	88 23       	and	r24, r24
    3712:	c1 f0       	breq	.+48     	; 0x3744 <xQueueSemaphoreTake+0x6a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	81 50       	subi	r24, 0x01	; 1
    3718:	ea 81       	ldd	r30, Y+2	; 0x02
    371a:	fb 81       	ldd	r31, Y+3	; 0x03
    371c:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    371e:	ea 81       	ldd	r30, Y+2	; 0x02
    3720:	fb 81       	ldd	r31, Y+3	; 0x03
    3722:	80 85       	ldd	r24, Z+8	; 0x08
    3724:	88 23       	and	r24, r24
    3726:	49 f0       	breq	.+18     	; 0x373a <xQueueSemaphoreTake+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	9b 81       	ldd	r25, Y+3	; 0x03
    372c:	08 96       	adiw	r24, 0x08	; 8
    372e:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    3732:	88 23       	and	r24, r24
    3734:	11 f0       	breq	.+4      	; 0x373a <xQueueSemaphoreTake+0x60>
					{
						queueYIELD_IF_USING_PREEMPTION();
    3736:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    373a:	0f 90       	pop	r0
    373c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	8c 87       	std	Y+12, r24	; 0x0c
    3742:	63 c0       	rjmp	.+198    	; 0x380a <xQueueSemaphoreTake+0x130>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3744:	8a 85       	ldd	r24, Y+10	; 0x0a
    3746:	9b 85       	ldd	r25, Y+11	; 0x0b
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	21 f4       	brne	.+8      	; 0x3754 <xQueueSemaphoreTake+0x7a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    374c:	0f 90       	pop	r0
    374e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3750:	1c 86       	std	Y+12, r1	; 0x0c
    3752:	5b c0       	rjmp	.+182    	; 0x380a <xQueueSemaphoreTake+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
    3754:	8c 81       	ldd	r24, Y+4	; 0x04
    3756:	88 23       	and	r24, r24
    3758:	31 f4       	brne	.+12     	; 0x3766 <xQueueSemaphoreTake+0x8c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    375a:	ce 01       	movw	r24, r28
    375c:	05 96       	adiw	r24, 0x05	; 5
    375e:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3766:	0f 90       	pop	r0
    3768:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    376a:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	0f 92       	push	r0
    3774:	ea 81       	ldd	r30, Y+2	; 0x02
    3776:	fb 81       	ldd	r31, Y+3	; 0x03
    3778:	85 8d       	ldd	r24, Z+29	; 0x1d
    377a:	8f 3f       	cpi	r24, 0xFF	; 255
    377c:	19 f4       	brne	.+6      	; 0x3784 <xQueueSemaphoreTake+0xaa>
    377e:	ea 81       	ldd	r30, Y+2	; 0x02
    3780:	fb 81       	ldd	r31, Y+3	; 0x03
    3782:	15 8e       	std	Z+29, r1	; 0x1d
    3784:	ea 81       	ldd	r30, Y+2	; 0x02
    3786:	fb 81       	ldd	r31, Y+3	; 0x03
    3788:	86 8d       	ldd	r24, Z+30	; 0x1e
    378a:	8f 3f       	cpi	r24, 0xFF	; 255
    378c:	19 f4       	brne	.+6      	; 0x3794 <xQueueSemaphoreTake+0xba>
    378e:	ea 81       	ldd	r30, Y+2	; 0x02
    3790:	fb 81       	ldd	r31, Y+3	; 0x03
    3792:	16 8e       	std	Z+30, r1	; 0x1e
    3794:	0f 90       	pop	r0
    3796:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3798:	ce 01       	movw	r24, r28
    379a:	05 96       	adiw	r24, 0x05	; 5
    379c:	9e 01       	movw	r18, r28
    379e:	26 5f       	subi	r18, 0xF6	; 246
    37a0:	3f 4f       	sbci	r19, 0xFF	; 255
    37a2:	b9 01       	movw	r22, r18
    37a4:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <xTaskCheckForTimeOut>
    37a8:	88 23       	and	r24, r24
    37aa:	09 f5       	brne	.+66     	; 0x37ee <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	9b 81       	ldd	r25, Y+3	; 0x03
    37b0:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <prvIsQueueEmpty>
    37b4:	88 23       	and	r24, r24
    37b6:	a1 f0       	breq	.+40     	; 0x37e0 <xQueueSemaphoreTake+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    37b8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ba:	9b 81       	ldd	r25, Y+3	; 0x03
    37bc:	41 96       	adiw	r24, 0x11	; 17
    37be:	2a 85       	ldd	r18, Y+10	; 0x0a
    37c0:	3b 85       	ldd	r19, Y+11	; 0x0b
    37c2:	b9 01       	movw	r22, r18
    37c4:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    37c8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ca:	9b 81       	ldd	r25, Y+3	; 0x03
    37cc:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    37d0:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    37d4:	88 23       	and	r24, r24
    37d6:	09 f0       	breq	.+2      	; 0x37da <xQueueSemaphoreTake+0x100>
    37d8:	93 cf       	rjmp	.-218    	; 0x3700 <xQueueSemaphoreTake+0x26>
				{
					portYIELD_WITHIN_API();
    37da:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
    37de:	90 cf       	rjmp	.-224    	; 0x3700 <xQueueSemaphoreTake+0x26>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	9b 81       	ldd	r25, Y+3	; 0x03
    37e4:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    37e8:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    37ec:	89 cf       	rjmp	.-238    	; 0x3700 <xQueueSemaphoreTake+0x26>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	9b 81       	ldd	r25, Y+3	; 0x03
    37f2:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    37f6:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	9b 81       	ldd	r25, Y+3	; 0x03
    37fe:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <prvIsQueueEmpty>
    3802:	88 23       	and	r24, r24
    3804:	09 f4       	brne	.+2      	; 0x3808 <xQueueSemaphoreTake+0x12e>
    3806:	7c cf       	rjmp	.-264    	; 0x3700 <xQueueSemaphoreTake+0x26>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    3808:	1c 86       	std	Y+12, r1	; 0x0c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    380a:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    380c:	2c 96       	adiw	r28, 0x0c	; 12
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	cf 91       	pop	r28
    381a:	df 91       	pop	r29
    381c:	08 95       	ret

0000381e <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	60 97       	sbiw	r28, 0x10	; 16
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
    3832:	9b 87       	std	Y+11, r25	; 0x0b
    3834:	8a 87       	std	Y+10, r24	; 0x0a
    3836:	7d 87       	std	Y+13, r23	; 0x0d
    3838:	6c 87       	std	Y+12, r22	; 0x0c
    383a:	5f 87       	std	Y+15, r21	; 0x0f
    383c:	4e 87       	std	Y+14, r20	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE;
    383e:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    3840:	8a 85       	ldd	r24, Y+10	; 0x0a
    3842:	9b 85       	ldd	r25, Y+11	; 0x0b
    3844:	9b 83       	std	Y+3, r25	; 0x03
    3846:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    384e:	ea 81       	ldd	r30, Y+2	; 0x02
    3850:	fb 81       	ldd	r31, Y+3	; 0x03
    3852:	82 8d       	ldd	r24, Z+26	; 0x1a
    3854:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	88 23       	and	r24, r24
    385a:	31 f1       	breq	.+76     	; 0x38a8 <xQueuePeek+0x8a>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    385c:	ea 81       	ldd	r30, Y+2	; 0x02
    385e:	fb 81       	ldd	r31, Y+3	; 0x03
    3860:	86 81       	ldd	r24, Z+6	; 0x06
    3862:	97 81       	ldd	r25, Z+7	; 0x07
    3864:	9d 83       	std	Y+5, r25	; 0x05
    3866:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	9b 81       	ldd	r25, Y+3	; 0x03
    386c:	2c 85       	ldd	r18, Y+12	; 0x0c
    386e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3870:	b9 01       	movw	r22, r18
    3872:	0e 94 65 1e 	call	0x3cca	; 0x3cca <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    3876:	ea 81       	ldd	r30, Y+2	; 0x02
    3878:	fb 81       	ldd	r31, Y+3	; 0x03
    387a:	8c 81       	ldd	r24, Y+4	; 0x04
    387c:	9d 81       	ldd	r25, Y+5	; 0x05
    387e:	97 83       	std	Z+7, r25	; 0x07
    3880:	86 83       	std	Z+6, r24	; 0x06

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3882:	ea 81       	ldd	r30, Y+2	; 0x02
    3884:	fb 81       	ldd	r31, Y+3	; 0x03
    3886:	81 89       	ldd	r24, Z+17	; 0x11
    3888:	88 23       	and	r24, r24
    388a:	49 f0       	breq	.+18     	; 0x389e <xQueuePeek+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    388c:	8a 81       	ldd	r24, Y+2	; 0x02
    388e:	9b 81       	ldd	r25, Y+3	; 0x03
    3890:	41 96       	adiw	r24, 0x11	; 17
    3892:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    3896:	88 23       	and	r24, r24
    3898:	11 f0       	breq	.+4      	; 0x389e <xQueuePeek+0x80>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    389a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    389e:	0f 90       	pop	r0
    38a0:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	88 8b       	std	Y+16, r24	; 0x10
    38a6:	63 c0       	rjmp	.+198    	; 0x396e <xQueuePeek+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    38a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	21 f4       	brne	.+8      	; 0x38b8 <xQueuePeek+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    38b0:	0f 90       	pop	r0
    38b2:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    38b4:	18 8a       	std	Y+16, r1	; 0x10
    38b6:	5b c0       	rjmp	.+182    	; 0x396e <xQueuePeek+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    38b8:	8e 81       	ldd	r24, Y+6	; 0x06
    38ba:	88 23       	and	r24, r24
    38bc:	31 f4       	brne	.+12     	; 0x38ca <xQueuePeek+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    38be:	ce 01       	movw	r24, r28
    38c0:	07 96       	adiw	r24, 0x07	; 7
    38c2:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    38ca:	0f 90       	pop	r0
    38cc:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    38ce:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	0f 92       	push	r0
    38d8:	ea 81       	ldd	r30, Y+2	; 0x02
    38da:	fb 81       	ldd	r31, Y+3	; 0x03
    38dc:	85 8d       	ldd	r24, Z+29	; 0x1d
    38de:	8f 3f       	cpi	r24, 0xFF	; 255
    38e0:	19 f4       	brne	.+6      	; 0x38e8 <xQueuePeek+0xca>
    38e2:	ea 81       	ldd	r30, Y+2	; 0x02
    38e4:	fb 81       	ldd	r31, Y+3	; 0x03
    38e6:	15 8e       	std	Z+29, r1	; 0x1d
    38e8:	ea 81       	ldd	r30, Y+2	; 0x02
    38ea:	fb 81       	ldd	r31, Y+3	; 0x03
    38ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    38ee:	8f 3f       	cpi	r24, 0xFF	; 255
    38f0:	19 f4       	brne	.+6      	; 0x38f8 <xQueuePeek+0xda>
    38f2:	ea 81       	ldd	r30, Y+2	; 0x02
    38f4:	fb 81       	ldd	r31, Y+3	; 0x03
    38f6:	16 8e       	std	Z+30, r1	; 0x1e
    38f8:	0f 90       	pop	r0
    38fa:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    38fc:	ce 01       	movw	r24, r28
    38fe:	07 96       	adiw	r24, 0x07	; 7
    3900:	9e 01       	movw	r18, r28
    3902:	22 5f       	subi	r18, 0xF2	; 242
    3904:	3f 4f       	sbci	r19, 0xFF	; 255
    3906:	b9 01       	movw	r22, r18
    3908:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <xTaskCheckForTimeOut>
    390c:	88 23       	and	r24, r24
    390e:	09 f5       	brne	.+66     	; 0x3952 <xQueuePeek+0x134>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3910:	8a 81       	ldd	r24, Y+2	; 0x02
    3912:	9b 81       	ldd	r25, Y+3	; 0x03
    3914:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <prvIsQueueEmpty>
    3918:	88 23       	and	r24, r24
    391a:	a1 f0       	breq	.+40     	; 0x3944 <xQueuePeek+0x126>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    391c:	8a 81       	ldd	r24, Y+2	; 0x02
    391e:	9b 81       	ldd	r25, Y+3	; 0x03
    3920:	41 96       	adiw	r24, 0x11	; 17
    3922:	2e 85       	ldd	r18, Y+14	; 0x0e
    3924:	3f 85       	ldd	r19, Y+15	; 0x0f
    3926:	b9 01       	movw	r22, r18
    3928:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    392c:	8a 81       	ldd	r24, Y+2	; 0x02
    392e:	9b 81       	ldd	r25, Y+3	; 0x03
    3930:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3934:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    3938:	88 23       	and	r24, r24
    393a:	09 f0       	breq	.+2      	; 0x393e <xQueuePeek+0x120>
    393c:	85 cf       	rjmp	.-246    	; 0x3848 <xQueuePeek+0x2a>
				{
					portYIELD_WITHIN_API();
    393e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
    3942:	82 cf       	rjmp	.-252    	; 0x3848 <xQueuePeek+0x2a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    3944:	8a 81       	ldd	r24, Y+2	; 0x02
    3946:	9b 81       	ldd	r25, Y+3	; 0x03
    3948:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    394c:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    3950:	7b cf       	rjmp	.-266    	; 0x3848 <xQueuePeek+0x2a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    3952:	8a 81       	ldd	r24, Y+2	; 0x02
    3954:	9b 81       	ldd	r25, Y+3	; 0x03
    3956:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    395a:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    395e:	8a 81       	ldd	r24, Y+2	; 0x02
    3960:	9b 81       	ldd	r25, Y+3	; 0x03
    3962:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <prvIsQueueEmpty>
    3966:	88 23       	and	r24, r24
    3968:	09 f4       	brne	.+2      	; 0x396c <xQueuePeek+0x14e>
    396a:	6e cf       	rjmp	.-292    	; 0x3848 <xQueuePeek+0x2a>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    396c:	18 8a       	std	Y+16, r1	; 0x10
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    396e:	88 89       	ldd	r24, Y+16	; 0x10
}
    3970:	60 96       	adiw	r28, 0x10	; 16
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	f8 94       	cli
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	cd bf       	out	0x3d, r28	; 61
    397c:	cf 91       	pop	r28
    397e:	df 91       	pop	r29
    3980:	08 95       	ret

00003982 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3982:	df 93       	push	r29
    3984:	cf 93       	push	r28
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
    398a:	2c 97       	sbiw	r28, 0x0c	; 12
    398c:	0f b6       	in	r0, 0x3f	; 63
    398e:	f8 94       	cli
    3990:	de bf       	out	0x3e, r29	; 62
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	cd bf       	out	0x3d, r28	; 61
    3996:	98 87       	std	Y+8, r25	; 0x08
    3998:	8f 83       	std	Y+7, r24	; 0x07
    399a:	7a 87       	std	Y+10, r23	; 0x0a
    399c:	69 87       	std	Y+9, r22	; 0x09
    399e:	5c 87       	std	Y+12, r21	; 0x0c
    39a0:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    39a2:	8f 81       	ldd	r24, Y+7	; 0x07
    39a4:	98 85       	ldd	r25, Y+8	; 0x08
    39a6:	9c 83       	std	Y+4, r25	; 0x04
    39a8:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    39aa:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    39ac:	eb 81       	ldd	r30, Y+3	; 0x03
    39ae:	fc 81       	ldd	r31, Y+4	; 0x04
    39b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    39b2:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    39b4:	8a 81       	ldd	r24, Y+2	; 0x02
    39b6:	88 23       	and	r24, r24
    39b8:	81 f1       	breq	.+96     	; 0x3a1a <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    39ba:	eb 81       	ldd	r30, Y+3	; 0x03
    39bc:	fc 81       	ldd	r31, Y+4	; 0x04
    39be:	85 8d       	ldd	r24, Z+29	; 0x1d
    39c0:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    39c2:	8b 81       	ldd	r24, Y+3	; 0x03
    39c4:	9c 81       	ldd	r25, Y+4	; 0x04
    39c6:	29 85       	ldd	r18, Y+9	; 0x09
    39c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    39ca:	b9 01       	movw	r22, r18
    39cc:	0e 94 65 1e 	call	0x3cca	; 0x3cca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    39d0:	8a 81       	ldd	r24, Y+2	; 0x02
    39d2:	81 50       	subi	r24, 0x01	; 1
    39d4:	eb 81       	ldd	r30, Y+3	; 0x03
    39d6:	fc 81       	ldd	r31, Y+4	; 0x04
    39d8:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	8f 3f       	cpi	r24, 0xFF	; 255
    39de:	a9 f4       	brne	.+42     	; 0x3a0a <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    39e0:	eb 81       	ldd	r30, Y+3	; 0x03
    39e2:	fc 81       	ldd	r31, Y+4	; 0x04
    39e4:	80 85       	ldd	r24, Z+8	; 0x08
    39e6:	88 23       	and	r24, r24
    39e8:	a9 f0       	breq	.+42     	; 0x3a14 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    39ea:	8b 81       	ldd	r24, Y+3	; 0x03
    39ec:	9c 81       	ldd	r25, Y+4	; 0x04
    39ee:	08 96       	adiw	r24, 0x08	; 8
    39f0:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    39f4:	88 23       	and	r24, r24
    39f6:	71 f0       	breq	.+28     	; 0x3a14 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    39f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	51 f0       	breq	.+20     	; 0x3a14 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    3a00:	eb 85       	ldd	r30, Y+11	; 0x0b
    3a02:	fc 85       	ldd	r31, Y+12	; 0x0c
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	80 83       	st	Z, r24
    3a08:	05 c0       	rjmp	.+10     	; 0x3a14 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	8f 5f       	subi	r24, 0xFF	; 255
    3a0e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a10:	fc 81       	ldd	r31, Y+4	; 0x04
    3a12:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	8e 83       	std	Y+6, r24	; 0x06
    3a18:	01 c0       	rjmp	.+2      	; 0x3a1c <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    3a1a:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3a1c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3a1e:	2c 96       	adiw	r28, 0x0c	; 12
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	cf 91       	pop	r28
    3a2c:	df 91       	pop	r29
    3a2e:	08 95       	ret

00003a30 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	cd b7       	in	r28, 0x3d	; 61
    3a36:	de b7       	in	r29, 0x3e	; 62
    3a38:	2a 97       	sbiw	r28, 0x0a	; 10
    3a3a:	0f b6       	in	r0, 0x3f	; 63
    3a3c:	f8 94       	cli
    3a3e:	de bf       	out	0x3e, r29	; 62
    3a40:	0f be       	out	0x3f, r0	; 63
    3a42:	cd bf       	out	0x3d, r28	; 61
    3a44:	98 87       	std	Y+8, r25	; 0x08
    3a46:	8f 83       	std	Y+7, r24	; 0x07
    3a48:	7a 87       	std	Y+10, r23	; 0x0a
    3a4a:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    3a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    3a4e:	98 85       	ldd	r25, Y+8	; 0x08
    3a50:	9a 83       	std	Y+2, r25	; 0x02
    3a52:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3a54:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3a56:	e9 81       	ldd	r30, Y+1	; 0x01
    3a58:	fa 81       	ldd	r31, Y+2	; 0x02
    3a5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a5c:	88 23       	and	r24, r24
    3a5e:	b1 f0       	breq	.+44     	; 0x3a8c <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    3a60:	e9 81       	ldd	r30, Y+1	; 0x01
    3a62:	fa 81       	ldd	r31, Y+2	; 0x02
    3a64:	86 81       	ldd	r24, Z+6	; 0x06
    3a66:	97 81       	ldd	r25, Z+7	; 0x07
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a70:	29 85       	ldd	r18, Y+9	; 0x09
    3a72:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a74:	b9 01       	movw	r22, r18
    3a76:	0e 94 65 1e 	call	0x3cca	; 0x3cca <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    3a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a80:	9c 81       	ldd	r25, Y+4	; 0x04
    3a82:	97 83       	std	Z+7, r25	; 0x07
    3a84:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	8e 83       	std	Y+6, r24	; 0x06
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    3a8c:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3a8e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3a90:	2a 96       	adiw	r28, 0x0a	; 10
    3a92:	0f b6       	in	r0, 0x3f	; 63
    3a94:	f8 94       	cli
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	cd bf       	out	0x3d, r28	; 61
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	08 95       	ret

00003aa2 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    3aa2:	df 93       	push	r29
    3aa4:	cf 93       	push	r28
    3aa6:	00 d0       	rcall	.+0      	; 0x3aa8 <uxQueueMessagesWaiting+0x6>
    3aa8:	0f 92       	push	r0
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	9b 83       	std	Y+3, r25	; 0x03
    3ab0:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    3ab8:	ea 81       	ldd	r30, Y+2	; 0x02
    3aba:	fb 81       	ldd	r31, Y+3	; 0x03
    3abc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3abe:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3ac0:	0f 90       	pop	r0
    3ac2:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	08 95       	ret

00003ad2 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    3ad2:	df 93       	push	r29
    3ad4:	cf 93       	push	r28
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <uxQueueSpacesAvailable+0x6>
    3ad8:	00 d0       	rcall	.+0      	; 0x3ada <uxQueueSpacesAvailable+0x8>
    3ada:	0f 92       	push	r0
    3adc:	cd b7       	in	r28, 0x3d	; 61
    3ade:	de b7       	in	r29, 0x3e	; 62
    3ae0:	9d 83       	std	Y+5, r25	; 0x05
    3ae2:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    3ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae8:	9a 83       	std	Y+2, r25	; 0x02
    3aea:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    3af2:	e9 81       	ldd	r30, Y+1	; 0x01
    3af4:	fa 81       	ldd	r31, Y+2	; 0x02
    3af6:	93 8d       	ldd	r25, Z+27	; 0x1b
    3af8:	e9 81       	ldd	r30, Y+1	; 0x01
    3afa:	fa 81       	ldd	r31, Y+2	; 0x02
    3afc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3afe:	29 2f       	mov	r18, r25
    3b00:	28 1b       	sub	r18, r24
    3b02:	82 2f       	mov	r24, r18
    3b04:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    3b06:	0f 90       	pop	r0
    3b08:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3b0a:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	08 95       	ret

00003b1c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	00 d0       	rcall	.+0      	; 0x3b22 <uxQueueMessagesWaitingFromISR+0x6>
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <uxQueueMessagesWaitingFromISR+0x8>
    3b24:	0f 92       	push	r0
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	9d 83       	std	Y+5, r25	; 0x05
    3b2c:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    3b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b30:	9d 81       	ldd	r25, Y+5	; 0x05
    3b32:	9a 83       	std	Y+2, r25	; 0x02
    3b34:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
    3b36:	e9 81       	ldd	r30, Y+1	; 0x01
    3b38:	fa 81       	ldd	r31, Y+2	; 0x02
    3b3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b3c:	8b 83       	std	Y+3, r24	; 0x03

	return uxReturn;
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	08 95       	ret

00003b50 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    3b50:	df 93       	push	r29
    3b52:	cf 93       	push	r28
    3b54:	00 d0       	rcall	.+0      	; 0x3b56 <vQueueDelete+0x6>
    3b56:	00 d0       	rcall	.+0      	; 0x3b58 <vQueueDelete+0x8>
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
    3b5c:	9c 83       	std	Y+4, r25	; 0x04
    3b5e:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = xQueue;
    3b60:	8b 81       	ldd	r24, Y+3	; 0x03
    3b62:	9c 81       	ldd	r25, Y+4	; 0x04
    3b64:	9a 83       	std	Y+2, r25	; 0x02
    3b66:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6c:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
    3b86:	27 97       	sbiw	r28, 0x07	; 7
    3b88:	0f b6       	in	r0, 0x3f	; 63
    3b8a:	f8 94       	cli
    3b8c:	de bf       	out	0x3e, r29	; 62
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	cd bf       	out	0x3d, r28	; 61
    3b92:	9c 83       	std	Y+4, r25	; 0x04
    3b94:	8b 83       	std	Y+3, r24	; 0x03
    3b96:	7e 83       	std	Y+6, r23	; 0x06
    3b98:	6d 83       	std	Y+5, r22	; 0x05
    3b9a:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    3b9c:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3b9e:	eb 81       	ldd	r30, Y+3	; 0x03
    3ba0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ba2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ba4:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    3baa:	84 8d       	ldd	r24, Z+28	; 0x1c
    3bac:	88 23       	and	r24, r24
    3bae:	09 f4       	brne	.+2      	; 0x3bb2 <prvCopyDataToQueue+0x34>
    3bb0:	7d c0       	rjmp	.+250    	; 0x3cac <prvCopyDataToQueue+0x12e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    3bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3bb4:	88 23       	and	r24, r24
    3bb6:	99 f5       	brne	.+102    	; 0x3c1e <prvCopyDataToQueue+0xa0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    3bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    3bba:	fc 81       	ldd	r31, Y+4	; 0x04
    3bbc:	62 81       	ldd	r22, Z+2	; 0x02
    3bbe:	73 81       	ldd	r23, Z+3	; 0x03
    3bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    3bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    3bc4:	84 8d       	ldd	r24, Z+28	; 0x1c
    3bc6:	48 2f       	mov	r20, r24
    3bc8:	50 e0       	ldi	r21, 0x00	; 0
    3bca:	2d 81       	ldd	r18, Y+5	; 0x05
    3bcc:	3e 81       	ldd	r19, Y+6	; 0x06
    3bce:	cb 01       	movw	r24, r22
    3bd0:	b9 01       	movw	r22, r18
    3bd2:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    3bd6:	eb 81       	ldd	r30, Y+3	; 0x03
    3bd8:	fc 81       	ldd	r31, Y+4	; 0x04
    3bda:	22 81       	ldd	r18, Z+2	; 0x02
    3bdc:	33 81       	ldd	r19, Z+3	; 0x03
    3bde:	eb 81       	ldd	r30, Y+3	; 0x03
    3be0:	fc 81       	ldd	r31, Y+4	; 0x04
    3be2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3be4:	88 2f       	mov	r24, r24
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	82 0f       	add	r24, r18
    3bea:	93 1f       	adc	r25, r19
    3bec:	eb 81       	ldd	r30, Y+3	; 0x03
    3bee:	fc 81       	ldd	r31, Y+4	; 0x04
    3bf0:	93 83       	std	Z+3, r25	; 0x03
    3bf2:	82 83       	std	Z+2, r24	; 0x02
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    3bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    3bf8:	22 81       	ldd	r18, Z+2	; 0x02
    3bfa:	33 81       	ldd	r19, Z+3	; 0x03
    3bfc:	eb 81       	ldd	r30, Y+3	; 0x03
    3bfe:	fc 81       	ldd	r31, Y+4	; 0x04
    3c00:	84 81       	ldd	r24, Z+4	; 0x04
    3c02:	95 81       	ldd	r25, Z+5	; 0x05
    3c04:	28 17       	cp	r18, r24
    3c06:	39 07       	cpc	r19, r25
    3c08:	08 f4       	brcc	.+2      	; 0x3c0c <prvCopyDataToQueue+0x8e>
    3c0a:	50 c0       	rjmp	.+160    	; 0x3cac <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3c0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3c10:	80 81       	ld	r24, Z
    3c12:	91 81       	ldd	r25, Z+1	; 0x01
    3c14:	eb 81       	ldd	r30, Y+3	; 0x03
    3c16:	fc 81       	ldd	r31, Y+4	; 0x04
    3c18:	93 83       	std	Z+3, r25	; 0x03
    3c1a:	82 83       	std	Z+2, r24	; 0x02
    3c1c:	47 c0       	rjmp	.+142    	; 0x3cac <prvCopyDataToQueue+0x12e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    3c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    3c20:	fc 81       	ldd	r31, Y+4	; 0x04
    3c22:	66 81       	ldd	r22, Z+6	; 0x06
    3c24:	77 81       	ldd	r23, Z+7	; 0x07
    3c26:	eb 81       	ldd	r30, Y+3	; 0x03
    3c28:	fc 81       	ldd	r31, Y+4	; 0x04
    3c2a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c2c:	48 2f       	mov	r20, r24
    3c2e:	50 e0       	ldi	r21, 0x00	; 0
    3c30:	2d 81       	ldd	r18, Y+5	; 0x05
    3c32:	3e 81       	ldd	r19, Y+6	; 0x06
    3c34:	cb 01       	movw	r24, r22
    3c36:	b9 01       	movw	r22, r18
    3c38:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    3c3c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c3e:	fc 81       	ldd	r31, Y+4	; 0x04
    3c40:	26 81       	ldd	r18, Z+6	; 0x06
    3c42:	37 81       	ldd	r19, Z+7	; 0x07
    3c44:	eb 81       	ldd	r30, Y+3	; 0x03
    3c46:	fc 81       	ldd	r31, Y+4	; 0x04
    3c48:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c4a:	88 2f       	mov	r24, r24
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	90 95       	com	r25
    3c50:	81 95       	neg	r24
    3c52:	9f 4f       	sbci	r25, 0xFF	; 255
    3c54:	82 0f       	add	r24, r18
    3c56:	93 1f       	adc	r25, r19
    3c58:	eb 81       	ldd	r30, Y+3	; 0x03
    3c5a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c5c:	97 83       	std	Z+7, r25	; 0x07
    3c5e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3c60:	eb 81       	ldd	r30, Y+3	; 0x03
    3c62:	fc 81       	ldd	r31, Y+4	; 0x04
    3c64:	26 81       	ldd	r18, Z+6	; 0x06
    3c66:	37 81       	ldd	r19, Z+7	; 0x07
    3c68:	eb 81       	ldd	r30, Y+3	; 0x03
    3c6a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c6c:	80 81       	ld	r24, Z
    3c6e:	91 81       	ldd	r25, Z+1	; 0x01
    3c70:	28 17       	cp	r18, r24
    3c72:	39 07       	cpc	r19, r25
    3c74:	90 f4       	brcc	.+36     	; 0x3c9a <prvCopyDataToQueue+0x11c>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    3c76:	eb 81       	ldd	r30, Y+3	; 0x03
    3c78:	fc 81       	ldd	r31, Y+4	; 0x04
    3c7a:	24 81       	ldd	r18, Z+4	; 0x04
    3c7c:	35 81       	ldd	r19, Z+5	; 0x05
    3c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    3c80:	fc 81       	ldd	r31, Y+4	; 0x04
    3c82:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c84:	88 2f       	mov	r24, r24
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	90 95       	com	r25
    3c8a:	81 95       	neg	r24
    3c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8e:	82 0f       	add	r24, r18
    3c90:	93 1f       	adc	r25, r19
    3c92:	eb 81       	ldd	r30, Y+3	; 0x03
    3c94:	fc 81       	ldd	r31, Y+4	; 0x04
    3c96:	97 83       	std	Z+7, r25	; 0x07
    3c98:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    3c9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c9c:	82 30       	cpi	r24, 0x02	; 2
    3c9e:	31 f4       	brne	.+12     	; 0x3cac <prvCopyDataToQueue+0x12e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	88 23       	and	r24, r24
    3ca4:	19 f0       	breq	.+6      	; 0x3cac <prvCopyDataToQueue+0x12e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	81 50       	subi	r24, 0x01	; 1
    3caa:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3cac:	89 81       	ldd	r24, Y+1	; 0x01
    3cae:	8f 5f       	subi	r24, 0xFF	; 255
    3cb0:	eb 81       	ldd	r30, Y+3	; 0x03
    3cb2:	fc 81       	ldd	r31, Y+4	; 0x04
    3cb4:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cb8:	27 96       	adiw	r28, 0x07	; 7
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	f8 94       	cli
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	0f be       	out	0x3f, r0	; 63
    3cc2:	cd bf       	out	0x3d, r28	; 61
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	08 95       	ret

00003cca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    3cca:	df 93       	push	r29
    3ccc:	cf 93       	push	r28
    3cce:	00 d0       	rcall	.+0      	; 0x3cd0 <prvCopyDataFromQueue+0x6>
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <prvCopyDataFromQueue+0x8>
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	9a 83       	std	Y+2, r25	; 0x02
    3cd8:	89 83       	std	Y+1, r24	; 0x01
    3cda:	7c 83       	std	Y+4, r23	; 0x04
    3cdc:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3cde:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ce4:	88 23       	and	r24, r24
    3ce6:	89 f1       	breq	.+98     	; 0x3d4a <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    3ce8:	e9 81       	ldd	r30, Y+1	; 0x01
    3cea:	fa 81       	ldd	r31, Y+2	; 0x02
    3cec:	26 81       	ldd	r18, Z+6	; 0x06
    3cee:	37 81       	ldd	r19, Z+7	; 0x07
    3cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    3cf4:	84 8d       	ldd	r24, Z+28	; 0x1c
    3cf6:	88 2f       	mov	r24, r24
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	82 0f       	add	r24, r18
    3cfc:	93 1f       	adc	r25, r19
    3cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    3d00:	fa 81       	ldd	r31, Y+2	; 0x02
    3d02:	97 83       	std	Z+7, r25	; 0x07
    3d04:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3d06:	e9 81       	ldd	r30, Y+1	; 0x01
    3d08:	fa 81       	ldd	r31, Y+2	; 0x02
    3d0a:	26 81       	ldd	r18, Z+6	; 0x06
    3d0c:	37 81       	ldd	r19, Z+7	; 0x07
    3d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d10:	fa 81       	ldd	r31, Y+2	; 0x02
    3d12:	84 81       	ldd	r24, Z+4	; 0x04
    3d14:	95 81       	ldd	r25, Z+5	; 0x05
    3d16:	28 17       	cp	r18, r24
    3d18:	39 07       	cpc	r19, r25
    3d1a:	40 f0       	brcs	.+16     	; 0x3d2c <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    3d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d20:	80 81       	ld	r24, Z
    3d22:	91 81       	ldd	r25, Z+1	; 0x01
    3d24:	e9 81       	ldd	r30, Y+1	; 0x01
    3d26:	fa 81       	ldd	r31, Y+2	; 0x02
    3d28:	97 83       	std	Z+7, r25	; 0x07
    3d2a:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    3d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d30:	46 81       	ldd	r20, Z+6	; 0x06
    3d32:	57 81       	ldd	r21, Z+7	; 0x07
    3d34:	e9 81       	ldd	r30, Y+1	; 0x01
    3d36:	fa 81       	ldd	r31, Y+2	; 0x02
    3d38:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d3a:	28 2f       	mov	r18, r24
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d40:	9c 81       	ldd	r25, Y+4	; 0x04
    3d42:	ba 01       	movw	r22, r20
    3d44:	a9 01       	movw	r20, r18
    3d46:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <memcpy>
	}
}
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	cf 91       	pop	r28
    3d54:	df 91       	pop	r29
    3d56:	08 95       	ret

00003d58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    3d58:	df 93       	push	r29
    3d5a:	cf 93       	push	r28
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <prvUnlockQueue+0x6>
    3d5e:	00 d0       	rcall	.+0      	; 0x3d60 <prvUnlockQueue+0x8>
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	9c 83       	std	Y+4, r25	; 0x04
    3d66:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3d68:	0f b6       	in	r0, 0x3f	; 63
    3d6a:	f8 94       	cli
    3d6c:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    3d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    3d70:	fc 81       	ldd	r31, Y+4	; 0x04
    3d72:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d74:	8a 83       	std	Y+2, r24	; 0x02
    3d76:	11 c0       	rjmp	.+34     	; 0x3d9a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d78:	eb 81       	ldd	r30, Y+3	; 0x03
    3d7a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d7c:	81 89       	ldd	r24, Z+17	; 0x11
    3d7e:	88 23       	and	r24, r24
    3d80:	79 f0       	breq	.+30     	; 0x3da0 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d82:	8b 81       	ldd	r24, Y+3	; 0x03
    3d84:	9c 81       	ldd	r25, Y+4	; 0x04
    3d86:	41 96       	adiw	r24, 0x11	; 17
    3d88:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    3d8c:	88 23       	and	r24, r24
    3d8e:	11 f0       	breq	.+4      	; 0x3d94 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    3d90:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	81 50       	subi	r24, 0x01	; 1
    3d98:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    3d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9c:	18 16       	cp	r1, r24
    3d9e:	64 f3       	brlt	.-40     	; 0x3d78 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    3da0:	eb 81       	ldd	r30, Y+3	; 0x03
    3da2:	fc 81       	ldd	r31, Y+4	; 0x04
    3da4:	8f ef       	ldi	r24, 0xFF	; 255
    3da6:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3da8:	0f 90       	pop	r0
    3daa:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	f8 94       	cli
    3db0:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    3db2:	eb 81       	ldd	r30, Y+3	; 0x03
    3db4:	fc 81       	ldd	r31, Y+4	; 0x04
    3db6:	85 8d       	ldd	r24, Z+29	; 0x1d
    3db8:	89 83       	std	Y+1, r24	; 0x01
    3dba:	11 c0       	rjmp	.+34     	; 0x3dde <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3dbc:	eb 81       	ldd	r30, Y+3	; 0x03
    3dbe:	fc 81       	ldd	r31, Y+4	; 0x04
    3dc0:	80 85       	ldd	r24, Z+8	; 0x08
    3dc2:	88 23       	and	r24, r24
    3dc4:	79 f0       	breq	.+30     	; 0x3de4 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dca:	08 96       	adiw	r24, 0x08	; 8
    3dcc:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <xTaskRemoveFromEventList>
    3dd0:	88 23       	and	r24, r24
    3dd2:	11 f0       	breq	.+4      	; 0x3dd8 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    3dd4:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	81 50       	subi	r24, 0x01	; 1
    3ddc:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	18 16       	cp	r1, r24
    3de2:	64 f3       	brlt	.-40     	; 0x3dbc <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    3de4:	eb 81       	ldd	r30, Y+3	; 0x03
    3de6:	fc 81       	ldd	r31, Y+4	; 0x04
    3de8:	8f ef       	ldi	r24, 0xFF	; 255
    3dea:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3dec:	0f 90       	pop	r0
    3dee:	0f be       	out	0x3f, r0	; 63
}
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	cf 91       	pop	r28
    3dfa:	df 91       	pop	r29
    3dfc:	08 95       	ret

00003dfe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	00 d0       	rcall	.+0      	; 0x3e04 <prvIsQueueEmpty+0x6>
    3e04:	0f 92       	push	r0
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	9b 83       	std	Y+3, r25	; 0x03
    3e0c:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3e14:	ea 81       	ldd	r30, Y+2	; 0x02
    3e16:	fb 81       	ldd	r31, Y+3	; 0x03
    3e18:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e1a:	88 23       	and	r24, r24
    3e1c:	19 f4       	brne	.+6      	; 0x3e24 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	89 83       	std	Y+1, r24	; 0x01
    3e22:	01 c0       	rjmp	.+2      	; 0x3e26 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    3e24:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3e26:	0f 90       	pop	r0
    3e28:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	cf 91       	pop	r28
    3e34:	df 91       	pop	r29
    3e36:	08 95       	ret

00003e38 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    3e38:	df 93       	push	r29
    3e3a:	cf 93       	push	r28
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <xQueueIsQueueEmptyFromISR+0x6>
    3e3e:	00 d0       	rcall	.+0      	; 0x3e40 <xQueueIsQueueEmptyFromISR+0x8>
    3e40:	0f 92       	push	r0
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	9d 83       	std	Y+5, r25	; 0x05
    3e48:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    3e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e4e:	9a 83       	std	Y+2, r25	; 0x02
    3e50:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    3e52:	e9 81       	ldd	r30, Y+1	; 0x01
    3e54:	fa 81       	ldd	r31, Y+2	; 0x02
    3e56:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e58:	88 23       	and	r24, r24
    3e5a:	19 f4       	brne	.+6      	; 0x3e62 <xQueueIsQueueEmptyFromISR+0x2a>
	{
		xReturn = pdTRUE;
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	8b 83       	std	Y+3, r24	; 0x03
    3e60:	01 c0       	rjmp	.+2      	; 0x3e64 <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    3e62:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	cf 91       	pop	r28
    3e72:	df 91       	pop	r29
    3e74:	08 95       	ret

00003e76 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	00 d0       	rcall	.+0      	; 0x3e7c <prvIsQueueFull+0x6>
    3e7c:	0f 92       	push	r0
    3e7e:	cd b7       	in	r28, 0x3d	; 61
    3e80:	de b7       	in	r29, 0x3e	; 62
    3e82:	9b 83       	std	Y+3, r25	; 0x03
    3e84:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	f8 94       	cli
    3e8a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3e8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3e90:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e92:	ea 81       	ldd	r30, Y+2	; 0x02
    3e94:	fb 81       	ldd	r31, Y+3	; 0x03
    3e96:	83 8d       	ldd	r24, Z+27	; 0x1b
    3e98:	98 17       	cp	r25, r24
    3e9a:	19 f4       	brne	.+6      	; 0x3ea2 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	89 83       	std	Y+1, r24	; 0x01
    3ea0:	01 c0       	rjmp	.+2      	; 0x3ea4 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    3ea2:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3ea4:	0f 90       	pop	r0
    3ea6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3eaa:	0f 90       	pop	r0
    3eac:	0f 90       	pop	r0
    3eae:	0f 90       	pop	r0
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	08 95       	ret

00003eb6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    3eb6:	df 93       	push	r29
    3eb8:	cf 93       	push	r28
    3eba:	00 d0       	rcall	.+0      	; 0x3ebc <xQueueIsQueueFullFromISR+0x6>
    3ebc:	00 d0       	rcall	.+0      	; 0x3ebe <xQueueIsQueueFullFromISR+0x8>
    3ebe:	0f 92       	push	r0
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62
    3ec4:	9d 83       	std	Y+5, r25	; 0x05
    3ec6:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    3ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eca:	9d 81       	ldd	r25, Y+5	; 0x05
    3ecc:	9a 83       	std	Y+2, r25	; 0x02
    3ece:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed4:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eda:	83 8d       	ldd	r24, Z+27	; 0x1b
    3edc:	98 17       	cp	r25, r24
    3ede:	19 f4       	brne	.+6      	; 0x3ee6 <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	8b 83       	std	Y+3, r24	; 0x03
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <xQueueIsQueueFullFromISR+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    3ee6:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    3ee8:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3eea:	0f 90       	pop	r0
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	cf 91       	pop	r28
    3ef6:	df 91       	pop	r29
    3ef8:	08 95       	ret

00003efa <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
    3efa:	0f 93       	push	r16
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
    3f04:	28 97       	sbiw	r28, 0x08	; 8
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	9d 83       	std	Y+5, r25	; 0x05
    3f12:	8c 83       	std	Y+4, r24	; 0x04
    3f14:	7f 83       	std	Y+7, r23	; 0x07
    3f16:	6e 83       	std	Y+6, r22	; 0x06
    3f18:	48 87       	std	Y+8, r20	; 0x08

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
    3f1a:	88 85       	ldd	r24, Y+8	; 0x08
    3f1c:	81 30       	cpi	r24, 0x01	; 1
    3f1e:	19 f4       	brne	.+6      	; 0x3f26 <xStreamBufferGenericCreate+0x2c>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	89 83       	std	Y+1, r24	; 0x01
    3f24:	01 c0       	rjmp	.+2      	; 0x3f28 <xStreamBufferGenericCreate+0x2e>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
    3f26:	19 82       	std	Y+1, r1	; 0x01
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
    3f28:	8e 81       	ldd	r24, Y+6	; 0x06
    3f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f2c:	00 97       	sbiw	r24, 0x00	; 0
    3f2e:	21 f4       	brne	.+8      	; 0x3f38 <xStreamBufferGenericCreate+0x3e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	9f 83       	std	Y+7, r25	; 0x07
    3f36:	8e 83       	std	Y+6, r24	; 0x06
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
    3f38:	8c 81       	ldd	r24, Y+4	; 0x04
    3f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f3c:	01 96       	adiw	r24, 0x01	; 1
    3f3e:	9d 83       	std	Y+5, r25	; 0x05
    3f40:	8c 83       	std	Y+4, r24	; 0x04
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
    3f42:	8c 81       	ldd	r24, Y+4	; 0x04
    3f44:	9d 81       	ldd	r25, Y+5	; 0x05
    3f46:	0f 96       	adiw	r24, 0x0f	; 15
    3f48:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    3f4c:	9b 83       	std	Y+3, r25	; 0x03
    3f4e:	8a 83       	std	Y+2, r24	; 0x02

		if( pucAllocatedMemory != NULL )
    3f50:	8a 81       	ldd	r24, Y+2	; 0x02
    3f52:	9b 81       	ldd	r25, Y+3	; 0x03
    3f54:	00 97       	sbiw	r24, 0x00	; 0
    3f56:	89 f0       	breq	.+34     	; 0x3f7a <xStreamBufferGenericCreate+0x80>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
    3f58:	6a 81       	ldd	r22, Y+2	; 0x02
    3f5a:	7b 81       	ldd	r23, Y+3	; 0x03
    3f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f60:	9c 01       	movw	r18, r24
    3f62:	21 5f       	subi	r18, 0xF1	; 241
    3f64:	3f 4f       	sbci	r19, 0xFF	; 255
    3f66:	4c 81       	ldd	r20, Y+4	; 0x04
    3f68:	5d 81       	ldd	r21, Y+5	; 0x05
    3f6a:	ee 81       	ldd	r30, Y+6	; 0x06
    3f6c:	ff 81       	ldd	r31, Y+7	; 0x07
    3f6e:	cb 01       	movw	r24, r22
    3f70:	b9 01       	movw	r22, r18
    3f72:	9f 01       	movw	r18, r30
    3f74:	09 81       	ldd	r16, Y+1	; 0x01
    3f76:	0e 94 d5 26 	call	0x4daa	; 0x4daa <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
    3f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7c:	9b 81       	ldd	r25, Y+3	; 0x03
	}
    3f7e:	28 96       	adiw	r28, 0x08	; 8
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	f8 94       	cli
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	0f be       	out	0x3f, r0	; 63
    3f88:	cd bf       	out	0x3d, r28	; 61
    3f8a:	cf 91       	pop	r28
    3f8c:	df 91       	pop	r29
    3f8e:	0f 91       	pop	r16
    3f90:	08 95       	ret

00003f92 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	00 d0       	rcall	.+0      	; 0x3f98 <vStreamBufferDelete+0x6>
    3f98:	00 d0       	rcall	.+0      	; 0x3f9a <vStreamBufferDelete+0x8>
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	9c 83       	std	Y+4, r25	; 0x04
    3fa0:	8b 83       	std	Y+3, r24	; 0x03
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
    3fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa6:	9a 83       	std	Y+2, r25	; 0x02
    3fa8:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    3faa:	e9 81       	ldd	r30, Y+1	; 0x01
    3fac:	fa 81       	ldd	r31, Y+2	; 0x02
    3fae:	86 85       	ldd	r24, Z+14	; 0x0e
    3fb0:	88 2f       	mov	r24, r24
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	82 70       	andi	r24, 0x02	; 2
    3fb6:	90 70       	andi	r25, 0x00	; 0
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	29 f4       	brne	.+10     	; 0x3fc6 <vStreamBufferDelete+0x34>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
    3fbc:	89 81       	ldd	r24, Y+1	; 0x01
    3fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc0:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
    3fc4:	08 c0       	rjmp	.+16     	; 0x3fd6 <vStreamBufferDelete+0x44>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	60 e0       	ldi	r22, 0x00	; 0
    3fcc:	70 e0       	ldi	r23, 0x00	; 0
    3fce:	4f e0       	ldi	r20, 0x0F	; 15
    3fd0:	50 e0       	ldi	r21, 0x00	; 0
    3fd2:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <memset>
	}
}
    3fd6:	0f 90       	pop	r0
    3fd8:	0f 90       	pop	r0
    3fda:	0f 90       	pop	r0
    3fdc:	0f 90       	pop	r0
    3fde:	cf 91       	pop	r28
    3fe0:	df 91       	pop	r29
    3fe2:	08 95       	ret

00003fe4 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    3fe4:	0f 93       	push	r16
    3fe6:	df 93       	push	r29
    3fe8:	cf 93       	push	r28
    3fea:	00 d0       	rcall	.+0      	; 0x3fec <xStreamBufferReset+0x8>
    3fec:	00 d0       	rcall	.+0      	; 0x3fee <xStreamBufferReset+0xa>
    3fee:	0f 92       	push	r0
    3ff0:	cd b7       	in	r28, 0x3d	; 61
    3ff2:	de b7       	in	r29, 0x3e	; 62
    3ff4:	9d 83       	std	Y+5, r25	; 0x05
    3ff6:	8c 83       	std	Y+4, r24	; 0x04
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    3ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    3ffc:	9b 83       	std	Y+3, r25	; 0x03
    3ffe:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn = pdFAIL;
    4000:	19 82       	std	Y+1, r1	; 0x01
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	0f 92       	push	r0
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
    4008:	ea 81       	ldd	r30, Y+2	; 0x02
    400a:	fb 81       	ldd	r31, Y+3	; 0x03
    400c:	80 85       	ldd	r24, Z+8	; 0x08
    400e:	91 85       	ldd	r25, Z+9	; 0x09
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	f1 f4       	brne	.+60     	; 0x4050 <xStreamBufferReset+0x6c>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
    4014:	ea 81       	ldd	r30, Y+2	; 0x02
    4016:	fb 81       	ldd	r31, Y+3	; 0x03
    4018:	82 85       	ldd	r24, Z+10	; 0x0a
    401a:	93 85       	ldd	r25, Z+11	; 0x0b
    401c:	00 97       	sbiw	r24, 0x00	; 0
    401e:	c1 f4       	brne	.+48     	; 0x4050 <xStreamBufferReset+0x6c>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
    4020:	ea 81       	ldd	r30, Y+2	; 0x02
    4022:	fb 81       	ldd	r31, Y+3	; 0x03
    4024:	24 85       	ldd	r18, Z+12	; 0x0c
    4026:	35 85       	ldd	r19, Z+13	; 0x0d
    4028:	ea 81       	ldd	r30, Y+2	; 0x02
    402a:	fb 81       	ldd	r31, Y+3	; 0x03
    402c:	44 81       	ldd	r20, Z+4	; 0x04
    402e:	55 81       	ldd	r21, Z+5	; 0x05
    4030:	ea 81       	ldd	r30, Y+2	; 0x02
    4032:	fb 81       	ldd	r31, Y+3	; 0x03
    4034:	a6 81       	ldd	r26, Z+6	; 0x06
    4036:	b7 81       	ldd	r27, Z+7	; 0x07
    4038:	ea 81       	ldd	r30, Y+2	; 0x02
    403a:	fb 81       	ldd	r31, Y+3	; 0x03
    403c:	e6 85       	ldd	r30, Z+14	; 0x0e
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	9b 81       	ldd	r25, Y+3	; 0x03
    4042:	b9 01       	movw	r22, r18
    4044:	9d 01       	movw	r18, r26
    4046:	0e 2f       	mov	r16, r30
    4048:	0e 94 d5 26 	call	0x4daa	; 0x4daa <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	89 83       	std	Y+1, r24	; 0x01

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
    4050:	0f 90       	pop	r0
    4052:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4054:	89 81       	ldd	r24, Y+1	; 0x01
}
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	cf 91       	pop	r28
    4062:	df 91       	pop	r29
    4064:	0f 91       	pop	r16
    4066:	08 95       	ret

00004068 <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
    4068:	df 93       	push	r29
    406a:	cf 93       	push	r28
    406c:	cd b7       	in	r28, 0x3d	; 61
    406e:	de b7       	in	r29, 0x3e	; 62
    4070:	27 97       	sbiw	r28, 0x07	; 7
    4072:	0f b6       	in	r0, 0x3f	; 63
    4074:	f8 94       	cli
    4076:	de bf       	out	0x3e, r29	; 62
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	cd bf       	out	0x3d, r28	; 61
    407c:	9d 83       	std	Y+5, r25	; 0x05
    407e:	8c 83       	std	Y+4, r24	; 0x04
    4080:	7f 83       	std	Y+7, r23	; 0x07
    4082:	6e 83       	std	Y+6, r22	; 0x06
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4084:	8c 81       	ldd	r24, Y+4	; 0x04
    4086:	9d 81       	ldd	r25, Y+5	; 0x05
    4088:	9b 83       	std	Y+3, r25	; 0x03
    408a:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
    408c:	8e 81       	ldd	r24, Y+6	; 0x06
    408e:	9f 81       	ldd	r25, Y+7	; 0x07
    4090:	00 97       	sbiw	r24, 0x00	; 0
    4092:	21 f4       	brne	.+8      	; 0x409c <xStreamBufferSetTriggerLevel+0x34>
	{
		xTriggerLevel = ( size_t ) 1;
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	9f 83       	std	Y+7, r25	; 0x07
    409a:	8e 83       	std	Y+6, r24	; 0x06
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
    409c:	ea 81       	ldd	r30, Y+2	; 0x02
    409e:	fb 81       	ldd	r31, Y+3	; 0x03
    40a0:	24 81       	ldd	r18, Z+4	; 0x04
    40a2:	35 81       	ldd	r19, Z+5	; 0x05
    40a4:	8e 81       	ldd	r24, Y+6	; 0x06
    40a6:	9f 81       	ldd	r25, Y+7	; 0x07
    40a8:	28 17       	cp	r18, r24
    40aa:	39 07       	cpc	r19, r25
    40ac:	48 f0       	brcs	.+18     	; 0x40c0 <xStreamBufferSetTriggerLevel+0x58>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    40ae:	ea 81       	ldd	r30, Y+2	; 0x02
    40b0:	fb 81       	ldd	r31, Y+3	; 0x03
    40b2:	8e 81       	ldd	r24, Y+6	; 0x06
    40b4:	9f 81       	ldd	r25, Y+7	; 0x07
    40b6:	97 83       	std	Z+7, r25	; 0x07
    40b8:	86 83       	std	Z+6, r24	; 0x06
		xReturn = pdPASS;
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	89 83       	std	Y+1, r24	; 0x01
    40be:	01 c0       	rjmp	.+2      	; 0x40c2 <xStreamBufferSetTriggerLevel+0x5a>
	}
	else
	{
		xReturn = pdFALSE;
    40c0:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    40c4:	27 96       	adiw	r28, 0x07	; 7
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	08 95       	ret

000040d6 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    40d6:	df 93       	push	r29
    40d8:	cf 93       	push	r28
    40da:	00 d0       	rcall	.+0      	; 0x40dc <xStreamBufferSpacesAvailable+0x6>
    40dc:	00 d0       	rcall	.+0      	; 0x40de <xStreamBufferSpacesAvailable+0x8>
    40de:	00 d0       	rcall	.+0      	; 0x40e0 <xStreamBufferSpacesAvailable+0xa>
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	9e 83       	std	Y+6, r25	; 0x06
    40e6:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    40e8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ea:	9e 81       	ldd	r25, Y+6	; 0x06
    40ec:	9c 83       	std	Y+4, r25	; 0x04
    40ee:	8b 83       	std	Y+3, r24	; 0x03
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    40f0:	eb 81       	ldd	r30, Y+3	; 0x03
    40f2:	fc 81       	ldd	r31, Y+4	; 0x04
    40f4:	24 81       	ldd	r18, Z+4	; 0x04
    40f6:	35 81       	ldd	r19, Z+5	; 0x05
    40f8:	eb 81       	ldd	r30, Y+3	; 0x03
    40fa:	fc 81       	ldd	r31, Y+4	; 0x04
    40fc:	80 81       	ld	r24, Z
    40fe:	91 81       	ldd	r25, Z+1	; 0x01
    4100:	82 0f       	add	r24, r18
    4102:	93 1f       	adc	r25, r19
    4104:	9a 83       	std	Y+2, r25	; 0x02
    4106:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= pxStreamBuffer->xHead;
    4108:	eb 81       	ldd	r30, Y+3	; 0x03
    410a:	fc 81       	ldd	r31, Y+4	; 0x04
    410c:	22 81       	ldd	r18, Z+2	; 0x02
    410e:	33 81       	ldd	r19, Z+3	; 0x03
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	9a 81       	ldd	r25, Y+2	; 0x02
    4114:	82 1b       	sub	r24, r18
    4116:	93 0b       	sbc	r25, r19
    4118:	9a 83       	std	Y+2, r25	; 0x02
    411a:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= ( size_t ) 1;
    411c:	89 81       	ldd	r24, Y+1	; 0x01
    411e:	9a 81       	ldd	r25, Y+2	; 0x02
    4120:	01 97       	sbiw	r24, 0x01	; 1
    4122:	9a 83       	std	Y+2, r25	; 0x02
    4124:	89 83       	std	Y+1, r24	; 0x01

	if( xSpace >= pxStreamBuffer->xLength )
    4126:	eb 81       	ldd	r30, Y+3	; 0x03
    4128:	fc 81       	ldd	r31, Y+4	; 0x04
    412a:	24 81       	ldd	r18, Z+4	; 0x04
    412c:	35 81       	ldd	r19, Z+5	; 0x05
    412e:	89 81       	ldd	r24, Y+1	; 0x01
    4130:	9a 81       	ldd	r25, Y+2	; 0x02
    4132:	82 17       	cp	r24, r18
    4134:	93 07       	cpc	r25, r19
    4136:	50 f0       	brcs	.+20     	; 0x414c <xStreamBufferSpacesAvailable+0x76>
	{
		xSpace -= pxStreamBuffer->xLength;
    4138:	eb 81       	ldd	r30, Y+3	; 0x03
    413a:	fc 81       	ldd	r31, Y+4	; 0x04
    413c:	24 81       	ldd	r18, Z+4	; 0x04
    413e:	35 81       	ldd	r19, Z+5	; 0x05
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	9a 81       	ldd	r25, Y+2	; 0x02
    4144:	82 1b       	sub	r24, r18
    4146:	93 0b       	sbc	r25, r19
    4148:	9a 83       	std	Y+2, r25	; 0x02
    414a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4150:	26 96       	adiw	r28, 0x06	; 6
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	f8 94       	cli
    4156:	de bf       	out	0x3e, r29	; 62
    4158:	0f be       	out	0x3f, r0	; 63
    415a:	cd bf       	out	0x3d, r28	; 61
    415c:	cf 91       	pop	r28
    415e:	df 91       	pop	r29
    4160:	08 95       	ret

00004162 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    4162:	df 93       	push	r29
    4164:	cf 93       	push	r28
    4166:	00 d0       	rcall	.+0      	; 0x4168 <xStreamBufferBytesAvailable+0x6>
    4168:	00 d0       	rcall	.+0      	; 0x416a <xStreamBufferBytesAvailable+0x8>
    416a:	00 d0       	rcall	.+0      	; 0x416c <xStreamBufferBytesAvailable+0xa>
    416c:	cd b7       	in	r28, 0x3d	; 61
    416e:	de b7       	in	r29, 0x3e	; 62
    4170:	9e 83       	std	Y+6, r25	; 0x06
    4172:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4174:	8d 81       	ldd	r24, Y+5	; 0x05
    4176:	9e 81       	ldd	r25, Y+6	; 0x06
    4178:	9c 83       	std	Y+4, r25	; 0x04
    417a:	8b 83       	std	Y+3, r24	; 0x03
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
    417c:	8b 81       	ldd	r24, Y+3	; 0x03
    417e:	9c 81       	ldd	r25, Y+4	; 0x04
    4180:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <prvBytesInBuffer>
    4184:	9a 83       	std	Y+2, r25	; 0x02
    4186:	89 83       	std	Y+1, r24	; 0x01
	return xReturn;
    4188:	89 81       	ldd	r24, Y+1	; 0x01
    418a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    418c:	26 96       	adiw	r28, 0x06	; 6
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	f8 94       	cli
    4192:	de bf       	out	0x3e, r29	; 62
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	cf 91       	pop	r28
    419a:	df 91       	pop	r29
    419c:	08 95       	ret

0000419e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
    419e:	ef 92       	push	r14
    41a0:	ff 92       	push	r15
    41a2:	0f 93       	push	r16
    41a4:	1f 93       	push	r17
    41a6:	df 93       	push	r29
    41a8:	cf 93       	push	r28
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	63 97       	sbiw	r28, 0x13	; 19
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	9d 87       	std	Y+13, r25	; 0x0d
    41bc:	8c 87       	std	Y+12, r24	; 0x0c
    41be:	7f 87       	std	Y+15, r23	; 0x0f
    41c0:	6e 87       	std	Y+14, r22	; 0x0e
    41c2:	59 8b       	std	Y+17, r21	; 0x11
    41c4:	48 8b       	std	Y+16, r20	; 0x10
    41c6:	3b 8b       	std	Y+19, r19	; 0x13
    41c8:	2a 8b       	std	Y+18, r18	; 0x12
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    41ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    41cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    41ce:	98 87       	std	Y+8, r25	; 0x08
    41d0:	8f 83       	std	Y+7, r24	; 0x07
size_t xReturn, xSpace = 0;
    41d2:	1c 82       	std	Y+4, r1	; 0x04
    41d4:	1b 82       	std	Y+3, r1	; 0x03
size_t xRequiredSpace = xDataLengthBytes;
    41d6:	88 89       	ldd	r24, Y+16	; 0x10
    41d8:	99 89       	ldd	r25, Y+17	; 0x11
    41da:	9a 83       	std	Y+2, r25	; 0x02
    41dc:	89 83       	std	Y+1, r24	; 0x01

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    41de:	ef 81       	ldd	r30, Y+7	; 0x07
    41e0:	f8 85       	ldd	r31, Y+8	; 0x08
    41e2:	86 85       	ldd	r24, Z+14	; 0x0e
    41e4:	88 2f       	mov	r24, r24
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	81 70       	andi	r24, 0x01	; 1
    41ea:	90 70       	andi	r25, 0x00	; 0
    41ec:	88 23       	and	r24, r24
    41ee:	29 f0       	breq	.+10     	; 0x41fa <xStreamBufferSend+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    41f0:	89 81       	ldd	r24, Y+1	; 0x01
    41f2:	9a 81       	ldd	r25, Y+2	; 0x02
    41f4:	02 96       	adiw	r24, 0x02	; 2
    41f6:	9a 83       	std	Y+2, r25	; 0x02
    41f8:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    41fa:	8a 89       	ldd	r24, Y+18	; 0x12
    41fc:	9b 89       	ldd	r25, Y+19	; 0x13
    41fe:	00 97       	sbiw	r24, 0x00	; 0
    4200:	09 f4       	brne	.+2      	; 0x4204 <xStreamBufferSend+0x66>
    4202:	40 c0       	rjmp	.+128    	; 0x4284 <xStreamBufferSend+0xe6>
	{
		vTaskSetTimeOutState( &xTimeOut );
    4204:	ce 01       	movw	r24, r28
    4206:	09 96       	adiw	r24, 0x09	; 9
    4208:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	0f 92       	push	r0
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    4212:	8f 81       	ldd	r24, Y+7	; 0x07
    4214:	98 85       	ldd	r25, Y+8	; 0x08
    4216:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <xStreamBufferSpacesAvailable>
    421a:	9c 83       	std	Y+4, r25	; 0x04
    421c:	8b 83       	std	Y+3, r24	; 0x03

				if( xSpace < xRequiredSpace )
    421e:	2b 81       	ldd	r18, Y+3	; 0x03
    4220:	3c 81       	ldd	r19, Y+4	; 0x04
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	28 17       	cp	r18, r24
    4228:	39 07       	cpc	r19, r25
    422a:	50 f5       	brcc	.+84     	; 0x4280 <xStreamBufferSend+0xe2>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	0e 94 e6 33 	call	0x67cc	; 0x67cc <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    4234:	0e 94 3f 30 	call	0x607e	; 0x607e <xTaskGetCurrentTaskHandle>
    4238:	ef 81       	ldd	r30, Y+7	; 0x07
    423a:	f8 85       	ldd	r31, Y+8	; 0x08
    423c:	93 87       	std	Z+11, r25	; 0x0b
    423e:	82 87       	std	Z+10, r24	; 0x0a
				{
					taskEXIT_CRITICAL();
					break;
				}
			}
			taskEXIT_CRITICAL();
    4240:	0f 90       	pop	r0
    4242:	0f be       	out	0x3f, r0	; 63

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    4244:	ea 89       	ldd	r30, Y+18	; 0x12
    4246:	fb 89       	ldd	r31, Y+19	; 0x13
    4248:	60 e0       	ldi	r22, 0x00	; 0
    424a:	70 e0       	ldi	r23, 0x00	; 0
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	40 e0       	ldi	r20, 0x00	; 0
    4256:	50 e0       	ldi	r21, 0x00	; 0
    4258:	00 e0       	ldi	r16, 0x00	; 0
    425a:	10 e0       	ldi	r17, 0x00	; 0
    425c:	7f 01       	movw	r14, r30
    425e:	0e 94 ef 30 	call	0x61de	; 0x61de <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
    4262:	ef 81       	ldd	r30, Y+7	; 0x07
    4264:	f8 85       	ldd	r31, Y+8	; 0x08
    4266:	13 86       	std	Z+11, r1	; 0x0b
    4268:	12 86       	std	Z+10, r1	; 0x0a

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    426a:	ce 01       	movw	r24, r28
    426c:	09 96       	adiw	r24, 0x09	; 9
    426e:	9e 01       	movw	r18, r28
    4270:	2e 5e       	subi	r18, 0xEE	; 238
    4272:	3f 4f       	sbci	r19, 0xFF	; 255
    4274:	b9 01       	movw	r22, r18
    4276:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <xTaskCheckForTimeOut>
    427a:	88 23       	and	r24, r24
    427c:	39 f2       	breq	.-114    	; 0x420c <xStreamBufferSend+0x6e>
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <xStreamBufferSend+0xe6>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
				}
				else
				{
					taskEXIT_CRITICAL();
    4280:	0f 90       	pop	r0
    4282:	0f be       	out	0x3f, r0	; 63
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
    4284:	8b 81       	ldd	r24, Y+3	; 0x03
    4286:	9c 81       	ldd	r25, Y+4	; 0x04
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	31 f4       	brne	.+12     	; 0x4298 <xStreamBufferSend+0xfa>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    428c:	8f 81       	ldd	r24, Y+7	; 0x07
    428e:	98 85       	ldd	r25, Y+8	; 0x08
    4290:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <xStreamBufferSpacesAvailable>
    4294:	9c 83       	std	Y+4, r25	; 0x04
    4296:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    4298:	8f 81       	ldd	r24, Y+7	; 0x07
    429a:	98 85       	ldd	r25, Y+8	; 0x08
    429c:	2e 85       	ldd	r18, Y+14	; 0x0e
    429e:	3f 85       	ldd	r19, Y+15	; 0x0f
    42a0:	48 89       	ldd	r20, Y+16	; 0x10
    42a2:	59 89       	ldd	r21, Y+17	; 0x11
    42a4:	eb 81       	ldd	r30, Y+3	; 0x03
    42a6:	fc 81       	ldd	r31, Y+4	; 0x04
    42a8:	a9 81       	ldd	r26, Y+1	; 0x01
    42aa:	ba 81       	ldd	r27, Y+2	; 0x02
    42ac:	b9 01       	movw	r22, r18
    42ae:	9f 01       	movw	r18, r30
    42b0:	8d 01       	movw	r16, r26
    42b2:	0e 94 14 22 	call	0x4428	; 0x4428 <prvWriteMessageToBuffer>
    42b6:	9e 83       	std	Y+6, r25	; 0x06
    42b8:	8d 83       	std	Y+5, r24	; 0x05

	if( xReturn > ( size_t ) 0 )
    42ba:	8d 81       	ldd	r24, Y+5	; 0x05
    42bc:	9e 81       	ldd	r25, Y+6	; 0x06
    42be:	00 97       	sbiw	r24, 0x00	; 0
    42c0:	39 f1       	breq	.+78     	; 0x4310 <xStreamBufferSend+0x172>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    42c2:	8f 81       	ldd	r24, Y+7	; 0x07
    42c4:	98 85       	ldd	r25, Y+8	; 0x08
    42c6:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <prvBytesInBuffer>
    42ca:	9c 01       	movw	r18, r24
    42cc:	ef 81       	ldd	r30, Y+7	; 0x07
    42ce:	f8 85       	ldd	r31, Y+8	; 0x08
    42d0:	86 81       	ldd	r24, Z+6	; 0x06
    42d2:	97 81       	ldd	r25, Z+7	; 0x07
    42d4:	28 17       	cp	r18, r24
    42d6:	39 07       	cpc	r19, r25
    42d8:	d8 f0       	brcs	.+54     	; 0x4310 <xStreamBufferSend+0x172>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
    42da:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
    42de:	ef 81       	ldd	r30, Y+7	; 0x07
    42e0:	f8 85       	ldd	r31, Y+8	; 0x08
    42e2:	80 85       	ldd	r24, Z+8	; 0x08
    42e4:	91 85       	ldd	r25, Z+9	; 0x09
    42e6:	00 97       	sbiw	r24, 0x00	; 0
    42e8:	89 f0       	breq	.+34     	; 0x430c <xStreamBufferSend+0x16e>
    42ea:	ef 81       	ldd	r30, Y+7	; 0x07
    42ec:	f8 85       	ldd	r31, Y+8	; 0x08
    42ee:	80 85       	ldd	r24, Z+8	; 0x08
    42f0:	91 85       	ldd	r25, Z+9	; 0x09
    42f2:	40 e0       	ldi	r20, 0x00	; 0
    42f4:	50 e0       	ldi	r21, 0x00	; 0
    42f6:	60 e0       	ldi	r22, 0x00	; 0
    42f8:	70 e0       	ldi	r23, 0x00	; 0
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	00 e0       	ldi	r16, 0x00	; 0
    42fe:	10 e0       	ldi	r17, 0x00	; 0
    4300:	0e 94 8b 31 	call	0x6316	; 0x6316 <xTaskGenericNotify>
    4304:	ef 81       	ldd	r30, Y+7	; 0x07
    4306:	f8 85       	ldd	r31, Y+8	; 0x08
    4308:	11 86       	std	Z+9, r1	; 0x09
    430a:	10 86       	std	Z+8, r1	; 0x08
    430c:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
    4310:	8d 81       	ldd	r24, Y+5	; 0x05
    4312:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4314:	63 96       	adiw	r28, 0x13	; 19
    4316:	0f b6       	in	r0, 0x3f	; 63
    4318:	f8 94       	cli
    431a:	de bf       	out	0x3e, r29	; 62
    431c:	0f be       	out	0x3f, r0	; 63
    431e:	cd bf       	out	0x3d, r28	; 61
    4320:	cf 91       	pop	r28
    4322:	df 91       	pop	r29
    4324:	1f 91       	pop	r17
    4326:	0f 91       	pop	r16
    4328:	ff 90       	pop	r15
    432a:	ef 90       	pop	r14
    432c:	08 95       	ret

0000432e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
    432e:	ef 92       	push	r14
    4330:	ff 92       	push	r15
    4332:	0f 93       	push	r16
    4334:	1f 93       	push	r17
    4336:	df 93       	push	r29
    4338:	cf 93       	push	r28
    433a:	cd b7       	in	r28, 0x3d	; 61
    433c:	de b7       	in	r29, 0x3e	; 62
    433e:	61 97       	sbiw	r28, 0x11	; 17
    4340:	0f b6       	in	r0, 0x3f	; 63
    4342:	f8 94       	cli
    4344:	de bf       	out	0x3e, r29	; 62
    4346:	0f be       	out	0x3f, r0	; 63
    4348:	cd bf       	out	0x3d, r28	; 61
    434a:	9b 87       	std	Y+11, r25	; 0x0b
    434c:	8a 87       	std	Y+10, r24	; 0x0a
    434e:	7d 87       	std	Y+13, r23	; 0x0d
    4350:	6c 87       	std	Y+12, r22	; 0x0c
    4352:	5f 87       	std	Y+15, r21	; 0x0f
    4354:	4e 87       	std	Y+14, r20	; 0x0e
    4356:	39 8b       	std	Y+17, r19	; 0x11
    4358:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    435a:	8a 85       	ldd	r24, Y+10	; 0x0a
    435c:	9b 85       	ldd	r25, Y+11	; 0x0b
    435e:	99 87       	std	Y+9, r25	; 0x09
    4360:	88 87       	std	Y+8, r24	; 0x08
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    4362:	8e 85       	ldd	r24, Y+14	; 0x0e
    4364:	9f 85       	ldd	r25, Y+15	; 0x0f
    4366:	9b 83       	std	Y+3, r25	; 0x03
    4368:	8a 83       	std	Y+2, r24	; 0x02

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    436a:	e8 85       	ldd	r30, Y+8	; 0x08
    436c:	f9 85       	ldd	r31, Y+9	; 0x09
    436e:	86 85       	ldd	r24, Z+14	; 0x0e
    4370:	88 2f       	mov	r24, r24
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	81 70       	andi	r24, 0x01	; 1
    4376:	90 70       	andi	r25, 0x00	; 0
    4378:	88 23       	and	r24, r24
    437a:	29 f0       	breq	.+10     	; 0x4386 <xStreamBufferSendFromISR+0x58>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    437c:	8a 81       	ldd	r24, Y+2	; 0x02
    437e:	9b 81       	ldd	r25, Y+3	; 0x03
    4380:	02 96       	adiw	r24, 0x02	; 2
    4382:	9b 83       	std	Y+3, r25	; 0x03
    4384:	8a 83       	std	Y+2, r24	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    4386:	88 85       	ldd	r24, Y+8	; 0x08
    4388:	99 85       	ldd	r25, Y+9	; 0x09
    438a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <xStreamBufferSpacesAvailable>
    438e:	9d 83       	std	Y+5, r25	; 0x05
    4390:	8c 83       	std	Y+4, r24	; 0x04
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    4392:	88 85       	ldd	r24, Y+8	; 0x08
    4394:	99 85       	ldd	r25, Y+9	; 0x09
    4396:	2c 85       	ldd	r18, Y+12	; 0x0c
    4398:	3d 85       	ldd	r19, Y+13	; 0x0d
    439a:	4e 85       	ldd	r20, Y+14	; 0x0e
    439c:	5f 85       	ldd	r21, Y+15	; 0x0f
    439e:	ec 81       	ldd	r30, Y+4	; 0x04
    43a0:	fd 81       	ldd	r31, Y+5	; 0x05
    43a2:	aa 81       	ldd	r26, Y+2	; 0x02
    43a4:	bb 81       	ldd	r27, Y+3	; 0x03
    43a6:	b9 01       	movw	r22, r18
    43a8:	9f 01       	movw	r18, r30
    43aa:	8d 01       	movw	r16, r26
    43ac:	0e 94 14 22 	call	0x4428	; 0x4428 <prvWriteMessageToBuffer>
    43b0:	9f 83       	std	Y+7, r25	; 0x07
    43b2:	8e 83       	std	Y+6, r24	; 0x06

	if( xReturn > ( size_t ) 0 )
    43b4:	8e 81       	ldd	r24, Y+6	; 0x06
    43b6:	9f 81       	ldd	r25, Y+7	; 0x07
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	39 f1       	breq	.+78     	; 0x440a <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    43bc:	88 85       	ldd	r24, Y+8	; 0x08
    43be:	99 85       	ldd	r25, Y+9	; 0x09
    43c0:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <prvBytesInBuffer>
    43c4:	9c 01       	movw	r18, r24
    43c6:	e8 85       	ldd	r30, Y+8	; 0x08
    43c8:	f9 85       	ldd	r31, Y+9	; 0x09
    43ca:	86 81       	ldd	r24, Z+6	; 0x06
    43cc:	97 81       	ldd	r25, Z+7	; 0x07
    43ce:	28 17       	cp	r18, r24
    43d0:	39 07       	cpc	r19, r25
    43d2:	d8 f0       	brcs	.+54     	; 0x440a <xStreamBufferSendFromISR+0xdc>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    43d4:	19 82       	std	Y+1, r1	; 0x01
    43d6:	e8 85       	ldd	r30, Y+8	; 0x08
    43d8:	f9 85       	ldd	r31, Y+9	; 0x09
    43da:	80 85       	ldd	r24, Z+8	; 0x08
    43dc:	91 85       	ldd	r25, Z+9	; 0x09
    43de:	00 97       	sbiw	r24, 0x00	; 0
    43e0:	a1 f0       	breq	.+40     	; 0x440a <xStreamBufferSendFromISR+0xdc>
    43e2:	e8 85       	ldd	r30, Y+8	; 0x08
    43e4:	f9 85       	ldd	r31, Y+9	; 0x09
    43e6:	80 85       	ldd	r24, Z+8	; 0x08
    43e8:	91 85       	ldd	r25, Z+9	; 0x09
    43ea:	e8 89       	ldd	r30, Y+16	; 0x10
    43ec:	f9 89       	ldd	r31, Y+17	; 0x11
    43ee:	40 e0       	ldi	r20, 0x00	; 0
    43f0:	50 e0       	ldi	r21, 0x00	; 0
    43f2:	60 e0       	ldi	r22, 0x00	; 0
    43f4:	70 e0       	ldi	r23, 0x00	; 0
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	00 e0       	ldi	r16, 0x00	; 0
    43fa:	10 e0       	ldi	r17, 0x00	; 0
    43fc:	7f 01       	movw	r14, r30
    43fe:	0e 94 68 32 	call	0x64d0	; 0x64d0 <xTaskGenericNotifyFromISR>
    4402:	e8 85       	ldd	r30, Y+8	; 0x08
    4404:	f9 85       	ldd	r31, Y+9	; 0x09
    4406:	11 86       	std	Z+9, r1	; 0x09
    4408:	10 86       	std	Z+8, r1	; 0x08
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
    440a:	8e 81       	ldd	r24, Y+6	; 0x06
    440c:	9f 81       	ldd	r25, Y+7	; 0x07
}
    440e:	61 96       	adiw	r28, 0x11	; 17
    4410:	0f b6       	in	r0, 0x3f	; 63
    4412:	f8 94       	cli
    4414:	de bf       	out	0x3e, r29	; 62
    4416:	0f be       	out	0x3f, r0	; 63
    4418:	cd bf       	out	0x3d, r28	; 61
    441a:	cf 91       	pop	r28
    441c:	df 91       	pop	r29
    441e:	1f 91       	pop	r17
    4420:	0f 91       	pop	r16
    4422:	ff 90       	pop	r15
    4424:	ef 90       	pop	r14
    4426:	08 95       	ret

00004428 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	df 93       	push	r29
    442e:	cf 93       	push	r28
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62
    4434:	61 97       	sbiw	r28, 0x11	; 17
    4436:	0f b6       	in	r0, 0x3f	; 63
    4438:	f8 94       	cli
    443a:	de bf       	out	0x3e, r29	; 62
    443c:	0f be       	out	0x3f, r0	; 63
    443e:	cd bf       	out	0x3d, r28	; 61
    4440:	9d 83       	std	Y+5, r25	; 0x05
    4442:	8c 83       	std	Y+4, r24	; 0x04
    4444:	7f 83       	std	Y+7, r23	; 0x07
    4446:	6e 83       	std	Y+6, r22	; 0x06
    4448:	59 87       	std	Y+9, r21	; 0x09
    444a:	48 87       	std	Y+8, r20	; 0x08
    444c:	3b 87       	std	Y+11, r19	; 0x0b
    444e:	2a 87       	std	Y+10, r18	; 0x0a
    4450:	1d 87       	std	Y+13, r17	; 0x0d
    4452:	0c 87       	std	Y+12, r16	; 0x0c
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
    4454:	8a 85       	ldd	r24, Y+10	; 0x0a
    4456:	9b 85       	ldd	r25, Y+11	; 0x0b
    4458:	00 97       	sbiw	r24, 0x00	; 0
    445a:	11 f4       	brne	.+4      	; 0x4460 <prvWriteMessageToBuffer+0x38>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
    445c:	1b 82       	std	Y+3, r1	; 0x03
    445e:	38 c0       	rjmp	.+112    	; 0x44d0 <prvWriteMessageToBuffer+0xa8>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
    4460:	ec 81       	ldd	r30, Y+4	; 0x04
    4462:	fd 81       	ldd	r31, Y+5	; 0x05
    4464:	86 85       	ldd	r24, Z+14	; 0x0e
    4466:	88 2f       	mov	r24, r24
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	81 70       	andi	r24, 0x01	; 1
    446c:	90 70       	andi	r25, 0x00	; 0
    446e:	00 97       	sbiw	r24, 0x00	; 0
    4470:	d1 f4       	brne	.+52     	; 0x44a6 <prvWriteMessageToBuffer+0x7e>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	8b 83       	std	Y+3, r24	; 0x03
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    4476:	28 85       	ldd	r18, Y+8	; 0x08
    4478:	39 85       	ldd	r19, Y+9	; 0x09
    447a:	39 8b       	std	Y+17, r19	; 0x11
    447c:	28 8b       	std	Y+16, r18	; 0x10
    447e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4480:	9b 85       	ldd	r25, Y+11	; 0x0b
    4482:	9f 87       	std	Y+15, r25	; 0x0f
    4484:	8e 87       	std	Y+14, r24	; 0x0e
    4486:	2e 85       	ldd	r18, Y+14	; 0x0e
    4488:	3f 85       	ldd	r19, Y+15	; 0x0f
    448a:	88 89       	ldd	r24, Y+16	; 0x10
    448c:	99 89       	ldd	r25, Y+17	; 0x11
    448e:	82 17       	cp	r24, r18
    4490:	93 07       	cpc	r25, r19
    4492:	20 f4       	brcc	.+8      	; 0x449c <prvWriteMessageToBuffer+0x74>
    4494:	28 89       	ldd	r18, Y+16	; 0x10
    4496:	39 89       	ldd	r19, Y+17	; 0x11
    4498:	3f 87       	std	Y+15, r19	; 0x0f
    449a:	2e 87       	std	Y+14, r18	; 0x0e
    449c:	8e 85       	ldd	r24, Y+14	; 0x0e
    449e:	9f 85       	ldd	r25, Y+15	; 0x0f
    44a0:	99 87       	std	Y+9, r25	; 0x09
    44a2:	88 87       	std	Y+8, r24	; 0x08
    44a4:	15 c0       	rjmp	.+42     	; 0x44d0 <prvWriteMessageToBuffer+0xa8>
	}
	else if( xSpace >= xRequiredSpace )
    44a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    44a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    44aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    44ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    44ae:	28 17       	cp	r18, r24
    44b0:	39 07       	cpc	r19, r25
    44b2:	68 f0       	brcs	.+26     	; 0x44ce <prvWriteMessageToBuffer+0xa6>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	8b 83       	std	Y+3, r24	; 0x03
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
    44b8:	9e 01       	movw	r18, r28
    44ba:	28 5f       	subi	r18, 0xF8	; 248
    44bc:	3f 4f       	sbci	r19, 0xFF	; 255
    44be:	8c 81       	ldd	r24, Y+4	; 0x04
    44c0:	9d 81       	ldd	r25, Y+5	; 0x05
    44c2:	b9 01       	movw	r22, r18
    44c4:	42 e0       	ldi	r20, 0x02	; 2
    44c6:	50 e0       	ldi	r21, 0x00	; 0
    44c8:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <prvWriteBytesToBuffer>
    44cc:	01 c0       	rjmp	.+2      	; 0x44d0 <prvWriteMessageToBuffer+0xa8>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
    44ce:	1b 82       	std	Y+3, r1	; 0x03
	}

	if( xShouldWrite != pdFALSE )
    44d0:	8b 81       	ldd	r24, Y+3	; 0x03
    44d2:	88 23       	and	r24, r24
    44d4:	61 f0       	breq	.+24     	; 0x44ee <prvWriteMessageToBuffer+0xc6>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
    44d6:	2e 81       	ldd	r18, Y+6	; 0x06
    44d8:	3f 81       	ldd	r19, Y+7	; 0x07
    44da:	48 85       	ldd	r20, Y+8	; 0x08
    44dc:	59 85       	ldd	r21, Y+9	; 0x09
    44de:	8c 81       	ldd	r24, Y+4	; 0x04
    44e0:	9d 81       	ldd	r25, Y+5	; 0x05
    44e2:	b9 01       	movw	r22, r18
    44e4:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <prvWriteBytesToBuffer>
    44e8:	9a 83       	std	Y+2, r25	; 0x02
    44ea:	89 83       	std	Y+1, r24	; 0x01
    44ec:	02 c0       	rjmp	.+4      	; 0x44f2 <prvWriteMessageToBuffer+0xca>
	}
	else
	{
		xReturn = 0;
    44ee:	1a 82       	std	Y+2, r1	; 0x02
    44f0:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    44f2:	89 81       	ldd	r24, Y+1	; 0x01
    44f4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    44f6:	61 96       	adiw	r28, 0x11	; 17
    44f8:	0f b6       	in	r0, 0x3f	; 63
    44fa:	f8 94       	cli
    44fc:	de bf       	out	0x3e, r29	; 62
    44fe:	0f be       	out	0x3f, r0	; 63
    4500:	cd bf       	out	0x3d, r28	; 61
    4502:	cf 91       	pop	r28
    4504:	df 91       	pop	r29
    4506:	1f 91       	pop	r17
    4508:	0f 91       	pop	r16
    450a:	08 95       	ret

0000450c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
    450c:	ef 92       	push	r14
    450e:	ff 92       	push	r15
    4510:	0f 93       	push	r16
    4512:	1f 93       	push	r17
    4514:	df 93       	push	r29
    4516:	cf 93       	push	r28
    4518:	cd b7       	in	r28, 0x3d	; 61
    451a:	de b7       	in	r29, 0x3e	; 62
    451c:	60 97       	sbiw	r28, 0x10	; 16
    451e:	0f b6       	in	r0, 0x3f	; 63
    4520:	f8 94       	cli
    4522:	de bf       	out	0x3e, r29	; 62
    4524:	0f be       	out	0x3f, r0	; 63
    4526:	cd bf       	out	0x3d, r28	; 61
    4528:	9a 87       	std	Y+10, r25	; 0x0a
    452a:	89 87       	std	Y+9, r24	; 0x09
    452c:	7c 87       	std	Y+12, r23	; 0x0c
    452e:	6b 87       	std	Y+11, r22	; 0x0b
    4530:	5e 87       	std	Y+14, r21	; 0x0e
    4532:	4d 87       	std	Y+13, r20	; 0x0d
    4534:	38 8b       	std	Y+16, r19	; 0x10
    4536:	2f 87       	std	Y+15, r18	; 0x0f
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4538:	89 85       	ldd	r24, Y+9	; 0x09
    453a:	9a 85       	ldd	r25, Y+10	; 0x0a
    453c:	98 87       	std	Y+8, r25	; 0x08
    453e:	8f 83       	std	Y+7, r24	; 0x07
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    4540:	1e 82       	std	Y+6, r1	; 0x06
    4542:	1d 82       	std	Y+5, r1	; 0x05
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    4544:	ef 81       	ldd	r30, Y+7	; 0x07
    4546:	f8 85       	ldd	r31, Y+8	; 0x08
    4548:	86 85       	ldd	r24, Z+14	; 0x0e
    454a:	88 2f       	mov	r24, r24
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	81 70       	andi	r24, 0x01	; 1
    4550:	90 70       	andi	r25, 0x00	; 0
    4552:	88 23       	and	r24, r24
    4554:	29 f0       	breq	.+10     	; 0x4560 <xStreamBufferReceive+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    4556:	82 e0       	ldi	r24, 0x02	; 2
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	9a 83       	std	Y+2, r25	; 0x02
    455c:	89 83       	std	Y+1, r24	; 0x01
    455e:	02 c0       	rjmp	.+4      	; 0x4564 <xStreamBufferReceive+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    4560:	1a 82       	std	Y+2, r1	; 0x02
    4562:	19 82       	std	Y+1, r1	; 0x01
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    4564:	8f 85       	ldd	r24, Y+15	; 0x0f
    4566:	98 89       	ldd	r25, Y+16	; 0x10
    4568:	00 97       	sbiw	r24, 0x00	; 0
    456a:	09 f4       	brne	.+2      	; 0x456e <xStreamBufferReceive+0x62>
    456c:	3d c0       	rjmp	.+122    	; 0x45e8 <xStreamBufferReceive+0xdc>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
    456e:	0f b6       	in	r0, 0x3f	; 63
    4570:	f8 94       	cli
    4572:	0f 92       	push	r0
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    4574:	8f 81       	ldd	r24, Y+7	; 0x07
    4576:	98 85       	ldd	r25, Y+8	; 0x08
    4578:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <prvBytesInBuffer>
    457c:	9c 83       	std	Y+4, r25	; 0x04
    457e:	8b 83       	std	Y+3, r24	; 0x03
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
    4580:	2b 81       	ldd	r18, Y+3	; 0x03
    4582:	3c 81       	ldd	r19, Y+4	; 0x04
    4584:	89 81       	ldd	r24, Y+1	; 0x01
    4586:	9a 81       	ldd	r25, Y+2	; 0x02
    4588:	82 17       	cp	r24, r18
    458a:	93 07       	cpc	r25, r19
    458c:	50 f0       	brcs	.+20     	; 0x45a2 <xStreamBufferReceive+0x96>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
    458e:	80 e0       	ldi	r24, 0x00	; 0
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	0e 94 e6 33 	call	0x67cc	; 0x67cc <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    4596:	0e 94 3f 30 	call	0x607e	; 0x607e <xTaskGetCurrentTaskHandle>
    459a:	ef 81       	ldd	r30, Y+7	; 0x07
    459c:	f8 85       	ldd	r31, Y+8	; 0x08
    459e:	91 87       	std	Z+9, r25	; 0x09
    45a0:	80 87       	std	Z+8, r24	; 0x08
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    45a2:	0f 90       	pop	r0
    45a4:	0f be       	out	0x3f, r0	; 63

		if( xBytesAvailable <= xBytesToStoreMessageLength )
    45a6:	2b 81       	ldd	r18, Y+3	; 0x03
    45a8:	3c 81       	ldd	r19, Y+4	; 0x04
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	9a 81       	ldd	r25, Y+2	; 0x02
    45ae:	82 17       	cp	r24, r18
    45b0:	93 07       	cpc	r25, r19
    45b2:	00 f1       	brcs	.+64     	; 0x45f4 <xStreamBufferReceive+0xe8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    45b4:	ef 85       	ldd	r30, Y+15	; 0x0f
    45b6:	f8 89       	ldd	r31, Y+16	; 0x10
    45b8:	60 e0       	ldi	r22, 0x00	; 0
    45ba:	70 e0       	ldi	r23, 0x00	; 0
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	40 e0       	ldi	r20, 0x00	; 0
    45c6:	50 e0       	ldi	r21, 0x00	; 0
    45c8:	00 e0       	ldi	r16, 0x00	; 0
    45ca:	10 e0       	ldi	r17, 0x00	; 0
    45cc:	7f 01       	movw	r14, r30
    45ce:	0e 94 ef 30 	call	0x61de	; 0x61de <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
    45d2:	ef 81       	ldd	r30, Y+7	; 0x07
    45d4:	f8 85       	ldd	r31, Y+8	; 0x08
    45d6:	11 86       	std	Z+9, r1	; 0x09
    45d8:	10 86       	std	Z+8, r1	; 0x08

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    45da:	8f 81       	ldd	r24, Y+7	; 0x07
    45dc:	98 85       	ldd	r25, Y+8	; 0x08
    45de:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <prvBytesInBuffer>
    45e2:	9c 83       	std	Y+4, r25	; 0x04
    45e4:	8b 83       	std	Y+3, r24	; 0x03
    45e6:	06 c0       	rjmp	.+12     	; 0x45f4 <xStreamBufferReceive+0xe8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    45e8:	8f 81       	ldd	r24, Y+7	; 0x07
    45ea:	98 85       	ldd	r25, Y+8	; 0x08
    45ec:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <prvBytesInBuffer>
    45f0:	9c 83       	std	Y+4, r25	; 0x04
    45f2:	8b 83       	std	Y+3, r24	; 0x03
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    45f4:	2b 81       	ldd	r18, Y+3	; 0x03
    45f6:	3c 81       	ldd	r19, Y+4	; 0x04
    45f8:	89 81       	ldd	r24, Y+1	; 0x01
    45fa:	9a 81       	ldd	r25, Y+2	; 0x02
    45fc:	82 17       	cp	r24, r18
    45fe:	93 07       	cpc	r25, r19
    4600:	80 f5       	brcc	.+96     	; 0x4662 <xStreamBufferReceive+0x156>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    4602:	8f 81       	ldd	r24, Y+7	; 0x07
    4604:	98 85       	ldd	r25, Y+8	; 0x08
    4606:	2b 85       	ldd	r18, Y+11	; 0x0b
    4608:	3c 85       	ldd	r19, Y+12	; 0x0c
    460a:	4d 85       	ldd	r20, Y+13	; 0x0d
    460c:	5e 85       	ldd	r21, Y+14	; 0x0e
    460e:	eb 81       	ldd	r30, Y+3	; 0x03
    4610:	fc 81       	ldd	r31, Y+4	; 0x04
    4612:	a9 81       	ldd	r26, Y+1	; 0x01
    4614:	ba 81       	ldd	r27, Y+2	; 0x02
    4616:	b9 01       	movw	r22, r18
    4618:	9f 01       	movw	r18, r30
    461a:	8d 01       	movw	r16, r26
    461c:	0e 94 0a 24 	call	0x4814	; 0x4814 <prvReadMessageFromBuffer>
    4620:	9e 83       	std	Y+6, r25	; 0x06
    4622:	8d 83       	std	Y+5, r24	; 0x05

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    4624:	8d 81       	ldd	r24, Y+5	; 0x05
    4626:	9e 81       	ldd	r25, Y+6	; 0x06
    4628:	00 97       	sbiw	r24, 0x00	; 0
    462a:	d9 f0       	breq	.+54     	; 0x4662 <xStreamBufferReceive+0x156>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
    462c:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
    4630:	ef 81       	ldd	r30, Y+7	; 0x07
    4632:	f8 85       	ldd	r31, Y+8	; 0x08
    4634:	82 85       	ldd	r24, Z+10	; 0x0a
    4636:	93 85       	ldd	r25, Z+11	; 0x0b
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	89 f0       	breq	.+34     	; 0x465e <xStreamBufferReceive+0x152>
    463c:	ef 81       	ldd	r30, Y+7	; 0x07
    463e:	f8 85       	ldd	r31, Y+8	; 0x08
    4640:	82 85       	ldd	r24, Z+10	; 0x0a
    4642:	93 85       	ldd	r25, Z+11	; 0x0b
    4644:	40 e0       	ldi	r20, 0x00	; 0
    4646:	50 e0       	ldi	r21, 0x00	; 0
    4648:	60 e0       	ldi	r22, 0x00	; 0
    464a:	70 e0       	ldi	r23, 0x00	; 0
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	00 e0       	ldi	r16, 0x00	; 0
    4650:	10 e0       	ldi	r17, 0x00	; 0
    4652:	0e 94 8b 31 	call	0x6316	; 0x6316 <xTaskGenericNotify>
    4656:	ef 81       	ldd	r30, Y+7	; 0x07
    4658:	f8 85       	ldd	r31, Y+8	; 0x08
    465a:	13 86       	std	Z+11, r1	; 0x0b
    465c:	12 86       	std	Z+10, r1	; 0x0a
    465e:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
    4662:	8d 81       	ldd	r24, Y+5	; 0x05
    4664:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4666:	60 96       	adiw	r28, 0x10	; 16
    4668:	0f b6       	in	r0, 0x3f	; 63
    466a:	f8 94       	cli
    466c:	de bf       	out	0x3e, r29	; 62
    466e:	0f be       	out	0x3f, r0	; 63
    4670:	cd bf       	out	0x3d, r28	; 61
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	1f 91       	pop	r17
    4678:	0f 91       	pop	r16
    467a:	ff 90       	pop	r15
    467c:	ef 90       	pop	r14
    467e:	08 95       	ret

00004680 <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    4680:	df 93       	push	r29
    4682:	cf 93       	push	r28
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	2c 97       	sbiw	r28, 0x0c	; 12
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	cd bf       	out	0x3d, r28	; 61
    4694:	9c 87       	std	Y+12, r25	; 0x0c
    4696:	8b 87       	std	Y+11, r24	; 0x0b
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4698:	8b 85       	ldd	r24, Y+11	; 0x0b
    469a:	9c 85       	ldd	r25, Y+12	; 0x0c
    469c:	98 87       	std	Y+8, r25	; 0x08
    469e:	8f 83       	std	Y+7, r24	; 0x07
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    46a0:	ef 81       	ldd	r30, Y+7	; 0x07
    46a2:	f8 85       	ldd	r31, Y+8	; 0x08
    46a4:	86 85       	ldd	r24, Z+14	; 0x0e
    46a6:	88 2f       	mov	r24, r24
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	81 70       	andi	r24, 0x01	; 1
    46ac:	90 70       	andi	r25, 0x00	; 0
    46ae:	88 23       	and	r24, r24
    46b0:	61 f1       	breq	.+88     	; 0x470a <xStreamBufferNextMessageLengthBytes+0x8a>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    46b2:	8f 81       	ldd	r24, Y+7	; 0x07
    46b4:	98 85       	ldd	r25, Y+8	; 0x08
    46b6:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <prvBytesInBuffer>
    46ba:	9c 83       	std	Y+4, r25	; 0x04
    46bc:	8b 83       	std	Y+3, r24	; 0x03
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    46be:	8b 81       	ldd	r24, Y+3	; 0x03
    46c0:	9c 81       	ldd	r25, Y+4	; 0x04
    46c2:	83 30       	cpi	r24, 0x03	; 3
    46c4:	91 05       	cpc	r25, r1
    46c6:	f0 f0       	brcs	.+60     	; 0x4704 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
    46c8:	ef 81       	ldd	r30, Y+7	; 0x07
    46ca:	f8 85       	ldd	r31, Y+8	; 0x08
    46cc:	80 81       	ld	r24, Z
    46ce:	91 81       	ldd	r25, Z+1	; 0x01
    46d0:	9a 83       	std	Y+2, r25	; 0x02
    46d2:	89 83       	std	Y+1, r24	; 0x01
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
    46d4:	9e 01       	movw	r18, r28
    46d6:	27 5f       	subi	r18, 0xF7	; 247
    46d8:	3f 4f       	sbci	r19, 0xFF	; 255
    46da:	8f 81       	ldd	r24, Y+7	; 0x07
    46dc:	98 85       	ldd	r25, Y+8	; 0x08
    46de:	eb 81       	ldd	r30, Y+3	; 0x03
    46e0:	fc 81       	ldd	r31, Y+4	; 0x04
    46e2:	b9 01       	movw	r22, r18
    46e4:	42 e0       	ldi	r20, 0x02	; 2
    46e6:	50 e0       	ldi	r21, 0x00	; 0
    46e8:	9f 01       	movw	r18, r30
    46ea:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
    46ee:	89 85       	ldd	r24, Y+9	; 0x09
    46f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46f2:	9e 83       	std	Y+6, r25	; 0x06
    46f4:	8d 83       	std	Y+5, r24	; 0x05
			pxStreamBuffer->xTail = xOriginalTail;
    46f6:	ef 81       	ldd	r30, Y+7	; 0x07
    46f8:	f8 85       	ldd	r31, Y+8	; 0x08
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	9a 81       	ldd	r25, Y+2	; 0x02
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	80 83       	st	Z, r24
    4702:	05 c0       	rjmp	.+10     	; 0x470e <xStreamBufferNextMessageLengthBytes+0x8e>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
    4704:	1e 82       	std	Y+6, r1	; 0x06
    4706:	1d 82       	std	Y+5, r1	; 0x05
    4708:	02 c0       	rjmp	.+4      	; 0x470e <xStreamBufferNextMessageLengthBytes+0x8e>
		}
	}
	else
	{
		xReturn = 0;
    470a:	1e 82       	std	Y+6, r1	; 0x06
    470c:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    470e:	8d 81       	ldd	r24, Y+5	; 0x05
    4710:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4712:	2c 96       	adiw	r28, 0x0c	; 12
    4714:	0f b6       	in	r0, 0x3f	; 63
    4716:	f8 94       	cli
    4718:	de bf       	out	0x3e, r29	; 62
    471a:	0f be       	out	0x3f, r0	; 63
    471c:	cd bf       	out	0x3d, r28	; 61
    471e:	cf 91       	pop	r28
    4720:	df 91       	pop	r29
    4722:	08 95       	ret

00004724 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
    4724:	ef 92       	push	r14
    4726:	ff 92       	push	r15
    4728:	0f 93       	push	r16
    472a:	1f 93       	push	r17
    472c:	df 93       	push	r29
    472e:	cf 93       	push	r28
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    4734:	61 97       	sbiw	r28, 0x11	; 17
    4736:	0f b6       	in	r0, 0x3f	; 63
    4738:	f8 94       	cli
    473a:	de bf       	out	0x3e, r29	; 62
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	cd bf       	out	0x3d, r28	; 61
    4740:	9b 87       	std	Y+11, r25	; 0x0b
    4742:	8a 87       	std	Y+10, r24	; 0x0a
    4744:	7d 87       	std	Y+13, r23	; 0x0d
    4746:	6c 87       	std	Y+12, r22	; 0x0c
    4748:	5f 87       	std	Y+15, r21	; 0x0f
    474a:	4e 87       	std	Y+14, r20	; 0x0e
    474c:	39 8b       	std	Y+17, r19	; 0x11
    474e:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4750:	8a 85       	ldd	r24, Y+10	; 0x0a
    4752:	9b 85       	ldd	r25, Y+11	; 0x0b
    4754:	99 87       	std	Y+9, r25	; 0x09
    4756:	88 87       	std	Y+8, r24	; 0x08
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    4758:	1f 82       	std	Y+7, r1	; 0x07
    475a:	1e 82       	std	Y+6, r1	; 0x06
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    475c:	e8 85       	ldd	r30, Y+8	; 0x08
    475e:	f9 85       	ldd	r31, Y+9	; 0x09
    4760:	86 85       	ldd	r24, Z+14	; 0x0e
    4762:	88 2f       	mov	r24, r24
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	81 70       	andi	r24, 0x01	; 1
    4768:	90 70       	andi	r25, 0x00	; 0
    476a:	88 23       	and	r24, r24
    476c:	29 f0       	breq	.+10     	; 0x4778 <xStreamBufferReceiveFromISR+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    476e:	82 e0       	ldi	r24, 0x02	; 2
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	9b 83       	std	Y+3, r25	; 0x03
    4774:	8a 83       	std	Y+2, r24	; 0x02
    4776:	02 c0       	rjmp	.+4      	; 0x477c <xStreamBufferReceiveFromISR+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    4778:	1b 82       	std	Y+3, r1	; 0x03
    477a:	1a 82       	std	Y+2, r1	; 0x02
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    477c:	88 85       	ldd	r24, Y+8	; 0x08
    477e:	99 85       	ldd	r25, Y+9	; 0x09
    4780:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <prvBytesInBuffer>
    4784:	9d 83       	std	Y+5, r25	; 0x05
    4786:	8c 83       	std	Y+4, r24	; 0x04
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    4788:	2c 81       	ldd	r18, Y+4	; 0x04
    478a:	3d 81       	ldd	r19, Y+5	; 0x05
    478c:	8a 81       	ldd	r24, Y+2	; 0x02
    478e:	9b 81       	ldd	r25, Y+3	; 0x03
    4790:	82 17       	cp	r24, r18
    4792:	93 07       	cpc	r25, r19
    4794:	80 f5       	brcc	.+96     	; 0x47f6 <xStreamBufferReceiveFromISR+0xd2>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    4796:	88 85       	ldd	r24, Y+8	; 0x08
    4798:	99 85       	ldd	r25, Y+9	; 0x09
    479a:	2c 85       	ldd	r18, Y+12	; 0x0c
    479c:	3d 85       	ldd	r19, Y+13	; 0x0d
    479e:	4e 85       	ldd	r20, Y+14	; 0x0e
    47a0:	5f 85       	ldd	r21, Y+15	; 0x0f
    47a2:	ec 81       	ldd	r30, Y+4	; 0x04
    47a4:	fd 81       	ldd	r31, Y+5	; 0x05
    47a6:	aa 81       	ldd	r26, Y+2	; 0x02
    47a8:	bb 81       	ldd	r27, Y+3	; 0x03
    47aa:	b9 01       	movw	r22, r18
    47ac:	9f 01       	movw	r18, r30
    47ae:	8d 01       	movw	r16, r26
    47b0:	0e 94 0a 24 	call	0x4814	; 0x4814 <prvReadMessageFromBuffer>
    47b4:	9f 83       	std	Y+7, r25	; 0x07
    47b6:	8e 83       	std	Y+6, r24	; 0x06

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    47b8:	8e 81       	ldd	r24, Y+6	; 0x06
    47ba:	9f 81       	ldd	r25, Y+7	; 0x07
    47bc:	00 97       	sbiw	r24, 0x00	; 0
    47be:	d9 f0       	breq	.+54     	; 0x47f6 <xStreamBufferReceiveFromISR+0xd2>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    47c0:	19 82       	std	Y+1, r1	; 0x01
    47c2:	e8 85       	ldd	r30, Y+8	; 0x08
    47c4:	f9 85       	ldd	r31, Y+9	; 0x09
    47c6:	82 85       	ldd	r24, Z+10	; 0x0a
    47c8:	93 85       	ldd	r25, Z+11	; 0x0b
    47ca:	00 97       	sbiw	r24, 0x00	; 0
    47cc:	a1 f0       	breq	.+40     	; 0x47f6 <xStreamBufferReceiveFromISR+0xd2>
    47ce:	e8 85       	ldd	r30, Y+8	; 0x08
    47d0:	f9 85       	ldd	r31, Y+9	; 0x09
    47d2:	82 85       	ldd	r24, Z+10	; 0x0a
    47d4:	93 85       	ldd	r25, Z+11	; 0x0b
    47d6:	e8 89       	ldd	r30, Y+16	; 0x10
    47d8:	f9 89       	ldd	r31, Y+17	; 0x11
    47da:	40 e0       	ldi	r20, 0x00	; 0
    47dc:	50 e0       	ldi	r21, 0x00	; 0
    47de:	60 e0       	ldi	r22, 0x00	; 0
    47e0:	70 e0       	ldi	r23, 0x00	; 0
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	00 e0       	ldi	r16, 0x00	; 0
    47e6:	10 e0       	ldi	r17, 0x00	; 0
    47e8:	7f 01       	movw	r14, r30
    47ea:	0e 94 68 32 	call	0x64d0	; 0x64d0 <xTaskGenericNotifyFromISR>
    47ee:	e8 85       	ldd	r30, Y+8	; 0x08
    47f0:	f9 85       	ldd	r31, Y+9	; 0x09
    47f2:	13 86       	std	Z+11, r1	; 0x0b
    47f4:	12 86       	std	Z+10, r1	; 0x0a
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
    47f6:	8e 81       	ldd	r24, Y+6	; 0x06
    47f8:	9f 81       	ldd	r25, Y+7	; 0x07
}
    47fa:	61 96       	adiw	r28, 0x11	; 17
    47fc:	0f b6       	in	r0, 0x3f	; 63
    47fe:	f8 94       	cli
    4800:	de bf       	out	0x3e, r29	; 62
    4802:	0f be       	out	0x3f, r0	; 63
    4804:	cd bf       	out	0x3d, r28	; 61
    4806:	cf 91       	pop	r28
    4808:	df 91       	pop	r29
    480a:	1f 91       	pop	r17
    480c:	0f 91       	pop	r16
    480e:	ff 90       	pop	r15
    4810:	ef 90       	pop	r14
    4812:	08 95       	ret

00004814 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
    4814:	0f 93       	push	r16
    4816:	1f 93       	push	r17
    4818:	df 93       	push	r29
    481a:	cf 93       	push	r28
    481c:	cd b7       	in	r28, 0x3d	; 61
    481e:	de b7       	in	r29, 0x3e	; 62
    4820:	62 97       	sbiw	r28, 0x12	; 18
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	9a 87       	std	Y+10, r25	; 0x0a
    482e:	89 87       	std	Y+9, r24	; 0x09
    4830:	7c 87       	std	Y+12, r23	; 0x0c
    4832:	6b 87       	std	Y+11, r22	; 0x0b
    4834:	5e 87       	std	Y+14, r21	; 0x0e
    4836:	4d 87       	std	Y+13, r20	; 0x0d
    4838:	38 8b       	std	Y+16, r19	; 0x10
    483a:	2f 87       	std	Y+15, r18	; 0x0f
    483c:	1a 8b       	std	Y+18, r17	; 0x12
    483e:	09 8b       	std	Y+17, r16	; 0x11
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
    4840:	89 89       	ldd	r24, Y+17	; 0x11
    4842:	9a 89       	ldd	r25, Y+18	; 0x12
    4844:	00 97       	sbiw	r24, 0x00	; 0
    4846:	91 f1       	breq	.+100    	; 0x48ac <prvReadMessageFromBuffer+0x98>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
    4848:	e9 85       	ldd	r30, Y+9	; 0x09
    484a:	fa 85       	ldd	r31, Y+10	; 0x0a
    484c:	80 81       	ld	r24, Z
    484e:	91 81       	ldd	r25, Z+1	; 0x01
    4850:	9e 83       	std	Y+6, r25	; 0x06
    4852:	8d 83       	std	Y+5, r24	; 0x05
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    4854:	ae 01       	movw	r20, r28
    4856:	49 5f       	subi	r20, 0xF9	; 249
    4858:	5f 4f       	sbci	r21, 0xFF	; 255
    485a:	89 85       	ldd	r24, Y+9	; 0x09
    485c:	9a 85       	ldd	r25, Y+10	; 0x0a
    485e:	29 89       	ldd	r18, Y+17	; 0x11
    4860:	3a 89       	ldd	r19, Y+18	; 0x12
    4862:	ef 85       	ldd	r30, Y+15	; 0x0f
    4864:	f8 89       	ldd	r31, Y+16	; 0x10
    4866:	ba 01       	movw	r22, r20
    4868:	a9 01       	movw	r20, r18
    486a:	9f 01       	movw	r18, r30
    486c:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
    4870:	8f 81       	ldd	r24, Y+7	; 0x07
    4872:	98 85       	ldd	r25, Y+8	; 0x08
    4874:	9a 83       	std	Y+2, r25	; 0x02
    4876:	89 83       	std	Y+1, r24	; 0x01

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
    4878:	2f 85       	ldd	r18, Y+15	; 0x0f
    487a:	38 89       	ldd	r19, Y+16	; 0x10
    487c:	89 89       	ldd	r24, Y+17	; 0x11
    487e:	9a 89       	ldd	r25, Y+18	; 0x12
    4880:	a9 01       	movw	r20, r18
    4882:	48 1b       	sub	r20, r24
    4884:	59 0b       	sbc	r21, r25
    4886:	ca 01       	movw	r24, r20
    4888:	98 8b       	std	Y+16, r25	; 0x10
    488a:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
    488c:	29 81       	ldd	r18, Y+1	; 0x01
    488e:	3a 81       	ldd	r19, Y+2	; 0x02
    4890:	8d 85       	ldd	r24, Y+13	; 0x0d
    4892:	9e 85       	ldd	r25, Y+14	; 0x0e
    4894:	82 17       	cp	r24, r18
    4896:	93 07       	cpc	r25, r19
    4898:	68 f4       	brcc	.+26     	; 0x48b4 <prvReadMessageFromBuffer+0xa0>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
    489a:	e9 85       	ldd	r30, Y+9	; 0x09
    489c:	fa 85       	ldd	r31, Y+10	; 0x0a
    489e:	8d 81       	ldd	r24, Y+5	; 0x05
    48a0:	9e 81       	ldd	r25, Y+6	; 0x06
    48a2:	91 83       	std	Z+1, r25	; 0x01
    48a4:	80 83       	st	Z, r24
			xNextMessageLength = 0;
    48a6:	1a 82       	std	Y+2, r1	; 0x02
    48a8:	19 82       	std	Y+1, r1	; 0x01
    48aa:	04 c0       	rjmp	.+8      	; 0x48b4 <prvReadMessageFromBuffer+0xa0>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
    48ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    48b0:	9a 83       	std	Y+2, r25	; 0x02
    48b2:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    48b4:	4b 85       	ldd	r20, Y+11	; 0x0b
    48b6:	5c 85       	ldd	r21, Y+12	; 0x0c
    48b8:	89 85       	ldd	r24, Y+9	; 0x09
    48ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    48bc:	29 81       	ldd	r18, Y+1	; 0x01
    48be:	3a 81       	ldd	r19, Y+2	; 0x02
    48c0:	ef 85       	ldd	r30, Y+15	; 0x0f
    48c2:	f8 89       	ldd	r31, Y+16	; 0x10
    48c4:	ba 01       	movw	r22, r20
    48c6:	a9 01       	movw	r20, r18
    48c8:	9f 01       	movw	r18, r30
    48ca:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <prvReadBytesFromBuffer>
    48ce:	9c 83       	std	Y+4, r25	; 0x04
    48d0:	8b 83       	std	Y+3, r24	; 0x03

	return xReceivedLength;
    48d2:	8b 81       	ldd	r24, Y+3	; 0x03
    48d4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    48d6:	62 96       	adiw	r28, 0x12	; 18
    48d8:	0f b6       	in	r0, 0x3f	; 63
    48da:	f8 94       	cli
    48dc:	de bf       	out	0x3e, r29	; 62
    48de:	0f be       	out	0x3f, r0	; 63
    48e0:	cd bf       	out	0x3d, r28	; 61
    48e2:	cf 91       	pop	r28
    48e4:	df 91       	pop	r29
    48e6:	1f 91       	pop	r17
    48e8:	0f 91       	pop	r16
    48ea:	08 95       	ret

000048ec <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
    48ec:	df 93       	push	r29
    48ee:	cf 93       	push	r28
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
    48f4:	27 97       	sbiw	r28, 0x07	; 7
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	9f 83       	std	Y+7, r25	; 0x07
    4902:	8e 83       	std	Y+6, r24	; 0x06
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4904:	8e 81       	ldd	r24, Y+6	; 0x06
    4906:	9f 81       	ldd	r25, Y+7	; 0x07
    4908:	9d 83       	std	Y+5, r25	; 0x05
    490a:	8c 83       	std	Y+4, r24	; 0x04
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
    490c:	ec 81       	ldd	r30, Y+4	; 0x04
    490e:	fd 81       	ldd	r31, Y+5	; 0x05
    4910:	80 81       	ld	r24, Z
    4912:	91 81       	ldd	r25, Z+1	; 0x01
    4914:	9a 83       	std	Y+2, r25	; 0x02
    4916:	89 83       	std	Y+1, r24	; 0x01
	if( pxStreamBuffer->xHead == xTail )
    4918:	ec 81       	ldd	r30, Y+4	; 0x04
    491a:	fd 81       	ldd	r31, Y+5	; 0x05
    491c:	22 81       	ldd	r18, Z+2	; 0x02
    491e:	33 81       	ldd	r19, Z+3	; 0x03
    4920:	89 81       	ldd	r24, Y+1	; 0x01
    4922:	9a 81       	ldd	r25, Y+2	; 0x02
    4924:	28 17       	cp	r18, r24
    4926:	39 07       	cpc	r19, r25
    4928:	19 f4       	brne	.+6      	; 0x4930 <xStreamBufferIsEmpty+0x44>
	{
		xReturn = pdTRUE;
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	8b 83       	std	Y+3, r24	; 0x03
    492e:	01 c0       	rjmp	.+2      	; 0x4932 <xStreamBufferIsEmpty+0x46>
	}
	else
	{
		xReturn = pdFALSE;
    4930:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    4932:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4934:	27 96       	adiw	r28, 0x07	; 7
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	f8 94       	cli
    493a:	de bf       	out	0x3e, r29	; 62
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	cd bf       	out	0x3d, r28	; 61
    4940:	cf 91       	pop	r28
    4942:	df 91       	pop	r29
    4944:	08 95       	ret

00004946 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    4946:	df 93       	push	r29
    4948:	cf 93       	push	r28
    494a:	cd b7       	in	r28, 0x3d	; 61
    494c:	de b7       	in	r29, 0x3e	; 62
    494e:	27 97       	sbiw	r28, 0x07	; 7
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	f8 94       	cli
    4954:	de bf       	out	0x3e, r29	; 62
    4956:	0f be       	out	0x3f, r0	; 63
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	9f 83       	std	Y+7, r25	; 0x07
    495c:	8e 83       	std	Y+6, r24	; 0x06
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    495e:	8e 81       	ldd	r24, Y+6	; 0x06
    4960:	9f 81       	ldd	r25, Y+7	; 0x07
    4962:	9a 83       	std	Y+2, r25	; 0x02
    4964:	89 83       	std	Y+1, r24	; 0x01

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    4966:	e9 81       	ldd	r30, Y+1	; 0x01
    4968:	fa 81       	ldd	r31, Y+2	; 0x02
    496a:	86 85       	ldd	r24, Z+14	; 0x0e
    496c:	88 2f       	mov	r24, r24
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	81 70       	andi	r24, 0x01	; 1
    4972:	90 70       	andi	r25, 0x00	; 0
    4974:	88 23       	and	r24, r24
    4976:	29 f0       	breq	.+10     	; 0x4982 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    4978:	82 e0       	ldi	r24, 0x02	; 2
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	9c 83       	std	Y+4, r25	; 0x04
    497e:	8b 83       	std	Y+3, r24	; 0x03
    4980:	02 c0       	rjmp	.+4      	; 0x4986 <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    4982:	1c 82       	std	Y+4, r1	; 0x04
    4984:	1b 82       	std	Y+3, r1	; 0x03
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    4986:	8e 81       	ldd	r24, Y+6	; 0x06
    4988:	9f 81       	ldd	r25, Y+7	; 0x07
    498a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <xStreamBufferSpacesAvailable>
    498e:	9c 01       	movw	r18, r24
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	9c 81       	ldd	r25, Y+4	; 0x04
    4994:	82 17       	cp	r24, r18
    4996:	93 07       	cpc	r25, r19
    4998:	18 f0       	brcs	.+6      	; 0x49a0 <xStreamBufferIsFull+0x5a>
	{
		xReturn = pdTRUE;
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	8d 83       	std	Y+5, r24	; 0x05
    499e:	01 c0       	rjmp	.+2      	; 0x49a2 <xStreamBufferIsFull+0x5c>
	}
	else
	{
		xReturn = pdFALSE;
    49a0:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    49a2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    49a4:	27 96       	adiw	r28, 0x07	; 7
    49a6:	0f b6       	in	r0, 0x3f	; 63
    49a8:	f8 94       	cli
    49aa:	de bf       	out	0x3e, r29	; 62
    49ac:	0f be       	out	0x3f, r0	; 63
    49ae:	cd bf       	out	0x3d, r28	; 61
    49b0:	cf 91       	pop	r28
    49b2:	df 91       	pop	r29
    49b4:	08 95       	ret

000049b6 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    49b6:	ef 92       	push	r14
    49b8:	ff 92       	push	r15
    49ba:	0f 93       	push	r16
    49bc:	1f 93       	push	r17
    49be:	df 93       	push	r29
    49c0:	cf 93       	push	r28
    49c2:	cd b7       	in	r28, 0x3d	; 61
    49c4:	de b7       	in	r29, 0x3e	; 62
    49c6:	28 97       	sbiw	r28, 0x08	; 8
    49c8:	0f b6       	in	r0, 0x3f	; 63
    49ca:	f8 94       	cli
    49cc:	de bf       	out	0x3e, r29	; 62
    49ce:	0f be       	out	0x3f, r0	; 63
    49d0:	cd bf       	out	0x3d, r28	; 61
    49d2:	9e 83       	std	Y+6, r25	; 0x06
    49d4:	8d 83       	std	Y+5, r24	; 0x05
    49d6:	78 87       	std	Y+8, r23	; 0x08
    49d8:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    49da:	8d 81       	ldd	r24, Y+5	; 0x05
    49dc:	9e 81       	ldd	r25, Y+6	; 0x06
    49de:	9c 83       	std	Y+4, r25	; 0x04
    49e0:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    49e2:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    49e4:	eb 81       	ldd	r30, Y+3	; 0x03
    49e6:	fc 81       	ldd	r31, Y+4	; 0x04
    49e8:	80 85       	ldd	r24, Z+8	; 0x08
    49ea:	91 85       	ldd	r25, Z+9	; 0x09
    49ec:	00 97       	sbiw	r24, 0x00	; 0
    49ee:	b9 f0       	breq	.+46     	; 0x4a1e <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    49f0:	eb 81       	ldd	r30, Y+3	; 0x03
    49f2:	fc 81       	ldd	r31, Y+4	; 0x04
    49f4:	80 85       	ldd	r24, Z+8	; 0x08
    49f6:	91 85       	ldd	r25, Z+9	; 0x09
    49f8:	ef 81       	ldd	r30, Y+7	; 0x07
    49fa:	f8 85       	ldd	r31, Y+8	; 0x08
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	50 e0       	ldi	r21, 0x00	; 0
    4a00:	60 e0       	ldi	r22, 0x00	; 0
    4a02:	70 e0       	ldi	r23, 0x00	; 0
    4a04:	20 e0       	ldi	r18, 0x00	; 0
    4a06:	00 e0       	ldi	r16, 0x00	; 0
    4a08:	10 e0       	ldi	r17, 0x00	; 0
    4a0a:	7f 01       	movw	r14, r30
    4a0c:	0e 94 68 32 	call	0x64d0	; 0x64d0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    4a10:	eb 81       	ldd	r30, Y+3	; 0x03
    4a12:	fc 81       	ldd	r31, Y+4	; 0x04
    4a14:	11 86       	std	Z+9, r1	; 0x09
    4a16:	10 86       	std	Z+8, r1	; 0x08
			xReturn = pdTRUE;
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	8a 83       	std	Y+2, r24	; 0x02
    4a1c:	01 c0       	rjmp	.+2      	; 0x4a20 <xStreamBufferSendCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    4a1e:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4a20:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a22:	28 96       	adiw	r28, 0x08	; 8
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	f8 94       	cli
    4a28:	de bf       	out	0x3e, r29	; 62
    4a2a:	0f be       	out	0x3f, r0	; 63
    4a2c:	cd bf       	out	0x3d, r28	; 61
    4a2e:	cf 91       	pop	r28
    4a30:	df 91       	pop	r29
    4a32:	1f 91       	pop	r17
    4a34:	0f 91       	pop	r16
    4a36:	ff 90       	pop	r15
    4a38:	ef 90       	pop	r14
    4a3a:	08 95       	ret

00004a3c <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    4a3c:	ef 92       	push	r14
    4a3e:	ff 92       	push	r15
    4a40:	0f 93       	push	r16
    4a42:	1f 93       	push	r17
    4a44:	df 93       	push	r29
    4a46:	cf 93       	push	r28
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	28 97       	sbiw	r28, 0x08	; 8
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	f8 94       	cli
    4a52:	de bf       	out	0x3e, r29	; 62
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	cd bf       	out	0x3d, r28	; 61
    4a58:	9e 83       	std	Y+6, r25	; 0x06
    4a5a:	8d 83       	std	Y+5, r24	; 0x05
    4a5c:	78 87       	std	Y+8, r23	; 0x08
    4a5e:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4a60:	8d 81       	ldd	r24, Y+5	; 0x05
    4a62:	9e 81       	ldd	r25, Y+6	; 0x06
    4a64:	9c 83       	std	Y+4, r25	; 0x04
    4a66:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    4a68:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    4a6a:	eb 81       	ldd	r30, Y+3	; 0x03
    4a6c:	fc 81       	ldd	r31, Y+4	; 0x04
    4a6e:	82 85       	ldd	r24, Z+10	; 0x0a
    4a70:	93 85       	ldd	r25, Z+11	; 0x0b
    4a72:	00 97       	sbiw	r24, 0x00	; 0
    4a74:	b9 f0       	breq	.+46     	; 0x4aa4 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    4a76:	eb 81       	ldd	r30, Y+3	; 0x03
    4a78:	fc 81       	ldd	r31, Y+4	; 0x04
    4a7a:	82 85       	ldd	r24, Z+10	; 0x0a
    4a7c:	93 85       	ldd	r25, Z+11	; 0x0b
    4a7e:	ef 81       	ldd	r30, Y+7	; 0x07
    4a80:	f8 85       	ldd	r31, Y+8	; 0x08
    4a82:	40 e0       	ldi	r20, 0x00	; 0
    4a84:	50 e0       	ldi	r21, 0x00	; 0
    4a86:	60 e0       	ldi	r22, 0x00	; 0
    4a88:	70 e0       	ldi	r23, 0x00	; 0
    4a8a:	20 e0       	ldi	r18, 0x00	; 0
    4a8c:	00 e0       	ldi	r16, 0x00	; 0
    4a8e:	10 e0       	ldi	r17, 0x00	; 0
    4a90:	7f 01       	movw	r14, r30
    4a92:	0e 94 68 32 	call	0x64d0	; 0x64d0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    4a96:	eb 81       	ldd	r30, Y+3	; 0x03
    4a98:	fc 81       	ldd	r31, Y+4	; 0x04
    4a9a:	13 86       	std	Z+11, r1	; 0x0b
    4a9c:	12 86       	std	Z+10, r1	; 0x0a
			xReturn = pdTRUE;
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	8a 83       	std	Y+2, r24	; 0x02
    4aa2:	01 c0       	rjmp	.+2      	; 0x4aa6 <xStreamBufferReceiveCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    4aa4:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4aa6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4aa8:	28 96       	adiw	r28, 0x08	; 8
    4aaa:	0f b6       	in	r0, 0x3f	; 63
    4aac:	f8 94       	cli
    4aae:	de bf       	out	0x3e, r29	; 62
    4ab0:	0f be       	out	0x3f, r0	; 63
    4ab2:	cd bf       	out	0x3d, r28	; 61
    4ab4:	cf 91       	pop	r28
    4ab6:	df 91       	pop	r29
    4ab8:	1f 91       	pop	r17
    4aba:	0f 91       	pop	r16
    4abc:	ff 90       	pop	r15
    4abe:	ef 90       	pop	r14
    4ac0:	08 95       	ret

00004ac2 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    4ac2:	df 93       	push	r29
    4ac4:	cf 93       	push	r28
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	2e 97       	sbiw	r28, 0x0e	; 14
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	9e 83       	std	Y+6, r25	; 0x06
    4ad8:	8d 83       	std	Y+5, r24	; 0x05
    4ada:	78 87       	std	Y+8, r23	; 0x08
    4adc:	6f 83       	std	Y+7, r22	; 0x07
    4ade:	5a 87       	std	Y+10, r21	; 0x0a
    4ae0:	49 87       	std	Y+9, r20	; 0x09
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
    4ae2:	ed 81       	ldd	r30, Y+5	; 0x05
    4ae4:	fe 81       	ldd	r31, Y+6	; 0x06
    4ae6:	82 81       	ldd	r24, Z+2	; 0x02
    4ae8:	93 81       	ldd	r25, Z+3	; 0x03
    4aea:	9c 83       	std	Y+4, r25	; 0x04
    4aec:	8b 83       	std	Y+3, r24	; 0x03

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    4aee:	ed 81       	ldd	r30, Y+5	; 0x05
    4af0:	fe 81       	ldd	r31, Y+6	; 0x06
    4af2:	24 81       	ldd	r18, Z+4	; 0x04
    4af4:	35 81       	ldd	r19, Z+5	; 0x05
    4af6:	8b 81       	ldd	r24, Y+3	; 0x03
    4af8:	9c 81       	ldd	r25, Y+4	; 0x04
    4afa:	a9 01       	movw	r20, r18
    4afc:	48 1b       	sub	r20, r24
    4afe:	59 0b       	sbc	r21, r25
    4b00:	ca 01       	movw	r24, r20
    4b02:	29 85       	ldd	r18, Y+9	; 0x09
    4b04:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b06:	3e 87       	std	Y+14, r19	; 0x0e
    4b08:	2d 87       	std	Y+13, r18	; 0x0d
    4b0a:	9c 87       	std	Y+12, r25	; 0x0c
    4b0c:	8b 87       	std	Y+11, r24	; 0x0b
    4b0e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b10:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b16:	84 17       	cp	r24, r20
    4b18:	95 07       	cpc	r25, r21
    4b1a:	20 f4       	brcc	.+8      	; 0x4b24 <prvWriteBytesToBuffer+0x62>
    4b1c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b1e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b20:	3c 87       	std	Y+12, r19	; 0x0c
    4b22:	2b 87       	std	Y+11, r18	; 0x0b
    4b24:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b26:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b28:	5a 83       	std	Y+2, r21	; 0x02
    4b2a:	49 83       	std	Y+1, r20	; 0x01

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4b2c:	ed 81       	ldd	r30, Y+5	; 0x05
    4b2e:	fe 81       	ldd	r31, Y+6	; 0x06
    4b30:	24 85       	ldd	r18, Z+12	; 0x0c
    4b32:	35 85       	ldd	r19, Z+13	; 0x0d
    4b34:	8b 81       	ldd	r24, Y+3	; 0x03
    4b36:	9c 81       	ldd	r25, Y+4	; 0x04
    4b38:	82 0f       	add	r24, r18
    4b3a:	93 1f       	adc	r25, r19
    4b3c:	2f 81       	ldd	r18, Y+7	; 0x07
    4b3e:	38 85       	ldd	r19, Y+8	; 0x08
    4b40:	49 81       	ldd	r20, Y+1	; 0x01
    4b42:	5a 81       	ldd	r21, Y+2	; 0x02
    4b44:	b9 01       	movw	r22, r18
    4b46:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
    4b4a:	29 85       	ldd	r18, Y+9	; 0x09
    4b4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b4e:	89 81       	ldd	r24, Y+1	; 0x01
    4b50:	9a 81       	ldd	r25, Y+2	; 0x02
    4b52:	82 17       	cp	r24, r18
    4b54:	93 07       	cpc	r25, r19
    4b56:	b0 f4       	brcc	.+44     	; 0x4b84 <prvWriteBytesToBuffer+0xc2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4b58:	ed 81       	ldd	r30, Y+5	; 0x05
    4b5a:	fe 81       	ldd	r31, Y+6	; 0x06
    4b5c:	64 85       	ldd	r22, Z+12	; 0x0c
    4b5e:	75 85       	ldd	r23, Z+13	; 0x0d
    4b60:	2f 81       	ldd	r18, Y+7	; 0x07
    4b62:	38 85       	ldd	r19, Y+8	; 0x08
    4b64:	89 81       	ldd	r24, Y+1	; 0x01
    4b66:	9a 81       	ldd	r25, Y+2	; 0x02
    4b68:	a9 01       	movw	r20, r18
    4b6a:	48 0f       	add	r20, r24
    4b6c:	59 1f       	adc	r21, r25
    4b6e:	29 85       	ldd	r18, Y+9	; 0x09
    4b70:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b72:	89 81       	ldd	r24, Y+1	; 0x01
    4b74:	9a 81       	ldd	r25, Y+2	; 0x02
    4b76:	28 1b       	sub	r18, r24
    4b78:	39 0b       	sbc	r19, r25
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	ba 01       	movw	r22, r20
    4b7e:	a9 01       	movw	r20, r18
    4b80:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
    4b84:	2b 81       	ldd	r18, Y+3	; 0x03
    4b86:	3c 81       	ldd	r19, Y+4	; 0x04
    4b88:	89 85       	ldd	r24, Y+9	; 0x09
    4b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b8c:	82 0f       	add	r24, r18
    4b8e:	93 1f       	adc	r25, r19
    4b90:	9c 83       	std	Y+4, r25	; 0x04
    4b92:	8b 83       	std	Y+3, r24	; 0x03
	if( xNextHead >= pxStreamBuffer->xLength )
    4b94:	ed 81       	ldd	r30, Y+5	; 0x05
    4b96:	fe 81       	ldd	r31, Y+6	; 0x06
    4b98:	24 81       	ldd	r18, Z+4	; 0x04
    4b9a:	35 81       	ldd	r19, Z+5	; 0x05
    4b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba0:	82 17       	cp	r24, r18
    4ba2:	93 07       	cpc	r25, r19
    4ba4:	50 f0       	brcs	.+20     	; 0x4bba <prvWriteBytesToBuffer+0xf8>
	{
		xNextHead -= pxStreamBuffer->xLength;
    4ba6:	ed 81       	ldd	r30, Y+5	; 0x05
    4ba8:	fe 81       	ldd	r31, Y+6	; 0x06
    4baa:	24 81       	ldd	r18, Z+4	; 0x04
    4bac:	35 81       	ldd	r19, Z+5	; 0x05
    4bae:	8b 81       	ldd	r24, Y+3	; 0x03
    4bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb2:	82 1b       	sub	r24, r18
    4bb4:	93 0b       	sbc	r25, r19
    4bb6:	9c 83       	std	Y+4, r25	; 0x04
    4bb8:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
    4bba:	ed 81       	ldd	r30, Y+5	; 0x05
    4bbc:	fe 81       	ldd	r31, Y+6	; 0x06
    4bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc2:	93 83       	std	Z+3, r25	; 0x03
    4bc4:	82 83       	std	Z+2, r24	; 0x02

	return xCount;
    4bc6:	89 85       	ldd	r24, Y+9	; 0x09
    4bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    4bca:	2e 96       	adiw	r28, 0x0e	; 14
    4bcc:	0f b6       	in	r0, 0x3f	; 63
    4bce:	f8 94       	cli
    4bd0:	de bf       	out	0x3e, r29	; 62
    4bd2:	0f be       	out	0x3f, r0	; 63
    4bd4:	cd bf       	out	0x3d, r28	; 61
    4bd6:	cf 91       	pop	r28
    4bd8:	df 91       	pop	r29
    4bda:	08 95       	ret

00004bdc <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    4bdc:	df 93       	push	r29
    4bde:	cf 93       	push	r28
    4be0:	cd b7       	in	r28, 0x3d	; 61
    4be2:	de b7       	in	r29, 0x3e	; 62
    4be4:	66 97       	sbiw	r28, 0x16	; 22
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	f8 94       	cli
    4bea:	de bf       	out	0x3e, r29	; 62
    4bec:	0f be       	out	0x3f, r0	; 63
    4bee:	cd bf       	out	0x3d, r28	; 61
    4bf0:	98 87       	std	Y+8, r25	; 0x08
    4bf2:	8f 83       	std	Y+7, r24	; 0x07
    4bf4:	7a 87       	std	Y+10, r23	; 0x0a
    4bf6:	69 87       	std	Y+9, r22	; 0x09
    4bf8:	5c 87       	std	Y+12, r21	; 0x0c
    4bfa:	4b 87       	std	Y+11, r20	; 0x0b
    4bfc:	3e 87       	std	Y+14, r19	; 0x0e
    4bfe:	2d 87       	std	Y+13, r18	; 0x0d
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
    4c00:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c02:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c04:	3a 8b       	std	Y+18, r19	; 0x12
    4c06:	29 8b       	std	Y+17, r18	; 0x11
    4c08:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c0a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c0c:	58 8b       	std	Y+16, r21	; 0x10
    4c0e:	4f 87       	std	Y+15, r20	; 0x0f
    4c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c12:	98 89       	ldd	r25, Y+16	; 0x10
    4c14:	29 89       	ldd	r18, Y+17	; 0x11
    4c16:	3a 89       	ldd	r19, Y+18	; 0x12
    4c18:	28 17       	cp	r18, r24
    4c1a:	39 07       	cpc	r19, r25
    4c1c:	20 f4       	brcc	.+8      	; 0x4c26 <prvReadBytesFromBuffer+0x4a>
    4c1e:	49 89       	ldd	r20, Y+17	; 0x11
    4c20:	5a 89       	ldd	r21, Y+18	; 0x12
    4c22:	58 8b       	std	Y+16, r21	; 0x10
    4c24:	4f 87       	std	Y+15, r20	; 0x0f
    4c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c28:	98 89       	ldd	r25, Y+16	; 0x10
    4c2a:	9e 83       	std	Y+6, r25	; 0x06
    4c2c:	8d 83       	std	Y+5, r24	; 0x05

	if( xCount > ( size_t ) 0 )
    4c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c30:	9e 81       	ldd	r25, Y+6	; 0x06
    4c32:	00 97       	sbiw	r24, 0x00	; 0
    4c34:	09 f4       	brne	.+2      	; 0x4c38 <prvReadBytesFromBuffer+0x5c>
    4c36:	74 c0       	rjmp	.+232    	; 0x4d20 <prvReadBytesFromBuffer+0x144>
	{
		xNextTail = pxStreamBuffer->xTail;
    4c38:	ef 81       	ldd	r30, Y+7	; 0x07
    4c3a:	f8 85       	ldd	r31, Y+8	; 0x08
    4c3c:	80 81       	ld	r24, Z
    4c3e:	91 81       	ldd	r25, Z+1	; 0x01
    4c40:	9a 83       	std	Y+2, r25	; 0x02
    4c42:	89 83       	std	Y+1, r24	; 0x01

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    4c44:	ef 81       	ldd	r30, Y+7	; 0x07
    4c46:	f8 85       	ldd	r31, Y+8	; 0x08
    4c48:	24 81       	ldd	r18, Z+4	; 0x04
    4c4a:	35 81       	ldd	r19, Z+5	; 0x05
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c50:	a9 01       	movw	r20, r18
    4c52:	48 1b       	sub	r20, r24
    4c54:	59 0b       	sbc	r21, r25
    4c56:	ca 01       	movw	r24, r20
    4c58:	2d 81       	ldd	r18, Y+5	; 0x05
    4c5a:	3e 81       	ldd	r19, Y+6	; 0x06
    4c5c:	3e 8b       	std	Y+22, r19	; 0x16
    4c5e:	2d 8b       	std	Y+21, r18	; 0x15
    4c60:	9c 8b       	std	Y+20, r25	; 0x14
    4c62:	8b 8b       	std	Y+19, r24	; 0x13
    4c64:	4b 89       	ldd	r20, Y+19	; 0x13
    4c66:	5c 89       	ldd	r21, Y+20	; 0x14
    4c68:	8d 89       	ldd	r24, Y+21	; 0x15
    4c6a:	9e 89       	ldd	r25, Y+22	; 0x16
    4c6c:	84 17       	cp	r24, r20
    4c6e:	95 07       	cpc	r25, r21
    4c70:	20 f4       	brcc	.+8      	; 0x4c7a <prvReadBytesFromBuffer+0x9e>
    4c72:	2d 89       	ldd	r18, Y+21	; 0x15
    4c74:	3e 89       	ldd	r19, Y+22	; 0x16
    4c76:	3c 8b       	std	Y+20, r19	; 0x14
    4c78:	2b 8b       	std	Y+19, r18	; 0x13
    4c7a:	4b 89       	ldd	r20, Y+19	; 0x13
    4c7c:	5c 89       	ldd	r21, Y+20	; 0x14
    4c7e:	5c 83       	std	Y+4, r21	; 0x04
    4c80:	4b 83       	std	Y+3, r20	; 0x03

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4c82:	ef 81       	ldd	r30, Y+7	; 0x07
    4c84:	f8 85       	ldd	r31, Y+8	; 0x08
    4c86:	24 85       	ldd	r18, Z+12	; 0x0c
    4c88:	35 85       	ldd	r19, Z+13	; 0x0d
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8e:	a9 01       	movw	r20, r18
    4c90:	48 0f       	add	r20, r24
    4c92:	59 1f       	adc	r21, r25
    4c94:	89 85       	ldd	r24, Y+9	; 0x09
    4c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c98:	2b 81       	ldd	r18, Y+3	; 0x03
    4c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    4c9c:	ba 01       	movw	r22, r20
    4c9e:	a9 01       	movw	r20, r18
    4ca0:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
    4ca4:	2d 81       	ldd	r18, Y+5	; 0x05
    4ca6:	3e 81       	ldd	r19, Y+6	; 0x06
    4ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    4caa:	9c 81       	ldd	r25, Y+4	; 0x04
    4cac:	82 17       	cp	r24, r18
    4cae:	93 07       	cpc	r25, r19
    4cb0:	b0 f4       	brcc	.+44     	; 0x4cde <prvReadBytesFromBuffer+0x102>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4cb2:	29 85       	ldd	r18, Y+9	; 0x09
    4cb4:	3a 85       	ldd	r19, Y+10	; 0x0a
    4cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    4cba:	b9 01       	movw	r22, r18
    4cbc:	68 0f       	add	r22, r24
    4cbe:	79 1f       	adc	r23, r25
    4cc0:	ef 81       	ldd	r30, Y+7	; 0x07
    4cc2:	f8 85       	ldd	r31, Y+8	; 0x08
    4cc4:	44 85       	ldd	r20, Z+12	; 0x0c
    4cc6:	55 85       	ldd	r21, Z+13	; 0x0d
    4cc8:	2d 81       	ldd	r18, Y+5	; 0x05
    4cca:	3e 81       	ldd	r19, Y+6	; 0x06
    4ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cce:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd0:	28 1b       	sub	r18, r24
    4cd2:	39 0b       	sbc	r19, r25
    4cd4:	cb 01       	movw	r24, r22
    4cd6:	ba 01       	movw	r22, r20
    4cd8:	a9 01       	movw	r20, r18
    4cda:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
    4cde:	29 81       	ldd	r18, Y+1	; 0x01
    4ce0:	3a 81       	ldd	r19, Y+2	; 0x02
    4ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce6:	82 0f       	add	r24, r18
    4ce8:	93 1f       	adc	r25, r19
    4cea:	9a 83       	std	Y+2, r25	; 0x02
    4cec:	89 83       	std	Y+1, r24	; 0x01

		if( xNextTail >= pxStreamBuffer->xLength )
    4cee:	ef 81       	ldd	r30, Y+7	; 0x07
    4cf0:	f8 85       	ldd	r31, Y+8	; 0x08
    4cf2:	24 81       	ldd	r18, Z+4	; 0x04
    4cf4:	35 81       	ldd	r19, Z+5	; 0x05
    4cf6:	89 81       	ldd	r24, Y+1	; 0x01
    4cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfa:	82 17       	cp	r24, r18
    4cfc:	93 07       	cpc	r25, r19
    4cfe:	50 f0       	brcs	.+20     	; 0x4d14 <prvReadBytesFromBuffer+0x138>
		{
			xNextTail -= pxStreamBuffer->xLength;
    4d00:	ef 81       	ldd	r30, Y+7	; 0x07
    4d02:	f8 85       	ldd	r31, Y+8	; 0x08
    4d04:	24 81       	ldd	r18, Z+4	; 0x04
    4d06:	35 81       	ldd	r19, Z+5	; 0x05
    4d08:	89 81       	ldd	r24, Y+1	; 0x01
    4d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d0c:	82 1b       	sub	r24, r18
    4d0e:	93 0b       	sbc	r25, r19
    4d10:	9a 83       	std	Y+2, r25	; 0x02
    4d12:	89 83       	std	Y+1, r24	; 0x01
		}

		pxStreamBuffer->xTail = xNextTail;
    4d14:	ef 81       	ldd	r30, Y+7	; 0x07
    4d16:	f8 85       	ldd	r31, Y+8	; 0x08
    4d18:	89 81       	ldd	r24, Y+1	; 0x01
    4d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d1c:	91 83       	std	Z+1, r25	; 0x01
    4d1e:	80 83       	st	Z, r24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    4d20:	8d 81       	ldd	r24, Y+5	; 0x05
    4d22:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4d24:	66 96       	adiw	r28, 0x16	; 22
    4d26:	0f b6       	in	r0, 0x3f	; 63
    4d28:	f8 94       	cli
    4d2a:	de bf       	out	0x3e, r29	; 62
    4d2c:	0f be       	out	0x3f, r0	; 63
    4d2e:	cd bf       	out	0x3d, r28	; 61
    4d30:	cf 91       	pop	r28
    4d32:	df 91       	pop	r29
    4d34:	08 95       	ret

00004d36 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    4d36:	df 93       	push	r29
    4d38:	cf 93       	push	r28
    4d3a:	00 d0       	rcall	.+0      	; 0x4d3c <prvBytesInBuffer+0x6>
    4d3c:	00 d0       	rcall	.+0      	; 0x4d3e <prvBytesInBuffer+0x8>
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
    4d42:	9c 83       	std	Y+4, r25	; 0x04
    4d44:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    4d46:	eb 81       	ldd	r30, Y+3	; 0x03
    4d48:	fc 81       	ldd	r31, Y+4	; 0x04
    4d4a:	24 81       	ldd	r18, Z+4	; 0x04
    4d4c:	35 81       	ldd	r19, Z+5	; 0x05
    4d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    4d50:	fc 81       	ldd	r31, Y+4	; 0x04
    4d52:	82 81       	ldd	r24, Z+2	; 0x02
    4d54:	93 81       	ldd	r25, Z+3	; 0x03
    4d56:	82 0f       	add	r24, r18
    4d58:	93 1f       	adc	r25, r19
    4d5a:	9a 83       	std	Y+2, r25	; 0x02
    4d5c:	89 83       	std	Y+1, r24	; 0x01
	xCount -= pxStreamBuffer->xTail;
    4d5e:	eb 81       	ldd	r30, Y+3	; 0x03
    4d60:	fc 81       	ldd	r31, Y+4	; 0x04
    4d62:	20 81       	ld	r18, Z
    4d64:	31 81       	ldd	r19, Z+1	; 0x01
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	9a 81       	ldd	r25, Y+2	; 0x02
    4d6a:	82 1b       	sub	r24, r18
    4d6c:	93 0b       	sbc	r25, r19
    4d6e:	9a 83       	std	Y+2, r25	; 0x02
    4d70:	89 83       	std	Y+1, r24	; 0x01
	if ( xCount >= pxStreamBuffer->xLength )
    4d72:	eb 81       	ldd	r30, Y+3	; 0x03
    4d74:	fc 81       	ldd	r31, Y+4	; 0x04
    4d76:	24 81       	ldd	r18, Z+4	; 0x04
    4d78:	35 81       	ldd	r19, Z+5	; 0x05
    4d7a:	89 81       	ldd	r24, Y+1	; 0x01
    4d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d7e:	82 17       	cp	r24, r18
    4d80:	93 07       	cpc	r25, r19
    4d82:	50 f0       	brcs	.+20     	; 0x4d98 <prvBytesInBuffer+0x62>
	{
		xCount -= pxStreamBuffer->xLength;
    4d84:	eb 81       	ldd	r30, Y+3	; 0x03
    4d86:	fc 81       	ldd	r31, Y+4	; 0x04
    4d88:	24 81       	ldd	r18, Z+4	; 0x04
    4d8a:	35 81       	ldd	r19, Z+5	; 0x05
    4d8c:	89 81       	ldd	r24, Y+1	; 0x01
    4d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d90:	82 1b       	sub	r24, r18
    4d92:	93 0b       	sbc	r25, r19
    4d94:	9a 83       	std	Y+2, r25	; 0x02
    4d96:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4d9c:	0f 90       	pop	r0
    4d9e:	0f 90       	pop	r0
    4da0:	0f 90       	pop	r0
    4da2:	0f 90       	pop	r0
    4da4:	cf 91       	pop	r28
    4da6:	df 91       	pop	r29
    4da8:	08 95       	ret

00004daa <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
    4daa:	0f 93       	push	r16
    4dac:	df 93       	push	r29
    4dae:	cf 93       	push	r28
    4db0:	cd b7       	in	r28, 0x3d	; 61
    4db2:	de b7       	in	r29, 0x3e	; 62
    4db4:	29 97       	sbiw	r28, 0x09	; 9
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	f8 94       	cli
    4dba:	de bf       	out	0x3e, r29	; 62
    4dbc:	0f be       	out	0x3f, r0	; 63
    4dbe:	cd bf       	out	0x3d, r28	; 61
    4dc0:	9a 83       	std	Y+2, r25	; 0x02
    4dc2:	89 83       	std	Y+1, r24	; 0x01
    4dc4:	7c 83       	std	Y+4, r23	; 0x04
    4dc6:	6b 83       	std	Y+3, r22	; 0x03
    4dc8:	5e 83       	std	Y+6, r21	; 0x06
    4dca:	4d 83       	std	Y+5, r20	; 0x05
    4dcc:	38 87       	std	Y+8, r19	; 0x08
    4dce:	2f 83       	std	Y+7, r18	; 0x07
    4dd0:	09 87       	std	Y+9, r16	; 0x09
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    4dd2:	89 81       	ldd	r24, Y+1	; 0x01
    4dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd6:	60 e0       	ldi	r22, 0x00	; 0
    4dd8:	70 e0       	ldi	r23, 0x00	; 0
    4dda:	4f e0       	ldi	r20, 0x0F	; 15
    4ddc:	50 e0       	ldi	r21, 0x00	; 0
    4dde:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    4de2:	e9 81       	ldd	r30, Y+1	; 0x01
    4de4:	fa 81       	ldd	r31, Y+2	; 0x02
    4de6:	8b 81       	ldd	r24, Y+3	; 0x03
    4de8:	9c 81       	ldd	r25, Y+4	; 0x04
    4dea:	95 87       	std	Z+13, r25	; 0x0d
    4dec:	84 87       	std	Z+12, r24	; 0x0c
	pxStreamBuffer->xLength = xBufferSizeBytes;
    4dee:	e9 81       	ldd	r30, Y+1	; 0x01
    4df0:	fa 81       	ldd	r31, Y+2	; 0x02
    4df2:	8d 81       	ldd	r24, Y+5	; 0x05
    4df4:	9e 81       	ldd	r25, Y+6	; 0x06
    4df6:	95 83       	std	Z+5, r25	; 0x05
    4df8:	84 83       	std	Z+4, r24	; 0x04
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    4dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    4dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    4dfe:	8f 81       	ldd	r24, Y+7	; 0x07
    4e00:	98 85       	ldd	r25, Y+8	; 0x08
    4e02:	97 83       	std	Z+7, r25	; 0x07
    4e04:	86 83       	std	Z+6, r24	; 0x06
	pxStreamBuffer->ucFlags = ucFlags;
    4e06:	e9 81       	ldd	r30, Y+1	; 0x01
    4e08:	fa 81       	ldd	r31, Y+2	; 0x02
    4e0a:	89 85       	ldd	r24, Y+9	; 0x09
    4e0c:	86 87       	std	Z+14, r24	; 0x0e
}
    4e0e:	29 96       	adiw	r28, 0x09	; 9
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	de bf       	out	0x3e, r29	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	cd bf       	out	0x3d, r28	; 61
    4e1a:	cf 91       	pop	r28
    4e1c:	df 91       	pop	r29
    4e1e:	0f 91       	pop	r16
    4e20:	08 95       	ret

00004e22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    4e22:	8f 92       	push	r8
    4e24:	9f 92       	push	r9
    4e26:	af 92       	push	r10
    4e28:	bf 92       	push	r11
    4e2a:	cf 92       	push	r12
    4e2c:	df 92       	push	r13
    4e2e:	ef 92       	push	r14
    4e30:	ff 92       	push	r15
    4e32:	0f 93       	push	r16
    4e34:	1f 93       	push	r17
    4e36:	df 93       	push	r29
    4e38:	cf 93       	push	r28
    4e3a:	cd b7       	in	r28, 0x3d	; 61
    4e3c:	de b7       	in	r29, 0x3e	; 62
    4e3e:	60 97       	sbiw	r28, 0x10	; 16
    4e40:	0f b6       	in	r0, 0x3f	; 63
    4e42:	f8 94       	cli
    4e44:	de bf       	out	0x3e, r29	; 62
    4e46:	0f be       	out	0x3f, r0	; 63
    4e48:	cd bf       	out	0x3d, r28	; 61
    4e4a:	9f 83       	std	Y+7, r25	; 0x07
    4e4c:	8e 83       	std	Y+6, r24	; 0x06
    4e4e:	79 87       	std	Y+9, r23	; 0x09
    4e50:	68 87       	std	Y+8, r22	; 0x08
    4e52:	5b 87       	std	Y+11, r21	; 0x0b
    4e54:	4a 87       	std	Y+10, r20	; 0x0a
    4e56:	3d 87       	std	Y+13, r19	; 0x0d
    4e58:	2c 87       	std	Y+12, r18	; 0x0c
    4e5a:	0e 87       	std	Y+14, r16	; 0x0e
    4e5c:	f8 8a       	std	Y+16, r15	; 0x10
    4e5e:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    4e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e64:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    4e68:	9a 83       	std	Y+2, r25	; 0x02
    4e6a:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    4e6c:	89 81       	ldd	r24, Y+1	; 0x01
    4e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e70:	00 97       	sbiw	r24, 0x00	; 0
    4e72:	b1 f0       	breq	.+44     	; 0x4ea0 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    4e74:	86 e2       	ldi	r24, 0x26	; 38
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	0e 94 2c 13 	call	0x2658	; 0x2658 <pvPortMalloc>
    4e7c:	9d 83       	std	Y+5, r25	; 0x05
    4e7e:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    4e80:	8c 81       	ldd	r24, Y+4	; 0x04
    4e82:	9d 81       	ldd	r25, Y+5	; 0x05
    4e84:	00 97       	sbiw	r24, 0x00	; 0
    4e86:	39 f0       	breq	.+14     	; 0x4e96 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    4e88:	ec 81       	ldd	r30, Y+4	; 0x04
    4e8a:	fd 81       	ldd	r31, Y+5	; 0x05
    4e8c:	89 81       	ldd	r24, Y+1	; 0x01
    4e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e90:	90 8f       	std	Z+24, r25	; 0x18
    4e92:	87 8b       	std	Z+23, r24	; 0x17
    4e94:	07 c0       	rjmp	.+14     	; 0x4ea4 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	9a 81       	ldd	r25, Y+2	; 0x02
    4e9a:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
    4e9e:	02 c0       	rjmp	.+4      	; 0x4ea4 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    4ea0:	1d 82       	std	Y+5, r1	; 0x05
    4ea2:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    4ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ea8:	00 97       	sbiw	r24, 0x00	; 0
    4eaa:	e9 f0       	breq	.+58     	; 0x4ee6 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    4eac:	8a 85       	ldd	r24, Y+10	; 0x0a
    4eae:	9b 85       	ldd	r25, Y+11	; 0x0b
    4eb0:	9c 01       	movw	r18, r24
    4eb2:	40 e0       	ldi	r20, 0x00	; 0
    4eb4:	50 e0       	ldi	r21, 0x00	; 0
    4eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    4eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    4eba:	68 85       	ldd	r22, Y+8	; 0x08
    4ebc:	79 85       	ldd	r23, Y+9	; 0x09
    4ebe:	ec 85       	ldd	r30, Y+12	; 0x0c
    4ec0:	fd 85       	ldd	r31, Y+13	; 0x0d
    4ec2:	af 85       	ldd	r26, Y+15	; 0x0f
    4ec4:	b8 89       	ldd	r27, Y+16	; 0x10
    4ec6:	ac 80       	ldd	r10, Y+4	; 0x04
    4ec8:	bd 80       	ldd	r11, Y+5	; 0x05
    4eca:	8f 01       	movw	r16, r30
    4ecc:	ee 84       	ldd	r14, Y+14	; 0x0e
    4ece:	6d 01       	movw	r12, r26
    4ed0:	88 24       	eor	r8, r8
    4ed2:	99 24       	eor	r9, r9
    4ed4:	0e 94 89 27 	call	0x4f12	; 0x4f12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    4ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eda:	9d 81       	ldd	r25, Y+5	; 0x05
    4edc:	0e 94 45 28 	call	0x508a	; 0x508a <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    4ee0:	81 e0       	ldi	r24, 0x01	; 1
    4ee2:	8b 83       	std	Y+3, r24	; 0x03
    4ee4:	02 c0       	rjmp	.+4      	; 0x4eea <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4ee6:	8f ef       	ldi	r24, 0xFF	; 255
    4ee8:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    4eea:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    4eec:	60 96       	adiw	r28, 0x10	; 16
    4eee:	0f b6       	in	r0, 0x3f	; 63
    4ef0:	f8 94       	cli
    4ef2:	de bf       	out	0x3e, r29	; 62
    4ef4:	0f be       	out	0x3f, r0	; 63
    4ef6:	cd bf       	out	0x3d, r28	; 61
    4ef8:	cf 91       	pop	r28
    4efa:	df 91       	pop	r29
    4efc:	1f 91       	pop	r17
    4efe:	0f 91       	pop	r16
    4f00:	ff 90       	pop	r15
    4f02:	ef 90       	pop	r14
    4f04:	df 90       	pop	r13
    4f06:	cf 90       	pop	r12
    4f08:	bf 90       	pop	r11
    4f0a:	af 90       	pop	r10
    4f0c:	9f 90       	pop	r9
    4f0e:	8f 90       	pop	r8
    4f10:	08 95       	ret

00004f12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    4f12:	8f 92       	push	r8
    4f14:	9f 92       	push	r9
    4f16:	af 92       	push	r10
    4f18:	bf 92       	push	r11
    4f1a:	cf 92       	push	r12
    4f1c:	df 92       	push	r13
    4f1e:	ef 92       	push	r14
    4f20:	0f 93       	push	r16
    4f22:	1f 93       	push	r17
    4f24:	df 93       	push	r29
    4f26:	cf 93       	push	r28
    4f28:	cd b7       	in	r28, 0x3d	; 61
    4f2a:	de b7       	in	r29, 0x3e	; 62
    4f2c:	64 97       	sbiw	r28, 0x14	; 20
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	f8 94       	cli
    4f32:	de bf       	out	0x3e, r29	; 62
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	cd bf       	out	0x3d, r28	; 61
    4f38:	9d 83       	std	Y+5, r25	; 0x05
    4f3a:	8c 83       	std	Y+4, r24	; 0x04
    4f3c:	7f 83       	std	Y+7, r23	; 0x07
    4f3e:	6e 83       	std	Y+6, r22	; 0x06
    4f40:	28 87       	std	Y+8, r18	; 0x08
    4f42:	39 87       	std	Y+9, r19	; 0x09
    4f44:	4a 87       	std	Y+10, r20	; 0x0a
    4f46:	5b 87       	std	Y+11, r21	; 0x0b
    4f48:	1d 87       	std	Y+13, r17	; 0x0d
    4f4a:	0c 87       	std	Y+12, r16	; 0x0c
    4f4c:	ee 86       	std	Y+14, r14	; 0x0e
    4f4e:	d8 8a       	std	Y+16, r13	; 0x10
    4f50:	cf 86       	std	Y+15, r12	; 0x0f
    4f52:	ba 8a       	std	Y+18, r11	; 0x12
    4f54:	a9 8a       	std	Y+17, r10	; 0x11
    4f56:	9c 8a       	std	Y+20, r9	; 0x14
    4f58:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    4f5a:	e9 89       	ldd	r30, Y+17	; 0x11
    4f5c:	fa 89       	ldd	r31, Y+18	; 0x12
    4f5e:	27 89       	ldd	r18, Z+23	; 0x17
    4f60:	30 8d       	ldd	r19, Z+24	; 0x18
    4f62:	88 85       	ldd	r24, Y+8	; 0x08
    4f64:	99 85       	ldd	r25, Y+9	; 0x09
    4f66:	01 97       	sbiw	r24, 0x01	; 1
    4f68:	82 0f       	add	r24, r18
    4f6a:	93 1f       	adc	r25, r19
    4f6c:	9b 83       	std	Y+3, r25	; 0x03
    4f6e:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    4f70:	8e 81       	ldd	r24, Y+6	; 0x06
    4f72:	9f 81       	ldd	r25, Y+7	; 0x07
    4f74:	00 97       	sbiw	r24, 0x00	; 0
    4f76:	51 f1       	breq	.+84     	; 0x4fcc <prvInitialiseNewTask+0xba>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4f78:	19 82       	std	Y+1, r1	; 0x01
    4f7a:	21 c0       	rjmp	.+66     	; 0x4fbe <prvInitialiseNewTask+0xac>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4f7c:	89 81       	ldd	r24, Y+1	; 0x01
    4f7e:	48 2f       	mov	r20, r24
    4f80:	50 e0       	ldi	r21, 0x00	; 0
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	28 2f       	mov	r18, r24
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	8e 81       	ldd	r24, Y+6	; 0x06
    4f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    4f8c:	fc 01       	movw	r30, r24
    4f8e:	e2 0f       	add	r30, r18
    4f90:	f3 1f       	adc	r31, r19
    4f92:	20 81       	ld	r18, Z
    4f94:	89 89       	ldd	r24, Y+17	; 0x11
    4f96:	9a 89       	ldd	r25, Y+18	; 0x12
    4f98:	84 0f       	add	r24, r20
    4f9a:	95 1f       	adc	r25, r21
    4f9c:	fc 01       	movw	r30, r24
    4f9e:	79 96       	adiw	r30, 0x19	; 25
    4fa0:	20 83       	st	Z, r18

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    4fa2:	89 81       	ldd	r24, Y+1	; 0x01
    4fa4:	28 2f       	mov	r18, r24
    4fa6:	30 e0       	ldi	r19, 0x00	; 0
    4fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    4faa:	9f 81       	ldd	r25, Y+7	; 0x07
    4fac:	fc 01       	movw	r30, r24
    4fae:	e2 0f       	add	r30, r18
    4fb0:	f3 1f       	adc	r31, r19
    4fb2:	80 81       	ld	r24, Z
    4fb4:	88 23       	and	r24, r24
    4fb6:	31 f0       	breq	.+12     	; 0x4fc4 <prvInitialiseNewTask+0xb2>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4fb8:	89 81       	ldd	r24, Y+1	; 0x01
    4fba:	8f 5f       	subi	r24, 0xFF	; 255
    4fbc:	89 83       	std	Y+1, r24	; 0x01
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	88 30       	cpi	r24, 0x08	; 8
    4fc2:	e0 f2       	brcs	.-72     	; 0x4f7c <prvInitialiseNewTask+0x6a>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    4fc4:	e9 89       	ldd	r30, Y+17	; 0x11
    4fc6:	fa 89       	ldd	r31, Y+18	; 0x12
    4fc8:	10 a2       	std	Z+32, r1	; 0x20
    4fca:	03 c0       	rjmp	.+6      	; 0x4fd2 <prvInitialiseNewTask+0xc0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    4fcc:	e9 89       	ldd	r30, Y+17	; 0x11
    4fce:	fa 89       	ldd	r31, Y+18	; 0x12
    4fd0:	11 8e       	std	Z+25, r1	; 0x19
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    4fd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fd4:	84 30       	cpi	r24, 0x04	; 4
    4fd6:	10 f0       	brcs	.+4      	; 0x4fdc <prvInitialiseNewTask+0xca>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    4fd8:	83 e0       	ldi	r24, 0x03	; 3
    4fda:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    4fdc:	e9 89       	ldd	r30, Y+17	; 0x11
    4fde:	fa 89       	ldd	r31, Y+18	; 0x12
    4fe0:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fe2:	86 8b       	std	Z+22, r24	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    4fe4:	89 89       	ldd	r24, Y+17	; 0x11
    4fe6:	9a 89       	ldd	r25, Y+18	; 0x12
    4fe8:	02 96       	adiw	r24, 0x02	; 2
    4fea:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    4fee:	89 89       	ldd	r24, Y+17	; 0x11
    4ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    4ff2:	0c 96       	adiw	r24, 0x0c	; 12
    4ff4:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    4ff8:	e9 89       	ldd	r30, Y+17	; 0x11
    4ffa:	fa 89       	ldd	r31, Y+18	; 0x12
    4ffc:	89 89       	ldd	r24, Y+17	; 0x11
    4ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    5000:	91 87       	std	Z+9, r25	; 0x09
    5002:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5004:	8e 85       	ldd	r24, Y+14	; 0x0e
    5006:	28 2f       	mov	r18, r24
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	84 e0       	ldi	r24, 0x04	; 4
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	82 1b       	sub	r24, r18
    5010:	93 0b       	sbc	r25, r19
    5012:	e9 89       	ldd	r30, Y+17	; 0x11
    5014:	fa 89       	ldd	r31, Y+18	; 0x12
    5016:	95 87       	std	Z+13, r25	; 0x0d
    5018:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    501a:	e9 89       	ldd	r30, Y+17	; 0x11
    501c:	fa 89       	ldd	r31, Y+18	; 0x12
    501e:	89 89       	ldd	r24, Y+17	; 0x11
    5020:	9a 89       	ldd	r25, Y+18	; 0x12
    5022:	93 8b       	std	Z+19, r25	; 0x13
    5024:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    5026:	e9 89       	ldd	r30, Y+17	; 0x11
    5028:	fa 89       	ldd	r31, Y+18	; 0x12
    502a:	11 a2       	std	Z+33, r1	; 0x21
    502c:	12 a2       	std	Z+34, r1	; 0x22
    502e:	13 a2       	std	Z+35, r1	; 0x23
    5030:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5032:	e9 89       	ldd	r30, Y+17	; 0x11
    5034:	fa 89       	ldd	r31, Y+18	; 0x12
    5036:	15 a2       	std	Z+37, r1	; 0x25
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    5038:	8a 81       	ldd	r24, Y+2	; 0x02
    503a:	9b 81       	ldd	r25, Y+3	; 0x03
    503c:	2c 81       	ldd	r18, Y+4	; 0x04
    503e:	3d 81       	ldd	r19, Y+5	; 0x05
    5040:	4c 85       	ldd	r20, Y+12	; 0x0c
    5042:	5d 85       	ldd	r21, Y+13	; 0x0d
    5044:	b9 01       	movw	r22, r18
    5046:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <pxPortInitialiseStack>
    504a:	e9 89       	ldd	r30, Y+17	; 0x11
    504c:	fa 89       	ldd	r31, Y+18	; 0x12
    504e:	91 83       	std	Z+1, r25	; 0x01
    5050:	80 83       	st	Z, r24
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    5052:	8f 85       	ldd	r24, Y+15	; 0x0f
    5054:	98 89       	ldd	r25, Y+16	; 0x10
    5056:	00 97       	sbiw	r24, 0x00	; 0
    5058:	31 f0       	breq	.+12     	; 0x5066 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    505a:	ef 85       	ldd	r30, Y+15	; 0x0f
    505c:	f8 89       	ldd	r31, Y+16	; 0x10
    505e:	89 89       	ldd	r24, Y+17	; 0x11
    5060:	9a 89       	ldd	r25, Y+18	; 0x12
    5062:	91 83       	std	Z+1, r25	; 0x01
    5064:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    5066:	64 96       	adiw	r28, 0x14	; 20
    5068:	0f b6       	in	r0, 0x3f	; 63
    506a:	f8 94       	cli
    506c:	de bf       	out	0x3e, r29	; 62
    506e:	0f be       	out	0x3f, r0	; 63
    5070:	cd bf       	out	0x3d, r28	; 61
    5072:	cf 91       	pop	r28
    5074:	df 91       	pop	r29
    5076:	1f 91       	pop	r17
    5078:	0f 91       	pop	r16
    507a:	ef 90       	pop	r14
    507c:	df 90       	pop	r13
    507e:	cf 90       	pop	r12
    5080:	bf 90       	pop	r11
    5082:	af 90       	pop	r10
    5084:	9f 90       	pop	r9
    5086:	8f 90       	pop	r8
    5088:	08 95       	ret

0000508a <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    508a:	df 93       	push	r29
    508c:	cf 93       	push	r28
    508e:	00 d0       	rcall	.+0      	; 0x5090 <prvAddNewTaskToReadyList+0x6>
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	9a 83       	std	Y+2, r25	; 0x02
    5096:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    5098:	0f b6       	in	r0, 0x3f	; 63
    509a:	f8 94       	cli
    509c:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    509e:	80 91 7f 06 	lds	r24, 0x067F
    50a2:	8f 5f       	subi	r24, 0xFF	; 255
    50a4:	80 93 7f 06 	sts	0x067F, r24
		if( pxCurrentTCB == NULL )
    50a8:	80 91 7c 06 	lds	r24, 0x067C
    50ac:	90 91 7d 06 	lds	r25, 0x067D
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	69 f4       	brne	.+26     	; 0x50ce <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	9a 81       	ldd	r25, Y+2	; 0x02
    50b8:	90 93 7d 06 	sts	0x067D, r25
    50bc:	80 93 7c 06 	sts	0x067C, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    50c0:	80 91 7f 06 	lds	r24, 0x067F
    50c4:	81 30       	cpi	r24, 0x01	; 1
    50c6:	b9 f4       	brne	.+46     	; 0x50f6 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    50c8:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <prvInitialiseTaskLists>
    50cc:	14 c0       	rjmp	.+40     	; 0x50f6 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    50ce:	80 91 83 06 	lds	r24, 0x0683
    50d2:	88 23       	and	r24, r24
    50d4:	81 f4       	brne	.+32     	; 0x50f6 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    50d6:	e0 91 7c 06 	lds	r30, 0x067C
    50da:	f0 91 7d 06 	lds	r31, 0x067D
    50de:	96 89       	ldd	r25, Z+22	; 0x16
    50e0:	e9 81       	ldd	r30, Y+1	; 0x01
    50e2:	fa 81       	ldd	r31, Y+2	; 0x02
    50e4:	86 89       	ldd	r24, Z+22	; 0x16
    50e6:	89 17       	cp	r24, r25
    50e8:	30 f0       	brcs	.+12     	; 0x50f6 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    50ea:	89 81       	ldd	r24, Y+1	; 0x01
    50ec:	9a 81       	ldd	r25, Y+2	; 0x02
    50ee:	90 93 7d 06 	sts	0x067D, r25
    50f2:	80 93 7c 06 	sts	0x067C, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    50f6:	80 91 87 06 	lds	r24, 0x0687
    50fa:	8f 5f       	subi	r24, 0xFF	; 255
    50fc:	80 93 87 06 	sts	0x0687, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    5100:	e9 81       	ldd	r30, Y+1	; 0x01
    5102:	fa 81       	ldd	r31, Y+2	; 0x02
    5104:	96 89       	ldd	r25, Z+22	; 0x16
    5106:	80 91 82 06 	lds	r24, 0x0682
    510a:	89 17       	cp	r24, r25
    510c:	28 f4       	brcc	.+10     	; 0x5118 <prvAddNewTaskToReadyList+0x8e>
    510e:	e9 81       	ldd	r30, Y+1	; 0x01
    5110:	fa 81       	ldd	r31, Y+2	; 0x02
    5112:	86 89       	ldd	r24, Z+22	; 0x16
    5114:	80 93 82 06 	sts	0x0682, r24
    5118:	e9 81       	ldd	r30, Y+1	; 0x01
    511a:	fa 81       	ldd	r31, Y+2	; 0x02
    511c:	86 89       	ldd	r24, Z+22	; 0x16
    511e:	28 2f       	mov	r18, r24
    5120:	30 e0       	ldi	r19, 0x00	; 0
    5122:	c9 01       	movw	r24, r18
    5124:	88 0f       	add	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	88 0f       	add	r24, r24
    512a:	99 1f       	adc	r25, r25
    512c:	88 0f       	add	r24, r24
    512e:	99 1f       	adc	r25, r25
    5130:	82 0f       	add	r24, r18
    5132:	93 1f       	adc	r25, r19
    5134:	ac 01       	movw	r20, r24
    5136:	43 57       	subi	r20, 0x73	; 115
    5138:	59 4f       	sbci	r21, 0xF9	; 249
    513a:	89 81       	ldd	r24, Y+1	; 0x01
    513c:	9a 81       	ldd	r25, Y+2	; 0x02
    513e:	9c 01       	movw	r18, r24
    5140:	2e 5f       	subi	r18, 0xFE	; 254
    5142:	3f 4f       	sbci	r19, 0xFF	; 255
    5144:	ca 01       	movw	r24, r20
    5146:	b9 01       	movw	r22, r18
    5148:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    514c:	0f 90       	pop	r0
    514e:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    5150:	80 91 83 06 	lds	r24, 0x0683
    5154:	88 23       	and	r24, r24
    5156:	61 f0       	breq	.+24     	; 0x5170 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    5158:	e0 91 7c 06 	lds	r30, 0x067C
    515c:	f0 91 7d 06 	lds	r31, 0x067D
    5160:	96 89       	ldd	r25, Z+22	; 0x16
    5162:	e9 81       	ldd	r30, Y+1	; 0x01
    5164:	fa 81       	ldd	r31, Y+2	; 0x02
    5166:	86 89       	ldd	r24, Z+22	; 0x16
    5168:	98 17       	cp	r25, r24
    516a:	10 f4       	brcc	.+4      	; 0x5170 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    516c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    5170:	0f 90       	pop	r0
    5172:	0f 90       	pop	r0
    5174:	cf 91       	pop	r28
    5176:	df 91       	pop	r29
    5178:	08 95       	ret

0000517a <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    517a:	df 93       	push	r29
    517c:	cf 93       	push	r28
    517e:	00 d0       	rcall	.+0      	; 0x5180 <vTaskDelete+0x6>
    5180:	00 d0       	rcall	.+0      	; 0x5182 <vTaskDelete+0x8>
    5182:	00 d0       	rcall	.+0      	; 0x5184 <vTaskDelete+0xa>
    5184:	cd b7       	in	r28, 0x3d	; 61
    5186:	de b7       	in	r29, 0x3e	; 62
    5188:	9c 83       	std	Y+4, r25	; 0x04
    518a:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    518c:	0f b6       	in	r0, 0x3f	; 63
    518e:	f8 94       	cli
    5190:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    5192:	8b 81       	ldd	r24, Y+3	; 0x03
    5194:	9c 81       	ldd	r25, Y+4	; 0x04
    5196:	00 97       	sbiw	r24, 0x00	; 0
    5198:	39 f4       	brne	.+14     	; 0x51a8 <vTaskDelete+0x2e>
    519a:	80 91 7c 06 	lds	r24, 0x067C
    519e:	90 91 7d 06 	lds	r25, 0x067D
    51a2:	9e 83       	std	Y+6, r25	; 0x06
    51a4:	8d 83       	std	Y+5, r24	; 0x05
    51a6:	04 c0       	rjmp	.+8      	; 0x51b0 <vTaskDelete+0x36>
    51a8:	8b 81       	ldd	r24, Y+3	; 0x03
    51aa:	9c 81       	ldd	r25, Y+4	; 0x04
    51ac:	9e 83       	std	Y+6, r25	; 0x06
    51ae:	8d 83       	std	Y+5, r24	; 0x05
    51b0:	8d 81       	ldd	r24, Y+5	; 0x05
    51b2:	9e 81       	ldd	r25, Y+6	; 0x06
    51b4:	9a 83       	std	Y+2, r25	; 0x02
    51b6:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    51b8:	89 81       	ldd	r24, Y+1	; 0x01
    51ba:	9a 81       	ldd	r25, Y+2	; 0x02
    51bc:	02 96       	adiw	r24, 0x02	; 2
    51be:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    51c2:	e9 81       	ldd	r30, Y+1	; 0x01
    51c4:	fa 81       	ldd	r31, Y+2	; 0x02
    51c6:	84 89       	ldd	r24, Z+20	; 0x14
    51c8:	95 89       	ldd	r25, Z+21	; 0x15
    51ca:	00 97       	sbiw	r24, 0x00	; 0
    51cc:	29 f0       	breq	.+10     	; 0x51d8 <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
    51d0:	9a 81       	ldd	r25, Y+2	; 0x02
    51d2:	0c 96       	adiw	r24, 0x0c	; 12
    51d4:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    51d8:	80 91 87 06 	lds	r24, 0x0687
    51dc:	8f 5f       	subi	r24, 0xFF	; 255
    51de:	80 93 87 06 	sts	0x0687, r24

			if( pxTCB == pxCurrentTCB )
    51e2:	20 91 7c 06 	lds	r18, 0x067C
    51e6:	30 91 7d 06 	lds	r19, 0x067D
    51ea:	89 81       	ldd	r24, Y+1	; 0x01
    51ec:	9a 81       	ldd	r25, Y+2	; 0x02
    51ee:	82 17       	cp	r24, r18
    51f0:	93 07       	cpc	r25, r19
    51f2:	81 f4       	brne	.+32     	; 0x5214 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    51f4:	89 81       	ldd	r24, Y+1	; 0x01
    51f6:	9a 81       	ldd	r25, Y+2	; 0x02
    51f8:	9c 01       	movw	r18, r24
    51fa:	2e 5f       	subi	r18, 0xFE	; 254
    51fc:	3f 4f       	sbci	r19, 0xFF	; 255
    51fe:	80 ed       	ldi	r24, 0xD0	; 208
    5200:	96 e0       	ldi	r25, 0x06	; 6
    5202:	b9 01       	movw	r22, r18
    5204:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    5208:	80 91 7e 06 	lds	r24, 0x067E
    520c:	8f 5f       	subi	r24, 0xFF	; 255
    520e:	80 93 7e 06 	sts	0x067E, r24
    5212:	0b c0       	rjmp	.+22     	; 0x522a <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    5214:	80 91 7f 06 	lds	r24, 0x067F
    5218:	81 50       	subi	r24, 0x01	; 1
    521a:	80 93 7f 06 	sts	0x067F, r24
				prvDeleteTCB( pxTCB );
    521e:	89 81       	ldd	r24, Y+1	; 0x01
    5220:	9a 81       	ldd	r25, Y+2	; 0x02
    5222:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    5226:	0e 94 14 30 	call	0x6028	; 0x6028 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    522a:	0f 90       	pop	r0
    522c:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    522e:	80 91 83 06 	lds	r24, 0x0683
    5232:	88 23       	and	r24, r24
    5234:	59 f0       	breq	.+22     	; 0x524c <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    5236:	20 91 7c 06 	lds	r18, 0x067C
    523a:	30 91 7d 06 	lds	r19, 0x067D
    523e:	89 81       	ldd	r24, Y+1	; 0x01
    5240:	9a 81       	ldd	r25, Y+2	; 0x02
    5242:	82 17       	cp	r24, r18
    5244:	93 07       	cpc	r25, r19
    5246:	11 f4       	brne	.+4      	; 0x524c <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    5248:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    524c:	26 96       	adiw	r28, 0x06	; 6
    524e:	0f b6       	in	r0, 0x3f	; 63
    5250:	f8 94       	cli
    5252:	de bf       	out	0x3e, r29	; 62
    5254:	0f be       	out	0x3f, r0	; 63
    5256:	cd bf       	out	0x3d, r28	; 61
    5258:	cf 91       	pop	r28
    525a:	df 91       	pop	r29
    525c:	08 95       	ret

0000525e <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    525e:	df 93       	push	r29
    5260:	cf 93       	push	r28
    5262:	cd b7       	in	r28, 0x3d	; 61
    5264:	de b7       	in	r29, 0x3e	; 62
    5266:	2a 97       	sbiw	r28, 0x0a	; 10
    5268:	0f b6       	in	r0, 0x3f	; 63
    526a:	f8 94       	cli
    526c:	de bf       	out	0x3e, r29	; 62
    526e:	0f be       	out	0x3f, r0	; 63
    5270:	cd bf       	out	0x3d, r28	; 61
    5272:	98 87       	std	Y+8, r25	; 0x08
    5274:	8f 83       	std	Y+7, r24	; 0x07
    5276:	7a 87       	std	Y+10, r23	; 0x0a
    5278:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    527a:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    527c:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    5280:	80 91 80 06 	lds	r24, 0x0680
    5284:	90 91 81 06 	lds	r25, 0x0681
    5288:	9a 83       	std	Y+2, r25	; 0x02
    528a:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    528c:	ef 81       	ldd	r30, Y+7	; 0x07
    528e:	f8 85       	ldd	r31, Y+8	; 0x08
    5290:	20 81       	ld	r18, Z
    5292:	31 81       	ldd	r19, Z+1	; 0x01
    5294:	89 85       	ldd	r24, Y+9	; 0x09
    5296:	9a 85       	ldd	r25, Y+10	; 0x0a
    5298:	82 0f       	add	r24, r18
    529a:	93 1f       	adc	r25, r19
    529c:	9e 83       	std	Y+6, r25	; 0x06
    529e:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    52a0:	ef 81       	ldd	r30, Y+7	; 0x07
    52a2:	f8 85       	ldd	r31, Y+8	; 0x08
    52a4:	20 81       	ld	r18, Z
    52a6:	31 81       	ldd	r19, Z+1	; 0x01
    52a8:	89 81       	ldd	r24, Y+1	; 0x01
    52aa:	9a 81       	ldd	r25, Y+2	; 0x02
    52ac:	82 17       	cp	r24, r18
    52ae:	93 07       	cpc	r25, r19
    52b0:	98 f4       	brcc	.+38     	; 0x52d8 <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    52b2:	ef 81       	ldd	r30, Y+7	; 0x07
    52b4:	f8 85       	ldd	r31, Y+8	; 0x08
    52b6:	20 81       	ld	r18, Z
    52b8:	31 81       	ldd	r19, Z+1	; 0x01
    52ba:	8d 81       	ldd	r24, Y+5	; 0x05
    52bc:	9e 81       	ldd	r25, Y+6	; 0x06
    52be:	82 17       	cp	r24, r18
    52c0:	93 07       	cpc	r25, r19
    52c2:	e0 f4       	brcc	.+56     	; 0x52fc <vTaskDelayUntil+0x9e>
    52c4:	2d 81       	ldd	r18, Y+5	; 0x05
    52c6:	3e 81       	ldd	r19, Y+6	; 0x06
    52c8:	89 81       	ldd	r24, Y+1	; 0x01
    52ca:	9a 81       	ldd	r25, Y+2	; 0x02
    52cc:	82 17       	cp	r24, r18
    52ce:	93 07       	cpc	r25, r19
    52d0:	a8 f4       	brcc	.+42     	; 0x52fc <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	8b 83       	std	Y+3, r24	; 0x03
    52d6:	12 c0       	rjmp	.+36     	; 0x52fc <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    52d8:	ef 81       	ldd	r30, Y+7	; 0x07
    52da:	f8 85       	ldd	r31, Y+8	; 0x08
    52dc:	20 81       	ld	r18, Z
    52de:	31 81       	ldd	r19, Z+1	; 0x01
    52e0:	8d 81       	ldd	r24, Y+5	; 0x05
    52e2:	9e 81       	ldd	r25, Y+6	; 0x06
    52e4:	82 17       	cp	r24, r18
    52e6:	93 07       	cpc	r25, r19
    52e8:	38 f0       	brcs	.+14     	; 0x52f8 <vTaskDelayUntil+0x9a>
    52ea:	2d 81       	ldd	r18, Y+5	; 0x05
    52ec:	3e 81       	ldd	r19, Y+6	; 0x06
    52ee:	89 81       	ldd	r24, Y+1	; 0x01
    52f0:	9a 81       	ldd	r25, Y+2	; 0x02
    52f2:	82 17       	cp	r24, r18
    52f4:	93 07       	cpc	r25, r19
    52f6:	10 f4       	brcc	.+4      	; 0x52fc <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    52f8:	81 e0       	ldi	r24, 0x01	; 1
    52fa:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    52fc:	ef 81       	ldd	r30, Y+7	; 0x07
    52fe:	f8 85       	ldd	r31, Y+8	; 0x08
    5300:	8d 81       	ldd	r24, Y+5	; 0x05
    5302:	9e 81       	ldd	r25, Y+6	; 0x06
    5304:	91 83       	std	Z+1, r25	; 0x01
    5306:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    5308:	8b 81       	ldd	r24, Y+3	; 0x03
    530a:	88 23       	and	r24, r24
    530c:	49 f0       	breq	.+18     	; 0x5320 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    530e:	8d 81       	ldd	r24, Y+5	; 0x05
    5310:	9e 81       	ldd	r25, Y+6	; 0x06
    5312:	29 81       	ldd	r18, Y+1	; 0x01
    5314:	3a 81       	ldd	r19, Y+2	; 0x02
    5316:	82 1b       	sub	r24, r18
    5318:	93 0b       	sbc	r25, r19
    531a:	60 e0       	ldi	r22, 0x00	; 0
    531c:	0e 94 20 34 	call	0x6840	; 0x6840 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    5320:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    5324:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    5326:	8c 81       	ldd	r24, Y+4	; 0x04
    5328:	88 23       	and	r24, r24
    532a:	11 f4       	brne	.+4      	; 0x5330 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    532c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5330:	2a 96       	adiw	r28, 0x0a	; 10
    5332:	0f b6       	in	r0, 0x3f	; 63
    5334:	f8 94       	cli
    5336:	de bf       	out	0x3e, r29	; 62
    5338:	0f be       	out	0x3f, r0	; 63
    533a:	cd bf       	out	0x3d, r28	; 61
    533c:	cf 91       	pop	r28
    533e:	df 91       	pop	r29
    5340:	08 95       	ret

00005342 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    5342:	df 93       	push	r29
    5344:	cf 93       	push	r28
    5346:	00 d0       	rcall	.+0      	; 0x5348 <vTaskDelay+0x6>
    5348:	0f 92       	push	r0
    534a:	cd b7       	in	r28, 0x3d	; 61
    534c:	de b7       	in	r29, 0x3e	; 62
    534e:	9b 83       	std	Y+3, r25	; 0x03
    5350:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    5352:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    5354:	8a 81       	ldd	r24, Y+2	; 0x02
    5356:	9b 81       	ldd	r25, Y+3	; 0x03
    5358:	00 97       	sbiw	r24, 0x00	; 0
    535a:	51 f0       	breq	.+20     	; 0x5370 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    535c:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    5360:	8a 81       	ldd	r24, Y+2	; 0x02
    5362:	9b 81       	ldd	r25, Y+3	; 0x03
    5364:	60 e0       	ldi	r22, 0x00	; 0
    5366:	0e 94 20 34 	call	0x6840	; 0x6840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    536a:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <xTaskResumeAll>
    536e:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    5370:	89 81       	ldd	r24, Y+1	; 0x01
    5372:	88 23       	and	r24, r24
    5374:	11 f4       	brne	.+4      	; 0x537a <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    5376:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	0f 90       	pop	r0
    5380:	cf 91       	pop	r28
    5382:	df 91       	pop	r29
    5384:	08 95       	ret

00005386 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    5386:	df 93       	push	r29
    5388:	cf 93       	push	r28
    538a:	00 d0       	rcall	.+0      	; 0x538c <vTaskSuspend+0x6>
    538c:	00 d0       	rcall	.+0      	; 0x538e <vTaskSuspend+0x8>
    538e:	00 d0       	rcall	.+0      	; 0x5390 <vTaskSuspend+0xa>
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
    5394:	9c 83       	std	Y+4, r25	; 0x04
    5396:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    5398:	0f b6       	in	r0, 0x3f	; 63
    539a:	f8 94       	cli
    539c:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    539e:	8b 81       	ldd	r24, Y+3	; 0x03
    53a0:	9c 81       	ldd	r25, Y+4	; 0x04
    53a2:	00 97       	sbiw	r24, 0x00	; 0
    53a4:	39 f4       	brne	.+14     	; 0x53b4 <vTaskSuspend+0x2e>
    53a6:	80 91 7c 06 	lds	r24, 0x067C
    53aa:	90 91 7d 06 	lds	r25, 0x067D
    53ae:	9e 83       	std	Y+6, r25	; 0x06
    53b0:	8d 83       	std	Y+5, r24	; 0x05
    53b2:	04 c0       	rjmp	.+8      	; 0x53bc <vTaskSuspend+0x36>
    53b4:	8b 81       	ldd	r24, Y+3	; 0x03
    53b6:	9c 81       	ldd	r25, Y+4	; 0x04
    53b8:	9e 83       	std	Y+6, r25	; 0x06
    53ba:	8d 83       	std	Y+5, r24	; 0x05
    53bc:	8d 81       	ldd	r24, Y+5	; 0x05
    53be:	9e 81       	ldd	r25, Y+6	; 0x06
    53c0:	9a 83       	std	Y+2, r25	; 0x02
    53c2:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    53c4:	89 81       	ldd	r24, Y+1	; 0x01
    53c6:	9a 81       	ldd	r25, Y+2	; 0x02
    53c8:	02 96       	adiw	r24, 0x02	; 2
    53ca:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    53ce:	e9 81       	ldd	r30, Y+1	; 0x01
    53d0:	fa 81       	ldd	r31, Y+2	; 0x02
    53d2:	84 89       	ldd	r24, Z+20	; 0x14
    53d4:	95 89       	ldd	r25, Z+21	; 0x15
    53d6:	00 97       	sbiw	r24, 0x00	; 0
    53d8:	29 f0       	breq	.+10     	; 0x53e4 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    53da:	89 81       	ldd	r24, Y+1	; 0x01
    53dc:	9a 81       	ldd	r25, Y+2	; 0x02
    53de:	0c 96       	adiw	r24, 0x0c	; 12
    53e0:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    53e4:	89 81       	ldd	r24, Y+1	; 0x01
    53e6:	9a 81       	ldd	r25, Y+2	; 0x02
    53e8:	9c 01       	movw	r18, r24
    53ea:	2e 5f       	subi	r18, 0xFE	; 254
    53ec:	3f 4f       	sbci	r19, 0xFF	; 255
    53ee:	89 ed       	ldi	r24, 0xD9	; 217
    53f0:	96 e0       	ldi	r25, 0x06	; 6
    53f2:	b9 01       	movw	r22, r18
    53f4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    53f8:	e9 81       	ldd	r30, Y+1	; 0x01
    53fa:	fa 81       	ldd	r31, Y+2	; 0x02
    53fc:	85 a1       	ldd	r24, Z+37	; 0x25
    53fe:	81 30       	cpi	r24, 0x01	; 1
    5400:	19 f4       	brne	.+6      	; 0x5408 <vTaskSuspend+0x82>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5402:	e9 81       	ldd	r30, Y+1	; 0x01
    5404:	fa 81       	ldd	r31, Y+2	; 0x02
    5406:	15 a2       	std	Z+37, r1	; 0x25
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    5408:	0f 90       	pop	r0
    540a:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    540c:	80 91 83 06 	lds	r24, 0x0683
    5410:	88 23       	and	r24, r24
    5412:	39 f0       	breq	.+14     	; 0x5422 <vTaskSuspend+0x9c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    5414:	0f b6       	in	r0, 0x3f	; 63
    5416:	f8 94       	cli
    5418:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    541a:	0e 94 14 30 	call	0x6028	; 0x6028 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    541e:	0f 90       	pop	r0
    5420:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    5422:	20 91 7c 06 	lds	r18, 0x067C
    5426:	30 91 7d 06 	lds	r19, 0x067D
    542a:	89 81       	ldd	r24, Y+1	; 0x01
    542c:	9a 81       	ldd	r25, Y+2	; 0x02
    542e:	82 17       	cp	r24, r18
    5430:	93 07       	cpc	r25, r19
    5432:	a1 f4       	brne	.+40     	; 0x545c <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
    5434:	80 91 83 06 	lds	r24, 0x0683
    5438:	88 23       	and	r24, r24
    543a:	19 f0       	breq	.+6      	; 0x5442 <vTaskSuspend+0xbc>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    543c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
    5440:	0d c0       	rjmp	.+26     	; 0x545c <vTaskSuspend+0xd6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
    5442:	90 91 d9 06 	lds	r25, 0x06D9
    5446:	80 91 7f 06 	lds	r24, 0x067F
    544a:	98 17       	cp	r25, r24
    544c:	29 f4       	brne	.+10     	; 0x5458 <vTaskSuspend+0xd2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    544e:	10 92 7d 06 	sts	0x067D, r1
    5452:	10 92 7c 06 	sts	0x067C, r1
    5456:	02 c0       	rjmp	.+4      	; 0x545c <vTaskSuspend+0xd6>
				}
				else
				{
					vTaskSwitchContext();
    5458:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    545c:	26 96       	adiw	r28, 0x06	; 6
    545e:	0f b6       	in	r0, 0x3f	; 63
    5460:	f8 94       	cli
    5462:	de bf       	out	0x3e, r29	; 62
    5464:	0f be       	out	0x3f, r0	; 63
    5466:	cd bf       	out	0x3d, r28	; 61
    5468:	cf 91       	pop	r28
    546a:	df 91       	pop	r29
    546c:	08 95       	ret

0000546e <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    546e:	df 93       	push	r29
    5470:	cf 93       	push	r28
    5472:	00 d0       	rcall	.+0      	; 0x5474 <prvTaskIsTaskSuspended+0x6>
    5474:	00 d0       	rcall	.+0      	; 0x5476 <prvTaskIsTaskSuspended+0x8>
    5476:	0f 92       	push	r0
    5478:	cd b7       	in	r28, 0x3d	; 61
    547a:	de b7       	in	r29, 0x3e	; 62
    547c:	9d 83       	std	Y+5, r25	; 0x05
    547e:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    5480:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = xTask;
    5482:	8c 81       	ldd	r24, Y+4	; 0x04
    5484:	9d 81       	ldd	r25, Y+5	; 0x05
    5486:	9a 83       	std	Y+2, r25	; 0x02
    5488:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    548a:	e9 81       	ldd	r30, Y+1	; 0x01
    548c:	fa 81       	ldd	r31, Y+2	; 0x02
    548e:	82 85       	ldd	r24, Z+10	; 0x0a
    5490:	93 85       	ldd	r25, Z+11	; 0x0b
    5492:	26 e0       	ldi	r18, 0x06	; 6
    5494:	89 3d       	cpi	r24, 0xD9	; 217
    5496:	92 07       	cpc	r25, r18
    5498:	81 f4       	brne	.+32     	; 0x54ba <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    549a:	e9 81       	ldd	r30, Y+1	; 0x01
    549c:	fa 81       	ldd	r31, Y+2	; 0x02
    549e:	84 89       	ldd	r24, Z+20	; 0x14
    54a0:	95 89       	ldd	r25, Z+21	; 0x15
    54a2:	26 e0       	ldi	r18, 0x06	; 6
    54a4:	87 3c       	cpi	r24, 0xC7	; 199
    54a6:	92 07       	cpc	r25, r18
    54a8:	41 f0       	breq	.+16     	; 0x54ba <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    54aa:	e9 81       	ldd	r30, Y+1	; 0x01
    54ac:	fa 81       	ldd	r31, Y+2	; 0x02
    54ae:	84 89       	ldd	r24, Z+20	; 0x14
    54b0:	95 89       	ldd	r25, Z+21	; 0x15
    54b2:	00 97       	sbiw	r24, 0x00	; 0
    54b4:	11 f4       	brne	.+4      	; 0x54ba <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    54ba:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    54bc:	0f 90       	pop	r0
    54be:	0f 90       	pop	r0
    54c0:	0f 90       	pop	r0
    54c2:	0f 90       	pop	r0
    54c4:	0f 90       	pop	r0
    54c6:	cf 91       	pop	r28
    54c8:	df 91       	pop	r29
    54ca:	08 95       	ret

000054cc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    54cc:	df 93       	push	r29
    54ce:	cf 93       	push	r28
    54d0:	00 d0       	rcall	.+0      	; 0x54d2 <vTaskResume+0x6>
    54d2:	00 d0       	rcall	.+0      	; 0x54d4 <vTaskResume+0x8>
    54d4:	cd b7       	in	r28, 0x3d	; 61
    54d6:	de b7       	in	r29, 0x3e	; 62
    54d8:	9c 83       	std	Y+4, r25	; 0x04
    54da:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = xTaskToResume;
    54dc:	8b 81       	ldd	r24, Y+3	; 0x03
    54de:	9c 81       	ldd	r25, Y+4	; 0x04
    54e0:	9a 83       	std	Y+2, r25	; 0x02
    54e2:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
    54e4:	20 91 7c 06 	lds	r18, 0x067C
    54e8:	30 91 7d 06 	lds	r19, 0x067D
    54ec:	89 81       	ldd	r24, Y+1	; 0x01
    54ee:	9a 81       	ldd	r25, Y+2	; 0x02
    54f0:	82 17       	cp	r24, r18
    54f2:	93 07       	cpc	r25, r19
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <vTaskResume+0x2c>
    54f6:	47 c0       	rjmp	.+142    	; 0x5586 <vTaskResume+0xba>
    54f8:	89 81       	ldd	r24, Y+1	; 0x01
    54fa:	9a 81       	ldd	r25, Y+2	; 0x02
    54fc:	00 97       	sbiw	r24, 0x00	; 0
    54fe:	09 f4       	brne	.+2      	; 0x5502 <vTaskResume+0x36>
    5500:	42 c0       	rjmp	.+132    	; 0x5586 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	f8 94       	cli
    5506:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    5508:	89 81       	ldd	r24, Y+1	; 0x01
    550a:	9a 81       	ldd	r25, Y+2	; 0x02
    550c:	0e 94 37 2a 	call	0x546e	; 0x546e <prvTaskIsTaskSuspended>
    5510:	88 23       	and	r24, r24
    5512:	b9 f1       	breq	.+110    	; 0x5582 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    5514:	89 81       	ldd	r24, Y+1	; 0x01
    5516:	9a 81       	ldd	r25, Y+2	; 0x02
    5518:	02 96       	adiw	r24, 0x02	; 2
    551a:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    551e:	e9 81       	ldd	r30, Y+1	; 0x01
    5520:	fa 81       	ldd	r31, Y+2	; 0x02
    5522:	96 89       	ldd	r25, Z+22	; 0x16
    5524:	80 91 82 06 	lds	r24, 0x0682
    5528:	89 17       	cp	r24, r25
    552a:	28 f4       	brcc	.+10     	; 0x5536 <vTaskResume+0x6a>
    552c:	e9 81       	ldd	r30, Y+1	; 0x01
    552e:	fa 81       	ldd	r31, Y+2	; 0x02
    5530:	86 89       	ldd	r24, Z+22	; 0x16
    5532:	80 93 82 06 	sts	0x0682, r24
    5536:	e9 81       	ldd	r30, Y+1	; 0x01
    5538:	fa 81       	ldd	r31, Y+2	; 0x02
    553a:	86 89       	ldd	r24, Z+22	; 0x16
    553c:	28 2f       	mov	r18, r24
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	c9 01       	movw	r24, r18
    5542:	88 0f       	add	r24, r24
    5544:	99 1f       	adc	r25, r25
    5546:	88 0f       	add	r24, r24
    5548:	99 1f       	adc	r25, r25
    554a:	88 0f       	add	r24, r24
    554c:	99 1f       	adc	r25, r25
    554e:	82 0f       	add	r24, r18
    5550:	93 1f       	adc	r25, r19
    5552:	ac 01       	movw	r20, r24
    5554:	43 57       	subi	r20, 0x73	; 115
    5556:	59 4f       	sbci	r21, 0xF9	; 249
    5558:	89 81       	ldd	r24, Y+1	; 0x01
    555a:	9a 81       	ldd	r25, Y+2	; 0x02
    555c:	9c 01       	movw	r18, r24
    555e:	2e 5f       	subi	r18, 0xFE	; 254
    5560:	3f 4f       	sbci	r19, 0xFF	; 255
    5562:	ca 01       	movw	r24, r20
    5564:	b9 01       	movw	r22, r18
    5566:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    556a:	e9 81       	ldd	r30, Y+1	; 0x01
    556c:	fa 81       	ldd	r31, Y+2	; 0x02
    556e:	96 89       	ldd	r25, Z+22	; 0x16
    5570:	e0 91 7c 06 	lds	r30, 0x067C
    5574:	f0 91 7d 06 	lds	r31, 0x067D
    5578:	86 89       	ldd	r24, Z+22	; 0x16
    557a:	98 17       	cp	r25, r24
    557c:	10 f0       	brcs	.+4      	; 0x5582 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    557e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    5582:	0f 90       	pop	r0
    5584:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5586:	0f 90       	pop	r0
    5588:	0f 90       	pop	r0
    558a:	0f 90       	pop	r0
    558c:	0f 90       	pop	r0
    558e:	cf 91       	pop	r28
    5590:	df 91       	pop	r29
    5592:	08 95       	ret

00005594 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    5594:	df 93       	push	r29
    5596:	cf 93       	push	r28
    5598:	00 d0       	rcall	.+0      	; 0x559a <xTaskResumeFromISR+0x6>
    559a:	00 d0       	rcall	.+0      	; 0x559c <xTaskResumeFromISR+0x8>
    559c:	00 d0       	rcall	.+0      	; 0x559e <xTaskResumeFromISR+0xa>
    559e:	cd b7       	in	r28, 0x3d	; 61
    55a0:	de b7       	in	r29, 0x3e	; 62
    55a2:	9e 83       	std	Y+6, r25	; 0x06
    55a4:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    55a6:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = xTaskToResume;
    55a8:	8d 81       	ldd	r24, Y+5	; 0x05
    55aa:	9e 81       	ldd	r25, Y+6	; 0x06
    55ac:	9b 83       	std	Y+3, r25	; 0x03
    55ae:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    55b0:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    55b2:	8a 81       	ldd	r24, Y+2	; 0x02
    55b4:	9b 81       	ldd	r25, Y+3	; 0x03
    55b6:	0e 94 37 2a 	call	0x546e	; 0x546e <prvTaskIsTaskSuspended>
    55ba:	88 23       	and	r24, r24
    55bc:	09 f4       	brne	.+2      	; 0x55c0 <xTaskResumeFromISR+0x2c>
    55be:	46 c0       	rjmp	.+140    	; 0x564c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    55c0:	80 91 8c 06 	lds	r24, 0x068C
    55c4:	88 23       	and	r24, r24
    55c6:	c1 f5       	brne	.+112    	; 0x5638 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    55c8:	ea 81       	ldd	r30, Y+2	; 0x02
    55ca:	fb 81       	ldd	r31, Y+3	; 0x03
    55cc:	96 89       	ldd	r25, Z+22	; 0x16
    55ce:	e0 91 7c 06 	lds	r30, 0x067C
    55d2:	f0 91 7d 06 	lds	r31, 0x067D
    55d6:	86 89       	ldd	r24, Z+22	; 0x16
    55d8:	98 17       	cp	r25, r24
    55da:	10 f0       	brcs	.+4      	; 0x55e0 <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    55dc:	81 e0       	ldi	r24, 0x01	; 1
    55de:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    55e0:	8a 81       	ldd	r24, Y+2	; 0x02
    55e2:	9b 81       	ldd	r25, Y+3	; 0x03
    55e4:	02 96       	adiw	r24, 0x02	; 2
    55e6:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    55ea:	ea 81       	ldd	r30, Y+2	; 0x02
    55ec:	fb 81       	ldd	r31, Y+3	; 0x03
    55ee:	96 89       	ldd	r25, Z+22	; 0x16
    55f0:	80 91 82 06 	lds	r24, 0x0682
    55f4:	89 17       	cp	r24, r25
    55f6:	28 f4       	brcc	.+10     	; 0x5602 <xTaskResumeFromISR+0x6e>
    55f8:	ea 81       	ldd	r30, Y+2	; 0x02
    55fa:	fb 81       	ldd	r31, Y+3	; 0x03
    55fc:	86 89       	ldd	r24, Z+22	; 0x16
    55fe:	80 93 82 06 	sts	0x0682, r24
    5602:	ea 81       	ldd	r30, Y+2	; 0x02
    5604:	fb 81       	ldd	r31, Y+3	; 0x03
    5606:	86 89       	ldd	r24, Z+22	; 0x16
    5608:	28 2f       	mov	r18, r24
    560a:	30 e0       	ldi	r19, 0x00	; 0
    560c:	c9 01       	movw	r24, r18
    560e:	88 0f       	add	r24, r24
    5610:	99 1f       	adc	r25, r25
    5612:	88 0f       	add	r24, r24
    5614:	99 1f       	adc	r25, r25
    5616:	88 0f       	add	r24, r24
    5618:	99 1f       	adc	r25, r25
    561a:	82 0f       	add	r24, r18
    561c:	93 1f       	adc	r25, r19
    561e:	ac 01       	movw	r20, r24
    5620:	43 57       	subi	r20, 0x73	; 115
    5622:	59 4f       	sbci	r21, 0xF9	; 249
    5624:	8a 81       	ldd	r24, Y+2	; 0x02
    5626:	9b 81       	ldd	r25, Y+3	; 0x03
    5628:	9c 01       	movw	r18, r24
    562a:	2e 5f       	subi	r18, 0xFE	; 254
    562c:	3f 4f       	sbci	r19, 0xFF	; 255
    562e:	ca 01       	movw	r24, r20
    5630:	b9 01       	movw	r22, r18
    5632:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    5636:	0a c0       	rjmp	.+20     	; 0x564c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5638:	8a 81       	ldd	r24, Y+2	; 0x02
    563a:	9b 81       	ldd	r25, Y+3	; 0x03
    563c:	9c 01       	movw	r18, r24
    563e:	24 5f       	subi	r18, 0xF4	; 244
    5640:	3f 4f       	sbci	r19, 0xFF	; 255
    5642:	87 ec       	ldi	r24, 0xC7	; 199
    5644:	96 e0       	ldi	r25, 0x06	; 6
    5646:	b9 01       	movw	r22, r18
    5648:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    564c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    564e:	26 96       	adiw	r28, 0x06	; 6
    5650:	0f b6       	in	r0, 0x3f	; 63
    5652:	f8 94       	cli
    5654:	de bf       	out	0x3e, r29	; 62
    5656:	0f be       	out	0x3f, r0	; 63
    5658:	cd bf       	out	0x3d, r28	; 61
    565a:	cf 91       	pop	r28
    565c:	df 91       	pop	r29
    565e:	08 95       	ret

00005660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    5660:	ef 92       	push	r14
    5662:	ff 92       	push	r15
    5664:	0f 93       	push	r16
    5666:	df 93       	push	r29
    5668:	cf 93       	push	r28
    566a:	0f 92       	push	r0
    566c:	cd b7       	in	r28, 0x3d	; 61
    566e:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    5670:	84 e8       	ldi	r24, 0x84	; 132
    5672:	9f e2       	ldi	r25, 0x2F	; 47
    5674:	2e e8       	ldi	r18, 0x8E	; 142
    5676:	30 e0       	ldi	r19, 0x00	; 0
    5678:	ea e8       	ldi	r30, 0x8A	; 138
    567a:	f6 e0       	ldi	r31, 0x06	; 6
    567c:	b9 01       	movw	r22, r18
    567e:	45 e5       	ldi	r20, 0x55	; 85
    5680:	50 e0       	ldi	r21, 0x00	; 0
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	00 e0       	ldi	r16, 0x00	; 0
    5688:	7f 01       	movw	r14, r30
    568a:	0e 94 11 27 	call	0x4e22	; 0x4e22 <xTaskCreate>
    568e:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	81 30       	cpi	r24, 0x01	; 1
    5694:	81 f4       	brne	.+32     	; 0x56b6 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    5696:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    5698:	8f ef       	ldi	r24, 0xFF	; 255
    569a:	9f ef       	ldi	r25, 0xFF	; 255
    569c:	90 93 89 06 	sts	0x0689, r25
    56a0:	80 93 88 06 	sts	0x0688, r24
		xSchedulerRunning = pdTRUE;
    56a4:	81 e0       	ldi	r24, 0x01	; 1
    56a6:	80 93 83 06 	sts	0x0683, r24
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    56aa:	10 92 81 06 	sts	0x0681, r1
    56ae:	10 92 80 06 	sts	0x0680, r1

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    56b2:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    56b6:	0f 90       	pop	r0
    56b8:	cf 91       	pop	r28
    56ba:	df 91       	pop	r29
    56bc:	0f 91       	pop	r16
    56be:	ff 90       	pop	r15
    56c0:	ef 90       	pop	r14
    56c2:	08 95       	ret

000056c4 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    56c4:	df 93       	push	r29
    56c6:	cf 93       	push	r28
    56c8:	cd b7       	in	r28, 0x3d	; 61
    56ca:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    56cc:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    56ce:	10 92 83 06 	sts	0x0683, r1
	vPortEndScheduler();
    56d2:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vPortEndScheduler>
}
    56d6:	cf 91       	pop	r28
    56d8:	df 91       	pop	r29
    56da:	08 95       	ret

000056dc <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    56dc:	df 93       	push	r29
    56de:	cf 93       	push	r28
    56e0:	cd b7       	in	r28, 0x3d	; 61
    56e2:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    56e4:	80 91 8c 06 	lds	r24, 0x068C
    56e8:	8f 5f       	subi	r24, 0xFF	; 255
    56ea:	80 93 8c 06 	sts	0x068C, r24
}
    56ee:	cf 91       	pop	r28
    56f0:	df 91       	pop	r29
    56f2:	08 95       	ret

000056f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    56f4:	df 93       	push	r29
    56f6:	cf 93       	push	r28
    56f8:	00 d0       	rcall	.+0      	; 0x56fa <xTaskResumeAll+0x6>
    56fa:	00 d0       	rcall	.+0      	; 0x56fc <xTaskResumeAll+0x8>
    56fc:	cd b7       	in	r28, 0x3d	; 61
    56fe:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    5700:	1c 82       	std	Y+4, r1	; 0x04
    5702:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    5704:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5706:	0f b6       	in	r0, 0x3f	; 63
    5708:	f8 94       	cli
    570a:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    570c:	80 91 8c 06 	lds	r24, 0x068C
    5710:	81 50       	subi	r24, 0x01	; 1
    5712:	80 93 8c 06 	sts	0x068C, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5716:	80 91 8c 06 	lds	r24, 0x068C
    571a:	88 23       	and	r24, r24
    571c:	09 f0       	breq	.+2      	; 0x5720 <xTaskResumeAll+0x2c>
    571e:	73 c0       	rjmp	.+230    	; 0x5806 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    5720:	80 91 7f 06 	lds	r24, 0x067F
    5724:	88 23       	and	r24, r24
    5726:	09 f4       	brne	.+2      	; 0x572a <xTaskResumeAll+0x36>
    5728:	6e c0       	rjmp	.+220    	; 0x5806 <xTaskResumeAll+0x112>
    572a:	45 c0       	rjmp	.+138    	; 0x57b6 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    572c:	e0 91 cc 06 	lds	r30, 0x06CC
    5730:	f0 91 cd 06 	lds	r31, 0x06CD
    5734:	86 81       	ldd	r24, Z+6	; 0x06
    5736:	97 81       	ldd	r25, Z+7	; 0x07
    5738:	9c 83       	std	Y+4, r25	; 0x04
    573a:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    573c:	8b 81       	ldd	r24, Y+3	; 0x03
    573e:	9c 81       	ldd	r25, Y+4	; 0x04
    5740:	0c 96       	adiw	r24, 0x0c	; 12
    5742:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5746:	8b 81       	ldd	r24, Y+3	; 0x03
    5748:	9c 81       	ldd	r25, Y+4	; 0x04
    574a:	02 96       	adiw	r24, 0x02	; 2
    574c:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5750:	eb 81       	ldd	r30, Y+3	; 0x03
    5752:	fc 81       	ldd	r31, Y+4	; 0x04
    5754:	96 89       	ldd	r25, Z+22	; 0x16
    5756:	80 91 82 06 	lds	r24, 0x0682
    575a:	89 17       	cp	r24, r25
    575c:	28 f4       	brcc	.+10     	; 0x5768 <xTaskResumeAll+0x74>
    575e:	eb 81       	ldd	r30, Y+3	; 0x03
    5760:	fc 81       	ldd	r31, Y+4	; 0x04
    5762:	86 89       	ldd	r24, Z+22	; 0x16
    5764:	80 93 82 06 	sts	0x0682, r24
    5768:	eb 81       	ldd	r30, Y+3	; 0x03
    576a:	fc 81       	ldd	r31, Y+4	; 0x04
    576c:	86 89       	ldd	r24, Z+22	; 0x16
    576e:	28 2f       	mov	r18, r24
    5770:	30 e0       	ldi	r19, 0x00	; 0
    5772:	c9 01       	movw	r24, r18
    5774:	88 0f       	add	r24, r24
    5776:	99 1f       	adc	r25, r25
    5778:	88 0f       	add	r24, r24
    577a:	99 1f       	adc	r25, r25
    577c:	88 0f       	add	r24, r24
    577e:	99 1f       	adc	r25, r25
    5780:	82 0f       	add	r24, r18
    5782:	93 1f       	adc	r25, r19
    5784:	ac 01       	movw	r20, r24
    5786:	43 57       	subi	r20, 0x73	; 115
    5788:	59 4f       	sbci	r21, 0xF9	; 249
    578a:	8b 81       	ldd	r24, Y+3	; 0x03
    578c:	9c 81       	ldd	r25, Y+4	; 0x04
    578e:	9c 01       	movw	r18, r24
    5790:	2e 5f       	subi	r18, 0xFE	; 254
    5792:	3f 4f       	sbci	r19, 0xFF	; 255
    5794:	ca 01       	movw	r24, r20
    5796:	b9 01       	movw	r22, r18
    5798:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    579c:	eb 81       	ldd	r30, Y+3	; 0x03
    579e:	fc 81       	ldd	r31, Y+4	; 0x04
    57a0:	96 89       	ldd	r25, Z+22	; 0x16
    57a2:	e0 91 7c 06 	lds	r30, 0x067C
    57a6:	f0 91 7d 06 	lds	r31, 0x067D
    57aa:	86 89       	ldd	r24, Z+22	; 0x16
    57ac:	98 17       	cp	r25, r24
    57ae:	18 f0       	brcs	.+6      	; 0x57b6 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    57b0:	81 e0       	ldi	r24, 0x01	; 1
    57b2:	80 93 85 06 	sts	0x0685, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    57b6:	80 91 c7 06 	lds	r24, 0x06C7
    57ba:	88 23       	and	r24, r24
    57bc:	09 f0       	breq	.+2      	; 0x57c0 <xTaskResumeAll+0xcc>
    57be:	b6 cf       	rjmp	.-148    	; 0x572c <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    57c0:	8b 81       	ldd	r24, Y+3	; 0x03
    57c2:	9c 81       	ldd	r25, Y+4	; 0x04
    57c4:	00 97       	sbiw	r24, 0x00	; 0
    57c6:	11 f0       	breq	.+4      	; 0x57cc <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    57c8:	0e 94 14 30 	call	0x6028	; 0x6028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    57cc:	80 91 84 06 	lds	r24, 0x0684
    57d0:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
    57d4:	88 23       	and	r24, r24
    57d6:	79 f0       	breq	.+30     	; 0x57f6 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    57d8:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <xTaskIncrementTick>
    57dc:	88 23       	and	r24, r24
    57de:	19 f0       	breq	.+6      	; 0x57e6 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    57e0:	81 e0       	ldi	r24, 0x01	; 1
    57e2:	80 93 85 06 	sts	0x0685, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    57e6:	89 81       	ldd	r24, Y+1	; 0x01
    57e8:	81 50       	subi	r24, 0x01	; 1
    57ea:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    57ec:	89 81       	ldd	r24, Y+1	; 0x01
    57ee:	88 23       	and	r24, r24
    57f0:	99 f7       	brne	.-26     	; 0x57d8 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    57f2:	10 92 84 06 	sts	0x0684, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    57f6:	80 91 85 06 	lds	r24, 0x0685
    57fa:	88 23       	and	r24, r24
    57fc:	21 f0       	breq	.+8      	; 0x5806 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    57fe:	81 e0       	ldi	r24, 0x01	; 1
    5800:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    5802:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5806:	0f 90       	pop	r0
    5808:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    580a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    580c:	0f 90       	pop	r0
    580e:	0f 90       	pop	r0
    5810:	0f 90       	pop	r0
    5812:	0f 90       	pop	r0
    5814:	cf 91       	pop	r28
    5816:	df 91       	pop	r29
    5818:	08 95       	ret

0000581a <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    581a:	df 93       	push	r29
    581c:	cf 93       	push	r28
    581e:	00 d0       	rcall	.+0      	; 0x5820 <xTaskGetTickCount+0x6>
    5820:	cd b7       	in	r28, 0x3d	; 61
    5822:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    5824:	0f b6       	in	r0, 0x3f	; 63
    5826:	f8 94       	cli
    5828:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    582a:	80 91 80 06 	lds	r24, 0x0680
    582e:	90 91 81 06 	lds	r25, 0x0681
    5832:	9a 83       	std	Y+2, r25	; 0x02
    5834:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    5836:	0f 90       	pop	r0
    5838:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    583a:	89 81       	ldd	r24, Y+1	; 0x01
    583c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    583e:	0f 90       	pop	r0
    5840:	0f 90       	pop	r0
    5842:	cf 91       	pop	r28
    5844:	df 91       	pop	r29
    5846:	08 95       	ret

00005848 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    5848:	df 93       	push	r29
    584a:	cf 93       	push	r28
    584c:	00 d0       	rcall	.+0      	; 0x584e <xTaskGetTickCountFromISR+0x6>
    584e:	0f 92       	push	r0
    5850:	cd b7       	in	r28, 0x3d	; 61
    5852:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    5854:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    5856:	80 91 80 06 	lds	r24, 0x0680
    585a:	90 91 81 06 	lds	r25, 0x0681
    585e:	9b 83       	std	Y+3, r25	; 0x03
    5860:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5862:	8a 81       	ldd	r24, Y+2	; 0x02
    5864:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5866:	0f 90       	pop	r0
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
    586c:	cf 91       	pop	r28
    586e:	df 91       	pop	r29
    5870:	08 95       	ret

00005872 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    5872:	df 93       	push	r29
    5874:	cf 93       	push	r28
    5876:	cd b7       	in	r28, 0x3d	; 61
    5878:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    587a:	80 91 7f 06 	lds	r24, 0x067F
}
    587e:	cf 91       	pop	r28
    5880:	df 91       	pop	r29
    5882:	08 95       	ret

00005884 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    5884:	df 93       	push	r29
    5886:	cf 93       	push	r28
    5888:	00 d0       	rcall	.+0      	; 0x588a <pcTaskGetName+0x6>
    588a:	00 d0       	rcall	.+0      	; 0x588c <pcTaskGetName+0x8>
    588c:	00 d0       	rcall	.+0      	; 0x588e <pcTaskGetName+0xa>
    588e:	cd b7       	in	r28, 0x3d	; 61
    5890:	de b7       	in	r29, 0x3e	; 62
    5892:	9c 83       	std	Y+4, r25	; 0x04
    5894:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    5896:	8b 81       	ldd	r24, Y+3	; 0x03
    5898:	9c 81       	ldd	r25, Y+4	; 0x04
    589a:	00 97       	sbiw	r24, 0x00	; 0
    589c:	39 f4       	brne	.+14     	; 0x58ac <pcTaskGetName+0x28>
    589e:	80 91 7c 06 	lds	r24, 0x067C
    58a2:	90 91 7d 06 	lds	r25, 0x067D
    58a6:	9e 83       	std	Y+6, r25	; 0x06
    58a8:	8d 83       	std	Y+5, r24	; 0x05
    58aa:	04 c0       	rjmp	.+8      	; 0x58b4 <pcTaskGetName+0x30>
    58ac:	8b 81       	ldd	r24, Y+3	; 0x03
    58ae:	9c 81       	ldd	r25, Y+4	; 0x04
    58b0:	9e 83       	std	Y+6, r25	; 0x06
    58b2:	8d 83       	std	Y+5, r24	; 0x05
    58b4:	8d 81       	ldd	r24, Y+5	; 0x05
    58b6:	9e 81       	ldd	r25, Y+6	; 0x06
    58b8:	9a 83       	std	Y+2, r25	; 0x02
    58ba:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    58bc:	89 81       	ldd	r24, Y+1	; 0x01
    58be:	9a 81       	ldd	r25, Y+2	; 0x02
    58c0:	49 96       	adiw	r24, 0x19	; 25
}
    58c2:	26 96       	adiw	r28, 0x06	; 6
    58c4:	0f b6       	in	r0, 0x3f	; 63
    58c6:	f8 94       	cli
    58c8:	de bf       	out	0x3e, r29	; 62
    58ca:	0f be       	out	0x3f, r0	; 63
    58cc:	cd bf       	out	0x3d, r28	; 61
    58ce:	cf 91       	pop	r28
    58d0:	df 91       	pop	r29
    58d2:	08 95       	ret

000058d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    58d4:	df 93       	push	r29
    58d6:	cf 93       	push	r28
    58d8:	cd b7       	in	r28, 0x3d	; 61
    58da:	de b7       	in	r29, 0x3e	; 62
    58dc:	29 97       	sbiw	r28, 0x09	; 9
    58de:	0f b6       	in	r0, 0x3f	; 63
    58e0:	f8 94       	cli
    58e2:	de bf       	out	0x3e, r29	; 62
    58e4:	0f be       	out	0x3f, r0	; 63
    58e6:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    58e8:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    58ea:	80 91 8c 06 	lds	r24, 0x068C
    58ee:	88 23       	and	r24, r24
    58f0:	09 f0       	breq	.+2      	; 0x58f4 <xTaskIncrementTick+0x20>
    58f2:	c0 c0       	rjmp	.+384    	; 0x5a74 <xTaskIncrementTick+0x1a0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    58f4:	80 91 80 06 	lds	r24, 0x0680
    58f8:	90 91 81 06 	lds	r25, 0x0681
    58fc:	01 96       	adiw	r24, 0x01	; 1
    58fe:	9c 83       	std	Y+4, r25	; 0x04
    5900:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    5902:	8b 81       	ldd	r24, Y+3	; 0x03
    5904:	9c 81       	ldd	r25, Y+4	; 0x04
    5906:	90 93 81 06 	sts	0x0681, r25
    590a:	80 93 80 06 	sts	0x0680, r24

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    590e:	8b 81       	ldd	r24, Y+3	; 0x03
    5910:	9c 81       	ldd	r25, Y+4	; 0x04
    5912:	00 97       	sbiw	r24, 0x00	; 0
    5914:	d9 f4       	brne	.+54     	; 0x594c <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    5916:	80 91 c3 06 	lds	r24, 0x06C3
    591a:	90 91 c4 06 	lds	r25, 0x06C4
    591e:	9a 83       	std	Y+2, r25	; 0x02
    5920:	89 83       	std	Y+1, r24	; 0x01
    5922:	80 91 c5 06 	lds	r24, 0x06C5
    5926:	90 91 c6 06 	lds	r25, 0x06C6
    592a:	90 93 c4 06 	sts	0x06C4, r25
    592e:	80 93 c3 06 	sts	0x06C3, r24
    5932:	89 81       	ldd	r24, Y+1	; 0x01
    5934:	9a 81       	ldd	r25, Y+2	; 0x02
    5936:	90 93 c6 06 	sts	0x06C6, r25
    593a:	80 93 c5 06 	sts	0x06C5, r24
    593e:	80 91 86 06 	lds	r24, 0x0686
    5942:	8f 5f       	subi	r24, 0xFF	; 255
    5944:	80 93 86 06 	sts	0x0686, r24
    5948:	0e 94 14 30 	call	0x6028	; 0x6028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    594c:	20 91 88 06 	lds	r18, 0x0688
    5950:	30 91 89 06 	lds	r19, 0x0689
    5954:	8b 81       	ldd	r24, Y+3	; 0x03
    5956:	9c 81       	ldd	r25, Y+4	; 0x04
    5958:	82 17       	cp	r24, r18
    595a:	93 07       	cpc	r25, r19
    595c:	08 f4       	brcc	.+2      	; 0x5960 <xTaskIncrementTick+0x8c>
    595e:	71 c0       	rjmp	.+226    	; 0x5a42 <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5960:	e0 91 c3 06 	lds	r30, 0x06C3
    5964:	f0 91 c4 06 	lds	r31, 0x06C4
    5968:	80 81       	ld	r24, Z
    596a:	88 23       	and	r24, r24
    596c:	39 f4       	brne	.+14     	; 0x597c <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    596e:	8f ef       	ldi	r24, 0xFF	; 255
    5970:	9f ef       	ldi	r25, 0xFF	; 255
    5972:	90 93 89 06 	sts	0x0689, r25
    5976:	80 93 88 06 	sts	0x0688, r24
    597a:	63 c0       	rjmp	.+198    	; 0x5a42 <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    597c:	e0 91 c3 06 	lds	r30, 0x06C3
    5980:	f0 91 c4 06 	lds	r31, 0x06C4
    5984:	05 80       	ldd	r0, Z+5	; 0x05
    5986:	f6 81       	ldd	r31, Z+6	; 0x06
    5988:	e0 2d       	mov	r30, r0
    598a:	86 81       	ldd	r24, Z+6	; 0x06
    598c:	97 81       	ldd	r25, Z+7	; 0x07
    598e:	99 87       	std	Y+9, r25	; 0x09
    5990:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    5992:	e8 85       	ldd	r30, Y+8	; 0x08
    5994:	f9 85       	ldd	r31, Y+9	; 0x09
    5996:	82 81       	ldd	r24, Z+2	; 0x02
    5998:	93 81       	ldd	r25, Z+3	; 0x03
    599a:	9f 83       	std	Y+7, r25	; 0x07
    599c:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    599e:	2b 81       	ldd	r18, Y+3	; 0x03
    59a0:	3c 81       	ldd	r19, Y+4	; 0x04
    59a2:	8e 81       	ldd	r24, Y+6	; 0x06
    59a4:	9f 81       	ldd	r25, Y+7	; 0x07
    59a6:	28 17       	cp	r18, r24
    59a8:	39 07       	cpc	r19, r25
    59aa:	38 f4       	brcc	.+14     	; 0x59ba <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    59ac:	8e 81       	ldd	r24, Y+6	; 0x06
    59ae:	9f 81       	ldd	r25, Y+7	; 0x07
    59b0:	90 93 89 06 	sts	0x0689, r25
    59b4:	80 93 88 06 	sts	0x0688, r24
    59b8:	44 c0       	rjmp	.+136    	; 0x5a42 <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    59ba:	88 85       	ldd	r24, Y+8	; 0x08
    59bc:	99 85       	ldd	r25, Y+9	; 0x09
    59be:	02 96       	adiw	r24, 0x02	; 2
    59c0:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    59c4:	e8 85       	ldd	r30, Y+8	; 0x08
    59c6:	f9 85       	ldd	r31, Y+9	; 0x09
    59c8:	84 89       	ldd	r24, Z+20	; 0x14
    59ca:	95 89       	ldd	r25, Z+21	; 0x15
    59cc:	00 97       	sbiw	r24, 0x00	; 0
    59ce:	29 f0       	breq	.+10     	; 0x59da <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    59d0:	88 85       	ldd	r24, Y+8	; 0x08
    59d2:	99 85       	ldd	r25, Y+9	; 0x09
    59d4:	0c 96       	adiw	r24, 0x0c	; 12
    59d6:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    59da:	e8 85       	ldd	r30, Y+8	; 0x08
    59dc:	f9 85       	ldd	r31, Y+9	; 0x09
    59de:	96 89       	ldd	r25, Z+22	; 0x16
    59e0:	80 91 82 06 	lds	r24, 0x0682
    59e4:	89 17       	cp	r24, r25
    59e6:	28 f4       	brcc	.+10     	; 0x59f2 <xTaskIncrementTick+0x11e>
    59e8:	e8 85       	ldd	r30, Y+8	; 0x08
    59ea:	f9 85       	ldd	r31, Y+9	; 0x09
    59ec:	86 89       	ldd	r24, Z+22	; 0x16
    59ee:	80 93 82 06 	sts	0x0682, r24
    59f2:	e8 85       	ldd	r30, Y+8	; 0x08
    59f4:	f9 85       	ldd	r31, Y+9	; 0x09
    59f6:	86 89       	ldd	r24, Z+22	; 0x16
    59f8:	28 2f       	mov	r18, r24
    59fa:	30 e0       	ldi	r19, 0x00	; 0
    59fc:	c9 01       	movw	r24, r18
    59fe:	88 0f       	add	r24, r24
    5a00:	99 1f       	adc	r25, r25
    5a02:	88 0f       	add	r24, r24
    5a04:	99 1f       	adc	r25, r25
    5a06:	88 0f       	add	r24, r24
    5a08:	99 1f       	adc	r25, r25
    5a0a:	82 0f       	add	r24, r18
    5a0c:	93 1f       	adc	r25, r19
    5a0e:	ac 01       	movw	r20, r24
    5a10:	43 57       	subi	r20, 0x73	; 115
    5a12:	59 4f       	sbci	r21, 0xF9	; 249
    5a14:	88 85       	ldd	r24, Y+8	; 0x08
    5a16:	99 85       	ldd	r25, Y+9	; 0x09
    5a18:	9c 01       	movw	r18, r24
    5a1a:	2e 5f       	subi	r18, 0xFE	; 254
    5a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a1e:	ca 01       	movw	r24, r20
    5a20:	b9 01       	movw	r22, r18
    5a22:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5a26:	e8 85       	ldd	r30, Y+8	; 0x08
    5a28:	f9 85       	ldd	r31, Y+9	; 0x09
    5a2a:	96 89       	ldd	r25, Z+22	; 0x16
    5a2c:	e0 91 7c 06 	lds	r30, 0x067C
    5a30:	f0 91 7d 06 	lds	r31, 0x067D
    5a34:	86 89       	ldd	r24, Z+22	; 0x16
    5a36:	98 17       	cp	r25, r24
    5a38:	08 f4       	brcc	.+2      	; 0x5a3c <xTaskIncrementTick+0x168>
    5a3a:	92 cf       	rjmp	.-220    	; 0x5960 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    5a3c:	81 e0       	ldi	r24, 0x01	; 1
    5a3e:	8d 83       	std	Y+5, r24	; 0x05
    5a40:	8f cf       	rjmp	.-226    	; 0x5960 <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    5a42:	e0 91 7c 06 	lds	r30, 0x067C
    5a46:	f0 91 7d 06 	lds	r31, 0x067D
    5a4a:	86 89       	ldd	r24, Z+22	; 0x16
    5a4c:	28 2f       	mov	r18, r24
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	c9 01       	movw	r24, r18
    5a52:	88 0f       	add	r24, r24
    5a54:	99 1f       	adc	r25, r25
    5a56:	88 0f       	add	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	88 0f       	add	r24, r24
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	82 0f       	add	r24, r18
    5a60:	93 1f       	adc	r25, r19
    5a62:	fc 01       	movw	r30, r24
    5a64:	e3 57       	subi	r30, 0x73	; 115
    5a66:	f9 4f       	sbci	r31, 0xF9	; 249
    5a68:	80 81       	ld	r24, Z
    5a6a:	82 30       	cpi	r24, 0x02	; 2
    5a6c:	40 f0       	brcs	.+16     	; 0x5a7e <xTaskIncrementTick+0x1aa>
			{
				xSwitchRequired = pdTRUE;
    5a6e:	81 e0       	ldi	r24, 0x01	; 1
    5a70:	8d 83       	std	Y+5, r24	; 0x05
    5a72:	05 c0       	rjmp	.+10     	; 0x5a7e <xTaskIncrementTick+0x1aa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    5a74:	80 91 84 06 	lds	r24, 0x0684
    5a78:	8f 5f       	subi	r24, 0xFF	; 255
    5a7a:	80 93 84 06 	sts	0x0684, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    5a7e:	80 91 85 06 	lds	r24, 0x0685
    5a82:	88 23       	and	r24, r24
    5a84:	11 f0       	breq	.+4      	; 0x5a8a <xTaskIncrementTick+0x1b6>
		{
			xSwitchRequired = pdTRUE;
    5a86:	81 e0       	ldi	r24, 0x01	; 1
    5a88:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    5a8a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5a8c:	29 96       	adiw	r28, 0x09	; 9
    5a8e:	0f b6       	in	r0, 0x3f	; 63
    5a90:	f8 94       	cli
    5a92:	de bf       	out	0x3e, r29	; 62
    5a94:	0f be       	out	0x3f, r0	; 63
    5a96:	cd bf       	out	0x3d, r28	; 61
    5a98:	cf 91       	pop	r28
    5a9a:	df 91       	pop	r29
    5a9c:	08 95       	ret

00005a9e <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5a9e:	df 93       	push	r29
    5aa0:	cf 93       	push	r28
    5aa2:	00 d0       	rcall	.+0      	; 0x5aa4 <vTaskSwitchContext+0x6>
    5aa4:	0f 92       	push	r0
    5aa6:	cd b7       	in	r28, 0x3d	; 61
    5aa8:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    5aaa:	80 91 8c 06 	lds	r24, 0x068C
    5aae:	88 23       	and	r24, r24
    5ab0:	21 f0       	breq	.+8      	; 0x5aba <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    5ab2:	81 e0       	ldi	r24, 0x01	; 1
    5ab4:	80 93 85 06 	sts	0x0685, r24
    5ab8:	59 c0       	rjmp	.+178    	; 0x5b6c <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    5aba:	10 92 85 06 	sts	0x0685, r1
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5abe:	80 91 82 06 	lds	r24, 0x0682
    5ac2:	8b 83       	std	Y+3, r24	; 0x03
    5ac4:	03 c0       	rjmp	.+6      	; 0x5acc <vTaskSwitchContext+0x2e>
    5ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ac8:	81 50       	subi	r24, 0x01	; 1
    5aca:	8b 83       	std	Y+3, r24	; 0x03
    5acc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ace:	28 2f       	mov	r18, r24
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	c9 01       	movw	r24, r18
    5ad4:	88 0f       	add	r24, r24
    5ad6:	99 1f       	adc	r25, r25
    5ad8:	88 0f       	add	r24, r24
    5ada:	99 1f       	adc	r25, r25
    5adc:	88 0f       	add	r24, r24
    5ade:	99 1f       	adc	r25, r25
    5ae0:	82 0f       	add	r24, r18
    5ae2:	93 1f       	adc	r25, r19
    5ae4:	fc 01       	movw	r30, r24
    5ae6:	e3 57       	subi	r30, 0x73	; 115
    5ae8:	f9 4f       	sbci	r31, 0xF9	; 249
    5aea:	80 81       	ld	r24, Z
    5aec:	88 23       	and	r24, r24
    5aee:	59 f3       	breq	.-42     	; 0x5ac6 <vTaskSwitchContext+0x28>
    5af0:	8b 81       	ldd	r24, Y+3	; 0x03
    5af2:	28 2f       	mov	r18, r24
    5af4:	30 e0       	ldi	r19, 0x00	; 0
    5af6:	c9 01       	movw	r24, r18
    5af8:	88 0f       	add	r24, r24
    5afa:	99 1f       	adc	r25, r25
    5afc:	88 0f       	add	r24, r24
    5afe:	99 1f       	adc	r25, r25
    5b00:	88 0f       	add	r24, r24
    5b02:	99 1f       	adc	r25, r25
    5b04:	82 0f       	add	r24, r18
    5b06:	93 1f       	adc	r25, r19
    5b08:	83 57       	subi	r24, 0x73	; 115
    5b0a:	99 4f       	sbci	r25, 0xF9	; 249
    5b0c:	9a 83       	std	Y+2, r25	; 0x02
    5b0e:	89 83       	std	Y+1, r24	; 0x01
    5b10:	e9 81       	ldd	r30, Y+1	; 0x01
    5b12:	fa 81       	ldd	r31, Y+2	; 0x02
    5b14:	01 80       	ldd	r0, Z+1	; 0x01
    5b16:	f2 81       	ldd	r31, Z+2	; 0x02
    5b18:	e0 2d       	mov	r30, r0
    5b1a:	82 81       	ldd	r24, Z+2	; 0x02
    5b1c:	93 81       	ldd	r25, Z+3	; 0x03
    5b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    5b20:	fa 81       	ldd	r31, Y+2	; 0x02
    5b22:	92 83       	std	Z+2, r25	; 0x02
    5b24:	81 83       	std	Z+1, r24	; 0x01
    5b26:	e9 81       	ldd	r30, Y+1	; 0x01
    5b28:	fa 81       	ldd	r31, Y+2	; 0x02
    5b2a:	21 81       	ldd	r18, Z+1	; 0x01
    5b2c:	32 81       	ldd	r19, Z+2	; 0x02
    5b2e:	89 81       	ldd	r24, Y+1	; 0x01
    5b30:	9a 81       	ldd	r25, Y+2	; 0x02
    5b32:	03 96       	adiw	r24, 0x03	; 3
    5b34:	28 17       	cp	r18, r24
    5b36:	39 07       	cpc	r19, r25
    5b38:	59 f4       	brne	.+22     	; 0x5b50 <vTaskSwitchContext+0xb2>
    5b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    5b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    5b3e:	01 80       	ldd	r0, Z+1	; 0x01
    5b40:	f2 81       	ldd	r31, Z+2	; 0x02
    5b42:	e0 2d       	mov	r30, r0
    5b44:	82 81       	ldd	r24, Z+2	; 0x02
    5b46:	93 81       	ldd	r25, Z+3	; 0x03
    5b48:	e9 81       	ldd	r30, Y+1	; 0x01
    5b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    5b4c:	92 83       	std	Z+2, r25	; 0x02
    5b4e:	81 83       	std	Z+1, r24	; 0x01
    5b50:	e9 81       	ldd	r30, Y+1	; 0x01
    5b52:	fa 81       	ldd	r31, Y+2	; 0x02
    5b54:	01 80       	ldd	r0, Z+1	; 0x01
    5b56:	f2 81       	ldd	r31, Z+2	; 0x02
    5b58:	e0 2d       	mov	r30, r0
    5b5a:	86 81       	ldd	r24, Z+6	; 0x06
    5b5c:	97 81       	ldd	r25, Z+7	; 0x07
    5b5e:	90 93 7d 06 	sts	0x067D, r25
    5b62:	80 93 7c 06 	sts	0x067C, r24
    5b66:	8b 81       	ldd	r24, Y+3	; 0x03
    5b68:	80 93 82 06 	sts	0x0682, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    5b6c:	0f 90       	pop	r0
    5b6e:	0f 90       	pop	r0
    5b70:	0f 90       	pop	r0
    5b72:	cf 91       	pop	r28
    5b74:	df 91       	pop	r29
    5b76:	08 95       	ret

00005b78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    5b78:	df 93       	push	r29
    5b7a:	cf 93       	push	r28
    5b7c:	00 d0       	rcall	.+0      	; 0x5b7e <vTaskPlaceOnEventList+0x6>
    5b7e:	00 d0       	rcall	.+0      	; 0x5b80 <vTaskPlaceOnEventList+0x8>
    5b80:	cd b7       	in	r28, 0x3d	; 61
    5b82:	de b7       	in	r29, 0x3e	; 62
    5b84:	9a 83       	std	Y+2, r25	; 0x02
    5b86:	89 83       	std	Y+1, r24	; 0x01
    5b88:	7c 83       	std	Y+4, r23	; 0x04
    5b8a:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5b8c:	80 91 7c 06 	lds	r24, 0x067C
    5b90:	90 91 7d 06 	lds	r25, 0x067D
    5b94:	9c 01       	movw	r18, r24
    5b96:	24 5f       	subi	r18, 0xF4	; 244
    5b98:	3f 4f       	sbci	r19, 0xFF	; 255
    5b9a:	89 81       	ldd	r24, Y+1	; 0x01
    5b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b9e:	b9 01       	movw	r22, r18
    5ba0:	0e 94 26 14 	call	0x284c	; 0x284c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    5ba8:	61 e0       	ldi	r22, 0x01	; 1
    5baa:	0e 94 20 34 	call	0x6840	; 0x6840 <prvAddCurrentTaskToDelayedList>
}
    5bae:	0f 90       	pop	r0
    5bb0:	0f 90       	pop	r0
    5bb2:	0f 90       	pop	r0
    5bb4:	0f 90       	pop	r0
    5bb6:	cf 91       	pop	r28
    5bb8:	df 91       	pop	r29
    5bba:	08 95       	ret

00005bbc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    5bbc:	df 93       	push	r29
    5bbe:	cf 93       	push	r28
    5bc0:	00 d0       	rcall	.+0      	; 0x5bc2 <vTaskPlaceOnUnorderedEventList+0x6>
    5bc2:	00 d0       	rcall	.+0      	; 0x5bc4 <vTaskPlaceOnUnorderedEventList+0x8>
    5bc4:	00 d0       	rcall	.+0      	; 0x5bc6 <vTaskPlaceOnUnorderedEventList+0xa>
    5bc6:	cd b7       	in	r28, 0x3d	; 61
    5bc8:	de b7       	in	r29, 0x3e	; 62
    5bca:	9a 83       	std	Y+2, r25	; 0x02
    5bcc:	89 83       	std	Y+1, r24	; 0x01
    5bce:	7c 83       	std	Y+4, r23	; 0x04
    5bd0:	6b 83       	std	Y+3, r22	; 0x03
    5bd2:	5e 83       	std	Y+6, r21	; 0x06
    5bd4:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    5bd6:	e0 91 7c 06 	lds	r30, 0x067C
    5bda:	f0 91 7d 06 	lds	r31, 0x067D
    5bde:	8b 81       	ldd	r24, Y+3	; 0x03
    5be0:	9c 81       	ldd	r25, Y+4	; 0x04
    5be2:	90 68       	ori	r25, 0x80	; 128
    5be4:	95 87       	std	Z+13, r25	; 0x0d
    5be6:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5be8:	80 91 7c 06 	lds	r24, 0x067C
    5bec:	90 91 7d 06 	lds	r25, 0x067D
    5bf0:	9c 01       	movw	r18, r24
    5bf2:	24 5f       	subi	r18, 0xF4	; 244
    5bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf6:	89 81       	ldd	r24, Y+1	; 0x01
    5bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfa:	b9 01       	movw	r22, r18
    5bfc:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5c00:	8d 81       	ldd	r24, Y+5	; 0x05
    5c02:	9e 81       	ldd	r25, Y+6	; 0x06
    5c04:	61 e0       	ldi	r22, 0x01	; 1
    5c06:	0e 94 20 34 	call	0x6840	; 0x6840 <prvAddCurrentTaskToDelayedList>
}
    5c0a:	26 96       	adiw	r28, 0x06	; 6
    5c0c:	0f b6       	in	r0, 0x3f	; 63
    5c0e:	f8 94       	cli
    5c10:	de bf       	out	0x3e, r29	; 62
    5c12:	0f be       	out	0x3f, r0	; 63
    5c14:	cd bf       	out	0x3d, r28	; 61
    5c16:	cf 91       	pop	r28
    5c18:	df 91       	pop	r29
    5c1a:	08 95       	ret

00005c1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    5c1c:	df 93       	push	r29
    5c1e:	cf 93       	push	r28
    5c20:	00 d0       	rcall	.+0      	; 0x5c22 <xTaskRemoveFromEventList+0x6>
    5c22:	00 d0       	rcall	.+0      	; 0x5c24 <xTaskRemoveFromEventList+0x8>
    5c24:	0f 92       	push	r0
    5c26:	cd b7       	in	r28, 0x3d	; 61
    5c28:	de b7       	in	r29, 0x3e	; 62
    5c2a:	9d 83       	std	Y+5, r25	; 0x05
    5c2c:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5c2e:	ec 81       	ldd	r30, Y+4	; 0x04
    5c30:	fd 81       	ldd	r31, Y+5	; 0x05
    5c32:	05 80       	ldd	r0, Z+5	; 0x05
    5c34:	f6 81       	ldd	r31, Z+6	; 0x06
    5c36:	e0 2d       	mov	r30, r0
    5c38:	86 81       	ldd	r24, Z+6	; 0x06
    5c3a:	97 81       	ldd	r25, Z+7	; 0x07
    5c3c:	9b 83       	std	Y+3, r25	; 0x03
    5c3e:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5c40:	8a 81       	ldd	r24, Y+2	; 0x02
    5c42:	9b 81       	ldd	r25, Y+3	; 0x03
    5c44:	0c 96       	adiw	r24, 0x0c	; 12
    5c46:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5c4a:	80 91 8c 06 	lds	r24, 0x068C
    5c4e:	88 23       	and	r24, r24
    5c50:	61 f5       	brne	.+88     	; 0x5caa <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5c52:	8a 81       	ldd	r24, Y+2	; 0x02
    5c54:	9b 81       	ldd	r25, Y+3	; 0x03
    5c56:	02 96       	adiw	r24, 0x02	; 2
    5c58:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    5c5c:	ea 81       	ldd	r30, Y+2	; 0x02
    5c5e:	fb 81       	ldd	r31, Y+3	; 0x03
    5c60:	96 89       	ldd	r25, Z+22	; 0x16
    5c62:	80 91 82 06 	lds	r24, 0x0682
    5c66:	89 17       	cp	r24, r25
    5c68:	28 f4       	brcc	.+10     	; 0x5c74 <xTaskRemoveFromEventList+0x58>
    5c6a:	ea 81       	ldd	r30, Y+2	; 0x02
    5c6c:	fb 81       	ldd	r31, Y+3	; 0x03
    5c6e:	86 89       	ldd	r24, Z+22	; 0x16
    5c70:	80 93 82 06 	sts	0x0682, r24
    5c74:	ea 81       	ldd	r30, Y+2	; 0x02
    5c76:	fb 81       	ldd	r31, Y+3	; 0x03
    5c78:	86 89       	ldd	r24, Z+22	; 0x16
    5c7a:	28 2f       	mov	r18, r24
    5c7c:	30 e0       	ldi	r19, 0x00	; 0
    5c7e:	c9 01       	movw	r24, r18
    5c80:	88 0f       	add	r24, r24
    5c82:	99 1f       	adc	r25, r25
    5c84:	88 0f       	add	r24, r24
    5c86:	99 1f       	adc	r25, r25
    5c88:	88 0f       	add	r24, r24
    5c8a:	99 1f       	adc	r25, r25
    5c8c:	82 0f       	add	r24, r18
    5c8e:	93 1f       	adc	r25, r19
    5c90:	ac 01       	movw	r20, r24
    5c92:	43 57       	subi	r20, 0x73	; 115
    5c94:	59 4f       	sbci	r21, 0xF9	; 249
    5c96:	8a 81       	ldd	r24, Y+2	; 0x02
    5c98:	9b 81       	ldd	r25, Y+3	; 0x03
    5c9a:	9c 01       	movw	r18, r24
    5c9c:	2e 5f       	subi	r18, 0xFE	; 254
    5c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca0:	ca 01       	movw	r24, r20
    5ca2:	b9 01       	movw	r22, r18
    5ca4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    5ca8:	0a c0       	rjmp	.+20     	; 0x5cbe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5caa:	8a 81       	ldd	r24, Y+2	; 0x02
    5cac:	9b 81       	ldd	r25, Y+3	; 0x03
    5cae:	9c 01       	movw	r18, r24
    5cb0:	24 5f       	subi	r18, 0xF4	; 244
    5cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    5cb4:	87 ec       	ldi	r24, 0xC7	; 199
    5cb6:	96 e0       	ldi	r25, 0x06	; 6
    5cb8:	b9 01       	movw	r22, r18
    5cba:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5cbe:	ea 81       	ldd	r30, Y+2	; 0x02
    5cc0:	fb 81       	ldd	r31, Y+3	; 0x03
    5cc2:	96 89       	ldd	r25, Z+22	; 0x16
    5cc4:	e0 91 7c 06 	lds	r30, 0x067C
    5cc8:	f0 91 7d 06 	lds	r31, 0x067D
    5ccc:	86 89       	ldd	r24, Z+22	; 0x16
    5cce:	89 17       	cp	r24, r25
    5cd0:	30 f4       	brcc	.+12     	; 0x5cde <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    5cd2:	81 e0       	ldi	r24, 0x01	; 1
    5cd4:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5cd6:	81 e0       	ldi	r24, 0x01	; 1
    5cd8:	80 93 85 06 	sts	0x0685, r24
    5cdc:	01 c0       	rjmp	.+2      	; 0x5ce0 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    5cde:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    5ce2:	0f 90       	pop	r0
    5ce4:	0f 90       	pop	r0
    5ce6:	0f 90       	pop	r0
    5ce8:	0f 90       	pop	r0
    5cea:	0f 90       	pop	r0
    5cec:	cf 91       	pop	r28
    5cee:	df 91       	pop	r29
    5cf0:	08 95       	ret

00005cf2 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    5cf2:	df 93       	push	r29
    5cf4:	cf 93       	push	r28
    5cf6:	00 d0       	rcall	.+0      	; 0x5cf8 <vTaskRemoveFromUnorderedEventList+0x6>
    5cf8:	00 d0       	rcall	.+0      	; 0x5cfa <vTaskRemoveFromUnorderedEventList+0x8>
    5cfa:	00 d0       	rcall	.+0      	; 0x5cfc <vTaskRemoveFromUnorderedEventList+0xa>
    5cfc:	cd b7       	in	r28, 0x3d	; 61
    5cfe:	de b7       	in	r29, 0x3e	; 62
    5d00:	9c 83       	std	Y+4, r25	; 0x04
    5d02:	8b 83       	std	Y+3, r24	; 0x03
    5d04:	7e 83       	std	Y+6, r23	; 0x06
    5d06:	6d 83       	std	Y+5, r22	; 0x05
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    5d08:	8d 81       	ldd	r24, Y+5	; 0x05
    5d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d0c:	90 68       	ori	r25, 0x80	; 128
    5d0e:	eb 81       	ldd	r30, Y+3	; 0x03
    5d10:	fc 81       	ldd	r31, Y+4	; 0x04
    5d12:	91 83       	std	Z+1, r25	; 0x01
    5d14:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5d16:	eb 81       	ldd	r30, Y+3	; 0x03
    5d18:	fc 81       	ldd	r31, Y+4	; 0x04
    5d1a:	86 81       	ldd	r24, Z+6	; 0x06
    5d1c:	97 81       	ldd	r25, Z+7	; 0x07
    5d1e:	9a 83       	std	Y+2, r25	; 0x02
    5d20:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    5d22:	8b 81       	ldd	r24, Y+3	; 0x03
    5d24:	9c 81       	ldd	r25, Y+4	; 0x04
    5d26:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5d2a:	89 81       	ldd	r24, Y+1	; 0x01
    5d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d2e:	02 96       	adiw	r24, 0x02	; 2
    5d30:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    5d34:	e9 81       	ldd	r30, Y+1	; 0x01
    5d36:	fa 81       	ldd	r31, Y+2	; 0x02
    5d38:	96 89       	ldd	r25, Z+22	; 0x16
    5d3a:	80 91 82 06 	lds	r24, 0x0682
    5d3e:	89 17       	cp	r24, r25
    5d40:	28 f4       	brcc	.+10     	; 0x5d4c <vTaskRemoveFromUnorderedEventList+0x5a>
    5d42:	e9 81       	ldd	r30, Y+1	; 0x01
    5d44:	fa 81       	ldd	r31, Y+2	; 0x02
    5d46:	86 89       	ldd	r24, Z+22	; 0x16
    5d48:	80 93 82 06 	sts	0x0682, r24
    5d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    5d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    5d50:	86 89       	ldd	r24, Z+22	; 0x16
    5d52:	28 2f       	mov	r18, r24
    5d54:	30 e0       	ldi	r19, 0x00	; 0
    5d56:	c9 01       	movw	r24, r18
    5d58:	88 0f       	add	r24, r24
    5d5a:	99 1f       	adc	r25, r25
    5d5c:	88 0f       	add	r24, r24
    5d5e:	99 1f       	adc	r25, r25
    5d60:	88 0f       	add	r24, r24
    5d62:	99 1f       	adc	r25, r25
    5d64:	82 0f       	add	r24, r18
    5d66:	93 1f       	adc	r25, r19
    5d68:	ac 01       	movw	r20, r24
    5d6a:	43 57       	subi	r20, 0x73	; 115
    5d6c:	59 4f       	sbci	r21, 0xF9	; 249
    5d6e:	89 81       	ldd	r24, Y+1	; 0x01
    5d70:	9a 81       	ldd	r25, Y+2	; 0x02
    5d72:	9c 01       	movw	r18, r24
    5d74:	2e 5f       	subi	r18, 0xFE	; 254
    5d76:	3f 4f       	sbci	r19, 0xFF	; 255
    5d78:	ca 01       	movw	r24, r20
    5d7a:	b9 01       	movw	r22, r18
    5d7c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5d80:	e9 81       	ldd	r30, Y+1	; 0x01
    5d82:	fa 81       	ldd	r31, Y+2	; 0x02
    5d84:	96 89       	ldd	r25, Z+22	; 0x16
    5d86:	e0 91 7c 06 	lds	r30, 0x067C
    5d8a:	f0 91 7d 06 	lds	r31, 0x067D
    5d8e:	86 89       	ldd	r24, Z+22	; 0x16
    5d90:	89 17       	cp	r24, r25
    5d92:	18 f4       	brcc	.+6      	; 0x5d9a <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    5d94:	81 e0       	ldi	r24, 0x01	; 1
    5d96:	80 93 85 06 	sts	0x0685, r24
	}
}
    5d9a:	26 96       	adiw	r28, 0x06	; 6
    5d9c:	0f b6       	in	r0, 0x3f	; 63
    5d9e:	f8 94       	cli
    5da0:	de bf       	out	0x3e, r29	; 62
    5da2:	0f be       	out	0x3f, r0	; 63
    5da4:	cd bf       	out	0x3d, r28	; 61
    5da6:	cf 91       	pop	r28
    5da8:	df 91       	pop	r29
    5daa:	08 95       	ret

00005dac <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    5dac:	df 93       	push	r29
    5dae:	cf 93       	push	r28
    5db0:	00 d0       	rcall	.+0      	; 0x5db2 <vTaskSetTimeOutState+0x6>
    5db2:	cd b7       	in	r28, 0x3d	; 61
    5db4:	de b7       	in	r29, 0x3e	; 62
    5db6:	9a 83       	std	Y+2, r25	; 0x02
    5db8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    5dba:	0f b6       	in	r0, 0x3f	; 63
    5dbc:	f8 94       	cli
    5dbe:	0f 92       	push	r0
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    5dc0:	80 91 86 06 	lds	r24, 0x0686
    5dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    5dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    5dc8:	80 83       	st	Z, r24
		pxTimeOut->xTimeOnEntering = xTickCount;
    5dca:	80 91 80 06 	lds	r24, 0x0680
    5dce:	90 91 81 06 	lds	r25, 0x0681
    5dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    5dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    5dd6:	92 83       	std	Z+2, r25	; 0x02
    5dd8:	81 83       	std	Z+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    5dda:	0f 90       	pop	r0
    5ddc:	0f be       	out	0x3f, r0	; 63
}
    5dde:	0f 90       	pop	r0
    5de0:	0f 90       	pop	r0
    5de2:	cf 91       	pop	r28
    5de4:	df 91       	pop	r29
    5de6:	08 95       	ret

00005de8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    5de8:	df 93       	push	r29
    5dea:	cf 93       	push	r28
    5dec:	00 d0       	rcall	.+0      	; 0x5dee <vTaskInternalSetTimeOutState+0x6>
    5dee:	cd b7       	in	r28, 0x3d	; 61
    5df0:	de b7       	in	r29, 0x3e	; 62
    5df2:	9a 83       	std	Y+2, r25	; 0x02
    5df4:	89 83       	std	Y+1, r24	; 0x01
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5df6:	80 91 86 06 	lds	r24, 0x0686
    5dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    5dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    5dfe:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    5e00:	80 91 80 06 	lds	r24, 0x0680
    5e04:	90 91 81 06 	lds	r25, 0x0681
    5e08:	e9 81       	ldd	r30, Y+1	; 0x01
    5e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    5e0c:	92 83       	std	Z+2, r25	; 0x02
    5e0e:	81 83       	std	Z+1, r24	; 0x01
}
    5e10:	0f 90       	pop	r0
    5e12:	0f 90       	pop	r0
    5e14:	cf 91       	pop	r28
    5e16:	df 91       	pop	r29
    5e18:	08 95       	ret

00005e1a <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    5e1a:	df 93       	push	r29
    5e1c:	cf 93       	push	r28
    5e1e:	cd b7       	in	r28, 0x3d	; 61
    5e20:	de b7       	in	r29, 0x3e	; 62
    5e22:	29 97       	sbiw	r28, 0x09	; 9
    5e24:	0f b6       	in	r0, 0x3f	; 63
    5e26:	f8 94       	cli
    5e28:	de bf       	out	0x3e, r29	; 62
    5e2a:	0f be       	out	0x3f, r0	; 63
    5e2c:	cd bf       	out	0x3d, r28	; 61
    5e2e:	9f 83       	std	Y+7, r25	; 0x07
    5e30:	8e 83       	std	Y+6, r24	; 0x06
    5e32:	79 87       	std	Y+9, r23	; 0x09
    5e34:	68 87       	std	Y+8, r22	; 0x08
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5e36:	0f b6       	in	r0, 0x3f	; 63
    5e38:	f8 94       	cli
    5e3a:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    5e3c:	80 91 80 06 	lds	r24, 0x0680
    5e40:	90 91 81 06 	lds	r25, 0x0681
    5e44:	9c 83       	std	Y+4, r25	; 0x04
    5e46:	8b 83       	std	Y+3, r24	; 0x03
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5e48:	ee 81       	ldd	r30, Y+6	; 0x06
    5e4a:	ff 81       	ldd	r31, Y+7	; 0x07
    5e4c:	21 81       	ldd	r18, Z+1	; 0x01
    5e4e:	32 81       	ldd	r19, Z+2	; 0x02
    5e50:	8b 81       	ldd	r24, Y+3	; 0x03
    5e52:	9c 81       	ldd	r25, Y+4	; 0x04
    5e54:	82 1b       	sub	r24, r18
    5e56:	93 0b       	sbc	r25, r19
    5e58:	9a 83       	std	Y+2, r25	; 0x02
    5e5a:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    5e5c:	e8 85       	ldd	r30, Y+8	; 0x08
    5e5e:	f9 85       	ldd	r31, Y+9	; 0x09
    5e60:	80 81       	ld	r24, Z
    5e62:	91 81       	ldd	r25, Z+1	; 0x01
    5e64:	2f ef       	ldi	r18, 0xFF	; 255
    5e66:	8f 3f       	cpi	r24, 0xFF	; 255
    5e68:	92 07       	cpc	r25, r18
    5e6a:	11 f4       	brne	.+4      	; 0x5e70 <xTaskCheckForTimeOut+0x56>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    5e6c:	1d 82       	std	Y+5, r1	; 0x05
    5e6e:	36 c0       	rjmp	.+108    	; 0x5edc <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5e70:	ee 81       	ldd	r30, Y+6	; 0x06
    5e72:	ff 81       	ldd	r31, Y+7	; 0x07
    5e74:	90 81       	ld	r25, Z
    5e76:	80 91 86 06 	lds	r24, 0x0686
    5e7a:	98 17       	cp	r25, r24
    5e7c:	61 f0       	breq	.+24     	; 0x5e96 <xTaskCheckForTimeOut+0x7c>
    5e7e:	ee 81       	ldd	r30, Y+6	; 0x06
    5e80:	ff 81       	ldd	r31, Y+7	; 0x07
    5e82:	21 81       	ldd	r18, Z+1	; 0x01
    5e84:	32 81       	ldd	r19, Z+2	; 0x02
    5e86:	8b 81       	ldd	r24, Y+3	; 0x03
    5e88:	9c 81       	ldd	r25, Y+4	; 0x04
    5e8a:	82 17       	cp	r24, r18
    5e8c:	93 07       	cpc	r25, r19
    5e8e:	18 f0       	brcs	.+6      	; 0x5e96 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5e90:	81 e0       	ldi	r24, 0x01	; 1
    5e92:	8d 83       	std	Y+5, r24	; 0x05
    5e94:	23 c0       	rjmp	.+70     	; 0x5edc <xTaskCheckForTimeOut+0xc2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    5e96:	e8 85       	ldd	r30, Y+8	; 0x08
    5e98:	f9 85       	ldd	r31, Y+9	; 0x09
    5e9a:	20 81       	ld	r18, Z
    5e9c:	31 81       	ldd	r19, Z+1	; 0x01
    5e9e:	89 81       	ldd	r24, Y+1	; 0x01
    5ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ea2:	82 17       	cp	r24, r18
    5ea4:	93 07       	cpc	r25, r19
    5ea6:	a0 f4       	brcc	.+40     	; 0x5ed0 <xTaskCheckForTimeOut+0xb6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    5ea8:	e8 85       	ldd	r30, Y+8	; 0x08
    5eaa:	f9 85       	ldd	r31, Y+9	; 0x09
    5eac:	20 81       	ld	r18, Z
    5eae:	31 81       	ldd	r19, Z+1	; 0x01
    5eb0:	89 81       	ldd	r24, Y+1	; 0x01
    5eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb4:	a9 01       	movw	r20, r18
    5eb6:	48 1b       	sub	r20, r24
    5eb8:	59 0b       	sbc	r21, r25
    5eba:	ca 01       	movw	r24, r20
    5ebc:	e8 85       	ldd	r30, Y+8	; 0x08
    5ebe:	f9 85       	ldd	r31, Y+9	; 0x09
    5ec0:	91 83       	std	Z+1, r25	; 0x01
    5ec2:	80 83       	st	Z, r24
			vTaskInternalSetTimeOutState( pxTimeOut );
    5ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    5ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    5ec8:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    5ecc:	1d 82       	std	Y+5, r1	; 0x05
    5ece:	06 c0       	rjmp	.+12     	; 0x5edc <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			*pxTicksToWait = 0;
    5ed0:	e8 85       	ldd	r30, Y+8	; 0x08
    5ed2:	f9 85       	ldd	r31, Y+9	; 0x09
    5ed4:	11 82       	std	Z+1, r1	; 0x01
    5ed6:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    5ed8:	81 e0       	ldi	r24, 0x01	; 1
    5eda:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
	taskEXIT_CRITICAL();
    5edc:	0f 90       	pop	r0
    5ede:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    5ee0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5ee2:	29 96       	adiw	r28, 0x09	; 9
    5ee4:	0f b6       	in	r0, 0x3f	; 63
    5ee6:	f8 94       	cli
    5ee8:	de bf       	out	0x3e, r29	; 62
    5eea:	0f be       	out	0x3f, r0	; 63
    5eec:	cd bf       	out	0x3d, r28	; 61
    5eee:	cf 91       	pop	r28
    5ef0:	df 91       	pop	r29
    5ef2:	08 95       	ret

00005ef4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5ef4:	df 93       	push	r29
    5ef6:	cf 93       	push	r28
    5ef8:	cd b7       	in	r28, 0x3d	; 61
    5efa:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	80 93 85 06 	sts	0x0685, r24
}
    5f02:	cf 91       	pop	r28
    5f04:	df 91       	pop	r29
    5f06:	08 95       	ret

00005f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5f08:	df 93       	push	r29
    5f0a:	cf 93       	push	r28
    5f0c:	00 d0       	rcall	.+0      	; 0x5f0e <prvIdleTask+0x6>
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
    5f12:	9a 83       	std	Y+2, r25	; 0x02
    5f14:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    5f16:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <prvCheckTasksWaitingTermination>
    5f1a:	fd cf       	rjmp	.-6      	; 0x5f16 <prvIdleTask+0xe>

00005f1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    5f1c:	df 93       	push	r29
    5f1e:	cf 93       	push	r28
    5f20:	0f 92       	push	r0
    5f22:	cd b7       	in	r28, 0x3d	; 61
    5f24:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    5f26:	19 82       	std	Y+1, r1	; 0x01
    5f28:	13 c0       	rjmp	.+38     	; 0x5f50 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    5f2a:	89 81       	ldd	r24, Y+1	; 0x01
    5f2c:	28 2f       	mov	r18, r24
    5f2e:	30 e0       	ldi	r19, 0x00	; 0
    5f30:	c9 01       	movw	r24, r18
    5f32:	88 0f       	add	r24, r24
    5f34:	99 1f       	adc	r25, r25
    5f36:	88 0f       	add	r24, r24
    5f38:	99 1f       	adc	r25, r25
    5f3a:	88 0f       	add	r24, r24
    5f3c:	99 1f       	adc	r25, r25
    5f3e:	82 0f       	add	r24, r18
    5f40:	93 1f       	adc	r25, r19
    5f42:	83 57       	subi	r24, 0x73	; 115
    5f44:	99 4f       	sbci	r25, 0xF9	; 249
    5f46:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    5f4a:	89 81       	ldd	r24, Y+1	; 0x01
    5f4c:	8f 5f       	subi	r24, 0xFF	; 255
    5f4e:	89 83       	std	Y+1, r24	; 0x01
    5f50:	89 81       	ldd	r24, Y+1	; 0x01
    5f52:	84 30       	cpi	r24, 0x04	; 4
    5f54:	50 f3       	brcs	.-44     	; 0x5f2a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    5f56:	81 eb       	ldi	r24, 0xB1	; 177
    5f58:	96 e0       	ldi	r25, 0x06	; 6
    5f5a:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    5f5e:	8a eb       	ldi	r24, 0xBA	; 186
    5f60:	96 e0       	ldi	r25, 0x06	; 6
    5f62:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    5f66:	87 ec       	ldi	r24, 0xC7	; 199
    5f68:	96 e0       	ldi	r25, 0x06	; 6
    5f6a:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    5f6e:	80 ed       	ldi	r24, 0xD0	; 208
    5f70:	96 e0       	ldi	r25, 0x06	; 6
    5f72:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    5f76:	89 ed       	ldi	r24, 0xD9	; 217
    5f78:	96 e0       	ldi	r25, 0x06	; 6
    5f7a:	0e 94 a8 13 	call	0x2750	; 0x2750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5f7e:	81 eb       	ldi	r24, 0xB1	; 177
    5f80:	96 e0       	ldi	r25, 0x06	; 6
    5f82:	90 93 c4 06 	sts	0x06C4, r25
    5f86:	80 93 c3 06 	sts	0x06C3, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5f8a:	8a eb       	ldi	r24, 0xBA	; 186
    5f8c:	96 e0       	ldi	r25, 0x06	; 6
    5f8e:	90 93 c6 06 	sts	0x06C6, r25
    5f92:	80 93 c5 06 	sts	0x06C5, r24
}
    5f96:	0f 90       	pop	r0
    5f98:	cf 91       	pop	r28
    5f9a:	df 91       	pop	r29
    5f9c:	08 95       	ret

00005f9e <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5f9e:	df 93       	push	r29
    5fa0:	cf 93       	push	r28
    5fa2:	00 d0       	rcall	.+0      	; 0x5fa4 <prvCheckTasksWaitingTermination+0x6>
    5fa4:	cd b7       	in	r28, 0x3d	; 61
    5fa6:	de b7       	in	r29, 0x3e	; 62
    5fa8:	20 c0       	rjmp	.+64     	; 0x5fea <prvCheckTasksWaitingTermination+0x4c>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
    5faa:	0f b6       	in	r0, 0x3f	; 63
    5fac:	f8 94       	cli
    5fae:	0f 92       	push	r0
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5fb0:	e0 91 d5 06 	lds	r30, 0x06D5
    5fb4:	f0 91 d6 06 	lds	r31, 0x06D6
    5fb8:	86 81       	ldd	r24, Z+6	; 0x06
    5fba:	97 81       	ldd	r25, Z+7	; 0x07
    5fbc:	9a 83       	std	Y+2, r25	; 0x02
    5fbe:	89 83       	std	Y+1, r24	; 0x01
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5fc0:	89 81       	ldd	r24, Y+1	; 0x01
    5fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc4:	02 96       	adiw	r24, 0x02	; 2
    5fc6:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
				--uxCurrentNumberOfTasks;
    5fca:	80 91 7f 06 	lds	r24, 0x067F
    5fce:	81 50       	subi	r24, 0x01	; 1
    5fd0:	80 93 7f 06 	sts	0x067F, r24
				--uxDeletedTasksWaitingCleanUp;
    5fd4:	80 91 7e 06 	lds	r24, 0x067E
    5fd8:	81 50       	subi	r24, 0x01	; 1
    5fda:	80 93 7e 06 	sts	0x067E, r24
			}
			taskEXIT_CRITICAL();
    5fde:	0f 90       	pop	r0
    5fe0:	0f be       	out	0x3f, r0	; 63

			prvDeleteTCB( pxTCB );
    5fe2:	89 81       	ldd	r24, Y+1	; 0x01
    5fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe6:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    5fea:	80 91 7e 06 	lds	r24, 0x067E
    5fee:	88 23       	and	r24, r24
    5ff0:	e1 f6       	brne	.-72     	; 0x5faa <prvCheckTasksWaitingTermination+0xc>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    5ff2:	0f 90       	pop	r0
    5ff4:	0f 90       	pop	r0
    5ff6:	cf 91       	pop	r28
    5ff8:	df 91       	pop	r29
    5ffa:	08 95       	ret

00005ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    5ffc:	df 93       	push	r29
    5ffe:	cf 93       	push	r28
    6000:	00 d0       	rcall	.+0      	; 0x6002 <prvDeleteTCB+0x6>
    6002:	cd b7       	in	r28, 0x3d	; 61
    6004:	de b7       	in	r29, 0x3e	; 62
    6006:	9a 83       	std	Y+2, r25	; 0x02
    6008:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    600a:	e9 81       	ldd	r30, Y+1	; 0x01
    600c:	fa 81       	ldd	r31, Y+2	; 0x02
    600e:	87 89       	ldd	r24, Z+23	; 0x17
    6010:	90 8d       	ldd	r25, Z+24	; 0x18
    6012:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
			vPortFree( pxTCB );
    6016:	89 81       	ldd	r24, Y+1	; 0x01
    6018:	9a 81       	ldd	r25, Y+2	; 0x02
    601a:	0e 94 82 13 	call	0x2704	; 0x2704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    601e:	0f 90       	pop	r0
    6020:	0f 90       	pop	r0
    6022:	cf 91       	pop	r28
    6024:	df 91       	pop	r29
    6026:	08 95       	ret

00006028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    6028:	df 93       	push	r29
    602a:	cf 93       	push	r28
    602c:	00 d0       	rcall	.+0      	; 0x602e <prvResetNextTaskUnblockTime+0x6>
    602e:	cd b7       	in	r28, 0x3d	; 61
    6030:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    6032:	e0 91 c3 06 	lds	r30, 0x06C3
    6036:	f0 91 c4 06 	lds	r31, 0x06C4
    603a:	80 81       	ld	r24, Z
    603c:	88 23       	and	r24, r24
    603e:	39 f4       	brne	.+14     	; 0x604e <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    6040:	8f ef       	ldi	r24, 0xFF	; 255
    6042:	9f ef       	ldi	r25, 0xFF	; 255
    6044:	90 93 89 06 	sts	0x0689, r25
    6048:	80 93 88 06 	sts	0x0688, r24
    604c:	13 c0       	rjmp	.+38     	; 0x6074 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    604e:	e0 91 c3 06 	lds	r30, 0x06C3
    6052:	f0 91 c4 06 	lds	r31, 0x06C4
    6056:	05 80       	ldd	r0, Z+5	; 0x05
    6058:	f6 81       	ldd	r31, Z+6	; 0x06
    605a:	e0 2d       	mov	r30, r0
    605c:	86 81       	ldd	r24, Z+6	; 0x06
    605e:	97 81       	ldd	r25, Z+7	; 0x07
    6060:	9a 83       	std	Y+2, r25	; 0x02
    6062:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    6064:	e9 81       	ldd	r30, Y+1	; 0x01
    6066:	fa 81       	ldd	r31, Y+2	; 0x02
    6068:	82 81       	ldd	r24, Z+2	; 0x02
    606a:	93 81       	ldd	r25, Z+3	; 0x03
    606c:	90 93 89 06 	sts	0x0689, r25
    6070:	80 93 88 06 	sts	0x0688, r24
	}
}
    6074:	0f 90       	pop	r0
    6076:	0f 90       	pop	r0
    6078:	cf 91       	pop	r28
    607a:	df 91       	pop	r29
    607c:	08 95       	ret

0000607e <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    607e:	df 93       	push	r29
    6080:	cf 93       	push	r28
    6082:	00 d0       	rcall	.+0      	; 0x6084 <xTaskGetCurrentTaskHandle+0x6>
    6084:	cd b7       	in	r28, 0x3d	; 61
    6086:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    6088:	80 91 7c 06 	lds	r24, 0x067C
    608c:	90 91 7d 06 	lds	r25, 0x067D
    6090:	9a 83       	std	Y+2, r25	; 0x02
    6092:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    6094:	89 81       	ldd	r24, Y+1	; 0x01
    6096:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    6098:	0f 90       	pop	r0
    609a:	0f 90       	pop	r0
    609c:	cf 91       	pop	r28
    609e:	df 91       	pop	r29
    60a0:	08 95       	ret

000060a2 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    60a2:	df 93       	push	r29
    60a4:	cf 93       	push	r28
    60a6:	00 d0       	rcall	.+0      	; 0x60a8 <uxTaskResetEventItemValue+0x6>
    60a8:	cd b7       	in	r28, 0x3d	; 61
    60aa:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    60ac:	e0 91 7c 06 	lds	r30, 0x067C
    60b0:	f0 91 7d 06 	lds	r31, 0x067D
    60b4:	84 85       	ldd	r24, Z+12	; 0x0c
    60b6:	95 85       	ldd	r25, Z+13	; 0x0d
    60b8:	9a 83       	std	Y+2, r25	; 0x02
    60ba:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    60bc:	a0 91 7c 06 	lds	r26, 0x067C
    60c0:	b0 91 7d 06 	lds	r27, 0x067D
    60c4:	e0 91 7c 06 	lds	r30, 0x067C
    60c8:	f0 91 7d 06 	lds	r31, 0x067D
    60cc:	86 89       	ldd	r24, Z+22	; 0x16
    60ce:	28 2f       	mov	r18, r24
    60d0:	30 e0       	ldi	r19, 0x00	; 0
    60d2:	84 e0       	ldi	r24, 0x04	; 4
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	82 1b       	sub	r24, r18
    60d8:	93 0b       	sbc	r25, r19
    60da:	1d 96       	adiw	r26, 0x0d	; 13
    60dc:	9c 93       	st	X, r25
    60de:	8e 93       	st	-X, r24
    60e0:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    60e2:	89 81       	ldd	r24, Y+1	; 0x01
    60e4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    60e6:	0f 90       	pop	r0
    60e8:	0f 90       	pop	r0
    60ea:	cf 91       	pop	r28
    60ec:	df 91       	pop	r29
    60ee:	08 95       	ret

000060f0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    60f0:	df 93       	push	r29
    60f2:	cf 93       	push	r28
    60f4:	cd b7       	in	r28, 0x3d	; 61
    60f6:	de b7       	in	r29, 0x3e	; 62
    60f8:	27 97       	sbiw	r28, 0x07	; 7
    60fa:	0f b6       	in	r0, 0x3f	; 63
    60fc:	f8 94       	cli
    60fe:	de bf       	out	0x3e, r29	; 62
    6100:	0f be       	out	0x3f, r0	; 63
    6102:	cd bf       	out	0x3d, r28	; 61
    6104:	8d 83       	std	Y+5, r24	; 0x05
    6106:	7f 83       	std	Y+7, r23	; 0x07
    6108:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    610a:	0f b6       	in	r0, 0x3f	; 63
    610c:	f8 94       	cli
    610e:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    6110:	e0 91 7c 06 	lds	r30, 0x067C
    6114:	f0 91 7d 06 	lds	r31, 0x067D
    6118:	81 a1       	ldd	r24, Z+33	; 0x21
    611a:	92 a1       	ldd	r25, Z+34	; 0x22
    611c:	a3 a1       	ldd	r26, Z+35	; 0x23
    611e:	b4 a1       	ldd	r27, Z+36	; 0x24
    6120:	00 97       	sbiw	r24, 0x00	; 0
    6122:	a1 05       	cpc	r26, r1
    6124:	b1 05       	cpc	r27, r1
    6126:	89 f4       	brne	.+34     	; 0x614a <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    6128:	e0 91 7c 06 	lds	r30, 0x067C
    612c:	f0 91 7d 06 	lds	r31, 0x067D
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    6134:	8e 81       	ldd	r24, Y+6	; 0x06
    6136:	9f 81       	ldd	r25, Y+7	; 0x07
    6138:	00 97       	sbiw	r24, 0x00	; 0
    613a:	39 f0       	breq	.+14     	; 0x614a <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    613c:	8e 81       	ldd	r24, Y+6	; 0x06
    613e:	9f 81       	ldd	r25, Y+7	; 0x07
    6140:	61 e0       	ldi	r22, 0x01	; 1
    6142:	0e 94 20 34 	call	0x6840	; 0x6840 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    6146:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    614a:	0f 90       	pop	r0
    614c:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    614e:	0f b6       	in	r0, 0x3f	; 63
    6150:	f8 94       	cli
    6152:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    6154:	e0 91 7c 06 	lds	r30, 0x067C
    6158:	f0 91 7d 06 	lds	r31, 0x067D
    615c:	81 a1       	ldd	r24, Z+33	; 0x21
    615e:	92 a1       	ldd	r25, Z+34	; 0x22
    6160:	a3 a1       	ldd	r26, Z+35	; 0x23
    6162:	b4 a1       	ldd	r27, Z+36	; 0x24
    6164:	89 83       	std	Y+1, r24	; 0x01
    6166:	9a 83       	std	Y+2, r25	; 0x02
    6168:	ab 83       	std	Y+3, r26	; 0x03
    616a:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    616c:	89 81       	ldd	r24, Y+1	; 0x01
    616e:	9a 81       	ldd	r25, Y+2	; 0x02
    6170:	ab 81       	ldd	r26, Y+3	; 0x03
    6172:	bc 81       	ldd	r27, Y+4	; 0x04
    6174:	00 97       	sbiw	r24, 0x00	; 0
    6176:	a1 05       	cpc	r26, r1
    6178:	b1 05       	cpc	r27, r1
    617a:	d9 f0       	breq	.+54     	; 0x61b2 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    617c:	8d 81       	ldd	r24, Y+5	; 0x05
    617e:	88 23       	and	r24, r24
    6180:	49 f0       	breq	.+18     	; 0x6194 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    6182:	e0 91 7c 06 	lds	r30, 0x067C
    6186:	f0 91 7d 06 	lds	r31, 0x067D
    618a:	11 a2       	std	Z+33, r1	; 0x21
    618c:	12 a2       	std	Z+34, r1	; 0x22
    618e:	13 a2       	std	Z+35, r1	; 0x23
    6190:	14 a2       	std	Z+36, r1	; 0x24
    6192:	0f c0       	rjmp	.+30     	; 0x61b2 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    6194:	e0 91 7c 06 	lds	r30, 0x067C
    6198:	f0 91 7d 06 	lds	r31, 0x067D
    619c:	89 81       	ldd	r24, Y+1	; 0x01
    619e:	9a 81       	ldd	r25, Y+2	; 0x02
    61a0:	ab 81       	ldd	r26, Y+3	; 0x03
    61a2:	bc 81       	ldd	r27, Y+4	; 0x04
    61a4:	01 97       	sbiw	r24, 0x01	; 1
    61a6:	a1 09       	sbc	r26, r1
    61a8:	b1 09       	sbc	r27, r1
    61aa:	81 a3       	std	Z+33, r24	; 0x21
    61ac:	92 a3       	std	Z+34, r25	; 0x22
    61ae:	a3 a3       	std	Z+35, r26	; 0x23
    61b0:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    61b2:	e0 91 7c 06 	lds	r30, 0x067C
    61b6:	f0 91 7d 06 	lds	r31, 0x067D
    61ba:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    61bc:	0f 90       	pop	r0
    61be:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    61c0:	89 81       	ldd	r24, Y+1	; 0x01
    61c2:	9a 81       	ldd	r25, Y+2	; 0x02
    61c4:	ab 81       	ldd	r26, Y+3	; 0x03
    61c6:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    61c8:	bc 01       	movw	r22, r24
    61ca:	cd 01       	movw	r24, r26
    61cc:	27 96       	adiw	r28, 0x07	; 7
    61ce:	0f b6       	in	r0, 0x3f	; 63
    61d0:	f8 94       	cli
    61d2:	de bf       	out	0x3e, r29	; 62
    61d4:	0f be       	out	0x3f, r0	; 63
    61d6:	cd bf       	out	0x3d, r28	; 61
    61d8:	cf 91       	pop	r28
    61da:	df 91       	pop	r29
    61dc:	08 95       	ret

000061de <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    61de:	ef 92       	push	r14
    61e0:	ff 92       	push	r15
    61e2:	0f 93       	push	r16
    61e4:	1f 93       	push	r17
    61e6:	df 93       	push	r29
    61e8:	cf 93       	push	r28
    61ea:	cd b7       	in	r28, 0x3d	; 61
    61ec:	de b7       	in	r29, 0x3e	; 62
    61ee:	2d 97       	sbiw	r28, 0x0d	; 13
    61f0:	0f b6       	in	r0, 0x3f	; 63
    61f2:	f8 94       	cli
    61f4:	de bf       	out	0x3e, r29	; 62
    61f6:	0f be       	out	0x3f, r0	; 63
    61f8:	cd bf       	out	0x3d, r28	; 61
    61fa:	6a 83       	std	Y+2, r22	; 0x02
    61fc:	7b 83       	std	Y+3, r23	; 0x03
    61fe:	8c 83       	std	Y+4, r24	; 0x04
    6200:	9d 83       	std	Y+5, r25	; 0x05
    6202:	2e 83       	std	Y+6, r18	; 0x06
    6204:	3f 83       	std	Y+7, r19	; 0x07
    6206:	48 87       	std	Y+8, r20	; 0x08
    6208:	59 87       	std	Y+9, r21	; 0x09
    620a:	1b 87       	std	Y+11, r17	; 0x0b
    620c:	0a 87       	std	Y+10, r16	; 0x0a
    620e:	fd 86       	std	Y+13, r15	; 0x0d
    6210:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    6212:	0f b6       	in	r0, 0x3f	; 63
    6214:	f8 94       	cli
    6216:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    6218:	e0 91 7c 06 	lds	r30, 0x067C
    621c:	f0 91 7d 06 	lds	r31, 0x067D
    6220:	85 a1       	ldd	r24, Z+37	; 0x25
    6222:	82 30       	cpi	r24, 0x02	; 2
    6224:	49 f1       	breq	.+82     	; 0x6278 <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    6226:	e0 91 7c 06 	lds	r30, 0x067C
    622a:	f0 91 7d 06 	lds	r31, 0x067D
    622e:	21 a1       	ldd	r18, Z+33	; 0x21
    6230:	32 a1       	ldd	r19, Z+34	; 0x22
    6232:	43 a1       	ldd	r20, Z+35	; 0x23
    6234:	54 a1       	ldd	r21, Z+36	; 0x24
    6236:	8a 81       	ldd	r24, Y+2	; 0x02
    6238:	9b 81       	ldd	r25, Y+3	; 0x03
    623a:	ac 81       	ldd	r26, Y+4	; 0x04
    623c:	bd 81       	ldd	r27, Y+5	; 0x05
    623e:	80 95       	com	r24
    6240:	90 95       	com	r25
    6242:	a0 95       	com	r26
    6244:	b0 95       	com	r27
    6246:	82 23       	and	r24, r18
    6248:	93 23       	and	r25, r19
    624a:	a4 23       	and	r26, r20
    624c:	b5 23       	and	r27, r21
    624e:	81 a3       	std	Z+33, r24	; 0x21
    6250:	92 a3       	std	Z+34, r25	; 0x22
    6252:	a3 a3       	std	Z+35, r26	; 0x23
    6254:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    6256:	e0 91 7c 06 	lds	r30, 0x067C
    625a:	f0 91 7d 06 	lds	r31, 0x067D
    625e:	81 e0       	ldi	r24, 0x01	; 1
    6260:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    6262:	8c 85       	ldd	r24, Y+12	; 0x0c
    6264:	9d 85       	ldd	r25, Y+13	; 0x0d
    6266:	00 97       	sbiw	r24, 0x00	; 0
    6268:	39 f0       	breq	.+14     	; 0x6278 <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    626a:	8c 85       	ldd	r24, Y+12	; 0x0c
    626c:	9d 85       	ldd	r25, Y+13	; 0x0d
    626e:	61 e0       	ldi	r22, 0x01	; 1
    6270:	0e 94 20 34 	call	0x6840	; 0x6840 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    6274:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    6278:	0f 90       	pop	r0
    627a:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    627c:	0f b6       	in	r0, 0x3f	; 63
    627e:	f8 94       	cli
    6280:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    6282:	8a 85       	ldd	r24, Y+10	; 0x0a
    6284:	9b 85       	ldd	r25, Y+11	; 0x0b
    6286:	00 97       	sbiw	r24, 0x00	; 0
    6288:	71 f0       	breq	.+28     	; 0x62a6 <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    628a:	e0 91 7c 06 	lds	r30, 0x067C
    628e:	f0 91 7d 06 	lds	r31, 0x067D
    6292:	81 a1       	ldd	r24, Z+33	; 0x21
    6294:	92 a1       	ldd	r25, Z+34	; 0x22
    6296:	a3 a1       	ldd	r26, Z+35	; 0x23
    6298:	b4 a1       	ldd	r27, Z+36	; 0x24
    629a:	ea 85       	ldd	r30, Y+10	; 0x0a
    629c:	fb 85       	ldd	r31, Y+11	; 0x0b
    629e:	80 83       	st	Z, r24
    62a0:	91 83       	std	Z+1, r25	; 0x01
    62a2:	a2 83       	std	Z+2, r26	; 0x02
    62a4:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    62a6:	e0 91 7c 06 	lds	r30, 0x067C
    62aa:	f0 91 7d 06 	lds	r31, 0x067D
    62ae:	85 a1       	ldd	r24, Z+37	; 0x25
    62b0:	82 30       	cpi	r24, 0x02	; 2
    62b2:	11 f0       	breq	.+4      	; 0x62b8 <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    62b4:	19 82       	std	Y+1, r1	; 0x01
    62b6:	1a c0       	rjmp	.+52     	; 0x62ec <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    62b8:	e0 91 7c 06 	lds	r30, 0x067C
    62bc:	f0 91 7d 06 	lds	r31, 0x067D
    62c0:	21 a1       	ldd	r18, Z+33	; 0x21
    62c2:	32 a1       	ldd	r19, Z+34	; 0x22
    62c4:	43 a1       	ldd	r20, Z+35	; 0x23
    62c6:	54 a1       	ldd	r21, Z+36	; 0x24
    62c8:	8e 81       	ldd	r24, Y+6	; 0x06
    62ca:	9f 81       	ldd	r25, Y+7	; 0x07
    62cc:	a8 85       	ldd	r26, Y+8	; 0x08
    62ce:	b9 85       	ldd	r27, Y+9	; 0x09
    62d0:	80 95       	com	r24
    62d2:	90 95       	com	r25
    62d4:	a0 95       	com	r26
    62d6:	b0 95       	com	r27
    62d8:	82 23       	and	r24, r18
    62da:	93 23       	and	r25, r19
    62dc:	a4 23       	and	r26, r20
    62de:	b5 23       	and	r27, r21
    62e0:	81 a3       	std	Z+33, r24	; 0x21
    62e2:	92 a3       	std	Z+34, r25	; 0x22
    62e4:	a3 a3       	std	Z+35, r26	; 0x23
    62e6:	b4 a3       	std	Z+36, r27	; 0x24
				xReturn = pdTRUE;
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    62ec:	e0 91 7c 06 	lds	r30, 0x067C
    62f0:	f0 91 7d 06 	lds	r31, 0x067D
    62f4:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    62f6:	0f 90       	pop	r0
    62f8:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    62fa:	89 81       	ldd	r24, Y+1	; 0x01
	}
    62fc:	2d 96       	adiw	r28, 0x0d	; 13
    62fe:	0f b6       	in	r0, 0x3f	; 63
    6300:	f8 94       	cli
    6302:	de bf       	out	0x3e, r29	; 62
    6304:	0f be       	out	0x3f, r0	; 63
    6306:	cd bf       	out	0x3d, r28	; 61
    6308:	cf 91       	pop	r28
    630a:	df 91       	pop	r29
    630c:	1f 91       	pop	r17
    630e:	0f 91       	pop	r16
    6310:	ff 90       	pop	r15
    6312:	ef 90       	pop	r14
    6314:	08 95       	ret

00006316 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    6316:	0f 93       	push	r16
    6318:	1f 93       	push	r17
    631a:	df 93       	push	r29
    631c:	cf 93       	push	r28
    631e:	cd b7       	in	r28, 0x3d	; 61
    6320:	de b7       	in	r29, 0x3e	; 62
    6322:	2f 97       	sbiw	r28, 0x0f	; 15
    6324:	0f b6       	in	r0, 0x3f	; 63
    6326:	f8 94       	cli
    6328:	de bf       	out	0x3e, r29	; 62
    632a:	0f be       	out	0x3f, r0	; 63
    632c:	cd bf       	out	0x3d, r28	; 61
    632e:	9e 83       	std	Y+6, r25	; 0x06
    6330:	8d 83       	std	Y+5, r24	; 0x05
    6332:	4f 83       	std	Y+7, r20	; 0x07
    6334:	58 87       	std	Y+8, r21	; 0x08
    6336:	69 87       	std	Y+9, r22	; 0x09
    6338:	7a 87       	std	Y+10, r23	; 0x0a
    633a:	2b 87       	std	Y+11, r18	; 0x0b
    633c:	1d 87       	std	Y+13, r17	; 0x0d
    633e:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    6340:	81 e0       	ldi	r24, 0x01	; 1
    6342:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
    6344:	8d 81       	ldd	r24, Y+5	; 0x05
    6346:	9e 81       	ldd	r25, Y+6	; 0x06
    6348:	9c 83       	std	Y+4, r25	; 0x04
    634a:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    634c:	0f b6       	in	r0, 0x3f	; 63
    634e:	f8 94       	cli
    6350:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    6352:	8c 85       	ldd	r24, Y+12	; 0x0c
    6354:	9d 85       	ldd	r25, Y+13	; 0x0d
    6356:	00 97       	sbiw	r24, 0x00	; 0
    6358:	61 f0       	breq	.+24     	; 0x6372 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    635a:	eb 81       	ldd	r30, Y+3	; 0x03
    635c:	fc 81       	ldd	r31, Y+4	; 0x04
    635e:	81 a1       	ldd	r24, Z+33	; 0x21
    6360:	92 a1       	ldd	r25, Z+34	; 0x22
    6362:	a3 a1       	ldd	r26, Z+35	; 0x23
    6364:	b4 a1       	ldd	r27, Z+36	; 0x24
    6366:	ec 85       	ldd	r30, Y+12	; 0x0c
    6368:	fd 85       	ldd	r31, Y+13	; 0x0d
    636a:	80 83       	st	Z, r24
    636c:	91 83       	std	Z+1, r25	; 0x01
    636e:	a2 83       	std	Z+2, r26	; 0x02
    6370:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    6372:	eb 81       	ldd	r30, Y+3	; 0x03
    6374:	fc 81       	ldd	r31, Y+4	; 0x04
    6376:	85 a1       	ldd	r24, Z+37	; 0x25
    6378:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    637a:	eb 81       	ldd	r30, Y+3	; 0x03
    637c:	fc 81       	ldd	r31, Y+4	; 0x04
    637e:	82 e0       	ldi	r24, 0x02	; 2
    6380:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    6382:	8b 85       	ldd	r24, Y+11	; 0x0b
    6384:	28 2f       	mov	r18, r24
    6386:	30 e0       	ldi	r19, 0x00	; 0
    6388:	3f 87       	std	Y+15, r19	; 0x0f
    638a:	2e 87       	std	Y+14, r18	; 0x0e
    638c:	8e 85       	ldd	r24, Y+14	; 0x0e
    638e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6390:	82 30       	cpi	r24, 0x02	; 2
    6392:	91 05       	cpc	r25, r1
    6394:	59 f1       	breq	.+86     	; 0x63ec <xTaskGenericNotify+0xd6>
    6396:	2e 85       	ldd	r18, Y+14	; 0x0e
    6398:	3f 85       	ldd	r19, Y+15	; 0x0f
    639a:	23 30       	cpi	r18, 0x03	; 3
    639c:	31 05       	cpc	r19, r1
    639e:	34 f4       	brge	.+12     	; 0x63ac <xTaskGenericNotify+0x96>
    63a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    63a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    63a4:	81 30       	cpi	r24, 0x01	; 1
    63a6:	91 05       	cpc	r25, r1
    63a8:	61 f0       	breq	.+24     	; 0x63c2 <xTaskGenericNotify+0xac>
    63aa:	4a c0       	rjmp	.+148    	; 0x6440 <xTaskGenericNotify+0x12a>
    63ac:	2e 85       	ldd	r18, Y+14	; 0x0e
    63ae:	3f 85       	ldd	r19, Y+15	; 0x0f
    63b0:	23 30       	cpi	r18, 0x03	; 3
    63b2:	31 05       	cpc	r19, r1
    63b4:	59 f1       	breq	.+86     	; 0x640c <xTaskGenericNotify+0xf6>
    63b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    63b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    63ba:	84 30       	cpi	r24, 0x04	; 4
    63bc:	91 05       	cpc	r25, r1
    63be:	89 f1       	breq	.+98     	; 0x6422 <xTaskGenericNotify+0x10c>
    63c0:	3f c0       	rjmp	.+126    	; 0x6440 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    63c2:	eb 81       	ldd	r30, Y+3	; 0x03
    63c4:	fc 81       	ldd	r31, Y+4	; 0x04
    63c6:	21 a1       	ldd	r18, Z+33	; 0x21
    63c8:	32 a1       	ldd	r19, Z+34	; 0x22
    63ca:	43 a1       	ldd	r20, Z+35	; 0x23
    63cc:	54 a1       	ldd	r21, Z+36	; 0x24
    63ce:	8f 81       	ldd	r24, Y+7	; 0x07
    63d0:	98 85       	ldd	r25, Y+8	; 0x08
    63d2:	a9 85       	ldd	r26, Y+9	; 0x09
    63d4:	ba 85       	ldd	r27, Y+10	; 0x0a
    63d6:	82 2b       	or	r24, r18
    63d8:	93 2b       	or	r25, r19
    63da:	a4 2b       	or	r26, r20
    63dc:	b5 2b       	or	r27, r21
    63de:	eb 81       	ldd	r30, Y+3	; 0x03
    63e0:	fc 81       	ldd	r31, Y+4	; 0x04
    63e2:	81 a3       	std	Z+33, r24	; 0x21
    63e4:	92 a3       	std	Z+34, r25	; 0x22
    63e6:	a3 a3       	std	Z+35, r26	; 0x23
    63e8:	b4 a3       	std	Z+36, r27	; 0x24
    63ea:	2a c0       	rjmp	.+84     	; 0x6440 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    63ec:	eb 81       	ldd	r30, Y+3	; 0x03
    63ee:	fc 81       	ldd	r31, Y+4	; 0x04
    63f0:	81 a1       	ldd	r24, Z+33	; 0x21
    63f2:	92 a1       	ldd	r25, Z+34	; 0x22
    63f4:	a3 a1       	ldd	r26, Z+35	; 0x23
    63f6:	b4 a1       	ldd	r27, Z+36	; 0x24
    63f8:	01 96       	adiw	r24, 0x01	; 1
    63fa:	a1 1d       	adc	r26, r1
    63fc:	b1 1d       	adc	r27, r1
    63fe:	eb 81       	ldd	r30, Y+3	; 0x03
    6400:	fc 81       	ldd	r31, Y+4	; 0x04
    6402:	81 a3       	std	Z+33, r24	; 0x21
    6404:	92 a3       	std	Z+34, r25	; 0x22
    6406:	a3 a3       	std	Z+35, r26	; 0x23
    6408:	b4 a3       	std	Z+36, r27	; 0x24
    640a:	1a c0       	rjmp	.+52     	; 0x6440 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    640c:	eb 81       	ldd	r30, Y+3	; 0x03
    640e:	fc 81       	ldd	r31, Y+4	; 0x04
    6410:	8f 81       	ldd	r24, Y+7	; 0x07
    6412:	98 85       	ldd	r25, Y+8	; 0x08
    6414:	a9 85       	ldd	r26, Y+9	; 0x09
    6416:	ba 85       	ldd	r27, Y+10	; 0x0a
    6418:	81 a3       	std	Z+33, r24	; 0x21
    641a:	92 a3       	std	Z+34, r25	; 0x22
    641c:	a3 a3       	std	Z+35, r26	; 0x23
    641e:	b4 a3       	std	Z+36, r27	; 0x24
    6420:	0f c0       	rjmp	.+30     	; 0x6440 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    6422:	89 81       	ldd	r24, Y+1	; 0x01
    6424:	82 30       	cpi	r24, 0x02	; 2
    6426:	59 f0       	breq	.+22     	; 0x643e <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    6428:	eb 81       	ldd	r30, Y+3	; 0x03
    642a:	fc 81       	ldd	r31, Y+4	; 0x04
    642c:	8f 81       	ldd	r24, Y+7	; 0x07
    642e:	98 85       	ldd	r25, Y+8	; 0x08
    6430:	a9 85       	ldd	r26, Y+9	; 0x09
    6432:	ba 85       	ldd	r27, Y+10	; 0x0a
    6434:	81 a3       	std	Z+33, r24	; 0x21
    6436:	92 a3       	std	Z+34, r25	; 0x22
    6438:	a3 a3       	std	Z+35, r26	; 0x23
    643a:	b4 a3       	std	Z+36, r27	; 0x24
    643c:	01 c0       	rjmp	.+2      	; 0x6440 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    643e:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    6440:	89 81       	ldd	r24, Y+1	; 0x01
    6442:	81 30       	cpi	r24, 0x01	; 1
    6444:	b9 f5       	brne	.+110    	; 0x64b4 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6446:	8b 81       	ldd	r24, Y+3	; 0x03
    6448:	9c 81       	ldd	r25, Y+4	; 0x04
    644a:	02 96       	adiw	r24, 0x02	; 2
    644c:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    6450:	eb 81       	ldd	r30, Y+3	; 0x03
    6452:	fc 81       	ldd	r31, Y+4	; 0x04
    6454:	96 89       	ldd	r25, Z+22	; 0x16
    6456:	80 91 82 06 	lds	r24, 0x0682
    645a:	89 17       	cp	r24, r25
    645c:	28 f4       	brcc	.+10     	; 0x6468 <xTaskGenericNotify+0x152>
    645e:	eb 81       	ldd	r30, Y+3	; 0x03
    6460:	fc 81       	ldd	r31, Y+4	; 0x04
    6462:	86 89       	ldd	r24, Z+22	; 0x16
    6464:	80 93 82 06 	sts	0x0682, r24
    6468:	eb 81       	ldd	r30, Y+3	; 0x03
    646a:	fc 81       	ldd	r31, Y+4	; 0x04
    646c:	86 89       	ldd	r24, Z+22	; 0x16
    646e:	28 2f       	mov	r18, r24
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	c9 01       	movw	r24, r18
    6474:	88 0f       	add	r24, r24
    6476:	99 1f       	adc	r25, r25
    6478:	88 0f       	add	r24, r24
    647a:	99 1f       	adc	r25, r25
    647c:	88 0f       	add	r24, r24
    647e:	99 1f       	adc	r25, r25
    6480:	82 0f       	add	r24, r18
    6482:	93 1f       	adc	r25, r19
    6484:	ac 01       	movw	r20, r24
    6486:	43 57       	subi	r20, 0x73	; 115
    6488:	59 4f       	sbci	r21, 0xF9	; 249
    648a:	8b 81       	ldd	r24, Y+3	; 0x03
    648c:	9c 81       	ldd	r25, Y+4	; 0x04
    648e:	9c 01       	movw	r18, r24
    6490:	2e 5f       	subi	r18, 0xFE	; 254
    6492:	3f 4f       	sbci	r19, 0xFF	; 255
    6494:	ca 01       	movw	r24, r20
    6496:	b9 01       	movw	r22, r18
    6498:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    649c:	eb 81       	ldd	r30, Y+3	; 0x03
    649e:	fc 81       	ldd	r31, Y+4	; 0x04
    64a0:	96 89       	ldd	r25, Z+22	; 0x16
    64a2:	e0 91 7c 06 	lds	r30, 0x067C
    64a6:	f0 91 7d 06 	lds	r31, 0x067D
    64aa:	86 89       	ldd	r24, Z+22	; 0x16
    64ac:	89 17       	cp	r24, r25
    64ae:	10 f4       	brcc	.+4      	; 0x64b4 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    64b0:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    64b4:	0f 90       	pop	r0
    64b6:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    64b8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    64ba:	2f 96       	adiw	r28, 0x0f	; 15
    64bc:	0f b6       	in	r0, 0x3f	; 63
    64be:	f8 94       	cli
    64c0:	de bf       	out	0x3e, r29	; 62
    64c2:	0f be       	out	0x3f, r0	; 63
    64c4:	cd bf       	out	0x3d, r28	; 61
    64c6:	cf 91       	pop	r28
    64c8:	df 91       	pop	r29
    64ca:	1f 91       	pop	r17
    64cc:	0f 91       	pop	r16
    64ce:	08 95       	ret

000064d0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    64d0:	ef 92       	push	r14
    64d2:	ff 92       	push	r15
    64d4:	0f 93       	push	r16
    64d6:	1f 93       	push	r17
    64d8:	df 93       	push	r29
    64da:	cf 93       	push	r28
    64dc:	cd b7       	in	r28, 0x3d	; 61
    64de:	de b7       	in	r29, 0x3e	; 62
    64e0:	62 97       	sbiw	r28, 0x12	; 18
    64e2:	0f b6       	in	r0, 0x3f	; 63
    64e4:	f8 94       	cli
    64e6:	de bf       	out	0x3e, r29	; 62
    64e8:	0f be       	out	0x3f, r0	; 63
    64ea:	cd bf       	out	0x3d, r28	; 61
    64ec:	9f 83       	std	Y+7, r25	; 0x07
    64ee:	8e 83       	std	Y+6, r24	; 0x06
    64f0:	48 87       	std	Y+8, r20	; 0x08
    64f2:	59 87       	std	Y+9, r21	; 0x09
    64f4:	6a 87       	std	Y+10, r22	; 0x0a
    64f6:	7b 87       	std	Y+11, r23	; 0x0b
    64f8:	2c 87       	std	Y+12, r18	; 0x0c
    64fa:	1e 87       	std	Y+14, r17	; 0x0e
    64fc:	0d 87       	std	Y+13, r16	; 0x0d
    64fe:	f8 8a       	std	Y+16, r15	; 0x10
    6500:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    6502:	81 e0       	ldi	r24, 0x01	; 1
    6504:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    6506:	8e 81       	ldd	r24, Y+6	; 0x06
    6508:	9f 81       	ldd	r25, Y+7	; 0x07
    650a:	9d 83       	std	Y+5, r25	; 0x05
    650c:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    650e:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    6510:	8d 85       	ldd	r24, Y+13	; 0x0d
    6512:	9e 85       	ldd	r25, Y+14	; 0x0e
    6514:	00 97       	sbiw	r24, 0x00	; 0
    6516:	61 f0       	breq	.+24     	; 0x6530 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    6518:	ec 81       	ldd	r30, Y+4	; 0x04
    651a:	fd 81       	ldd	r31, Y+5	; 0x05
    651c:	81 a1       	ldd	r24, Z+33	; 0x21
    651e:	92 a1       	ldd	r25, Z+34	; 0x22
    6520:	a3 a1       	ldd	r26, Z+35	; 0x23
    6522:	b4 a1       	ldd	r27, Z+36	; 0x24
    6524:	ed 85       	ldd	r30, Y+13	; 0x0d
    6526:	fe 85       	ldd	r31, Y+14	; 0x0e
    6528:	80 83       	st	Z, r24
    652a:	91 83       	std	Z+1, r25	; 0x01
    652c:	a2 83       	std	Z+2, r26	; 0x02
    652e:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    6530:	ec 81       	ldd	r30, Y+4	; 0x04
    6532:	fd 81       	ldd	r31, Y+5	; 0x05
    6534:	85 a1       	ldd	r24, Z+37	; 0x25
    6536:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    6538:	ec 81       	ldd	r30, Y+4	; 0x04
    653a:	fd 81       	ldd	r31, Y+5	; 0x05
    653c:	82 e0       	ldi	r24, 0x02	; 2
    653e:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    6540:	8c 85       	ldd	r24, Y+12	; 0x0c
    6542:	28 2f       	mov	r18, r24
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	3a 8b       	std	Y+18, r19	; 0x12
    6548:	29 8b       	std	Y+17, r18	; 0x11
    654a:	89 89       	ldd	r24, Y+17	; 0x11
    654c:	9a 89       	ldd	r25, Y+18	; 0x12
    654e:	82 30       	cpi	r24, 0x02	; 2
    6550:	91 05       	cpc	r25, r1
    6552:	59 f1       	breq	.+86     	; 0x65aa <xTaskGenericNotifyFromISR+0xda>
    6554:	29 89       	ldd	r18, Y+17	; 0x11
    6556:	3a 89       	ldd	r19, Y+18	; 0x12
    6558:	23 30       	cpi	r18, 0x03	; 3
    655a:	31 05       	cpc	r19, r1
    655c:	34 f4       	brge	.+12     	; 0x656a <xTaskGenericNotifyFromISR+0x9a>
    655e:	89 89       	ldd	r24, Y+17	; 0x11
    6560:	9a 89       	ldd	r25, Y+18	; 0x12
    6562:	81 30       	cpi	r24, 0x01	; 1
    6564:	91 05       	cpc	r25, r1
    6566:	61 f0       	breq	.+24     	; 0x6580 <xTaskGenericNotifyFromISR+0xb0>
    6568:	4a c0       	rjmp	.+148    	; 0x65fe <xTaskGenericNotifyFromISR+0x12e>
    656a:	29 89       	ldd	r18, Y+17	; 0x11
    656c:	3a 89       	ldd	r19, Y+18	; 0x12
    656e:	23 30       	cpi	r18, 0x03	; 3
    6570:	31 05       	cpc	r19, r1
    6572:	59 f1       	breq	.+86     	; 0x65ca <xTaskGenericNotifyFromISR+0xfa>
    6574:	89 89       	ldd	r24, Y+17	; 0x11
    6576:	9a 89       	ldd	r25, Y+18	; 0x12
    6578:	84 30       	cpi	r24, 0x04	; 4
    657a:	91 05       	cpc	r25, r1
    657c:	89 f1       	breq	.+98     	; 0x65e0 <xTaskGenericNotifyFromISR+0x110>
    657e:	3f c0       	rjmp	.+126    	; 0x65fe <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    6580:	ec 81       	ldd	r30, Y+4	; 0x04
    6582:	fd 81       	ldd	r31, Y+5	; 0x05
    6584:	21 a1       	ldd	r18, Z+33	; 0x21
    6586:	32 a1       	ldd	r19, Z+34	; 0x22
    6588:	43 a1       	ldd	r20, Z+35	; 0x23
    658a:	54 a1       	ldd	r21, Z+36	; 0x24
    658c:	88 85       	ldd	r24, Y+8	; 0x08
    658e:	99 85       	ldd	r25, Y+9	; 0x09
    6590:	aa 85       	ldd	r26, Y+10	; 0x0a
    6592:	bb 85       	ldd	r27, Y+11	; 0x0b
    6594:	82 2b       	or	r24, r18
    6596:	93 2b       	or	r25, r19
    6598:	a4 2b       	or	r26, r20
    659a:	b5 2b       	or	r27, r21
    659c:	ec 81       	ldd	r30, Y+4	; 0x04
    659e:	fd 81       	ldd	r31, Y+5	; 0x05
    65a0:	81 a3       	std	Z+33, r24	; 0x21
    65a2:	92 a3       	std	Z+34, r25	; 0x22
    65a4:	a3 a3       	std	Z+35, r26	; 0x23
    65a6:	b4 a3       	std	Z+36, r27	; 0x24
    65a8:	2a c0       	rjmp	.+84     	; 0x65fe <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    65aa:	ec 81       	ldd	r30, Y+4	; 0x04
    65ac:	fd 81       	ldd	r31, Y+5	; 0x05
    65ae:	81 a1       	ldd	r24, Z+33	; 0x21
    65b0:	92 a1       	ldd	r25, Z+34	; 0x22
    65b2:	a3 a1       	ldd	r26, Z+35	; 0x23
    65b4:	b4 a1       	ldd	r27, Z+36	; 0x24
    65b6:	01 96       	adiw	r24, 0x01	; 1
    65b8:	a1 1d       	adc	r26, r1
    65ba:	b1 1d       	adc	r27, r1
    65bc:	ec 81       	ldd	r30, Y+4	; 0x04
    65be:	fd 81       	ldd	r31, Y+5	; 0x05
    65c0:	81 a3       	std	Z+33, r24	; 0x21
    65c2:	92 a3       	std	Z+34, r25	; 0x22
    65c4:	a3 a3       	std	Z+35, r26	; 0x23
    65c6:	b4 a3       	std	Z+36, r27	; 0x24
    65c8:	1a c0       	rjmp	.+52     	; 0x65fe <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    65ca:	ec 81       	ldd	r30, Y+4	; 0x04
    65cc:	fd 81       	ldd	r31, Y+5	; 0x05
    65ce:	88 85       	ldd	r24, Y+8	; 0x08
    65d0:	99 85       	ldd	r25, Y+9	; 0x09
    65d2:	aa 85       	ldd	r26, Y+10	; 0x0a
    65d4:	bb 85       	ldd	r27, Y+11	; 0x0b
    65d6:	81 a3       	std	Z+33, r24	; 0x21
    65d8:	92 a3       	std	Z+34, r25	; 0x22
    65da:	a3 a3       	std	Z+35, r26	; 0x23
    65dc:	b4 a3       	std	Z+36, r27	; 0x24
    65de:	0f c0       	rjmp	.+30     	; 0x65fe <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    65e0:	8b 81       	ldd	r24, Y+3	; 0x03
    65e2:	82 30       	cpi	r24, 0x02	; 2
    65e4:	59 f0       	breq	.+22     	; 0x65fc <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    65e6:	ec 81       	ldd	r30, Y+4	; 0x04
    65e8:	fd 81       	ldd	r31, Y+5	; 0x05
    65ea:	88 85       	ldd	r24, Y+8	; 0x08
    65ec:	99 85       	ldd	r25, Y+9	; 0x09
    65ee:	aa 85       	ldd	r26, Y+10	; 0x0a
    65f0:	bb 85       	ldd	r27, Y+11	; 0x0b
    65f2:	81 a3       	std	Z+33, r24	; 0x21
    65f4:	92 a3       	std	Z+34, r25	; 0x22
    65f6:	a3 a3       	std	Z+35, r26	; 0x23
    65f8:	b4 a3       	std	Z+36, r27	; 0x24
    65fa:	01 c0       	rjmp	.+2      	; 0x65fe <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    65fc:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    65fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6600:	81 30       	cpi	r24, 0x01	; 1
    6602:	09 f0       	breq	.+2      	; 0x6606 <xTaskGenericNotifyFromISR+0x136>
    6604:	4f c0       	rjmp	.+158    	; 0x66a4 <xTaskGenericNotifyFromISR+0x1d4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6606:	80 91 8c 06 	lds	r24, 0x068C
    660a:	88 23       	and	r24, r24
    660c:	61 f5       	brne	.+88     	; 0x6666 <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    660e:	8c 81       	ldd	r24, Y+4	; 0x04
    6610:	9d 81       	ldd	r25, Y+5	; 0x05
    6612:	02 96       	adiw	r24, 0x02	; 2
    6614:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    6618:	ec 81       	ldd	r30, Y+4	; 0x04
    661a:	fd 81       	ldd	r31, Y+5	; 0x05
    661c:	96 89       	ldd	r25, Z+22	; 0x16
    661e:	80 91 82 06 	lds	r24, 0x0682
    6622:	89 17       	cp	r24, r25
    6624:	28 f4       	brcc	.+10     	; 0x6630 <xTaskGenericNotifyFromISR+0x160>
    6626:	ec 81       	ldd	r30, Y+4	; 0x04
    6628:	fd 81       	ldd	r31, Y+5	; 0x05
    662a:	86 89       	ldd	r24, Z+22	; 0x16
    662c:	80 93 82 06 	sts	0x0682, r24
    6630:	ec 81       	ldd	r30, Y+4	; 0x04
    6632:	fd 81       	ldd	r31, Y+5	; 0x05
    6634:	86 89       	ldd	r24, Z+22	; 0x16
    6636:	28 2f       	mov	r18, r24
    6638:	30 e0       	ldi	r19, 0x00	; 0
    663a:	c9 01       	movw	r24, r18
    663c:	88 0f       	add	r24, r24
    663e:	99 1f       	adc	r25, r25
    6640:	88 0f       	add	r24, r24
    6642:	99 1f       	adc	r25, r25
    6644:	88 0f       	add	r24, r24
    6646:	99 1f       	adc	r25, r25
    6648:	82 0f       	add	r24, r18
    664a:	93 1f       	adc	r25, r19
    664c:	ac 01       	movw	r20, r24
    664e:	43 57       	subi	r20, 0x73	; 115
    6650:	59 4f       	sbci	r21, 0xF9	; 249
    6652:	8c 81       	ldd	r24, Y+4	; 0x04
    6654:	9d 81       	ldd	r25, Y+5	; 0x05
    6656:	9c 01       	movw	r18, r24
    6658:	2e 5f       	subi	r18, 0xFE	; 254
    665a:	3f 4f       	sbci	r19, 0xFF	; 255
    665c:	ca 01       	movw	r24, r20
    665e:	b9 01       	movw	r22, r18
    6660:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    6664:	0a c0       	rjmp	.+20     	; 0x667a <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    6666:	8c 81       	ldd	r24, Y+4	; 0x04
    6668:	9d 81       	ldd	r25, Y+5	; 0x05
    666a:	9c 01       	movw	r18, r24
    666c:	24 5f       	subi	r18, 0xF4	; 244
    666e:	3f 4f       	sbci	r19, 0xFF	; 255
    6670:	87 ec       	ldi	r24, 0xC7	; 199
    6672:	96 e0       	ldi	r25, 0x06	; 6
    6674:	b9 01       	movw	r22, r18
    6676:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    667a:	ec 81       	ldd	r30, Y+4	; 0x04
    667c:	fd 81       	ldd	r31, Y+5	; 0x05
    667e:	96 89       	ldd	r25, Z+22	; 0x16
    6680:	e0 91 7c 06 	lds	r30, 0x067C
    6684:	f0 91 7d 06 	lds	r31, 0x067D
    6688:	86 89       	ldd	r24, Z+22	; 0x16
    668a:	89 17       	cp	r24, r25
    668c:	58 f4       	brcc	.+22     	; 0x66a4 <xTaskGenericNotifyFromISR+0x1d4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    668e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6690:	98 89       	ldd	r25, Y+16	; 0x10
    6692:	00 97       	sbiw	r24, 0x00	; 0
    6694:	21 f0       	breq	.+8      	; 0x669e <xTaskGenericNotifyFromISR+0x1ce>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    6696:	ef 85       	ldd	r30, Y+15	; 0x0f
    6698:	f8 89       	ldd	r31, Y+16	; 0x10
    669a:	81 e0       	ldi	r24, 0x01	; 1
    669c:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    669e:	81 e0       	ldi	r24, 0x01	; 1
    66a0:	80 93 85 06 	sts	0x0685, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    66a4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    66a6:	62 96       	adiw	r28, 0x12	; 18
    66a8:	0f b6       	in	r0, 0x3f	; 63
    66aa:	f8 94       	cli
    66ac:	de bf       	out	0x3e, r29	; 62
    66ae:	0f be       	out	0x3f, r0	; 63
    66b0:	cd bf       	out	0x3d, r28	; 61
    66b2:	cf 91       	pop	r28
    66b4:	df 91       	pop	r29
    66b6:	1f 91       	pop	r17
    66b8:	0f 91       	pop	r16
    66ba:	ff 90       	pop	r15
    66bc:	ef 90       	pop	r14
    66be:	08 95       	ret

000066c0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    66c0:	df 93       	push	r29
    66c2:	cf 93       	push	r28
    66c4:	cd b7       	in	r28, 0x3d	; 61
    66c6:	de b7       	in	r29, 0x3e	; 62
    66c8:	28 97       	sbiw	r28, 0x08	; 8
    66ca:	0f b6       	in	r0, 0x3f	; 63
    66cc:	f8 94       	cli
    66ce:	de bf       	out	0x3e, r29	; 62
    66d0:	0f be       	out	0x3f, r0	; 63
    66d2:	cd bf       	out	0x3d, r28	; 61
    66d4:	9e 83       	std	Y+6, r25	; 0x06
    66d6:	8d 83       	std	Y+5, r24	; 0x05
    66d8:	78 87       	std	Y+8, r23	; 0x08
    66da:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    66dc:	8d 81       	ldd	r24, Y+5	; 0x05
    66de:	9e 81       	ldd	r25, Y+6	; 0x06
    66e0:	9c 83       	std	Y+4, r25	; 0x04
    66e2:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    66e4:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    66e6:	eb 81       	ldd	r30, Y+3	; 0x03
    66e8:	fc 81       	ldd	r31, Y+4	; 0x04
    66ea:	85 a1       	ldd	r24, Z+37	; 0x25
    66ec:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    66ee:	eb 81       	ldd	r30, Y+3	; 0x03
    66f0:	fc 81       	ldd	r31, Y+4	; 0x04
    66f2:	82 e0       	ldi	r24, 0x02	; 2
    66f4:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    66f6:	eb 81       	ldd	r30, Y+3	; 0x03
    66f8:	fc 81       	ldd	r31, Y+4	; 0x04
    66fa:	81 a1       	ldd	r24, Z+33	; 0x21
    66fc:	92 a1       	ldd	r25, Z+34	; 0x22
    66fe:	a3 a1       	ldd	r26, Z+35	; 0x23
    6700:	b4 a1       	ldd	r27, Z+36	; 0x24
    6702:	01 96       	adiw	r24, 0x01	; 1
    6704:	a1 1d       	adc	r26, r1
    6706:	b1 1d       	adc	r27, r1
    6708:	eb 81       	ldd	r30, Y+3	; 0x03
    670a:	fc 81       	ldd	r31, Y+4	; 0x04
    670c:	81 a3       	std	Z+33, r24	; 0x21
    670e:	92 a3       	std	Z+34, r25	; 0x22
    6710:	a3 a3       	std	Z+35, r26	; 0x23
    6712:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    6714:	8a 81       	ldd	r24, Y+2	; 0x02
    6716:	81 30       	cpi	r24, 0x01	; 1
    6718:	09 f0       	breq	.+2      	; 0x671c <vTaskNotifyGiveFromISR+0x5c>
    671a:	4f c0       	rjmp	.+158    	; 0x67ba <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    671c:	80 91 8c 06 	lds	r24, 0x068C
    6720:	88 23       	and	r24, r24
    6722:	61 f5       	brne	.+88     	; 0x677c <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6724:	8b 81       	ldd	r24, Y+3	; 0x03
    6726:	9c 81       	ldd	r25, Y+4	; 0x04
    6728:	02 96       	adiw	r24, 0x02	; 2
    672a:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    672e:	eb 81       	ldd	r30, Y+3	; 0x03
    6730:	fc 81       	ldd	r31, Y+4	; 0x04
    6732:	96 89       	ldd	r25, Z+22	; 0x16
    6734:	80 91 82 06 	lds	r24, 0x0682
    6738:	89 17       	cp	r24, r25
    673a:	28 f4       	brcc	.+10     	; 0x6746 <vTaskNotifyGiveFromISR+0x86>
    673c:	eb 81       	ldd	r30, Y+3	; 0x03
    673e:	fc 81       	ldd	r31, Y+4	; 0x04
    6740:	86 89       	ldd	r24, Z+22	; 0x16
    6742:	80 93 82 06 	sts	0x0682, r24
    6746:	eb 81       	ldd	r30, Y+3	; 0x03
    6748:	fc 81       	ldd	r31, Y+4	; 0x04
    674a:	86 89       	ldd	r24, Z+22	; 0x16
    674c:	28 2f       	mov	r18, r24
    674e:	30 e0       	ldi	r19, 0x00	; 0
    6750:	c9 01       	movw	r24, r18
    6752:	88 0f       	add	r24, r24
    6754:	99 1f       	adc	r25, r25
    6756:	88 0f       	add	r24, r24
    6758:	99 1f       	adc	r25, r25
    675a:	88 0f       	add	r24, r24
    675c:	99 1f       	adc	r25, r25
    675e:	82 0f       	add	r24, r18
    6760:	93 1f       	adc	r25, r19
    6762:	ac 01       	movw	r20, r24
    6764:	43 57       	subi	r20, 0x73	; 115
    6766:	59 4f       	sbci	r21, 0xF9	; 249
    6768:	8b 81       	ldd	r24, Y+3	; 0x03
    676a:	9c 81       	ldd	r25, Y+4	; 0x04
    676c:	9c 01       	movw	r18, r24
    676e:	2e 5f       	subi	r18, 0xFE	; 254
    6770:	3f 4f       	sbci	r19, 0xFF	; 255
    6772:	ca 01       	movw	r24, r20
    6774:	b9 01       	movw	r22, r18
    6776:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    677a:	0a c0       	rjmp	.+20     	; 0x6790 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    677c:	8b 81       	ldd	r24, Y+3	; 0x03
    677e:	9c 81       	ldd	r25, Y+4	; 0x04
    6780:	9c 01       	movw	r18, r24
    6782:	24 5f       	subi	r18, 0xF4	; 244
    6784:	3f 4f       	sbci	r19, 0xFF	; 255
    6786:	87 ec       	ldi	r24, 0xC7	; 199
    6788:	96 e0       	ldi	r25, 0x06	; 6
    678a:	b9 01       	movw	r22, r18
    678c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    6790:	eb 81       	ldd	r30, Y+3	; 0x03
    6792:	fc 81       	ldd	r31, Y+4	; 0x04
    6794:	96 89       	ldd	r25, Z+22	; 0x16
    6796:	e0 91 7c 06 	lds	r30, 0x067C
    679a:	f0 91 7d 06 	lds	r31, 0x067D
    679e:	86 89       	ldd	r24, Z+22	; 0x16
    67a0:	89 17       	cp	r24, r25
    67a2:	58 f4       	brcc	.+22     	; 0x67ba <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    67a4:	8f 81       	ldd	r24, Y+7	; 0x07
    67a6:	98 85       	ldd	r25, Y+8	; 0x08
    67a8:	00 97       	sbiw	r24, 0x00	; 0
    67aa:	21 f0       	breq	.+8      	; 0x67b4 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    67ac:	ef 81       	ldd	r30, Y+7	; 0x07
    67ae:	f8 85       	ldd	r31, Y+8	; 0x08
    67b0:	81 e0       	ldi	r24, 0x01	; 1
    67b2:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    67b4:	81 e0       	ldi	r24, 0x01	; 1
    67b6:	80 93 85 06 	sts	0x0685, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    67ba:	28 96       	adiw	r28, 0x08	; 8
    67bc:	0f b6       	in	r0, 0x3f	; 63
    67be:	f8 94       	cli
    67c0:	de bf       	out	0x3e, r29	; 62
    67c2:	0f be       	out	0x3f, r0	; 63
    67c4:	cd bf       	out	0x3d, r28	; 61
    67c6:	cf 91       	pop	r28
    67c8:	df 91       	pop	r29
    67ca:	08 95       	ret

000067cc <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    67cc:	df 93       	push	r29
    67ce:	cf 93       	push	r28
    67d0:	cd b7       	in	r28, 0x3d	; 61
    67d2:	de b7       	in	r29, 0x3e	; 62
    67d4:	27 97       	sbiw	r28, 0x07	; 7
    67d6:	0f b6       	in	r0, 0x3f	; 63
    67d8:	f8 94       	cli
    67da:	de bf       	out	0x3e, r29	; 62
    67dc:	0f be       	out	0x3f, r0	; 63
    67de:	cd bf       	out	0x3d, r28	; 61
    67e0:	9d 83       	std	Y+5, r25	; 0x05
    67e2:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    67e4:	8c 81       	ldd	r24, Y+4	; 0x04
    67e6:	9d 81       	ldd	r25, Y+5	; 0x05
    67e8:	00 97       	sbiw	r24, 0x00	; 0
    67ea:	39 f4       	brne	.+14     	; 0x67fa <xTaskNotifyStateClear+0x2e>
    67ec:	80 91 7c 06 	lds	r24, 0x067C
    67f0:	90 91 7d 06 	lds	r25, 0x067D
    67f4:	9f 83       	std	Y+7, r25	; 0x07
    67f6:	8e 83       	std	Y+6, r24	; 0x06
    67f8:	04 c0       	rjmp	.+8      	; 0x6802 <xTaskNotifyStateClear+0x36>
    67fa:	8c 81       	ldd	r24, Y+4	; 0x04
    67fc:	9d 81       	ldd	r25, Y+5	; 0x05
    67fe:	9f 83       	std	Y+7, r25	; 0x07
    6800:	8e 83       	std	Y+6, r24	; 0x06
    6802:	8e 81       	ldd	r24, Y+6	; 0x06
    6804:	9f 81       	ldd	r25, Y+7	; 0x07
    6806:	9b 83       	std	Y+3, r25	; 0x03
    6808:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    680a:	0f b6       	in	r0, 0x3f	; 63
    680c:	f8 94       	cli
    680e:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    6810:	ea 81       	ldd	r30, Y+2	; 0x02
    6812:	fb 81       	ldd	r31, Y+3	; 0x03
    6814:	85 a1       	ldd	r24, Z+37	; 0x25
    6816:	82 30       	cpi	r24, 0x02	; 2
    6818:	31 f4       	brne	.+12     	; 0x6826 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    681a:	ea 81       	ldd	r30, Y+2	; 0x02
    681c:	fb 81       	ldd	r31, Y+3	; 0x03
    681e:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    6820:	81 e0       	ldi	r24, 0x01	; 1
    6822:	89 83       	std	Y+1, r24	; 0x01
    6824:	01 c0       	rjmp	.+2      	; 0x6828 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    6826:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    6828:	0f 90       	pop	r0
    682a:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    682c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    682e:	27 96       	adiw	r28, 0x07	; 7
    6830:	0f b6       	in	r0, 0x3f	; 63
    6832:	f8 94       	cli
    6834:	de bf       	out	0x3e, r29	; 62
    6836:	0f be       	out	0x3f, r0	; 63
    6838:	cd bf       	out	0x3d, r28	; 61
    683a:	cf 91       	pop	r28
    683c:	df 91       	pop	r29
    683e:	08 95       	ret

00006840 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    6840:	df 93       	push	r29
    6842:	cf 93       	push	r28
    6844:	cd b7       	in	r28, 0x3d	; 61
    6846:	de b7       	in	r29, 0x3e	; 62
    6848:	27 97       	sbiw	r28, 0x07	; 7
    684a:	0f b6       	in	r0, 0x3f	; 63
    684c:	f8 94       	cli
    684e:	de bf       	out	0x3e, r29	; 62
    6850:	0f be       	out	0x3f, r0	; 63
    6852:	cd bf       	out	0x3d, r28	; 61
    6854:	9e 83       	std	Y+6, r25	; 0x06
    6856:	8d 83       	std	Y+5, r24	; 0x05
    6858:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    685a:	80 91 80 06 	lds	r24, 0x0680
    685e:	90 91 81 06 	lds	r25, 0x0681
    6862:	9a 83       	std	Y+2, r25	; 0x02
    6864:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6866:	80 91 7c 06 	lds	r24, 0x067C
    686a:	90 91 7d 06 	lds	r25, 0x067D
    686e:	02 96       	adiw	r24, 0x02	; 2
    6870:	0e 94 92 14 	call	0x2924	; 0x2924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    6874:	8d 81       	ldd	r24, Y+5	; 0x05
    6876:	9e 81       	ldd	r25, Y+6	; 0x06
    6878:	2f ef       	ldi	r18, 0xFF	; 255
    687a:	8f 3f       	cpi	r24, 0xFF	; 255
    687c:	92 07       	cpc	r25, r18
    687e:	81 f4       	brne	.+32     	; 0x68a0 <prvAddCurrentTaskToDelayedList+0x60>
    6880:	8f 81       	ldd	r24, Y+7	; 0x07
    6882:	88 23       	and	r24, r24
    6884:	69 f0       	breq	.+26     	; 0x68a0 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6886:	80 91 7c 06 	lds	r24, 0x067C
    688a:	90 91 7d 06 	lds	r25, 0x067D
    688e:	9c 01       	movw	r18, r24
    6890:	2e 5f       	subi	r18, 0xFE	; 254
    6892:	3f 4f       	sbci	r19, 0xFF	; 255
    6894:	89 ed       	ldi	r24, 0xD9	; 217
    6896:	96 e0       	ldi	r25, 0x06	; 6
    6898:	b9 01       	movw	r22, r18
    689a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <vListInsertEnd>
    689e:	43 c0       	rjmp	.+134    	; 0x6926 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    68a0:	29 81       	ldd	r18, Y+1	; 0x01
    68a2:	3a 81       	ldd	r19, Y+2	; 0x02
    68a4:	8d 81       	ldd	r24, Y+5	; 0x05
    68a6:	9e 81       	ldd	r25, Y+6	; 0x06
    68a8:	82 0f       	add	r24, r18
    68aa:	93 1f       	adc	r25, r19
    68ac:	9c 83       	std	Y+4, r25	; 0x04
    68ae:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    68b0:	e0 91 7c 06 	lds	r30, 0x067C
    68b4:	f0 91 7d 06 	lds	r31, 0x067D
    68b8:	8b 81       	ldd	r24, Y+3	; 0x03
    68ba:	9c 81       	ldd	r25, Y+4	; 0x04
    68bc:	93 83       	std	Z+3, r25	; 0x03
    68be:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    68c0:	2b 81       	ldd	r18, Y+3	; 0x03
    68c2:	3c 81       	ldd	r19, Y+4	; 0x04
    68c4:	89 81       	ldd	r24, Y+1	; 0x01
    68c6:	9a 81       	ldd	r25, Y+2	; 0x02
    68c8:	28 17       	cp	r18, r24
    68ca:	39 07       	cpc	r19, r25
    68cc:	70 f4       	brcc	.+28     	; 0x68ea <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    68ce:	80 91 c5 06 	lds	r24, 0x06C5
    68d2:	90 91 c6 06 	lds	r25, 0x06C6
    68d6:	20 91 7c 06 	lds	r18, 0x067C
    68da:	30 91 7d 06 	lds	r19, 0x067D
    68de:	2e 5f       	subi	r18, 0xFE	; 254
    68e0:	3f 4f       	sbci	r19, 0xFF	; 255
    68e2:	b9 01       	movw	r22, r18
    68e4:	0e 94 26 14 	call	0x284c	; 0x284c <vListInsert>
    68e8:	1e c0       	rjmp	.+60     	; 0x6926 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    68ea:	40 91 c3 06 	lds	r20, 0x06C3
    68ee:	50 91 c4 06 	lds	r21, 0x06C4
    68f2:	80 91 7c 06 	lds	r24, 0x067C
    68f6:	90 91 7d 06 	lds	r25, 0x067D
    68fa:	9c 01       	movw	r18, r24
    68fc:	2e 5f       	subi	r18, 0xFE	; 254
    68fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6900:	ca 01       	movw	r24, r20
    6902:	b9 01       	movw	r22, r18
    6904:	0e 94 26 14 	call	0x284c	; 0x284c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    6908:	20 91 88 06 	lds	r18, 0x0688
    690c:	30 91 89 06 	lds	r19, 0x0689
    6910:	8b 81       	ldd	r24, Y+3	; 0x03
    6912:	9c 81       	ldd	r25, Y+4	; 0x04
    6914:	82 17       	cp	r24, r18
    6916:	93 07       	cpc	r25, r19
    6918:	30 f4       	brcc	.+12     	; 0x6926 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    691a:	8b 81       	ldd	r24, Y+3	; 0x03
    691c:	9c 81       	ldd	r25, Y+4	; 0x04
    691e:	90 93 89 06 	sts	0x0689, r25
    6922:	80 93 88 06 	sts	0x0688, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    6926:	27 96       	adiw	r28, 0x07	; 7
    6928:	0f b6       	in	r0, 0x3f	; 63
    692a:	f8 94       	cli
    692c:	de bf       	out	0x3e, r29	; 62
    692e:	0f be       	out	0x3f, r0	; 63
    6930:	cd bf       	out	0x3d, r28	; 61
    6932:	cf 91       	pop	r28
    6934:	df 91       	pop	r29
    6936:	08 95       	ret

00006938 <__prologue_saves__>:
    6938:	2f 92       	push	r2
    693a:	3f 92       	push	r3
    693c:	4f 92       	push	r4
    693e:	5f 92       	push	r5
    6940:	6f 92       	push	r6
    6942:	7f 92       	push	r7
    6944:	8f 92       	push	r8
    6946:	9f 92       	push	r9
    6948:	af 92       	push	r10
    694a:	bf 92       	push	r11
    694c:	cf 92       	push	r12
    694e:	df 92       	push	r13
    6950:	ef 92       	push	r14
    6952:	ff 92       	push	r15
    6954:	0f 93       	push	r16
    6956:	1f 93       	push	r17
    6958:	cf 93       	push	r28
    695a:	df 93       	push	r29
    695c:	cd b7       	in	r28, 0x3d	; 61
    695e:	de b7       	in	r29, 0x3e	; 62
    6960:	ca 1b       	sub	r28, r26
    6962:	db 0b       	sbc	r29, r27
    6964:	0f b6       	in	r0, 0x3f	; 63
    6966:	f8 94       	cli
    6968:	de bf       	out	0x3e, r29	; 62
    696a:	0f be       	out	0x3f, r0	; 63
    696c:	cd bf       	out	0x3d, r28	; 61
    696e:	09 94       	ijmp

00006970 <__epilogue_restores__>:
    6970:	2a 88       	ldd	r2, Y+18	; 0x12
    6972:	39 88       	ldd	r3, Y+17	; 0x11
    6974:	48 88       	ldd	r4, Y+16	; 0x10
    6976:	5f 84       	ldd	r5, Y+15	; 0x0f
    6978:	6e 84       	ldd	r6, Y+14	; 0x0e
    697a:	7d 84       	ldd	r7, Y+13	; 0x0d
    697c:	8c 84       	ldd	r8, Y+12	; 0x0c
    697e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6980:	aa 84       	ldd	r10, Y+10	; 0x0a
    6982:	b9 84       	ldd	r11, Y+9	; 0x09
    6984:	c8 84       	ldd	r12, Y+8	; 0x08
    6986:	df 80       	ldd	r13, Y+7	; 0x07
    6988:	ee 80       	ldd	r14, Y+6	; 0x06
    698a:	fd 80       	ldd	r15, Y+5	; 0x05
    698c:	0c 81       	ldd	r16, Y+4	; 0x04
    698e:	1b 81       	ldd	r17, Y+3	; 0x03
    6990:	aa 81       	ldd	r26, Y+2	; 0x02
    6992:	b9 81       	ldd	r27, Y+1	; 0x01
    6994:	ce 0f       	add	r28, r30
    6996:	d1 1d       	adc	r29, r1
    6998:	0f b6       	in	r0, 0x3f	; 63
    699a:	f8 94       	cli
    699c:	de bf       	out	0x3e, r29	; 62
    699e:	0f be       	out	0x3f, r0	; 63
    69a0:	cd bf       	out	0x3d, r28	; 61
    69a2:	ed 01       	movw	r28, r26
    69a4:	08 95       	ret

000069a6 <memcpy>:
    69a6:	fb 01       	movw	r30, r22
    69a8:	dc 01       	movw	r26, r24
    69aa:	02 c0       	rjmp	.+4      	; 0x69b0 <memcpy+0xa>
    69ac:	01 90       	ld	r0, Z+
    69ae:	0d 92       	st	X+, r0
    69b0:	41 50       	subi	r20, 0x01	; 1
    69b2:	50 40       	sbci	r21, 0x00	; 0
    69b4:	d8 f7       	brcc	.-10     	; 0x69ac <memcpy+0x6>
    69b6:	08 95       	ret

000069b8 <memset>:
    69b8:	dc 01       	movw	r26, r24
    69ba:	01 c0       	rjmp	.+2      	; 0x69be <memset+0x6>
    69bc:	6d 93       	st	X+, r22
    69be:	41 50       	subi	r20, 0x01	; 1
    69c0:	50 40       	sbci	r21, 0x00	; 0
    69c2:	e0 f7       	brcc	.-8      	; 0x69bc <memset+0x4>
    69c4:	08 95       	ret

000069c6 <_exit>:
    69c6:	f8 94       	cli

000069c8 <__stop_program>:
    69c8:	ff cf       	rjmp	.-2      	; 0x69c8 <__stop_program>
