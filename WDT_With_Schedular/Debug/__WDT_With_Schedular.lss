
__WDT_With_Schedular.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000105e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000105e  000010f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800062  00800062  000010f4  2**0
                  ALLOC
  3 .stab         000016b0  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000106c  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_10>
      2c:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 06 	call	0xd04	; 0xd04 <main>
      8a:	0c 94 2d 08 	jmp	0x105a	; 0x105a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_vidSetPinDir>:
#include "../Lib/Bit_math.h"
#include "Dio_priv.h"
#include "Dio_int.h"

void Dio_vidSetPinDir(u8 Pin , u8 Dir)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <Dio_vidSetPinDir+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <Dio_vidSetPinDir+0x8>
      9a:	00 d0       	rcall	.+0      	; 0x9c <Dio_vidSetPinDir+0xa>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	8b 83       	std	Y+3, r24	; 0x03
      a2:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
      a4:	8b 81       	ldd	r24, Y+3	; 0x03
      a6:	86 95       	lsr	r24
      a8:	86 95       	lsr	r24
      aa:	86 95       	lsr	r24
      ac:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
      ae:	8b 81       	ldd	r24, Y+3	; 0x03
      b0:	87 70       	andi	r24, 0x07	; 7
      b2:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	28 2f       	mov	r18, r24
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	3e 83       	std	Y+6, r19	; 0x06
      bc:	2d 83       	std	Y+5, r18	; 0x05
      be:	8d 81       	ldd	r24, Y+5	; 0x05
      c0:	9e 81       	ldd	r25, Y+6	; 0x06
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	91 05       	cpc	r25, r1
      c6:	09 f4       	brne	.+2      	; 0xca <Dio_vidSetPinDir+0x38>
      c8:	43 c0       	rjmp	.+134    	; 0x150 <Dio_vidSetPinDir+0xbe>
      ca:	2d 81       	ldd	r18, Y+5	; 0x05
      cc:	3e 81       	ldd	r19, Y+6	; 0x06
      ce:	22 30       	cpi	r18, 0x02	; 2
      d0:	31 05       	cpc	r19, r1
      d2:	2c f4       	brge	.+10     	; 0xde <Dio_vidSetPinDir+0x4c>
      d4:	8d 81       	ldd	r24, Y+5	; 0x05
      d6:	9e 81       	ldd	r25, Y+6	; 0x06
      d8:	00 97       	sbiw	r24, 0x00	; 0
      da:	71 f0       	breq	.+28     	; 0xf8 <Dio_vidSetPinDir+0x66>
      dc:	bc c0       	rjmp	.+376    	; 0x256 <Dio_vidSetPinDir+0x1c4>
      de:	2d 81       	ldd	r18, Y+5	; 0x05
      e0:	3e 81       	ldd	r19, Y+6	; 0x06
      e2:	22 30       	cpi	r18, 0x02	; 2
      e4:	31 05       	cpc	r19, r1
      e6:	09 f4       	brne	.+2      	; 0xea <Dio_vidSetPinDir+0x58>
      e8:	5f c0       	rjmp	.+190    	; 0x1a8 <Dio_vidSetPinDir+0x116>
      ea:	8d 81       	ldd	r24, Y+5	; 0x05
      ec:	9e 81       	ldd	r25, Y+6	; 0x06
      ee:	83 30       	cpi	r24, 0x03	; 3
      f0:	91 05       	cpc	r25, r1
      f2:	09 f4       	brne	.+2      	; 0xf6 <Dio_vidSetPinDir+0x64>
      f4:	85 c0       	rjmp	.+266    	; 0x200 <Dio_vidSetPinDir+0x16e>
      f6:	af c0       	rjmp	.+350    	; 0x256 <Dio_vidSetPinDir+0x1c4>
		case 0: //DDRA
			if(Dir ==1)
      f8:	8c 81       	ldd	r24, Y+4	; 0x04
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	a1 f4       	brne	.+40     	; 0x126 <Dio_vidSetPinDir+0x94>
				{
				SET_BIT(DDRA.Byte , PinLoc);
      fe:	aa e3       	ldi	r26, 0x3A	; 58
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	ea e3       	ldi	r30, 0x3A	; 58
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	48 2f       	mov	r20, r24
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	28 2f       	mov	r18, r24
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	02 2e       	mov	r0, r18
     116:	02 c0       	rjmp	.+4      	; 0x11c <Dio_vidSetPinDir+0x8a>
     118:	88 0f       	add	r24, r24
     11a:	99 1f       	adc	r25, r25
     11c:	0a 94       	dec	r0
     11e:	e2 f7       	brpl	.-8      	; 0x118 <Dio_vidSetPinDir+0x86>
     120:	84 2b       	or	r24, r20
     122:	8c 93       	st	X, r24
     124:	98 c0       	rjmp	.+304    	; 0x256 <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRA.Byte , PinLoc);
     126:	aa e3       	ldi	r26, 0x3A	; 58
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	ea e3       	ldi	r30, 0x3A	; 58
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	48 2f       	mov	r20, r24
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	28 2f       	mov	r18, r24
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 2e       	mov	r0, r18
     13e:	02 c0       	rjmp	.+4      	; 0x144 <Dio_vidSetPinDir+0xb2>
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	0a 94       	dec	r0
     146:	e2 f7       	brpl	.-8      	; 0x140 <Dio_vidSetPinDir+0xae>
     148:	80 95       	com	r24
     14a:	84 23       	and	r24, r20
     14c:	8c 93       	st	X, r24
     14e:	83 c0       	rjmp	.+262    	; 0x256 <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 1: //DDRB
			if(Dir ==1)
     150:	8c 81       	ldd	r24, Y+4	; 0x04
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	a1 f4       	brne	.+40     	; 0x17e <Dio_vidSetPinDir+0xec>
				{
				SET_BIT(DDRB.Byte , PinLoc);
     156:	a7 e3       	ldi	r26, 0x37	; 55
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	e7 e3       	ldi	r30, 0x37	; 55
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	48 2f       	mov	r20, r24
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	28 2f       	mov	r18, r24
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 2e       	mov	r0, r18
     16e:	02 c0       	rjmp	.+4      	; 0x174 <Dio_vidSetPinDir+0xe2>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	0a 94       	dec	r0
     176:	e2 f7       	brpl	.-8      	; 0x170 <Dio_vidSetPinDir+0xde>
     178:	84 2b       	or	r24, r20
     17a:	8c 93       	st	X, r24
     17c:	6c c0       	rjmp	.+216    	; 0x256 <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRB.Byte , PinLoc);
     17e:	a7 e3       	ldi	r26, 0x37	; 55
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e7 e3       	ldi	r30, 0x37	; 55
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	48 2f       	mov	r20, r24
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	28 2f       	mov	r18, r24
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 2e       	mov	r0, r18
     196:	02 c0       	rjmp	.+4      	; 0x19c <Dio_vidSetPinDir+0x10a>
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	0a 94       	dec	r0
     19e:	e2 f7       	brpl	.-8      	; 0x198 <Dio_vidSetPinDir+0x106>
     1a0:	80 95       	com	r24
     1a2:	84 23       	and	r24, r20
     1a4:	8c 93       	st	X, r24
     1a6:	57 c0       	rjmp	.+174    	; 0x256 <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 2: //DDRC
			if(Dir ==1)
     1a8:	8c 81       	ldd	r24, Y+4	; 0x04
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	a1 f4       	brne	.+40     	; 0x1d6 <Dio_vidSetPinDir+0x144>
				{
				SET_BIT(DDRC.Byte , PinLoc);
     1ae:	a4 e3       	ldi	r26, 0x34	; 52
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e4 e3       	ldi	r30, 0x34	; 52
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	48 2f       	mov	r20, r24
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	28 2f       	mov	r18, r24
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 2e       	mov	r0, r18
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <Dio_vidSetPinDir+0x13a>
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	0a 94       	dec	r0
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <Dio_vidSetPinDir+0x136>
     1d0:	84 2b       	or	r24, r20
     1d2:	8c 93       	st	X, r24
     1d4:	40 c0       	rjmp	.+128    	; 0x256 <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRC.Byte , PinLoc);
     1d6:	a4 e3       	ldi	r26, 0x34	; 52
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	e4 e3       	ldi	r30, 0x34	; 52
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	48 2f       	mov	r20, r24
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	28 2f       	mov	r18, r24
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	02 2e       	mov	r0, r18
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_vidSetPinDir+0x162>
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	0a 94       	dec	r0
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_vidSetPinDir+0x15e>
     1f8:	80 95       	com	r24
     1fa:	84 23       	and	r24, r20
     1fc:	8c 93       	st	X, r24
     1fe:	2b c0       	rjmp	.+86     	; 0x256 <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 3: //DDRD
			if(Dir ==1)
     200:	8c 81       	ldd	r24, Y+4	; 0x04
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	a1 f4       	brne	.+40     	; 0x22e <Dio_vidSetPinDir+0x19c>
				{
				SET_BIT(DDRD.Byte , PinLoc);
     206:	a1 e3       	ldi	r26, 0x31	; 49
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e1 e3       	ldi	r30, 0x31	; 49
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	48 2f       	mov	r20, r24
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	28 2f       	mov	r18, r24
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 2e       	mov	r0, r18
     21e:	02 c0       	rjmp	.+4      	; 0x224 <Dio_vidSetPinDir+0x192>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <Dio_vidSetPinDir+0x18e>
     228:	84 2b       	or	r24, r20
     22a:	8c 93       	st	X, r24
     22c:	14 c0       	rjmp	.+40     	; 0x256 <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRD.Byte , PinLoc);
     22e:	a1 e3       	ldi	r26, 0x31	; 49
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	e1 e3       	ldi	r30, 0x31	; 49
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	48 2f       	mov	r20, r24
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 2e       	mov	r0, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <Dio_vidSetPinDir+0x1ba>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	0a 94       	dec	r0
     24e:	e2 f7       	brpl	.-8      	; 0x248 <Dio_vidSetPinDir+0x1b6>
     250:	80 95       	com	r24
     252:	84 23       	and	r24, r20
     254:	8c 93       	st	X, r24
				}
			break;
	}
}
     256:	26 96       	adiw	r28, 0x06	; 6
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	cf 91       	pop	r28
     264:	df 91       	pop	r29
     266:	08 95       	ret

00000268 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin , u8 val)
{
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	00 d0       	rcall	.+0      	; 0x26e <Dio_vidSetPinVal+0x6>
     26e:	00 d0       	rcall	.+0      	; 0x270 <Dio_vidSetPinVal+0x8>
     270:	00 d0       	rcall	.+0      	; 0x272 <Dio_vidSetPinVal+0xa>
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	8b 83       	std	Y+3, r24	; 0x03
     278:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     27a:	8b 81       	ldd	r24, Y+3	; 0x03
     27c:	86 95       	lsr	r24
     27e:	86 95       	lsr	r24
     280:	86 95       	lsr	r24
     282:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	87 70       	andi	r24, 0x07	; 7
     288:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     28a:	8a 81       	ldd	r24, Y+2	; 0x02
     28c:	28 2f       	mov	r18, r24
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	3e 83       	std	Y+6, r19	; 0x06
     292:	2d 83       	std	Y+5, r18	; 0x05
     294:	8d 81       	ldd	r24, Y+5	; 0x05
     296:	9e 81       	ldd	r25, Y+6	; 0x06
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	91 05       	cpc	r25, r1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <Dio_vidSetPinVal+0x38>
     29e:	43 c0       	rjmp	.+134    	; 0x326 <Dio_vidSetPinVal+0xbe>
     2a0:	2d 81       	ldd	r18, Y+5	; 0x05
     2a2:	3e 81       	ldd	r19, Y+6	; 0x06
     2a4:	22 30       	cpi	r18, 0x02	; 2
     2a6:	31 05       	cpc	r19, r1
     2a8:	2c f4       	brge	.+10     	; 0x2b4 <Dio_vidSetPinVal+0x4c>
     2aa:	8d 81       	ldd	r24, Y+5	; 0x05
     2ac:	9e 81       	ldd	r25, Y+6	; 0x06
     2ae:	00 97       	sbiw	r24, 0x00	; 0
     2b0:	71 f0       	breq	.+28     	; 0x2ce <Dio_vidSetPinVal+0x66>
     2b2:	bc c0       	rjmp	.+376    	; 0x42c <Dio_vidSetPinVal+0x1c4>
     2b4:	2d 81       	ldd	r18, Y+5	; 0x05
     2b6:	3e 81       	ldd	r19, Y+6	; 0x06
     2b8:	22 30       	cpi	r18, 0x02	; 2
     2ba:	31 05       	cpc	r19, r1
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <Dio_vidSetPinVal+0x58>
     2be:	5f c0       	rjmp	.+190    	; 0x37e <Dio_vidSetPinVal+0x116>
     2c0:	8d 81       	ldd	r24, Y+5	; 0x05
     2c2:	9e 81       	ldd	r25, Y+6	; 0x06
     2c4:	83 30       	cpi	r24, 0x03	; 3
     2c6:	91 05       	cpc	r25, r1
     2c8:	09 f4       	brne	.+2      	; 0x2cc <Dio_vidSetPinVal+0x64>
     2ca:	85 c0       	rjmp	.+266    	; 0x3d6 <Dio_vidSetPinVal+0x16e>
     2cc:	af c0       	rjmp	.+350    	; 0x42c <Dio_vidSetPinVal+0x1c4>
		case 0: //PORTA
			if(val ==1)
     2ce:	8c 81       	ldd	r24, Y+4	; 0x04
     2d0:	81 30       	cpi	r24, 0x01	; 1
     2d2:	a1 f4       	brne	.+40     	; 0x2fc <Dio_vidSetPinVal+0x94>
				{
				SET_BIT(PORTA.Byte , PinLoc);
     2d4:	ab e3       	ldi	r26, 0x3B	; 59
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	eb e3       	ldi	r30, 0x3B	; 59
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	48 2f       	mov	r20, r24
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	28 2f       	mov	r18, r24
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 2e       	mov	r0, r18
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <Dio_vidSetPinVal+0x8a>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <Dio_vidSetPinVal+0x86>
     2f6:	84 2b       	or	r24, r20
     2f8:	8c 93       	st	X, r24
     2fa:	98 c0       	rjmp	.+304    	; 0x42c <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTA.Byte , PinLoc);
     2fc:	ab e3       	ldi	r26, 0x3B	; 59
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	eb e3       	ldi	r30, 0x3B	; 59
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	48 2f       	mov	r20, r24
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	28 2f       	mov	r18, r24
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	02 2e       	mov	r0, r18
     314:	02 c0       	rjmp	.+4      	; 0x31a <Dio_vidSetPinVal+0xb2>
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	0a 94       	dec	r0
     31c:	e2 f7       	brpl	.-8      	; 0x316 <Dio_vidSetPinVal+0xae>
     31e:	80 95       	com	r24
     320:	84 23       	and	r24, r20
     322:	8c 93       	st	X, r24
     324:	83 c0       	rjmp	.+262    	; 0x42c <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 1: //PORTB
			if(val ==1)
     326:	8c 81       	ldd	r24, Y+4	; 0x04
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	a1 f4       	brne	.+40     	; 0x354 <Dio_vidSetPinVal+0xec>
				{
				SET_BIT(PORTB.Byte , PinLoc);
     32c:	a8 e3       	ldi	r26, 0x38	; 56
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e8 e3       	ldi	r30, 0x38	; 56
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	48 2f       	mov	r20, r24
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 2e       	mov	r0, r18
     344:	02 c0       	rjmp	.+4      	; 0x34a <Dio_vidSetPinVal+0xe2>
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <Dio_vidSetPinVal+0xde>
     34e:	84 2b       	or	r24, r20
     350:	8c 93       	st	X, r24
     352:	6c c0       	rjmp	.+216    	; 0x42c <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTB.Byte , PinLoc);
     354:	a8 e3       	ldi	r26, 0x38	; 56
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	e8 e3       	ldi	r30, 0x38	; 56
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	48 2f       	mov	r20, r24
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	28 2f       	mov	r18, r24
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	02 2e       	mov	r0, r18
     36c:	02 c0       	rjmp	.+4      	; 0x372 <Dio_vidSetPinVal+0x10a>
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	0a 94       	dec	r0
     374:	e2 f7       	brpl	.-8      	; 0x36e <Dio_vidSetPinVal+0x106>
     376:	80 95       	com	r24
     378:	84 23       	and	r24, r20
     37a:	8c 93       	st	X, r24
     37c:	57 c0       	rjmp	.+174    	; 0x42c <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 2: //PORTC
			if(val ==1)
     37e:	8c 81       	ldd	r24, Y+4	; 0x04
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	a1 f4       	brne	.+40     	; 0x3ac <Dio_vidSetPinVal+0x144>
				{
				SET_BIT(PORTC.Byte , PinLoc);
     384:	a5 e3       	ldi	r26, 0x35	; 53
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	e5 e3       	ldi	r30, 0x35	; 53
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	48 2f       	mov	r20, r24
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	28 2f       	mov	r18, r24
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	02 2e       	mov	r0, r18
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <Dio_vidSetPinVal+0x13a>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	0a 94       	dec	r0
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <Dio_vidSetPinVal+0x136>
     3a6:	84 2b       	or	r24, r20
     3a8:	8c 93       	st	X, r24
     3aa:	40 c0       	rjmp	.+128    	; 0x42c <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTC.Byte , PinLoc);
     3ac:	a5 e3       	ldi	r26, 0x35	; 53
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	e5 e3       	ldi	r30, 0x35	; 53
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	48 2f       	mov	r20, r24
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	28 2f       	mov	r18, r24
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	02 2e       	mov	r0, r18
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <Dio_vidSetPinVal+0x162>
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	0a 94       	dec	r0
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <Dio_vidSetPinVal+0x15e>
     3ce:	80 95       	com	r24
     3d0:	84 23       	and	r24, r20
     3d2:	8c 93       	st	X, r24
     3d4:	2b c0       	rjmp	.+86     	; 0x42c <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 3: //PORTD
			if(val ==1)
     3d6:	8c 81       	ldd	r24, Y+4	; 0x04
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	a1 f4       	brne	.+40     	; 0x404 <Dio_vidSetPinVal+0x19c>
				{
				SET_BIT(PORTD.Byte , PinLoc);
     3dc:	a2 e3       	ldi	r26, 0x32	; 50
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	e2 e3       	ldi	r30, 0x32	; 50
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	48 2f       	mov	r20, r24
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	28 2f       	mov	r18, r24
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	02 2e       	mov	r0, r18
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <Dio_vidSetPinVal+0x192>
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	0a 94       	dec	r0
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <Dio_vidSetPinVal+0x18e>
     3fe:	84 2b       	or	r24, r20
     400:	8c 93       	st	X, r24
     402:	14 c0       	rjmp	.+40     	; 0x42c <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTD.Byte , PinLoc);
     404:	a2 e3       	ldi	r26, 0x32	; 50
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	e2 e3       	ldi	r30, 0x32	; 50
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	48 2f       	mov	r20, r24
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	28 2f       	mov	r18, r24
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <Dio_vidSetPinVal+0x1ba>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <Dio_vidSetPinVal+0x1b6>
     426:	80 95       	com	r24
     428:	84 23       	and	r24, r20
     42a:	8c 93       	st	X, r24
				}
			break;
	}
}
     42c:	26 96       	adiw	r28, 0x06	; 6
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <Dio_u8GetPinVal>:

u8 Dio_u8GetPinVal(u8 pin)
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	00 d0       	rcall	.+0      	; 0x444 <Dio_u8GetPinVal+0x6>
     444:	00 d0       	rcall	.+0      	; 0x446 <Dio_u8GetPinVal+0x8>
     446:	00 d0       	rcall	.+0      	; 0x448 <Dio_u8GetPinVal+0xa>
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	8c 83       	std	Y+4, r24	; 0x04
	u8 PortId;
	u8 PinLoc;
	u8 PinVal = 0;
     44e:	19 82       	std	Y+1, r1	; 0x01

	if (pin > 31)
     450:	8c 81       	ldd	r24, Y+4	; 0x04
     452:	80 32       	cpi	r24, 0x20	; 32
     454:	18 f0       	brcs	.+6      	; 0x45c <Dio_u8GetPinVal+0x1e>
	{
		PinVal = DIO_u8INVALED_PIN_NUM;
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	89 83       	std	Y+1, r24	; 0x01
     45a:	6f c0       	rjmp	.+222    	; 0x53a <Dio_u8GetPinVal+0xfc>
	}
	else
	{
		PortId = pin/8;
     45c:	8c 81       	ldd	r24, Y+4	; 0x04
     45e:	86 95       	lsr	r24
     460:	86 95       	lsr	r24
     462:	86 95       	lsr	r24
     464:	8b 83       	std	Y+3, r24	; 0x03
		PinLoc = pin%8;
     466:	8c 81       	ldd	r24, Y+4	; 0x04
     468:	87 70       	andi	r24, 0x07	; 7
     46a:	8a 83       	std	Y+2, r24	; 0x02
		switch(PortId)
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	28 2f       	mov	r18, r24
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	3e 83       	std	Y+6, r19	; 0x06
     474:	2d 83       	std	Y+5, r18	; 0x05
     476:	4d 81       	ldd	r20, Y+5	; 0x05
     478:	5e 81       	ldd	r21, Y+6	; 0x06
     47a:	41 30       	cpi	r20, 0x01	; 1
     47c:	51 05       	cpc	r21, r1
     47e:	41 f1       	breq	.+80     	; 0x4d0 <Dio_u8GetPinVal+0x92>
     480:	8d 81       	ldd	r24, Y+5	; 0x05
     482:	9e 81       	ldd	r25, Y+6	; 0x06
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	91 05       	cpc	r25, r1
     488:	34 f4       	brge	.+12     	; 0x496 <Dio_u8GetPinVal+0x58>
     48a:	2d 81       	ldd	r18, Y+5	; 0x05
     48c:	3e 81       	ldd	r19, Y+6	; 0x06
     48e:	21 15       	cp	r18, r1
     490:	31 05       	cpc	r19, r1
     492:	61 f0       	breq	.+24     	; 0x4ac <Dio_u8GetPinVal+0x6e>
     494:	52 c0       	rjmp	.+164    	; 0x53a <Dio_u8GetPinVal+0xfc>
     496:	4d 81       	ldd	r20, Y+5	; 0x05
     498:	5e 81       	ldd	r21, Y+6	; 0x06
     49a:	42 30       	cpi	r20, 0x02	; 2
     49c:	51 05       	cpc	r21, r1
     49e:	51 f1       	breq	.+84     	; 0x4f4 <Dio_u8GetPinVal+0xb6>
     4a0:	8d 81       	ldd	r24, Y+5	; 0x05
     4a2:	9e 81       	ldd	r25, Y+6	; 0x06
     4a4:	83 30       	cpi	r24, 0x03	; 3
     4a6:	91 05       	cpc	r25, r1
     4a8:	b9 f1       	breq	.+110    	; 0x518 <Dio_u8GetPinVal+0xda>
     4aa:	47 c0       	rjmp	.+142    	; 0x53a <Dio_u8GetPinVal+0xfc>
		{
			case 0: //PINA
				PinVal = GET_BIT(PINA.Byte , PinLoc);
     4ac:	e9 e3       	ldi	r30, 0x39	; 57
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	28 2f       	mov	r18, r24
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	8a 81       	ldd	r24, Y+2	; 0x02
     4b8:	88 2f       	mov	r24, r24
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	a9 01       	movw	r20, r18
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <Dio_u8GetPinVal+0x86>
     4c0:	55 95       	asr	r21
     4c2:	47 95       	ror	r20
     4c4:	8a 95       	dec	r24
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <Dio_u8GetPinVal+0x82>
     4c8:	ca 01       	movw	r24, r20
     4ca:	81 70       	andi	r24, 0x01	; 1
     4cc:	89 83       	std	Y+1, r24	; 0x01
     4ce:	35 c0       	rjmp	.+106    	; 0x53a <Dio_u8GetPinVal+0xfc>
			break;

			case 1: //PINB
				PinVal = GET_BIT(PINB.Byte , PinLoc);
     4d0:	e6 e3       	ldi	r30, 0x36	; 54
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	28 2f       	mov	r18, r24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	8a 81       	ldd	r24, Y+2	; 0x02
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	a9 01       	movw	r20, r18
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <Dio_u8GetPinVal+0xaa>
     4e4:	55 95       	asr	r21
     4e6:	47 95       	ror	r20
     4e8:	8a 95       	dec	r24
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <Dio_u8GetPinVal+0xa6>
     4ec:	ca 01       	movw	r24, r20
     4ee:	81 70       	andi	r24, 0x01	; 1
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	23 c0       	rjmp	.+70     	; 0x53a <Dio_u8GetPinVal+0xfc>
			break;

			case 2: //PINC
				PinVal = GET_BIT(PINC.Byte , PinLoc);
     4f4:	e3 e3       	ldi	r30, 0x33	; 51
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	02 c0       	rjmp	.+4      	; 0x50c <Dio_u8GetPinVal+0xce>
     508:	55 95       	asr	r21
     50a:	47 95       	ror	r20
     50c:	8a 95       	dec	r24
     50e:	e2 f7       	brpl	.-8      	; 0x508 <Dio_u8GetPinVal+0xca>
     510:	ca 01       	movw	r24, r20
     512:	81 70       	andi	r24, 0x01	; 1
     514:	89 83       	std	Y+1, r24	; 0x01
     516:	11 c0       	rjmp	.+34     	; 0x53a <Dio_u8GetPinVal+0xfc>
			break;

			case 3: //PIND
				PinVal = GET_BIT(PIND.Byte , PinLoc);
     518:	e0 e3       	ldi	r30, 0x30	; 48
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	28 2f       	mov	r18, r24
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	02 c0       	rjmp	.+4      	; 0x530 <Dio_u8GetPinVal+0xf2>
     52c:	55 95       	asr	r21
     52e:	47 95       	ror	r20
     530:	8a 95       	dec	r24
     532:	e2 f7       	brpl	.-8      	; 0x52c <Dio_u8GetPinVal+0xee>
     534:	ca 01       	movw	r24, r20
     536:	81 70       	andi	r24, 0x01	; 1
     538:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PinVal;
     53a:	89 81       	ldd	r24, Y+1	; 0x01

}
     53c:	26 96       	adiw	r28, 0x06	; 6
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	08 95       	ret

0000054e <Led_vidInit>:
#include "Dio_int.h"
#include "Led_int.h"
#include "Led_cfg.h"

void Led_vidInit(u8 LedId)
{
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	00 d0       	rcall	.+0      	; 0x554 <Led_vidInit+0x6>
     554:	0f 92       	push	r0
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	28 2f       	mov	r18, r24
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	3b 83       	std	Y+3, r19	; 0x03
     564:	2a 83       	std	Y+2, r18	; 0x02
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	84 30       	cpi	r24, 0x04	; 4
     56c:	91 05       	cpc	r25, r1
     56e:	c9 f1       	breq	.+114    	; 0x5e2 <Led_vidInit+0x94>
     570:	2a 81       	ldd	r18, Y+2	; 0x02
     572:	3b 81       	ldd	r19, Y+3	; 0x03
     574:	25 30       	cpi	r18, 0x05	; 5
     576:	31 05       	cpc	r19, r1
     578:	84 f4       	brge	.+32     	; 0x59a <Led_vidInit+0x4c>
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	91 05       	cpc	r25, r1
     582:	29 f1       	breq	.+74     	; 0x5ce <Led_vidInit+0x80>
     584:	2a 81       	ldd	r18, Y+2	; 0x02
     586:	3b 81       	ldd	r19, Y+3	; 0x03
     588:	23 30       	cpi	r18, 0x03	; 3
     58a:	31 05       	cpc	r19, r1
     58c:	2c f5       	brge	.+74     	; 0x5d8 <Led_vidInit+0x8a>
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	9b 81       	ldd	r25, Y+3	; 0x03
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	91 05       	cpc	r25, r1
     596:	b1 f0       	breq	.+44     	; 0x5c4 <Led_vidInit+0x76>
     598:	3c c0       	rjmp	.+120    	; 0x612 <Led_vidInit+0xc4>
     59a:	2a 81       	ldd	r18, Y+2	; 0x02
     59c:	3b 81       	ldd	r19, Y+3	; 0x03
     59e:	26 30       	cpi	r18, 0x06	; 6
     5a0:	31 05       	cpc	r19, r1
     5a2:	49 f1       	breq	.+82     	; 0x5f6 <Led_vidInit+0xa8>
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	9b 81       	ldd	r25, Y+3	; 0x03
     5a8:	86 30       	cpi	r24, 0x06	; 6
     5aa:	91 05       	cpc	r25, r1
     5ac:	fc f0       	brlt	.+62     	; 0x5ec <Led_vidInit+0x9e>
     5ae:	2a 81       	ldd	r18, Y+2	; 0x02
     5b0:	3b 81       	ldd	r19, Y+3	; 0x03
     5b2:	27 30       	cpi	r18, 0x07	; 7
     5b4:	31 05       	cpc	r19, r1
     5b6:	21 f1       	breq	.+72     	; 0x600 <Led_vidInit+0xb2>
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	9b 81       	ldd	r25, Y+3	; 0x03
     5bc:	88 30       	cpi	r24, 0x08	; 8
     5be:	91 05       	cpc	r25, r1
     5c0:	21 f1       	breq	.+72     	; 0x60a <Led_vidInit+0xbc>
     5c2:	27 c0       	rjmp	.+78     	; 0x612 <Led_vidInit+0xc4>
	{
		case 1: Dio_vidSetPinDir(LED_8ID_1 , DIO_u8OUTPUT); break;
     5c4:	80 e1       	ldi	r24, 0x10	; 16
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
     5cc:	22 c0       	rjmp	.+68     	; 0x612 <Led_vidInit+0xc4>
		case 2: Dio_vidSetPinDir(LED_8ID_2 , DIO_u8OUTPUT); break;
     5ce:	81 e1       	ldi	r24, 0x11	; 17
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
     5d6:	1d c0       	rjmp	.+58     	; 0x612 <Led_vidInit+0xc4>
		case 3: Dio_vidSetPinDir(LED_8ID_3 , DIO_u8OUTPUT); break;
     5d8:	82 e1       	ldi	r24, 0x12	; 18
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
     5e0:	18 c0       	rjmp	.+48     	; 0x612 <Led_vidInit+0xc4>
		case 4: Dio_vidSetPinDir(LED_8ID_4 , DIO_u8OUTPUT); break;
     5e2:	83 e1       	ldi	r24, 0x13	; 19
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
     5ea:	13 c0       	rjmp	.+38     	; 0x612 <Led_vidInit+0xc4>
		case 5: Dio_vidSetPinDir(LED_8ID_5 , DIO_u8OUTPUT); break;
     5ec:	84 e1       	ldi	r24, 0x14	; 20
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
     5f4:	0e c0       	rjmp	.+28     	; 0x612 <Led_vidInit+0xc4>
		case 6: Dio_vidSetPinDir(LED_8ID_6 , DIO_u8OUTPUT); break;
     5f6:	85 e1       	ldi	r24, 0x15	; 21
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
     5fe:	09 c0       	rjmp	.+18     	; 0x612 <Led_vidInit+0xc4>
		case 7: Dio_vidSetPinDir(LED_8ID_7 , DIO_u8OUTPUT); break;
     600:	86 e1       	ldi	r24, 0x16	; 22
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
     608:	04 c0       	rjmp	.+8      	; 0x612 <Led_vidInit+0xc4>
		case 8: Dio_vidSetPinDir(LED_8ID_8 , DIO_u8OUTPUT); break;
     60a:	87 e1       	ldi	r24, 0x17	; 23
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
	}

}
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <Led_vidTurnOn>:

void Led_vidTurnOn(u8 LedId)
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	00 d0       	rcall	.+0      	; 0x624 <Led_vidTurnOn+0x6>
     624:	0f 92       	push	r0
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	28 2f       	mov	r18, r24
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	3b 83       	std	Y+3, r19	; 0x03
     634:	2a 83       	std	Y+2, r18	; 0x02
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	9b 81       	ldd	r25, Y+3	; 0x03
     63a:	84 30       	cpi	r24, 0x04	; 4
     63c:	91 05       	cpc	r25, r1
     63e:	c9 f1       	breq	.+114    	; 0x6b2 <Led_vidTurnOn+0x94>
     640:	2a 81       	ldd	r18, Y+2	; 0x02
     642:	3b 81       	ldd	r19, Y+3	; 0x03
     644:	25 30       	cpi	r18, 0x05	; 5
     646:	31 05       	cpc	r19, r1
     648:	84 f4       	brge	.+32     	; 0x66a <Led_vidTurnOn+0x4c>
     64a:	8a 81       	ldd	r24, Y+2	; 0x02
     64c:	9b 81       	ldd	r25, Y+3	; 0x03
     64e:	82 30       	cpi	r24, 0x02	; 2
     650:	91 05       	cpc	r25, r1
     652:	29 f1       	breq	.+74     	; 0x69e <Led_vidTurnOn+0x80>
     654:	2a 81       	ldd	r18, Y+2	; 0x02
     656:	3b 81       	ldd	r19, Y+3	; 0x03
     658:	23 30       	cpi	r18, 0x03	; 3
     65a:	31 05       	cpc	r19, r1
     65c:	2c f5       	brge	.+74     	; 0x6a8 <Led_vidTurnOn+0x8a>
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	9b 81       	ldd	r25, Y+3	; 0x03
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	91 05       	cpc	r25, r1
     666:	b1 f0       	breq	.+44     	; 0x694 <Led_vidTurnOn+0x76>
     668:	3c c0       	rjmp	.+120    	; 0x6e2 <Led_vidTurnOn+0xc4>
     66a:	2a 81       	ldd	r18, Y+2	; 0x02
     66c:	3b 81       	ldd	r19, Y+3	; 0x03
     66e:	26 30       	cpi	r18, 0x06	; 6
     670:	31 05       	cpc	r19, r1
     672:	49 f1       	breq	.+82     	; 0x6c6 <Led_vidTurnOn+0xa8>
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	9b 81       	ldd	r25, Y+3	; 0x03
     678:	86 30       	cpi	r24, 0x06	; 6
     67a:	91 05       	cpc	r25, r1
     67c:	fc f0       	brlt	.+62     	; 0x6bc <Led_vidTurnOn+0x9e>
     67e:	2a 81       	ldd	r18, Y+2	; 0x02
     680:	3b 81       	ldd	r19, Y+3	; 0x03
     682:	27 30       	cpi	r18, 0x07	; 7
     684:	31 05       	cpc	r19, r1
     686:	21 f1       	breq	.+72     	; 0x6d0 <Led_vidTurnOn+0xb2>
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	9b 81       	ldd	r25, Y+3	; 0x03
     68c:	88 30       	cpi	r24, 0x08	; 8
     68e:	91 05       	cpc	r25, r1
     690:	21 f1       	breq	.+72     	; 0x6da <Led_vidTurnOn+0xbc>
     692:	27 c0       	rjmp	.+78     	; 0x6e2 <Led_vidTurnOn+0xc4>
	{
		case 1: Dio_vidSetPinVal(LED_8ID_1 , DIO_u8HIGH); break;
     694:	80 e1       	ldi	r24, 0x10	; 16
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     69c:	22 c0       	rjmp	.+68     	; 0x6e2 <Led_vidTurnOn+0xc4>
		case 2: Dio_vidSetPinVal(LED_8ID_2 , DIO_u8HIGH); break;
     69e:	81 e1       	ldi	r24, 0x11	; 17
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     6a6:	1d c0       	rjmp	.+58     	; 0x6e2 <Led_vidTurnOn+0xc4>
		case 3: Dio_vidSetPinVal(LED_8ID_3 , DIO_u8HIGH); break;
     6a8:	82 e1       	ldi	r24, 0x12	; 18
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     6b0:	18 c0       	rjmp	.+48     	; 0x6e2 <Led_vidTurnOn+0xc4>
		case 4: Dio_vidSetPinVal(LED_8ID_4 , DIO_u8HIGH); break;
     6b2:	83 e1       	ldi	r24, 0x13	; 19
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <Led_vidTurnOn+0xc4>
		case 5: Dio_vidSetPinVal(LED_8ID_5 , DIO_u8HIGH); break;
     6bc:	84 e1       	ldi	r24, 0x14	; 20
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     6c4:	0e c0       	rjmp	.+28     	; 0x6e2 <Led_vidTurnOn+0xc4>
		case 6: Dio_vidSetPinVal(LED_8ID_6 , DIO_u8HIGH); break;
     6c6:	85 e1       	ldi	r24, 0x15	; 21
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <Led_vidTurnOn+0xc4>
		case 7: Dio_vidSetPinVal(LED_8ID_7 , DIO_u8HIGH); break;
     6d0:	86 e1       	ldi	r24, 0x16	; 22
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <Led_vidTurnOn+0xc4>
		case 8: Dio_vidSetPinVal(LED_8ID_8 , DIO_u8HIGH); break;
     6da:	87 e1       	ldi	r24, 0x17	; 23
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
	}
}
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <Led_vidTurnOff>:

void Led_vidTurnOff(u8 LedId)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <Led_vidTurnOff+0x6>
     6f4:	0f 92       	push	r0
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	28 2f       	mov	r18, r24
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	3b 83       	std	Y+3, r19	; 0x03
     704:	2a 83       	std	Y+2, r18	; 0x02
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	9b 81       	ldd	r25, Y+3	; 0x03
     70a:	84 30       	cpi	r24, 0x04	; 4
     70c:	91 05       	cpc	r25, r1
     70e:	c9 f1       	breq	.+114    	; 0x782 <Led_vidTurnOff+0x94>
     710:	2a 81       	ldd	r18, Y+2	; 0x02
     712:	3b 81       	ldd	r19, Y+3	; 0x03
     714:	25 30       	cpi	r18, 0x05	; 5
     716:	31 05       	cpc	r19, r1
     718:	84 f4       	brge	.+32     	; 0x73a <Led_vidTurnOff+0x4c>
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	9b 81       	ldd	r25, Y+3	; 0x03
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	91 05       	cpc	r25, r1
     722:	29 f1       	breq	.+74     	; 0x76e <Led_vidTurnOff+0x80>
     724:	2a 81       	ldd	r18, Y+2	; 0x02
     726:	3b 81       	ldd	r19, Y+3	; 0x03
     728:	23 30       	cpi	r18, 0x03	; 3
     72a:	31 05       	cpc	r19, r1
     72c:	2c f5       	brge	.+74     	; 0x778 <Led_vidTurnOff+0x8a>
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	9b 81       	ldd	r25, Y+3	; 0x03
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	91 05       	cpc	r25, r1
     736:	b1 f0       	breq	.+44     	; 0x764 <Led_vidTurnOff+0x76>
     738:	3c c0       	rjmp	.+120    	; 0x7b2 <Led_vidTurnOff+0xc4>
     73a:	2a 81       	ldd	r18, Y+2	; 0x02
     73c:	3b 81       	ldd	r19, Y+3	; 0x03
     73e:	26 30       	cpi	r18, 0x06	; 6
     740:	31 05       	cpc	r19, r1
     742:	49 f1       	breq	.+82     	; 0x796 <Led_vidTurnOff+0xa8>
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	9b 81       	ldd	r25, Y+3	; 0x03
     748:	86 30       	cpi	r24, 0x06	; 6
     74a:	91 05       	cpc	r25, r1
     74c:	fc f0       	brlt	.+62     	; 0x78c <Led_vidTurnOff+0x9e>
     74e:	2a 81       	ldd	r18, Y+2	; 0x02
     750:	3b 81       	ldd	r19, Y+3	; 0x03
     752:	27 30       	cpi	r18, 0x07	; 7
     754:	31 05       	cpc	r19, r1
     756:	21 f1       	breq	.+72     	; 0x7a0 <Led_vidTurnOff+0xb2>
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	9b 81       	ldd	r25, Y+3	; 0x03
     75c:	88 30       	cpi	r24, 0x08	; 8
     75e:	91 05       	cpc	r25, r1
     760:	21 f1       	breq	.+72     	; 0x7aa <Led_vidTurnOff+0xbc>
     762:	27 c0       	rjmp	.+78     	; 0x7b2 <Led_vidTurnOff+0xc4>
	{
		case 1: Dio_vidSetPinVal(LED_8ID_1 , DIO_u8LOW); break;
     764:	80 e1       	ldi	r24, 0x10	; 16
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     76c:	22 c0       	rjmp	.+68     	; 0x7b2 <Led_vidTurnOff+0xc4>
		case 2: Dio_vidSetPinVal(LED_8ID_2 , DIO_u8LOW); break;
     76e:	81 e1       	ldi	r24, 0x11	; 17
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     776:	1d c0       	rjmp	.+58     	; 0x7b2 <Led_vidTurnOff+0xc4>
		case 3: Dio_vidSetPinVal(LED_8ID_3 , DIO_u8LOW); break;
     778:	82 e1       	ldi	r24, 0x12	; 18
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     780:	18 c0       	rjmp	.+48     	; 0x7b2 <Led_vidTurnOff+0xc4>
		case 4: Dio_vidSetPinVal(LED_8ID_4 , DIO_u8LOW); break;
     782:	83 e1       	ldi	r24, 0x13	; 19
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     78a:	13 c0       	rjmp	.+38     	; 0x7b2 <Led_vidTurnOff+0xc4>
		case 5: Dio_vidSetPinVal(LED_8ID_5 , DIO_u8LOW); break;
     78c:	84 e1       	ldi	r24, 0x14	; 20
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     794:	0e c0       	rjmp	.+28     	; 0x7b2 <Led_vidTurnOff+0xc4>
		case 6: Dio_vidSetPinVal(LED_8ID_6 , DIO_u8LOW); break;
     796:	85 e1       	ldi	r24, 0x15	; 21
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     79e:	09 c0       	rjmp	.+18     	; 0x7b2 <Led_vidTurnOff+0xc4>
		case 7: Dio_vidSetPinVal(LED_8ID_7 , DIO_u8LOW); break;
     7a0:	86 e1       	ldi	r24, 0x16	; 22
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <Led_vidTurnOff+0xc4>
		case 8: Dio_vidSetPinVal(LED_8ID_8 , DIO_u8LOW); break;
     7aa:	87 e1       	ldi	r24, 0x17	; 23
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
	}
}
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	cf 91       	pop	r28
     7ba:	df 91       	pop	r29
     7bc:	08 95       	ret

000007be <Switch_vidInit>:
#include "Dio_int.h"
#include "Switch_cfg.h"
#include "Switch_int.h"

void Switch_vidInit(u8 SwitchId)
{
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <Switch_vidInit+0x6>
     7c4:	0f 92       	push	r0
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	89 83       	std	Y+1, r24	; 0x01
	switch( SwitchId )
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	3b 83       	std	Y+3, r19	; 0x03
     7d4:	2a 83       	std	Y+2, r18	; 0x02
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	88 30       	cpi	r24, 0x08	; 8
     7dc:	91 05       	cpc	r25, r1
     7de:	09 f4       	brne	.+2      	; 0x7e2 <Switch_vidInit+0x24>
     7e0:	a0 c0       	rjmp	.+320    	; 0x922 <__stack+0xc3>
     7e2:	2a 81       	ldd	r18, Y+2	; 0x02
     7e4:	3b 81       	ldd	r19, Y+3	; 0x03
     7e6:	29 30       	cpi	r18, 0x09	; 9
     7e8:	31 05       	cpc	r19, r1
     7ea:	5c f5       	brge	.+86     	; 0x842 <Switch_vidInit+0x84>
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	9b 81       	ldd	r25, Y+3	; 0x03
     7f0:	84 30       	cpi	r24, 0x04	; 4
     7f2:	91 05       	cpc	r25, r1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <Switch_vidInit+0x3a>
     7f6:	71 c0       	rjmp	.+226    	; 0x8da <__stack+0x7b>
     7f8:	2a 81       	ldd	r18, Y+2	; 0x02
     7fa:	3b 81       	ldd	r19, Y+3	; 0x03
     7fc:	25 30       	cpi	r18, 0x05	; 5
     7fe:	31 05       	cpc	r19, r1
     800:	9c f4       	brge	.+38     	; 0x828 <Switch_vidInit+0x6a>
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	82 30       	cpi	r24, 0x02	; 2
     808:	91 05       	cpc	r25, r1
     80a:	09 f4       	brne	.+2      	; 0x80e <Switch_vidInit+0x50>
     80c:	54 c0       	rjmp	.+168    	; 0x8b6 <__stack+0x57>
     80e:	2a 81       	ldd	r18, Y+2	; 0x02
     810:	3b 81       	ldd	r19, Y+3	; 0x03
     812:	23 30       	cpi	r18, 0x03	; 3
     814:	31 05       	cpc	r19, r1
     816:	0c f0       	brlt	.+2      	; 0x81a <Switch_vidInit+0x5c>
     818:	57 c0       	rjmp	.+174    	; 0x8c8 <__stack+0x69>
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	91 05       	cpc	r25, r1
     822:	09 f4       	brne	.+2      	; 0x826 <Switch_vidInit+0x68>
     824:	3f c0       	rjmp	.+126    	; 0x8a4 <__stack+0x45>
     826:	cd c0       	rjmp	.+410    	; 0x9c2 <__stack+0x163>
     828:	2a 81       	ldd	r18, Y+2	; 0x02
     82a:	3b 81       	ldd	r19, Y+3	; 0x03
     82c:	26 30       	cpi	r18, 0x06	; 6
     82e:	31 05       	cpc	r19, r1
     830:	09 f4       	brne	.+2      	; 0x834 <Switch_vidInit+0x76>
     832:	65 c0       	rjmp	.+202    	; 0x8fe <__stack+0x9f>
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	9b 81       	ldd	r25, Y+3	; 0x03
     838:	87 30       	cpi	r24, 0x07	; 7
     83a:	91 05       	cpc	r25, r1
     83c:	0c f0       	brlt	.+2      	; 0x840 <Switch_vidInit+0x82>
     83e:	68 c0       	rjmp	.+208    	; 0x910 <__stack+0xb1>
     840:	55 c0       	rjmp	.+170    	; 0x8ec <__stack+0x8d>
     842:	2a 81       	ldd	r18, Y+2	; 0x02
     844:	3b 81       	ldd	r19, Y+3	; 0x03
     846:	2c 30       	cpi	r18, 0x0C	; 12
     848:	31 05       	cpc	r19, r1
     84a:	09 f4       	brne	.+2      	; 0x84e <Switch_vidInit+0x90>
     84c:	8e c0       	rjmp	.+284    	; 0x96a <__stack+0x10b>
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	9b 81       	ldd	r25, Y+3	; 0x03
     852:	8d 30       	cpi	r24, 0x0D	; 13
     854:	91 05       	cpc	r25, r1
     856:	6c f4       	brge	.+26     	; 0x872 <__stack+0x13>
     858:	2a 81       	ldd	r18, Y+2	; 0x02
     85a:	3b 81       	ldd	r19, Y+3	; 0x03
     85c:	2a 30       	cpi	r18, 0x0A	; 10
     85e:	31 05       	cpc	r19, r1
     860:	09 f4       	brne	.+2      	; 0x864 <__stack+0x5>
     862:	71 c0       	rjmp	.+226    	; 0x946 <__stack+0xe7>
     864:	8a 81       	ldd	r24, Y+2	; 0x02
     866:	9b 81       	ldd	r25, Y+3	; 0x03
     868:	8b 30       	cpi	r24, 0x0B	; 11
     86a:	91 05       	cpc	r25, r1
     86c:	0c f0       	brlt	.+2      	; 0x870 <__stack+0x11>
     86e:	74 c0       	rjmp	.+232    	; 0x958 <__stack+0xf9>
     870:	61 c0       	rjmp	.+194    	; 0x934 <__stack+0xd5>
     872:	2a 81       	ldd	r18, Y+2	; 0x02
     874:	3b 81       	ldd	r19, Y+3	; 0x03
     876:	2e 30       	cpi	r18, 0x0E	; 14
     878:	31 05       	cpc	r19, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <__stack+0x1f>
     87c:	88 c0       	rjmp	.+272    	; 0x98e <__stack+0x12f>
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
     880:	9b 81       	ldd	r25, Y+3	; 0x03
     882:	8e 30       	cpi	r24, 0x0E	; 14
     884:	91 05       	cpc	r25, r1
     886:	0c f4       	brge	.+2      	; 0x88a <__stack+0x2b>
     888:	79 c0       	rjmp	.+242    	; 0x97c <__stack+0x11d>
     88a:	2a 81       	ldd	r18, Y+2	; 0x02
     88c:	3b 81       	ldd	r19, Y+3	; 0x03
     88e:	2f 30       	cpi	r18, 0x0F	; 15
     890:	31 05       	cpc	r19, r1
     892:	09 f4       	brne	.+2      	; 0x896 <__stack+0x37>
     894:	85 c0       	rjmp	.+266    	; 0x9a0 <__stack+0x141>
     896:	8a 81       	ldd	r24, Y+2	; 0x02
     898:	9b 81       	ldd	r25, Y+3	; 0x03
     89a:	80 31       	cpi	r24, 0x10	; 16
     89c:	91 05       	cpc	r25, r1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	88 c0       	rjmp	.+272    	; 0x9b2 <__stack+0x153>
     8a2:	8f c0       	rjmp	.+286    	; 0x9c2 <__stack+0x163>
	{
	case 1:
		Dio_vidSetPinDir( SWITCH_8ID_1 , DIO_u8INPUT );
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_1 , DIO_u8HIGH  );
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     8b4:	86 c0       	rjmp	.+268    	; 0x9c2 <__stack+0x163>
		break;

	case 2:
		Dio_vidSetPinDir( SWITCH_8ID_2 , DIO_u8INPUT );
     8b6:	81 e1       	ldi	r24, 0x11	; 17
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_2 , DIO_u8HIGH  );
     8be:	81 e1       	ldi	r24, 0x11	; 17
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     8c6:	7d c0       	rjmp	.+250    	; 0x9c2 <__stack+0x163>
		break;

	case 3:
		Dio_vidSetPinDir( SWITCH_8ID_3 , DIO_u8INPUT );
     8c8:	82 e1       	ldi	r24, 0x12	; 18
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_3 , DIO_u8HIGH  );
     8d0:	82 e1       	ldi	r24, 0x12	; 18
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     8d8:	74 c0       	rjmp	.+232    	; 0x9c2 <__stack+0x163>
		break;

	case 4:
		Dio_vidSetPinDir( SWITCH_8ID_4 , DIO_u8INPUT );
     8da:	83 e1       	ldi	r24, 0x13	; 19
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_4 , DIO_u8HIGH  );
     8e2:	83 e1       	ldi	r24, 0x13	; 19
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     8ea:	6b c0       	rjmp	.+214    	; 0x9c2 <__stack+0x163>
		break;

	case 5:
		Dio_vidSetPinDir( SWITCH_8ID_5 , DIO_u8INPUT );
     8ec:	84 e1       	ldi	r24, 0x14	; 20
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_5 , DIO_u8HIGH  );
     8f4:	84 e1       	ldi	r24, 0x14	; 20
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     8fc:	62 c0       	rjmp	.+196    	; 0x9c2 <__stack+0x163>
		break;

	case 6:
		Dio_vidSetPinDir( SWITCH_8ID_6 , DIO_u8INPUT );
     8fe:	85 e1       	ldi	r24, 0x15	; 21
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_6 , DIO_u8HIGH  );
     906:	85 e1       	ldi	r24, 0x15	; 21
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     90e:	59 c0       	rjmp	.+178    	; 0x9c2 <__stack+0x163>
		break;

	case 7:
		Dio_vidSetPinDir( SWITCH_8ID_7 , DIO_u8INPUT );
     910:	86 e1       	ldi	r24, 0x16	; 22
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_7 , DIO_u8HIGH  );
     918:	86 e1       	ldi	r24, 0x16	; 22
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     920:	50 c0       	rjmp	.+160    	; 0x9c2 <__stack+0x163>
		break;

	case 8:
		Dio_vidSetPinDir( SWITCH_8ID_8 , DIO_u8INPUT );
     922:	87 e1       	ldi	r24, 0x17	; 23
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_8 , DIO_u8HIGH  );
     92a:	87 e1       	ldi	r24, 0x17	; 23
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     932:	47 c0       	rjmp	.+142    	; 0x9c2 <__stack+0x163>
		break;

	case 9:
		Dio_vidSetPinDir( SWITCH_8ID_9 , DIO_u8INPUT );
     934:	88 e1       	ldi	r24, 0x18	; 24
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_9 , DIO_u8HIGH  );
     93c:	88 e1       	ldi	r24, 0x18	; 24
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     944:	3e c0       	rjmp	.+124    	; 0x9c2 <__stack+0x163>
		break;

	case 10:
		Dio_vidSetPinDir( SWITCH_8ID_10 , DIO_u8INPUT );
     946:	89 e1       	ldi	r24, 0x19	; 25
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_10 , DIO_u8HIGH  );
     94e:	89 e1       	ldi	r24, 0x19	; 25
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     956:	35 c0       	rjmp	.+106    	; 0x9c2 <__stack+0x163>
		break;


	case 11:
		Dio_vidSetPinDir( SWITCH_8ID_11 , DIO_u8INPUT );
     958:	8a e1       	ldi	r24, 0x1A	; 26
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_11 , DIO_u8HIGH  );
     960:	8a e1       	ldi	r24, 0x1A	; 26
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     968:	2c c0       	rjmp	.+88     	; 0x9c2 <__stack+0x163>
		break;

	case 12:
		Dio_vidSetPinDir( SWITCH_8ID_12 , DIO_u8INPUT );
     96a:	8b e1       	ldi	r24, 0x1B	; 27
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_12 , DIO_u8HIGH  );
     972:	8b e1       	ldi	r24, 0x1B	; 27
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     97a:	23 c0       	rjmp	.+70     	; 0x9c2 <__stack+0x163>
		break;

	case 13:
		Dio_vidSetPinDir( SWITCH_8ID_13 , DIO_u8INPUT );
     97c:	8c e1       	ldi	r24, 0x1C	; 28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_13 , DIO_u8HIGH  );
     984:	8c e1       	ldi	r24, 0x1C	; 28
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     98c:	1a c0       	rjmp	.+52     	; 0x9c2 <__stack+0x163>
		break;

	case 14:
		Dio_vidSetPinDir( SWITCH_8ID_14 , DIO_u8INPUT );
     98e:	8d e1       	ldi	r24, 0x1D	; 29
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_14 , DIO_u8HIGH  );
     996:	8d e1       	ldi	r24, 0x1D	; 29
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     99e:	11 c0       	rjmp	.+34     	; 0x9c2 <__stack+0x163>
		break;

	case 15:
		Dio_vidSetPinDir( SWITCH_8ID_15 , DIO_u8INPUT );
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_15 , DIO_u8HIGH  );
     9a8:	8e e1       	ldi	r24, 0x1E	; 30
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
     9b0:	08 c0       	rjmp	.+16     	; 0x9c2 <__stack+0x163>
		break;

	case 16:
		Dio_vidSetPinDir( SWITCH_8ID_16 , DIO_u8INPUT );
     9b2:	8f e1       	ldi	r24, 0x1F	; 31
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	0e 94 49 00 	call	0x92	; 0x92 <Dio_vidSetPinDir>
		Dio_vidSetPinVal( SWITCH_8ID_16 , DIO_u8HIGH  );
     9ba:	8f e1       	ldi	r24, 0x1F	; 31
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	0e 94 34 01 	call	0x268	; 0x268 <Dio_vidSetPinVal>
		break;
	}
}
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	08 95       	ret

000009ce <Switch_u8GetVal>:



u8   Switch_u8GetVal(u8 SwitchId)
{
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <Switch_u8GetVal+0x6>
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <Switch_u8GetVal+0x8>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	8a 83       	std	Y+2, r24	; 0x02
	u8 RetVal ;

	switch( SwitchId )
     9dc:	8a 81       	ldd	r24, Y+2	; 0x02
     9de:	28 2f       	mov	r18, r24
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	3c 83       	std	Y+4, r19	; 0x04
     9e4:	2b 83       	std	Y+3, r18	; 0x03
     9e6:	8b 81       	ldd	r24, Y+3	; 0x03
     9e8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ea:	88 30       	cpi	r24, 0x08	; 8
     9ec:	91 05       	cpc	r25, r1
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <Switch_u8GetVal+0x24>
     9f0:	84 c0       	rjmp	.+264    	; 0xafa <Switch_u8GetVal+0x12c>
     9f2:	2b 81       	ldd	r18, Y+3	; 0x03
     9f4:	3c 81       	ldd	r19, Y+4	; 0x04
     9f6:	29 30       	cpi	r18, 0x09	; 9
     9f8:	31 05       	cpc	r19, r1
     9fa:	5c f5       	brge	.+86     	; 0xa52 <Switch_u8GetVal+0x84>
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	84 30       	cpi	r24, 0x04	; 4
     a02:	91 05       	cpc	r25, r1
     a04:	09 f4       	brne	.+2      	; 0xa08 <Switch_u8GetVal+0x3a>
     a06:	65 c0       	rjmp	.+202    	; 0xad2 <Switch_u8GetVal+0x104>
     a08:	2b 81       	ldd	r18, Y+3	; 0x03
     a0a:	3c 81       	ldd	r19, Y+4	; 0x04
     a0c:	25 30       	cpi	r18, 0x05	; 5
     a0e:	31 05       	cpc	r19, r1
     a10:	9c f4       	brge	.+38     	; 0xa38 <Switch_u8GetVal+0x6a>
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	91 05       	cpc	r25, r1
     a1a:	09 f4       	brne	.+2      	; 0xa1e <Switch_u8GetVal+0x50>
     a1c:	50 c0       	rjmp	.+160    	; 0xabe <Switch_u8GetVal+0xf0>
     a1e:	2b 81       	ldd	r18, Y+3	; 0x03
     a20:	3c 81       	ldd	r19, Y+4	; 0x04
     a22:	23 30       	cpi	r18, 0x03	; 3
     a24:	31 05       	cpc	r19, r1
     a26:	0c f0       	brlt	.+2      	; 0xa2a <Switch_u8GetVal+0x5c>
     a28:	4f c0       	rjmp	.+158    	; 0xac8 <Switch_u8GetVal+0xfa>
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	91 05       	cpc	r25, r1
     a32:	09 f4       	brne	.+2      	; 0xa36 <Switch_u8GetVal+0x68>
     a34:	3f c0       	rjmp	.+126    	; 0xab4 <Switch_u8GetVal+0xe6>
     a36:	8d c0       	rjmp	.+282    	; 0xb52 <Switch_u8GetVal+0x184>
     a38:	2b 81       	ldd	r18, Y+3	; 0x03
     a3a:	3c 81       	ldd	r19, Y+4	; 0x04
     a3c:	26 30       	cpi	r18, 0x06	; 6
     a3e:	31 05       	cpc	r19, r1
     a40:	09 f4       	brne	.+2      	; 0xa44 <Switch_u8GetVal+0x76>
     a42:	51 c0       	rjmp	.+162    	; 0xae6 <Switch_u8GetVal+0x118>
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	87 30       	cpi	r24, 0x07	; 7
     a4a:	91 05       	cpc	r25, r1
     a4c:	0c f0       	brlt	.+2      	; 0xa50 <Switch_u8GetVal+0x82>
     a4e:	50 c0       	rjmp	.+160    	; 0xaf0 <Switch_u8GetVal+0x122>
     a50:	45 c0       	rjmp	.+138    	; 0xadc <Switch_u8GetVal+0x10e>
     a52:	2b 81       	ldd	r18, Y+3	; 0x03
     a54:	3c 81       	ldd	r19, Y+4	; 0x04
     a56:	2c 30       	cpi	r18, 0x0C	; 12
     a58:	31 05       	cpc	r19, r1
     a5a:	09 f4       	brne	.+2      	; 0xa5e <Switch_u8GetVal+0x90>
     a5c:	62 c0       	rjmp	.+196    	; 0xb22 <Switch_u8GetVal+0x154>
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	8d 30       	cpi	r24, 0x0D	; 13
     a64:	91 05       	cpc	r25, r1
     a66:	6c f4       	brge	.+26     	; 0xa82 <Switch_u8GetVal+0xb4>
     a68:	2b 81       	ldd	r18, Y+3	; 0x03
     a6a:	3c 81       	ldd	r19, Y+4	; 0x04
     a6c:	2a 30       	cpi	r18, 0x0A	; 10
     a6e:	31 05       	cpc	r19, r1
     a70:	09 f4       	brne	.+2      	; 0xa74 <Switch_u8GetVal+0xa6>
     a72:	4d c0       	rjmp	.+154    	; 0xb0e <Switch_u8GetVal+0x140>
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	9c 81       	ldd	r25, Y+4	; 0x04
     a78:	8b 30       	cpi	r24, 0x0B	; 11
     a7a:	91 05       	cpc	r25, r1
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <Switch_u8GetVal+0xb2>
     a7e:	4c c0       	rjmp	.+152    	; 0xb18 <Switch_u8GetVal+0x14a>
     a80:	41 c0       	rjmp	.+130    	; 0xb04 <Switch_u8GetVal+0x136>
     a82:	2b 81       	ldd	r18, Y+3	; 0x03
     a84:	3c 81       	ldd	r19, Y+4	; 0x04
     a86:	2e 30       	cpi	r18, 0x0E	; 14
     a88:	31 05       	cpc	r19, r1
     a8a:	09 f4       	brne	.+2      	; 0xa8e <Switch_u8GetVal+0xc0>
     a8c:	54 c0       	rjmp	.+168    	; 0xb36 <Switch_u8GetVal+0x168>
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	8e 30       	cpi	r24, 0x0E	; 14
     a94:	91 05       	cpc	r25, r1
     a96:	0c f4       	brge	.+2      	; 0xa9a <Switch_u8GetVal+0xcc>
     a98:	49 c0       	rjmp	.+146    	; 0xb2c <Switch_u8GetVal+0x15e>
     a9a:	2b 81       	ldd	r18, Y+3	; 0x03
     a9c:	3c 81       	ldd	r19, Y+4	; 0x04
     a9e:	2f 30       	cpi	r18, 0x0F	; 15
     aa0:	31 05       	cpc	r19, r1
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <Switch_u8GetVal+0xd8>
     aa4:	4d c0       	rjmp	.+154    	; 0xb40 <Switch_u8GetVal+0x172>
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	9c 81       	ldd	r25, Y+4	; 0x04
     aaa:	80 31       	cpi	r24, 0x10	; 16
     aac:	91 05       	cpc	r25, r1
     aae:	09 f4       	brne	.+2      	; 0xab2 <Switch_u8GetVal+0xe4>
     ab0:	4c c0       	rjmp	.+152    	; 0xb4a <Switch_u8GetVal+0x17c>
     ab2:	4f c0       	rjmp	.+158    	; 0xb52 <Switch_u8GetVal+0x184>
	{
	case 1:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_1 );
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	4a c0       	rjmp	.+148    	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 2:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_2 );
     abe:	81 e1       	ldi	r24, 0x11	; 17
     ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	45 c0       	rjmp	.+138    	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 3:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_3 );
     ac8:	82 e1       	ldi	r24, 0x12	; 18
     aca:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	40 c0       	rjmp	.+128    	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 4:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_4 );
     ad2:	83 e1       	ldi	r24, 0x13	; 19
     ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	3b c0       	rjmp	.+118    	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 5:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_5 );
     adc:	84 e1       	ldi	r24, 0x14	; 20
     ade:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	36 c0       	rjmp	.+108    	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 6:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_6 );
     ae6:	85 e1       	ldi	r24, 0x15	; 21
     ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	31 c0       	rjmp	.+98     	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 7:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_7 );
     af0:	86 e1       	ldi	r24, 0x16	; 22
     af2:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	2c c0       	rjmp	.+88     	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 8:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_8 );
     afa:	87 e1       	ldi	r24, 0x17	; 23
     afc:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b00:	89 83       	std	Y+1, r24	; 0x01
     b02:	27 c0       	rjmp	.+78     	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 9:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_9 );
     b04:	88 e1       	ldi	r24, 0x18	; 24
     b06:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	22 c0       	rjmp	.+68     	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 10:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_10 );
     b0e:	89 e1       	ldi	r24, 0x19	; 25
     b10:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	1d c0       	rjmp	.+58     	; 0xb52 <Switch_u8GetVal+0x184>
		break;


	case 11:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_11 );
     b18:	8a e1       	ldi	r24, 0x1A	; 26
     b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	18 c0       	rjmp	.+48     	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 12:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_12 );
     b22:	8b e1       	ldi	r24, 0x1B	; 27
     b24:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	13 c0       	rjmp	.+38     	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 13:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_13 );
     b2c:	8c e1       	ldi	r24, 0x1C	; 28
     b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b32:	89 83       	std	Y+1, r24	; 0x01
     b34:	0e c0       	rjmp	.+28     	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 14:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_14 );
     b36:	8d e1       	ldi	r24, 0x1D	; 29
     b38:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 15:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_15 );
     b40:	8e e1       	ldi	r24, 0x1E	; 30
     b42:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <Switch_u8GetVal+0x184>
		break;

	case 16:
		RetVal = Dio_u8GetPinVal( SWITCH_8ID_16 );
     b4a:	8f e1       	ldi	r24, 0x1F	; 31
     b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_u8GetPinVal>
     b50:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return RetVal;
     b52:	89 81       	ldd	r24, Y+1	; 0x01
}
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <Timer0_vidInit>:

void(*Pfun_OVF)(void);
void(*Pfun_CMP)(void);

void Timer0_vidInit(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_u8WFG_MODE == TIMER0_u8NORMAL_MODE
	//Select Normal Mode
	TCCR0.Bits.WGM00 = 0;
     b6a:	e3 e5       	ldi	r30, 0x53	; 83
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8f 7b       	andi	r24, 0xBF	; 191
     b72:	80 83       	st	Z, r24
	TCCR0.Bits.WGM01 = 0;
     b74:	e3 e5       	ldi	r30, 0x53	; 83
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	87 7f       	andi	r24, 0xF7	; 247
     b7c:	80 83       	st	Z, r24
#endif


#if TIMER0_u8COMPARE_MATCH_OUTPUT_MODE == TIMER0_u8OC0_DISCONNECTED
	//Select OCR0 disconnected (NO_COMPARE_MATCH)
	TCCR0.Bits.COM = 0;
     b7e:	e3 e5       	ldi	r30, 0x53	; 83
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8f 7c       	andi	r24, 0xCF	; 207
     b86:	80 83       	st	Z, r24
	TCCR0.Bits.COM = 3;
#endif

#if TIMER0_u8PRESCALLER_VALU == TIMER0_u8FCPU_1
	//Select No Pre_scalling
	TCCR0.Bits.CS = 1;
     b88:	e3 e5       	ldi	r30, 0x53	; 83
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	88 7f       	andi	r24, 0xF8	; 248
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	80 83       	st	Z, r24
	TCCR0.Bits.CS = 7;
#endif

#if TIMER0_u8OVF_INTERRUPT == TIMER0_u8OVF_INTERRUPT_ENABLE
	//PIE of TIMER0 at overflow of counter register
	SREG.Bits.I_bit  =  1;
     b94:	ef e5       	ldi	r30, 0x5F	; 95
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	80 83       	st	Z, r24
	TIMSK.Bits.TOIE0 =  1;
     b9e:	e9 e5       	ldi	r30, 0x59	; 89
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 83       	st	Z, r24
	//PIE of TIMER0 at Compare Match Output Register
	SREG.Bits.I_bit  =  1;
	TIMSK.Bits.OCIE0 =  1;
#elif TIMER0_u8CMP_INTERRUPT == TIMER0_u8CMP_INTERRUPT_DISABLE
	//disable interrupt timer0 at Compare Match Output Register
	TIMSK.Bits.OCIE0 =  0;
     ba8:	e9 e5       	ldi	r30, 0x59	; 89
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8d 7f       	andi	r24, 0xFD	; 253
     bb0:	80 83       	st	Z, r24
#endif
}
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <Timer0_vidStopTimer>:

void Timer0_vidStopTimer(void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
	//Stop Timer (NO Clock Source)
	TCCR0.Bits.CS = 0;
     bc0:	e3 e5       	ldi	r30, 0x53	; 83
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	88 7f       	andi	r24, 0xF8	; 248
     bc8:	80 83       	st	Z, r24
}
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <Timer0_vidSetCounterRegisterValue>:

void Timer0_vidSetCounterRegisterValue(u8 Val)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	0f 92       	push	r0
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
	//Set Value In Timer Counter Register	 (TCNT0)
	TCNT0.Byte = Val;
     bdc:	e2 e5       	ldi	r30, 0x52	; 82
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	80 83       	st	Z, r24
}
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <Timer0_vidSetCompareRegisterValue>:

void Timer0_vidSetCompareRegisterValue(u8 Val)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	0f 92       	push	r0
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	89 83       	std	Y+1, r24	; 0x01
	//Set Value Of Timer Compare Match Register (OCR0)
	OCR0.Byte = Val;
     bf8:	ec e5       	ldi	r30, 0x5C	; 92
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	80 83       	st	Z, r24
}
     c00:	0f 90       	pop	r0
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <CMP_vidSetCB>:


void CMP_vidSetCB(void(*pf)(void))
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <CMP_vidSetCB+0x6>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMP = pf;
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	90 93 6a 00 	sts	0x006A, r25
     c1e:	80 93 69 00 	sts	0x0069, r24
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <OVF_vidSetCB>:


void OVF_vidSetCB(void(*pf)(void))
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	00 d0       	rcall	.+0      	; 0xc32 <OVF_vidSetCB+0x6>
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9a 83       	std	Y+2, r25	; 0x02
     c38:	89 83       	std	Y+1, r24	; 0x01
	Pfun_OVF = pf;
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	9a 81       	ldd	r25, Y+2	; 0x02
     c3e:	90 93 6c 00 	sts	0x006C, r25
     c42:	80 93 6b 00 	sts	0x006B, r24
}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <__vector_10>:


void __vector_10 (void)
{
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMP();
     c7a:	e0 91 69 00 	lds	r30, 0x0069
     c7e:	f0 91 6a 00 	lds	r31, 0x006A
     c82:	09 95       	icall
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	ff 91       	pop	r31
     c8a:	ef 91       	pop	r30
     c8c:	bf 91       	pop	r27
     c8e:	af 91       	pop	r26
     c90:	9f 91       	pop	r25
     c92:	8f 91       	pop	r24
     c94:	7f 91       	pop	r23
     c96:	6f 91       	pop	r22
     c98:	5f 91       	pop	r21
     c9a:	4f 91       	pop	r20
     c9c:	3f 91       	pop	r19
     c9e:	2f 91       	pop	r18
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <__vector_11>:

void __vector_11 (void)
{
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	Pfun_OVF();
     cd4:	e0 91 6b 00 	lds	r30, 0x006B
     cd8:	f0 91 6c 00 	lds	r31, 0x006C
     cdc:	09 95       	icall
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <main>:
u32 Ovf_Count = 0;
u8 SwitchOn = 0;


int main(void)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	64 97       	sbiw	r28, 0x14	; 20
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
	Task_Type LedTask;
	Task_Type SwitchTask;


	/* Initialize Task_1 */
	LedTask.u32FirstDelay  = 0  ;
     d18:	19 82       	std	Y+1, r1	; 0x01
     d1a:	1a 82       	std	Y+2, r1	; 0x02
     d1c:	1b 82       	std	Y+3, r1	; 0x03
     d1e:	1c 82       	std	Y+4, r1	; 0x04
	LedTask.u32Periodicity = 500;
     d20:	84 ef       	ldi	r24, 0xF4	; 244
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	8d 83       	std	Y+5, r24	; 0x05
     d2a:	9e 83       	std	Y+6, r25	; 0x06
     d2c:	af 83       	std	Y+7, r26	; 0x07
     d2e:	b8 87       	std	Y+8, r27	; 0x08
	LedTask.pfTaskCode     = LedTask_Func;
     d30:	8d ed       	ldi	r24, 0xDD	; 221
     d32:	96 e0       	ldi	r25, 0x06	; 6
     d34:	9a 87       	std	Y+10, r25	; 0x0a
     d36:	89 87       	std	Y+9, r24	; 0x09


	/* Initialize Task_2 */
	SwitchTask.u32FirstDelay  = 0   ;
     d38:	1b 86       	std	Y+11, r1	; 0x0b
     d3a:	1c 86       	std	Y+12, r1	; 0x0c
     d3c:	1d 86       	std	Y+13, r1	; 0x0d
     d3e:	1e 86       	std	Y+14, r1	; 0x0e
	SwitchTask.u32Periodicity = 50;
     d40:	82 e3       	ldi	r24, 0x32	; 50
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	8f 87       	std	Y+15, r24	; 0x0f
     d4a:	98 8b       	std	Y+16, r25	; 0x10
     d4c:	a9 8b       	std	Y+17, r26	; 0x11
     d4e:	ba 8b       	std	Y+18, r27	; 0x12
	SwitchTask.pfTaskCode     = SwitchTask_Func;
     d50:	8e e5       	ldi	r24, 0x5E	; 94
     d52:	97 e0       	ldi	r25, 0x07	; 7
     d54:	9c 8b       	std	Y+20, r25	; 0x14
     d56:	8b 8b       	std	Y+19, r24	; 0x13


	/* Initialize Array Of Pointer With Our Tasks  */
	apstrTaskArray[0] = &LedTask;
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	90 93 6e 00 	sts	0x006E, r25
     d60:	80 93 6d 00 	sts	0x006D, r24
	apstrTaskArray[1] = &SwitchTask;
     d64:	ce 01       	movw	r24, r28
     d66:	0b 96       	adiw	r24, 0x0b	; 11
     d68:	90 93 70 00 	sts	0x0070, r25
     d6c:	80 93 6f 00 	sts	0x006F, r24


	/* Initialize Led*/
	Led_vidInit(LED_1);
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	0e 94 a7 02 	call	0x54e	; 0x54e <Led_vidInit>
	Led_vidInit(LED_2);
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	0e 94 a7 02 	call	0x54e	; 0x54e <Led_vidInit>
	Led_vidInit(LED_3);
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	0e 94 a7 02 	call	0x54e	; 0x54e <Led_vidInit>
	Led_vidInit(LED_4);
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	0e 94 a7 02 	call	0x54e	; 0x54e <Led_vidInit>
	Led_vidInit(LED_5);
     d88:	85 e0       	ldi	r24, 0x05	; 5
     d8a:	0e 94 a7 02 	call	0x54e	; 0x54e <Led_vidInit>
	Led_vidInit(LED_6);
     d8e:	86 e0       	ldi	r24, 0x06	; 6
     d90:	0e 94 a7 02 	call	0x54e	; 0x54e <Led_vidInit>
	Led_vidInit(LED_7);
     d94:	87 e0       	ldi	r24, 0x07	; 7
     d96:	0e 94 a7 02 	call	0x54e	; 0x54e <Led_vidInit>
	Led_vidInit(LED_8);
     d9a:	88 e0       	ldi	r24, 0x08	; 8
     d9c:	0e 94 a7 02 	call	0x54e	; 0x54e <Led_vidInit>

	/* Initialize Switch */
	Switch_vidInit( SWITCH_1);
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	0e 94 df 03 	call	0x7be	; 0x7be <Switch_vidInit>


	/* Set Overflow Call Back Function */
	OVF_vidSetCB( TimerTick );
     da6:	89 ef       	ldi	r24, 0xF9	; 249
     da8:	97 e0       	ldi	r25, 0x07	; 7
     daa:	0e 94 16 06 	call	0xc2c	; 0xc2c <OVF_vidSetCB>

	/* Initialize Counter Register */
	Timer0_vidSetCounterRegisterValue( 192 );
     dae:	80 ec       	ldi	r24, 0xC0	; 192
     db0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Timer0_vidSetCounterRegisterValue>

	/* Initialize Timer_0 */
	Timer0_vidInit();
     db4:	0e 94 b1 05 	call	0xb62	; 0xb62 <Timer0_vidInit>
     db8:	ff cf       	rjmp	.-2      	; 0xdb8 <main+0xb4>

00000dba <LedTask_Func>:

	return 0;
}

void LedTask_Func(void)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <LedTask_Func+0x6>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
	static u8 Counter ;

	switch( Counter )
     dc4:	80 91 67 00 	lds	r24, 0x0067
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3a 83       	std	Y+2, r19	; 0x02
     dce:	29 83       	std	Y+1, r18	; 0x01
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	91 05       	cpc	r25, r1
     dd8:	a9 f1       	breq	.+106    	; 0xe44 <LedTask_Func+0x8a>
     dda:	29 81       	ldd	r18, Y+1	; 0x01
     ddc:	3a 81       	ldd	r19, Y+2	; 0x02
     dde:	24 30       	cpi	r18, 0x04	; 4
     de0:	31 05       	cpc	r19, r1
     de2:	7c f4       	brge	.+30     	; 0xe02 <LedTask_Func+0x48>
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	91 05       	cpc	r25, r1
     dec:	19 f1       	breq	.+70     	; 0xe34 <LedTask_Func+0x7a>
     dee:	29 81       	ldd	r18, Y+1	; 0x01
     df0:	3a 81       	ldd	r19, Y+2	; 0x02
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	14 f5       	brge	.+68     	; 0xe3c <LedTask_Func+0x82>
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	b1 f0       	breq	.+44     	; 0xe2c <LedTask_Func+0x72>
     e00:	35 c0       	rjmp	.+106    	; 0xe6c <LedTask_Func+0xb2>
     e02:	29 81       	ldd	r18, Y+1	; 0x01
     e04:	3a 81       	ldd	r19, Y+2	; 0x02
     e06:	25 30       	cpi	r18, 0x05	; 5
     e08:	31 05       	cpc	r19, r1
     e0a:	21 f1       	breq	.+72     	; 0xe54 <LedTask_Func+0x9a>
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	85 30       	cpi	r24, 0x05	; 5
     e12:	91 05       	cpc	r25, r1
     e14:	dc f0       	brlt	.+54     	; 0xe4c <LedTask_Func+0x92>
     e16:	29 81       	ldd	r18, Y+1	; 0x01
     e18:	3a 81       	ldd	r19, Y+2	; 0x02
     e1a:	26 30       	cpi	r18, 0x06	; 6
     e1c:	31 05       	cpc	r19, r1
     e1e:	f1 f0       	breq	.+60     	; 0xe5c <LedTask_Func+0xa2>
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	87 30       	cpi	r24, 0x07	; 7
     e26:	91 05       	cpc	r25, r1
     e28:	e9 f0       	breq	.+58     	; 0xe64 <LedTask_Func+0xaa>
     e2a:	20 c0       	rjmp	.+64     	; 0xe6c <LedTask_Func+0xb2>
	{
	case 0:
		Led_vidTurnOn( LED_1 );
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 0f 03 	call	0x61e	; 0x61e <Led_vidTurnOn>
     e32:	34 c0       	rjmp	.+104    	; 0xe9c <LedTask_Func+0xe2>
		break;

	case 1:
		Led_vidTurnOn( LED_2 );
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	0e 94 0f 03 	call	0x61e	; 0x61e <Led_vidTurnOn>
     e3a:	30 c0       	rjmp	.+96     	; 0xe9c <LedTask_Func+0xe2>
		break;

	case 2:
		Led_vidTurnOn( LED_3 );
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	0e 94 0f 03 	call	0x61e	; 0x61e <Led_vidTurnOn>
     e42:	2c c0       	rjmp	.+88     	; 0xe9c <LedTask_Func+0xe2>
		break;

	case 3:
		Led_vidTurnOn( LED_4 );
     e44:	84 e0       	ldi	r24, 0x04	; 4
     e46:	0e 94 0f 03 	call	0x61e	; 0x61e <Led_vidTurnOn>
     e4a:	28 c0       	rjmp	.+80     	; 0xe9c <LedTask_Func+0xe2>
		break;

	case 4:
		Led_vidTurnOn( LED_5 );
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	0e 94 0f 03 	call	0x61e	; 0x61e <Led_vidTurnOn>
     e52:	24 c0       	rjmp	.+72     	; 0xe9c <LedTask_Func+0xe2>
		break;

	case 5:
		Led_vidTurnOn( LED_6 );
     e54:	86 e0       	ldi	r24, 0x06	; 6
     e56:	0e 94 0f 03 	call	0x61e	; 0x61e <Led_vidTurnOn>
     e5a:	20 c0       	rjmp	.+64     	; 0xe9c <LedTask_Func+0xe2>
		break;

	case 6:
		Led_vidTurnOn( LED_7 );
     e5c:	87 e0       	ldi	r24, 0x07	; 7
     e5e:	0e 94 0f 03 	call	0x61e	; 0x61e <Led_vidTurnOn>
     e62:	1c c0       	rjmp	.+56     	; 0xe9c <LedTask_Func+0xe2>
		break;

	case 7:
		Led_vidTurnOn( LED_8 );
     e64:	88 e0       	ldi	r24, 0x08	; 8
     e66:	0e 94 0f 03 	call	0x61e	; 0x61e <Led_vidTurnOn>
     e6a:	18 c0       	rjmp	.+48     	; 0xe9c <LedTask_Func+0xe2>
		break;

	default:
		Led_vidTurnOff( LED_1 );
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	0e 94 77 03 	call	0x6ee	; 0x6ee <Led_vidTurnOff>
		Led_vidTurnOff( LED_2 );
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	0e 94 77 03 	call	0x6ee	; 0x6ee <Led_vidTurnOff>
		Led_vidTurnOff( LED_3 );
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	0e 94 77 03 	call	0x6ee	; 0x6ee <Led_vidTurnOff>
		Led_vidTurnOff( LED_4 );
     e7e:	84 e0       	ldi	r24, 0x04	; 4
     e80:	0e 94 77 03 	call	0x6ee	; 0x6ee <Led_vidTurnOff>
		Led_vidTurnOff( LED_5 );
     e84:	85 e0       	ldi	r24, 0x05	; 5
     e86:	0e 94 77 03 	call	0x6ee	; 0x6ee <Led_vidTurnOff>
		Led_vidTurnOff( LED_6 );
     e8a:	86 e0       	ldi	r24, 0x06	; 6
     e8c:	0e 94 77 03 	call	0x6ee	; 0x6ee <Led_vidTurnOff>
		Led_vidTurnOff( LED_7 );
     e90:	87 e0       	ldi	r24, 0x07	; 7
     e92:	0e 94 77 03 	call	0x6ee	; 0x6ee <Led_vidTurnOff>
		Led_vidTurnOff( LED_8 );
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	0e 94 77 03 	call	0x6ee	; 0x6ee <Led_vidTurnOff>
		break;
	}
	Counter++;
     e9c:	80 91 67 00 	lds	r24, 0x0067
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	80 93 67 00 	sts	0x0067, r24

	if( Counter == 9)
     ea6:	80 91 67 00 	lds	r24, 0x0067
     eaa:	89 30       	cpi	r24, 0x09	; 9
     eac:	11 f4       	brne	.+4      	; 0xeb2 <LedTask_Func+0xf8>
	{
		Counter = 0;
     eae:	10 92 67 00 	sts	0x0067, r1
	}
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <SwitchTask_Func>:


void SwitchTask_Func(void)
{
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	static u8 SwitchVal[2] = { 1 , 1 };
	static u8 Counter = 0 ;

	SwitchVal[Counter] = Switch_u8GetVal( SWITCH_1 );
     ec8:	80 91 68 00 	lds	r24, 0x0068
     ecc:	08 2f       	mov	r16, r24
     ece:	10 e0       	ldi	r17, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <Switch_u8GetVal>
     ed6:	f8 01       	movw	r30, r16
     ed8:	e0 5a       	subi	r30, 0xA0	; 160
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	80 83       	st	Z, r24

	Counter++;
     ede:	80 91 68 00 	lds	r24, 0x0068
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	80 93 68 00 	sts	0x0068, r24

	if( Counter == 2 )
     ee8:	80 91 68 00 	lds	r24, 0x0068
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	81 f4       	brne	.+32     	; 0xf10 <SwitchTask_Func+0x54>
	{
		Counter = 0;
     ef0:	10 92 68 00 	sts	0x0068, r1
		if( ( SwitchVal[0] == 0 ) && ( SwitchVal[1] == 0  ) )
     ef4:	80 91 60 00 	lds	r24, 0x0060
     ef8:	88 23       	and	r24, r24
     efa:	41 f4       	brne	.+16     	; 0xf0c <SwitchTask_Func+0x50>
     efc:	80 91 61 00 	lds	r24, 0x0061
     f00:	88 23       	and	r24, r24
     f02:	21 f4       	brne	.+8      	; 0xf0c <SwitchTask_Func+0x50>
		{
			SwitchOn = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 66 00 	sts	0x0066, r24
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <SwitchTask_Func+0x54>
		}
		else
		{
			SwitchOn = 0;
     f0c:	10 92 66 00 	sts	0x0066, r1
		}
	}

}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	08 95       	ret

00000f1a <Scheduler>:

void Scheduler(void)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	u8 u8TaskCounter ;
	for( u8TaskCounter = 0; u8TaskCounter < 2; u8TaskCounter++)
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	5d c0       	rjmp	.+186    	; 0xfe2 <Scheduler+0xc8>
	{
		if( (apstrTaskArray[u8TaskCounter]->u32FirstDelay) == 0 )
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	fc 01       	movw	r30, r24
     f34:	e3 59       	subi	r30, 0x93	; 147
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	01 90       	ld	r0, Z+
     f3a:	f0 81       	ld	r31, Z
     f3c:	e0 2d       	mov	r30, r0
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	a2 81       	ldd	r26, Z+2	; 0x02
     f44:	b3 81       	ldd	r27, Z+3	; 0x03
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	a1 05       	cpc	r26, r1
     f4a:	b1 05       	cpc	r27, r1
     f4c:	89 f5       	brne	.+98     	; 0xfb0 <Scheduler+0x96>
		{
			apstrTaskArray[u8TaskCounter]->pfTaskCode();
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	fc 01       	movw	r30, r24
     f5a:	e3 59       	subi	r30, 0x93	; 147
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	01 90       	ld	r0, Z+
     f60:	f0 81       	ld	r31, Z
     f62:	e0 2d       	mov	r30, r0
     f64:	00 84       	ldd	r0, Z+8	; 0x08
     f66:	f1 85       	ldd	r31, Z+9	; 0x09
     f68:	e0 2d       	mov	r30, r0
     f6a:	09 95       	icall
			apstrTaskArray[u8TaskCounter]->u32FirstDelay = apstrTaskArray[u8TaskCounter]->u32Periodicity - 1;
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	88 2f       	mov	r24, r24
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	fc 01       	movw	r30, r24
     f78:	e3 59       	subi	r30, 0x93	; 147
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	20 81       	ld	r18, Z
     f7e:	31 81       	ldd	r19, Z+1	; 0x01
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	fc 01       	movw	r30, r24
     f8c:	e3 59       	subi	r30, 0x93	; 147
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	01 90       	ld	r0, Z+
     f92:	f0 81       	ld	r31, Z
     f94:	e0 2d       	mov	r30, r0
     f96:	84 81       	ldd	r24, Z+4	; 0x04
     f98:	95 81       	ldd	r25, Z+5	; 0x05
     f9a:	a6 81       	ldd	r26, Z+6	; 0x06
     f9c:	b7 81       	ldd	r27, Z+7	; 0x07
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	a1 09       	sbc	r26, r1
     fa2:	b1 09       	sbc	r27, r1
     fa4:	f9 01       	movw	r30, r18
     fa6:	80 83       	st	Z, r24
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	a2 83       	std	Z+2, r26	; 0x02
     fac:	b3 83       	std	Z+3, r27	; 0x03
     fae:	16 c0       	rjmp	.+44     	; 0xfdc <Scheduler+0xc2>
		}
		else
		{
			apstrTaskArray[u8TaskCounter]->u32FirstDelay--;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	fc 01       	movw	r30, r24
     fbc:	e3 59       	subi	r30, 0x93	; 147
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	01 90       	ld	r0, Z+
     fc2:	f0 81       	ld	r31, Z
     fc4:	e0 2d       	mov	r30, r0
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	a2 81       	ldd	r26, Z+2	; 0x02
     fcc:	b3 81       	ldd	r27, Z+3	; 0x03
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	a1 09       	sbc	r26, r1
     fd2:	b1 09       	sbc	r27, r1
     fd4:	80 83       	st	Z, r24
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	a2 83       	std	Z+2, r26	; 0x02
     fda:	b3 83       	std	Z+3, r27	; 0x03
}

void Scheduler(void)
{
	u8 u8TaskCounter ;
	for( u8TaskCounter = 0; u8TaskCounter < 2; u8TaskCounter++)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	08 f4       	brcc	.+2      	; 0xfea <Scheduler+0xd0>
     fe8:	9f cf       	rjmp	.-194    	; 0xf28 <Scheduler+0xe>
		{
			apstrTaskArray[u8TaskCounter]->u32FirstDelay--;
		}
	}

}
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <TimerTick>:


void TimerTick(void)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	Ovf_Count ++;
     ffa:	80 91 62 00 	lds	r24, 0x0062
     ffe:	90 91 63 00 	lds	r25, 0x0063
    1002:	a0 91 64 00 	lds	r26, 0x0064
    1006:	b0 91 65 00 	lds	r27, 0x0065
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	a1 1d       	adc	r26, r1
    100e:	b1 1d       	adc	r27, r1
    1010:	80 93 62 00 	sts	0x0062, r24
    1014:	90 93 63 00 	sts	0x0063, r25
    1018:	a0 93 64 00 	sts	0x0064, r26
    101c:	b0 93 65 00 	sts	0x0065, r27

	/* 32 overflow Mean 1msec -> (1 Tick) */

	if( Ovf_Count == 32 )
    1020:	80 91 62 00 	lds	r24, 0x0062
    1024:	90 91 63 00 	lds	r25, 0x0063
    1028:	a0 91 64 00 	lds	r26, 0x0064
    102c:	b0 91 65 00 	lds	r27, 0x0065
    1030:	80 32       	cpi	r24, 0x20	; 32
    1032:	91 05       	cpc	r25, r1
    1034:	a1 05       	cpc	r26, r1
    1036:	b1 05       	cpc	r27, r1
    1038:	69 f4       	brne	.+26     	; 0x1054 <TimerTick+0x62>
	{
		/* Reinitialize Overflow Counter */
		Ovf_Count = 0;
    103a:	10 92 62 00 	sts	0x0062, r1
    103e:	10 92 63 00 	sts	0x0063, r1
    1042:	10 92 64 00 	sts	0x0064, r1
    1046:	10 92 65 00 	sts	0x0065, r1

		/* Initialize Counter Register */
		Timer0_vidSetCounterRegisterValue( 192 );
    104a:	80 ec       	ldi	r24, 0xC0	; 192
    104c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Timer0_vidSetCounterRegisterValue>

		/* Scheduler Will Excute Every 1msec  */
		Scheduler();
    1050:	0e 94 8d 07 	call	0xf1a	; 0xf1a <Scheduler>
	}

}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <_exit>:
    105a:	f8 94       	cli

0000105c <__stop_program>:
    105c:	ff cf       	rjmp	.-2      	; 0x105c <__stop_program>
