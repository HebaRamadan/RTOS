
FreeRTOS_Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000060de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000060de  00006172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000648  00800074  00800074  00006186  2**0
                  ALLOC
  3 .stab         00008da8  00000000  00000000  00006188  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000463b  00000000  00000000  0000ef30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f0 e6       	ldi	r31, 0x60	; 96
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 10 	call	0x217a	; 0x217a <main>
      8a:	0c 94 6d 30 	jmp	0x60da	; 0x60da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vidSetPinDirection>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	89 83       	std	Y+1, r24	; 0x01
      a8:	6a 83       	std	Y+2, r22	; 0x02
      aa:	4b 83       	std	Y+3, r20	; 0x03
      ac:	8b 81       	ldd	r24, Y+3	; 0x03
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	09 f0       	breq	.+2      	; 0xb4 <DIO_vidSetPinDirection+0x22>
      b2:	6f c0       	rjmp	.+222    	; 0x192 <DIO_vidSetPinDirection+0x100>
      b4:	89 81       	ldd	r24, Y+1	; 0x01
      b6:	28 2f       	mov	r18, r24
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	3f 83       	std	Y+7, r19	; 0x07
      bc:	2e 83       	std	Y+6, r18	; 0x06
      be:	8e 81       	ldd	r24, Y+6	; 0x06
      c0:	9f 81       	ldd	r25, Y+7	; 0x07
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	91 05       	cpc	r25, r1
      c6:	49 f1       	breq	.+82     	; 0x11a <DIO_vidSetPinDirection+0x88>
      c8:	2e 81       	ldd	r18, Y+6	; 0x06
      ca:	3f 81       	ldd	r19, Y+7	; 0x07
      cc:	22 30       	cpi	r18, 0x02	; 2
      ce:	31 05       	cpc	r19, r1
      d0:	2c f4       	brge	.+10     	; 0xdc <DIO_vidSetPinDirection+0x4a>
      d2:	8e 81       	ldd	r24, Y+6	; 0x06
      d4:	9f 81       	ldd	r25, Y+7	; 0x07
      d6:	00 97       	sbiw	r24, 0x00	; 0
      d8:	61 f0       	breq	.+24     	; 0xf2 <DIO_vidSetPinDirection+0x60>
      da:	d2 c0       	rjmp	.+420    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
      dc:	2e 81       	ldd	r18, Y+6	; 0x06
      de:	3f 81       	ldd	r19, Y+7	; 0x07
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 05       	cpc	r19, r1
      e4:	71 f1       	breq	.+92     	; 0x142 <DIO_vidSetPinDirection+0xb0>
      e6:	8e 81       	ldd	r24, Y+6	; 0x06
      e8:	9f 81       	ldd	r25, Y+7	; 0x07
      ea:	83 30       	cpi	r24, 0x03	; 3
      ec:	91 05       	cpc	r25, r1
      ee:	e9 f1       	breq	.+122    	; 0x16a <DIO_vidSetPinDirection+0xd8>
      f0:	c7 c0       	rjmp	.+398    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
      f2:	aa e3       	ldi	r26, 0x3A	; 58
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	ea e3       	ldi	r30, 0x3A	; 58
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	48 2f       	mov	r20, r24
      fe:	8a 81       	ldd	r24, Y+2	; 0x02
     100:	28 2f       	mov	r18, r24
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	02 2e       	mov	r0, r18
     10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_vidSetPinDirection+0x7e>
     10c:	88 0f       	add	r24, r24
     10e:	99 1f       	adc	r25, r25
     110:	0a 94       	dec	r0
     112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_vidSetPinDirection+0x7a>
     114:	84 2b       	or	r24, r20
     116:	8c 93       	st	X, r24
     118:	b3 c0       	rjmp	.+358    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     11a:	a7 e3       	ldi	r26, 0x37	; 55
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	e7 e3       	ldi	r30, 0x37	; 55
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	48 2f       	mov	r20, r24
     126:	8a 81       	ldd	r24, Y+2	; 0x02
     128:	28 2f       	mov	r18, r24
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 2e       	mov	r0, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_vidSetPinDirection+0xa6>
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	0a 94       	dec	r0
     13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_vidSetPinDirection+0xa2>
     13c:	84 2b       	or	r24, r20
     13e:	8c 93       	st	X, r24
     140:	9f c0       	rjmp	.+318    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     142:	a4 e3       	ldi	r26, 0x34	; 52
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e4 e3       	ldi	r30, 0x34	; 52
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	48 2f       	mov	r20, r24
     14e:	8a 81       	ldd	r24, Y+2	; 0x02
     150:	28 2f       	mov	r18, r24
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	02 2e       	mov	r0, r18
     15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_vidSetPinDirection+0xce>
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	0a 94       	dec	r0
     162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_vidSetPinDirection+0xca>
     164:	84 2b       	or	r24, r20
     166:	8c 93       	st	X, r24
     168:	8b c0       	rjmp	.+278    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     16a:	a1 e3       	ldi	r26, 0x31	; 49
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e1 e3       	ldi	r30, 0x31	; 49
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	48 2f       	mov	r20, r24
     176:	8a 81       	ldd	r24, Y+2	; 0x02
     178:	28 2f       	mov	r18, r24
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	02 2e       	mov	r0, r18
     182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_vidSetPinDirection+0xf6>
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	0a 94       	dec	r0
     18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_vidSetPinDirection+0xf2>
     18c:	84 2b       	or	r24, r20
     18e:	8c 93       	st	X, r24
     190:	77 c0       	rjmp	.+238    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	88 23       	and	r24, r24
     196:	09 f0       	breq	.+2      	; 0x19a <DIO_vidSetPinDirection+0x108>
     198:	73 c0       	rjmp	.+230    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	28 2f       	mov	r18, r24
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	3d 83       	std	Y+5, r19	; 0x05
     1a2:	2c 83       	std	Y+4, r18	; 0x04
     1a4:	8c 81       	ldd	r24, Y+4	; 0x04
     1a6:	9d 81       	ldd	r25, Y+5	; 0x05
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	91 05       	cpc	r25, r1
     1ac:	59 f1       	breq	.+86     	; 0x204 <DIO_vidSetPinDirection+0x172>
     1ae:	2c 81       	ldd	r18, Y+4	; 0x04
     1b0:	3d 81       	ldd	r19, Y+5	; 0x05
     1b2:	22 30       	cpi	r18, 0x02	; 2
     1b4:	31 05       	cpc	r19, r1
     1b6:	2c f4       	brge	.+10     	; 0x1c2 <DIO_vidSetPinDirection+0x130>
     1b8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ba:	9d 81       	ldd	r25, Y+5	; 0x05
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	69 f0       	breq	.+26     	; 0x1da <DIO_vidSetPinDirection+0x148>
     1c0:	5f c0       	rjmp	.+190    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     1c2:	2c 81       	ldd	r18, Y+4	; 0x04
     1c4:	3d 81       	ldd	r19, Y+5	; 0x05
     1c6:	22 30       	cpi	r18, 0x02	; 2
     1c8:	31 05       	cpc	r19, r1
     1ca:	89 f1       	breq	.+98     	; 0x22e <DIO_vidSetPinDirection+0x19c>
     1cc:	8c 81       	ldd	r24, Y+4	; 0x04
     1ce:	9d 81       	ldd	r25, Y+5	; 0x05
     1d0:	83 30       	cpi	r24, 0x03	; 3
     1d2:	91 05       	cpc	r25, r1
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <DIO_vidSetPinDirection+0x146>
     1d6:	40 c0       	rjmp	.+128    	; 0x258 <DIO_vidSetPinDirection+0x1c6>
     1d8:	53 c0       	rjmp	.+166    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     1da:	aa e3       	ldi	r26, 0x3A	; 58
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	ea e3       	ldi	r30, 0x3A	; 58
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	48 2f       	mov	r20, r24
     1e6:	8a 81       	ldd	r24, Y+2	; 0x02
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	02 2e       	mov	r0, r18
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_vidSetPinDirection+0x166>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_vidSetPinDirection+0x162>
     1fc:	80 95       	com	r24
     1fe:	84 23       	and	r24, r20
     200:	8c 93       	st	X, r24
     202:	3e c0       	rjmp	.+124    	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     204:	a7 e3       	ldi	r26, 0x37	; 55
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	e7 e3       	ldi	r30, 0x37	; 55
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	48 2f       	mov	r20, r24
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	28 2f       	mov	r18, r24
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 2e       	mov	r0, r18
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_vidSetPinDirection+0x190>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	0a 94       	dec	r0
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_vidSetPinDirection+0x18c>
     226:	80 95       	com	r24
     228:	84 23       	and	r24, r20
     22a:	8c 93       	st	X, r24
     22c:	29 c0       	rjmp	.+82     	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     22e:	a4 e3       	ldi	r26, 0x34	; 52
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	e4 e3       	ldi	r30, 0x34	; 52
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	48 2f       	mov	r20, r24
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 2e       	mov	r0, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vidSetPinDirection+0x1ba>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	0a 94       	dec	r0
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vidSetPinDirection+0x1b6>
     250:	80 95       	com	r24
     252:	84 23       	and	r24, r20
     254:	8c 93       	st	X, r24
     256:	14 c0       	rjmp	.+40     	; 0x280 <DIO_vidSetPinDirection+0x1ee>
     258:	a1 e3       	ldi	r26, 0x31	; 49
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	e1 e3       	ldi	r30, 0x31	; 49
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	48 2f       	mov	r20, r24
     264:	8a 81       	ldd	r24, Y+2	; 0x02
     266:	28 2f       	mov	r18, r24
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 2e       	mov	r0, r18
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_vidSetPinDirection+0x1e4>
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	0a 94       	dec	r0
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_vidSetPinDirection+0x1e0>
     27a:	80 95       	com	r24
     27c:	84 23       	and	r24, r20
     27e:	8c 93       	st	X, r24
     280:	27 96       	adiw	r28, 0x07	; 7
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	cf 91       	pop	r28
     28e:	df 91       	pop	r29
     290:	08 95       	ret

00000292 <DIO_vidSetPinValue>:
	}
}


void DIO_vidSetPinValue( u8 Copy_U8Port  ,  u8 Copy_U8Pin  ,  u8 Copy_U8Value     )
{
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	27 97       	sbiw	r28, 0x07	; 7
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	6a 83       	std	Y+2, r22	; 0x02
     2aa:	4b 83       	std	Y+3, r20	; 0x03
	if( 1 == Copy_U8Value )
     2ac:	8b 81       	ldd	r24, Y+3	; 0x03
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <DIO_vidSetPinValue+0x22>
     2b2:	6f c0       	rjmp	.+222    	; 0x392 <DIO_vidSetPinValue+0x100>
	{
		switch(Copy_U8Port)
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	28 2f       	mov	r18, r24
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	3f 83       	std	Y+7, r19	; 0x07
     2bc:	2e 83       	std	Y+6, r18	; 0x06
     2be:	8e 81       	ldd	r24, Y+6	; 0x06
     2c0:	9f 81       	ldd	r25, Y+7	; 0x07
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	91 05       	cpc	r25, r1
     2c6:	49 f1       	breq	.+82     	; 0x31a <DIO_vidSetPinValue+0x88>
     2c8:	2e 81       	ldd	r18, Y+6	; 0x06
     2ca:	3f 81       	ldd	r19, Y+7	; 0x07
     2cc:	22 30       	cpi	r18, 0x02	; 2
     2ce:	31 05       	cpc	r19, r1
     2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_vidSetPinValue+0x4a>
     2d2:	8e 81       	ldd	r24, Y+6	; 0x06
     2d4:	9f 81       	ldd	r25, Y+7	; 0x07
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	61 f0       	breq	.+24     	; 0x2f2 <DIO_vidSetPinValue+0x60>
     2da:	d2 c0       	rjmp	.+420    	; 0x480 <DIO_vidSetPinValue+0x1ee>
     2dc:	2e 81       	ldd	r18, Y+6	; 0x06
     2de:	3f 81       	ldd	r19, Y+7	; 0x07
     2e0:	22 30       	cpi	r18, 0x02	; 2
     2e2:	31 05       	cpc	r19, r1
     2e4:	71 f1       	breq	.+92     	; 0x342 <DIO_vidSetPinValue+0xb0>
     2e6:	8e 81       	ldd	r24, Y+6	; 0x06
     2e8:	9f 81       	ldd	r25, Y+7	; 0x07
     2ea:	83 30       	cpi	r24, 0x03	; 3
     2ec:	91 05       	cpc	r25, r1
     2ee:	e9 f1       	breq	.+122    	; 0x36a <DIO_vidSetPinValue+0xd8>
     2f0:	c7 c0       	rjmp	.+398    	; 0x480 <DIO_vidSetPinValue+0x1ee>
		{
			case 0 :  SET_BIT(PORTA , Copy_U8Pin );     break;
     2f2:	ab e3       	ldi	r26, 0x3B	; 59
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	eb e3       	ldi	r30, 0x3B	; 59
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	48 2f       	mov	r20, r24
     2fe:	8a 81       	ldd	r24, Y+2	; 0x02
     300:	28 2f       	mov	r18, r24
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	02 2e       	mov	r0, r18
     30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_vidSetPinValue+0x7e>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	0a 94       	dec	r0
     312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_vidSetPinValue+0x7a>
     314:	84 2b       	or	r24, r20
     316:	8c 93       	st	X, r24
     318:	b3 c0       	rjmp	.+358    	; 0x480 <DIO_vidSetPinValue+0x1ee>
			case 1 :  SET_BIT(PORTB , Copy_U8Pin );     break;
     31a:	a8 e3       	ldi	r26, 0x38	; 56
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	e8 e3       	ldi	r30, 0x38	; 56
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	48 2f       	mov	r20, r24
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	28 2f       	mov	r18, r24
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	02 2e       	mov	r0, r18
     332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_vidSetPinValue+0xa6>
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	0a 94       	dec	r0
     33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_vidSetPinValue+0xa2>
     33c:	84 2b       	or	r24, r20
     33e:	8c 93       	st	X, r24
     340:	9f c0       	rjmp	.+318    	; 0x480 <DIO_vidSetPinValue+0x1ee>
			case 2 :  SET_BIT(PORTC , Copy_U8Pin );     break;
     342:	a5 e3       	ldi	r26, 0x35	; 53
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	e5 e3       	ldi	r30, 0x35	; 53
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	48 2f       	mov	r20, r24
     34e:	8a 81       	ldd	r24, Y+2	; 0x02
     350:	28 2f       	mov	r18, r24
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	02 2e       	mov	r0, r18
     35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_vidSetPinValue+0xce>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	0a 94       	dec	r0
     362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_vidSetPinValue+0xca>
     364:	84 2b       	or	r24, r20
     366:	8c 93       	st	X, r24
     368:	8b c0       	rjmp	.+278    	; 0x480 <DIO_vidSetPinValue+0x1ee>
			case 3 :  SET_BIT(PORTD , Copy_U8Pin );     break;
     36a:	a2 e3       	ldi	r26, 0x32	; 50
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	e2 e3       	ldi	r30, 0x32	; 50
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	48 2f       	mov	r20, r24
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	28 2f       	mov	r18, r24
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	02 2e       	mov	r0, r18
     382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_vidSetPinValue+0xf6>
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	0a 94       	dec	r0
     38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_vidSetPinValue+0xf2>
     38c:	84 2b       	or	r24, r20
     38e:	8c 93       	st	X, r24
     390:	77 c0       	rjmp	.+238    	; 0x480 <DIO_vidSetPinValue+0x1ee>
		}
	}
	else if( 0 == Copy_U8Value )
     392:	8b 81       	ldd	r24, Y+3	; 0x03
     394:	88 23       	and	r24, r24
     396:	09 f0       	breq	.+2      	; 0x39a <DIO_vidSetPinValue+0x108>
     398:	73 c0       	rjmp	.+230    	; 0x480 <DIO_vidSetPinValue+0x1ee>
	{
		switch(Copy_U8Port)
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	28 2f       	mov	r18, r24
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	3d 83       	std	Y+5, r19	; 0x05
     3a2:	2c 83       	std	Y+4, r18	; 0x04
     3a4:	8c 81       	ldd	r24, Y+4	; 0x04
     3a6:	9d 81       	ldd	r25, Y+5	; 0x05
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	91 05       	cpc	r25, r1
     3ac:	59 f1       	breq	.+86     	; 0x404 <DIO_vidSetPinValue+0x172>
     3ae:	2c 81       	ldd	r18, Y+4	; 0x04
     3b0:	3d 81       	ldd	r19, Y+5	; 0x05
     3b2:	22 30       	cpi	r18, 0x02	; 2
     3b4:	31 05       	cpc	r19, r1
     3b6:	2c f4       	brge	.+10     	; 0x3c2 <DIO_vidSetPinValue+0x130>
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	9d 81       	ldd	r25, Y+5	; 0x05
     3bc:	00 97       	sbiw	r24, 0x00	; 0
     3be:	69 f0       	breq	.+26     	; 0x3da <DIO_vidSetPinValue+0x148>
     3c0:	5f c0       	rjmp	.+190    	; 0x480 <DIO_vidSetPinValue+0x1ee>
     3c2:	2c 81       	ldd	r18, Y+4	; 0x04
     3c4:	3d 81       	ldd	r19, Y+5	; 0x05
     3c6:	22 30       	cpi	r18, 0x02	; 2
     3c8:	31 05       	cpc	r19, r1
     3ca:	89 f1       	breq	.+98     	; 0x42e <DIO_vidSetPinValue+0x19c>
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	9d 81       	ldd	r25, Y+5	; 0x05
     3d0:	83 30       	cpi	r24, 0x03	; 3
     3d2:	91 05       	cpc	r25, r1
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <DIO_vidSetPinValue+0x146>
     3d6:	40 c0       	rjmp	.+128    	; 0x458 <DIO_vidSetPinValue+0x1c6>
     3d8:	53 c0       	rjmp	.+166    	; 0x480 <DIO_vidSetPinValue+0x1ee>
		{
			case 0 :  CLR_BIT(PORTA , Copy_U8Pin );     break;
     3da:	ab e3       	ldi	r26, 0x3B	; 59
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	eb e3       	ldi	r30, 0x3B	; 59
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	48 2f       	mov	r20, r24
     3e6:	8a 81       	ldd	r24, Y+2	; 0x02
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 2e       	mov	r0, r18
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_vidSetPinValue+0x166>
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	0a 94       	dec	r0
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_vidSetPinValue+0x162>
     3fc:	80 95       	com	r24
     3fe:	84 23       	and	r24, r20
     400:	8c 93       	st	X, r24
     402:	3e c0       	rjmp	.+124    	; 0x480 <DIO_vidSetPinValue+0x1ee>
			case 1 :  CLR_BIT(PORTB , Copy_U8Pin );     break;
     404:	a8 e3       	ldi	r26, 0x38	; 56
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	e8 e3       	ldi	r30, 0x38	; 56
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	48 2f       	mov	r20, r24
     410:	8a 81       	ldd	r24, Y+2	; 0x02
     412:	28 2f       	mov	r18, r24
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	02 2e       	mov	r0, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_vidSetPinValue+0x190>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_vidSetPinValue+0x18c>
     426:	80 95       	com	r24
     428:	84 23       	and	r24, r20
     42a:	8c 93       	st	X, r24
     42c:	29 c0       	rjmp	.+82     	; 0x480 <DIO_vidSetPinValue+0x1ee>
			case 2 :  CLR_BIT(PORTC , Copy_U8Pin );     break;
     42e:	a5 e3       	ldi	r26, 0x35	; 53
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	e5 e3       	ldi	r30, 0x35	; 53
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	48 2f       	mov	r20, r24
     43a:	8a 81       	ldd	r24, Y+2	; 0x02
     43c:	28 2f       	mov	r18, r24
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	02 2e       	mov	r0, r18
     446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_vidSetPinValue+0x1ba>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	0a 94       	dec	r0
     44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_vidSetPinValue+0x1b6>
     450:	80 95       	com	r24
     452:	84 23       	and	r24, r20
     454:	8c 93       	st	X, r24
     456:	14 c0       	rjmp	.+40     	; 0x480 <DIO_vidSetPinValue+0x1ee>
			case 3 :  CLR_BIT(PORTD , Copy_U8Pin );     break;
     458:	a2 e3       	ldi	r26, 0x32	; 50
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e2 e3       	ldi	r30, 0x32	; 50
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	48 2f       	mov	r20, r24
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	28 2f       	mov	r18, r24
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	02 2e       	mov	r0, r18
     470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_vidSetPinValue+0x1e4>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_vidSetPinValue+0x1e0>
     47a:	80 95       	com	r24
     47c:	84 23       	and	r24, r20
     47e:	8c 93       	st	X, r24
	}
	else
	{
		
	}
}
     480:	27 96       	adiw	r28, 0x07	; 7
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	cf 91       	pop	r28
     48e:	df 91       	pop	r29
     490:	08 95       	ret

00000492 <DIO_u8GetPinValue>:


u8   DIO_u8GetPinValue( u8 Copy_U8Port   ,  u8 Copy_U8Pin )
{
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	00 d0       	rcall	.+0      	; 0x498 <DIO_u8GetPinValue+0x6>
     498:	00 d0       	rcall	.+0      	; 0x49a <DIO_u8GetPinValue+0x8>
     49a:	0f 92       	push	r0
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	8a 83       	std	Y+2, r24	; 0x02
     4a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinVal = 0;
     4a4:	19 82       	std	Y+1, r1	; 0x01
	
	switch(Copy_U8Port)
     4a6:	8a 81       	ldd	r24, Y+2	; 0x02
     4a8:	28 2f       	mov	r18, r24
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	3d 83       	std	Y+5, r19	; 0x05
     4ae:	2c 83       	std	Y+4, r18	; 0x04
     4b0:	4c 81       	ldd	r20, Y+4	; 0x04
     4b2:	5d 81       	ldd	r21, Y+5	; 0x05
     4b4:	41 30       	cpi	r20, 0x01	; 1
     4b6:	51 05       	cpc	r21, r1
     4b8:	41 f1       	breq	.+80     	; 0x50a <DIO_u8GetPinValue+0x78>
     4ba:	8c 81       	ldd	r24, Y+4	; 0x04
     4bc:	9d 81       	ldd	r25, Y+5	; 0x05
     4be:	82 30       	cpi	r24, 0x02	; 2
     4c0:	91 05       	cpc	r25, r1
     4c2:	34 f4       	brge	.+12     	; 0x4d0 <DIO_u8GetPinValue+0x3e>
     4c4:	2c 81       	ldd	r18, Y+4	; 0x04
     4c6:	3d 81       	ldd	r19, Y+5	; 0x05
     4c8:	21 15       	cp	r18, r1
     4ca:	31 05       	cpc	r19, r1
     4cc:	61 f0       	breq	.+24     	; 0x4e6 <DIO_u8GetPinValue+0x54>
     4ce:	52 c0       	rjmp	.+164    	; 0x574 <DIO_u8GetPinValue+0xe2>
     4d0:	4c 81       	ldd	r20, Y+4	; 0x04
     4d2:	5d 81       	ldd	r21, Y+5	; 0x05
     4d4:	42 30       	cpi	r20, 0x02	; 2
     4d6:	51 05       	cpc	r21, r1
     4d8:	51 f1       	breq	.+84     	; 0x52e <DIO_u8GetPinValue+0x9c>
     4da:	8c 81       	ldd	r24, Y+4	; 0x04
     4dc:	9d 81       	ldd	r25, Y+5	; 0x05
     4de:	83 30       	cpi	r24, 0x03	; 3
     4e0:	91 05       	cpc	r25, r1
     4e2:	b9 f1       	breq	.+110    	; 0x552 <DIO_u8GetPinValue+0xc0>
     4e4:	47 c0       	rjmp	.+142    	; 0x574 <DIO_u8GetPinValue+0xe2>
	{
			case 0 :  Local_u8PinVal = GET_BIT(PINA , Copy_U8Pin );     break;
     4e6:	e9 e3       	ldi	r30, 0x39	; 57
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	a9 01       	movw	r20, r18
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_u8GetPinValue+0x6c>
     4fa:	55 95       	asr	r21
     4fc:	47 95       	ror	r20
     4fe:	8a 95       	dec	r24
     500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_u8GetPinValue+0x68>
     502:	ca 01       	movw	r24, r20
     504:	81 70       	andi	r24, 0x01	; 1
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	35 c0       	rjmp	.+106    	; 0x574 <DIO_u8GetPinValue+0xe2>
			case 1 :  Local_u8PinVal = GET_BIT(PINB , Copy_U8Pin );     break;
     50a:	e6 e3       	ldi	r30, 0x36	; 54
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	28 2f       	mov	r18, r24
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	a9 01       	movw	r20, r18
     51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_u8GetPinValue+0x90>
     51e:	55 95       	asr	r21
     520:	47 95       	ror	r20
     522:	8a 95       	dec	r24
     524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_u8GetPinValue+0x8c>
     526:	ca 01       	movw	r24, r20
     528:	81 70       	andi	r24, 0x01	; 1
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	23 c0       	rjmp	.+70     	; 0x574 <DIO_u8GetPinValue+0xe2>
			case 2 :  Local_u8PinVal = GET_BIT(PINC , Copy_U8Pin );     break;
     52e:	e3 e3       	ldi	r30, 0x33	; 51
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	28 2f       	mov	r18, r24
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	88 2f       	mov	r24, r24
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	a9 01       	movw	r20, r18
     540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_u8GetPinValue+0xb4>
     542:	55 95       	asr	r21
     544:	47 95       	ror	r20
     546:	8a 95       	dec	r24
     548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_u8GetPinValue+0xb0>
     54a:	ca 01       	movw	r24, r20
     54c:	81 70       	andi	r24, 0x01	; 1
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	11 c0       	rjmp	.+34     	; 0x574 <DIO_u8GetPinValue+0xe2>
			case 3 :  Local_u8PinVal = GET_BIT(PIND , Copy_U8Pin );     break;
     552:	e0 e3       	ldi	r30, 0x30	; 48
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	28 2f       	mov	r18, r24
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	a9 01       	movw	r20, r18
     564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_u8GetPinValue+0xd8>
     566:	55 95       	asr	r21
     568:	47 95       	ror	r20
     56a:	8a 95       	dec	r24
     56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_u8GetPinValue+0xd4>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	89 83       	std	Y+1, r24	; 0x01
	
	}
	return Local_u8PinVal;
     574:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	cf 91       	pop	r28
     582:	df 91       	pop	r29
     584:	08 95       	ret

00000586 <DIO_vidTogglePin>:



void DIO_vidTogglePin( u8 Copy_U8Port     ,  u8 Copy_U8Pin	)
{
     586:	df 93       	push	r29
     588:	cf 93       	push	r28
     58a:	00 d0       	rcall	.+0      	; 0x58c <DIO_vidTogglePin+0x6>
     58c:	00 d0       	rcall	.+0      	; 0x58e <DIO_vidTogglePin+0x8>
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	89 83       	std	Y+1, r24	; 0x01
     594:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	28 2f       	mov	r18, r24
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	3c 83       	std	Y+4, r19	; 0x04
     59e:	2b 83       	std	Y+3, r18	; 0x03
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	9c 81       	ldd	r25, Y+4	; 0x04
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	91 05       	cpc	r25, r1
     5a8:	49 f1       	breq	.+82     	; 0x5fc <DIO_vidTogglePin+0x76>
     5aa:	2b 81       	ldd	r18, Y+3	; 0x03
     5ac:	3c 81       	ldd	r19, Y+4	; 0x04
     5ae:	22 30       	cpi	r18, 0x02	; 2
     5b0:	31 05       	cpc	r19, r1
     5b2:	2c f4       	brge	.+10     	; 0x5be <DIO_vidTogglePin+0x38>
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	9c 81       	ldd	r25, Y+4	; 0x04
     5b8:	00 97       	sbiw	r24, 0x00	; 0
     5ba:	61 f0       	breq	.+24     	; 0x5d4 <DIO_vidTogglePin+0x4e>
     5bc:	5a c0       	rjmp	.+180    	; 0x672 <DIO_vidTogglePin+0xec>
     5be:	2b 81       	ldd	r18, Y+3	; 0x03
     5c0:	3c 81       	ldd	r19, Y+4	; 0x04
     5c2:	22 30       	cpi	r18, 0x02	; 2
     5c4:	31 05       	cpc	r19, r1
     5c6:	71 f1       	breq	.+92     	; 0x624 <DIO_vidTogglePin+0x9e>
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	83 30       	cpi	r24, 0x03	; 3
     5ce:	91 05       	cpc	r25, r1
     5d0:	e9 f1       	breq	.+122    	; 0x64c <DIO_vidTogglePin+0xc6>
     5d2:	4f c0       	rjmp	.+158    	; 0x672 <DIO_vidTogglePin+0xec>
	{
		case 0 :  TOGGLE_BIT(PORTA , Copy_U8Pin );     break;
     5d4:	ab e3       	ldi	r26, 0x3B	; 59
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	eb e3       	ldi	r30, 0x3B	; 59
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	48 2f       	mov	r20, r24
     5e0:	8a 81       	ldd	r24, Y+2	; 0x02
     5e2:	28 2f       	mov	r18, r24
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	02 2e       	mov	r0, r18
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_vidTogglePin+0x6c>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	0a 94       	dec	r0
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_vidTogglePin+0x68>
     5f6:	84 27       	eor	r24, r20
     5f8:	8c 93       	st	X, r24
     5fa:	3b c0       	rjmp	.+118    	; 0x672 <DIO_vidTogglePin+0xec>
		case 1 :  TOGGLE_BIT(PORTB , Copy_U8Pin );     break;
     5fc:	a8 e3       	ldi	r26, 0x38	; 56
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	e8 e3       	ldi	r30, 0x38	; 56
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	48 2f       	mov	r20, r24
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	28 2f       	mov	r18, r24
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	02 2e       	mov	r0, r18
     614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_vidTogglePin+0x94>
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	0a 94       	dec	r0
     61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_vidTogglePin+0x90>
     61e:	84 27       	eor	r24, r20
     620:	8c 93       	st	X, r24
     622:	27 c0       	rjmp	.+78     	; 0x672 <DIO_vidTogglePin+0xec>
		case 2 :  TOGGLE_BIT(PORTC , Copy_U8Pin );     break;
     624:	a5 e3       	ldi	r26, 0x35	; 53
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e5 e3       	ldi	r30, 0x35	; 53
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	48 2f       	mov	r20, r24
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	28 2f       	mov	r18, r24
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	02 2e       	mov	r0, r18
     63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_vidTogglePin+0xbc>
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	0a 94       	dec	r0
     644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_vidTogglePin+0xb8>
     646:	84 27       	eor	r24, r20
     648:	8c 93       	st	X, r24
     64a:	13 c0       	rjmp	.+38     	; 0x672 <DIO_vidTogglePin+0xec>
		case 3 :  TOGGLE_BIT(PORTD , Copy_U8Pin );     break;
     64c:	a2 e3       	ldi	r26, 0x32	; 50
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	e2 e3       	ldi	r30, 0x32	; 50
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	48 2f       	mov	r20, r24
     658:	8a 81       	ldd	r24, Y+2	; 0x02
     65a:	28 2f       	mov	r18, r24
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	02 2e       	mov	r0, r18
     664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_vidTogglePin+0xe4>
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	0a 94       	dec	r0
     66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_vidTogglePin+0xe0>
     66e:	84 27       	eor	r24, r20
     670:	8c 93       	st	X, r24
	
	}
}
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <DIO_vidSetPortDirection>:



void DIO_vidSetPortDirection( u8 Copy_U8Port  ,  u8 Copy_U8Direction)
{
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	00 d0       	rcall	.+0      	; 0x686 <DIO_vidSetPortDirection+0x6>
     686:	00 d0       	rcall	.+0      	; 0x688 <DIO_vidSetPortDirection+0x8>
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8Port)
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	28 2f       	mov	r18, r24
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	3c 83       	std	Y+4, r19	; 0x04
     698:	2b 83       	std	Y+3, r18	; 0x03
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	9c 81       	ldd	r25, Y+4	; 0x04
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	91 05       	cpc	r25, r1
     6a2:	d1 f0       	breq	.+52     	; 0x6d8 <DIO_vidSetPortDirection+0x58>
     6a4:	2b 81       	ldd	r18, Y+3	; 0x03
     6a6:	3c 81       	ldd	r19, Y+4	; 0x04
     6a8:	22 30       	cpi	r18, 0x02	; 2
     6aa:	31 05       	cpc	r19, r1
     6ac:	2c f4       	brge	.+10     	; 0x6b8 <DIO_vidSetPortDirection+0x38>
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	9c 81       	ldd	r25, Y+4	; 0x04
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	61 f0       	breq	.+24     	; 0x6ce <DIO_vidSetPortDirection+0x4e>
     6b6:	1e c0       	rjmp	.+60     	; 0x6f4 <DIO_vidSetPortDirection+0x74>
     6b8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ba:	3c 81       	ldd	r19, Y+4	; 0x04
     6bc:	22 30       	cpi	r18, 0x02	; 2
     6be:	31 05       	cpc	r19, r1
     6c0:	81 f0       	breq	.+32     	; 0x6e2 <DIO_vidSetPortDirection+0x62>
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	9c 81       	ldd	r25, Y+4	; 0x04
     6c6:	83 30       	cpi	r24, 0x03	; 3
     6c8:	91 05       	cpc	r25, r1
     6ca:	81 f0       	breq	.+32     	; 0x6ec <DIO_vidSetPortDirection+0x6c>
     6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <DIO_vidSetPortDirection+0x74>
	{
		case 0 :  DDRA = Copy_U8Direction  ;     break;
     6ce:	ea e3       	ldi	r30, 0x3A	; 58
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	80 83       	st	Z, r24
     6d6:	0e c0       	rjmp	.+28     	; 0x6f4 <DIO_vidSetPortDirection+0x74>
		case 1 :  DDRB = Copy_U8Direction  ;     break;
     6d8:	e7 e3       	ldi	r30, 0x37	; 55
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	80 83       	st	Z, r24
     6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <DIO_vidSetPortDirection+0x74>
		case 2 :  DDRC = Copy_U8Direction  ;     break;
     6e2:	e4 e3       	ldi	r30, 0x34	; 52
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	80 83       	st	Z, r24
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <DIO_vidSetPortDirection+0x74>
		case 3 :  DDRD = Copy_U8Direction  ;     break;
     6ec:	e1 e3       	ldi	r30, 0x31	; 49
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	80 83       	st	Z, r24
	}

}
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	cf 91       	pop	r28
     6fe:	df 91       	pop	r29
     700:	08 95       	ret

00000702 <DIO_vidSetPortValue>:



void DIO_vidSetPortValue( u8 Copy_U8Port  ,  u8 Copy_U8Value		)
{
     702:	df 93       	push	r29
     704:	cf 93       	push	r28
     706:	00 d0       	rcall	.+0      	; 0x708 <DIO_vidSetPortValue+0x6>
     708:	00 d0       	rcall	.+0      	; 0x70a <DIO_vidSetPortValue+0x8>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8Port)
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	28 2f       	mov	r18, r24
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	3c 83       	std	Y+4, r19	; 0x04
     71a:	2b 83       	std	Y+3, r18	; 0x03
     71c:	8b 81       	ldd	r24, Y+3	; 0x03
     71e:	9c 81       	ldd	r25, Y+4	; 0x04
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	91 05       	cpc	r25, r1
     724:	d1 f0       	breq	.+52     	; 0x75a <DIO_vidSetPortValue+0x58>
     726:	2b 81       	ldd	r18, Y+3	; 0x03
     728:	3c 81       	ldd	r19, Y+4	; 0x04
     72a:	22 30       	cpi	r18, 0x02	; 2
     72c:	31 05       	cpc	r19, r1
     72e:	2c f4       	brge	.+10     	; 0x73a <DIO_vidSetPortValue+0x38>
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	9c 81       	ldd	r25, Y+4	; 0x04
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	61 f0       	breq	.+24     	; 0x750 <DIO_vidSetPortValue+0x4e>
     738:	1e c0       	rjmp	.+60     	; 0x776 <DIO_vidSetPortValue+0x74>
     73a:	2b 81       	ldd	r18, Y+3	; 0x03
     73c:	3c 81       	ldd	r19, Y+4	; 0x04
     73e:	22 30       	cpi	r18, 0x02	; 2
     740:	31 05       	cpc	r19, r1
     742:	81 f0       	breq	.+32     	; 0x764 <DIO_vidSetPortValue+0x62>
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9c 81       	ldd	r25, Y+4	; 0x04
     748:	83 30       	cpi	r24, 0x03	; 3
     74a:	91 05       	cpc	r25, r1
     74c:	81 f0       	breq	.+32     	; 0x76e <DIO_vidSetPortValue+0x6c>
     74e:	13 c0       	rjmp	.+38     	; 0x776 <DIO_vidSetPortValue+0x74>
	{
		case 0 :  PORTA = Copy_U8Value  ;     break;
     750:	eb e3       	ldi	r30, 0x3B	; 59
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	80 83       	st	Z, r24
     758:	0e c0       	rjmp	.+28     	; 0x776 <DIO_vidSetPortValue+0x74>
		case 1 :  PORTB = Copy_U8Value  ;     break;
     75a:	e8 e3       	ldi	r30, 0x38	; 56
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
     760:	80 83       	st	Z, r24
     762:	09 c0       	rjmp	.+18     	; 0x776 <DIO_vidSetPortValue+0x74>
		case 2 :  PORTC = Copy_U8Value  ;     break;
     764:	e5 e3       	ldi	r30, 0x35	; 53
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	80 83       	st	Z, r24
     76c:	04 c0       	rjmp	.+8      	; 0x776 <DIO_vidSetPortValue+0x74>
		case 3 :  PORTD = Copy_U8Value  ;     break;
     76e:	e2 e3       	ldi	r30, 0x32	; 50
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	80 83       	st	Z, r24
	}
}
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	cf 91       	pop	r28
     780:	df 91       	pop	r29
     782:	08 95       	ret

00000784 <Dio_vidSetPinDir>:
#include "../Lib/Bit_math.h"
#include "Dio_int.h"
#include "Dio_priv.h"

void Dio_vidSetPinDir(u8 Pin , u8 Dir)
{
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	66 97       	sbiw	r28, 0x16	; 22
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	8b 83       	std	Y+3, r24	; 0x03
     79a:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	86 95       	lsr	r24
     7a0:	86 95       	lsr	r24
     7a2:	86 95       	lsr	r24
     7a4:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	87 70       	andi	r24, 0x07	; 7
     7aa:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	28 2f       	mov	r18, r24
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	3e 8b       	std	Y+22, r19	; 0x16
     7b4:	2d 8b       	std	Y+21, r18	; 0x15
     7b6:	8d 89       	ldd	r24, Y+21	; 0x15
     7b8:	9e 89       	ldd	r25, Y+22	; 0x16
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	91 05       	cpc	r25, r1
     7be:	09 f4       	brne	.+2      	; 0x7c2 <Dio_vidSetPinDir+0x3e>
     7c0:	e1 c0       	rjmp	.+450    	; 0x984 <__stack+0x125>
     7c2:	2d 89       	ldd	r18, Y+21	; 0x15
     7c4:	3e 89       	ldd	r19, Y+22	; 0x16
     7c6:	22 30       	cpi	r18, 0x02	; 2
     7c8:	31 05       	cpc	r19, r1
     7ca:	2c f4       	brge	.+10     	; 0x7d6 <Dio_vidSetPinDir+0x52>
     7cc:	8d 89       	ldd	r24, Y+21	; 0x15
     7ce:	9e 89       	ldd	r25, Y+22	; 0x16
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	71 f0       	breq	.+28     	; 0x7f0 <Dio_vidSetPinDir+0x6c>
     7d4:	34 c3       	rjmp	.+1640   	; 0xe3e <__stack+0x5df>
     7d6:	2d 89       	ldd	r18, Y+21	; 0x15
     7d8:	3e 89       	ldd	r19, Y+22	; 0x16
     7da:	22 30       	cpi	r18, 0x02	; 2
     7dc:	31 05       	cpc	r19, r1
     7de:	09 f4       	brne	.+2      	; 0x7e2 <Dio_vidSetPinDir+0x5e>
     7e0:	9b c1       	rjmp	.+822    	; 0xb18 <__stack+0x2b9>
     7e2:	8d 89       	ldd	r24, Y+21	; 0x15
     7e4:	9e 89       	ldd	r25, Y+22	; 0x16
     7e6:	83 30       	cpi	r24, 0x03	; 3
     7e8:	91 05       	cpc	r25, r1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <Dio_vidSetPinDir+0x6a>
     7ec:	5f c2       	rjmp	.+1214   	; 0xcac <__stack+0x44d>
     7ee:	27 c3       	rjmp	.+1614   	; 0xe3e <__stack+0x5df>
		case 0:
			if(Dir ==1)
     7f0:	8c 81       	ldd	r24, Y+4	; 0x04
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <Dio_vidSetPinDir+0x74>
     7f6:	63 c0       	rjmp	.+198    	; 0x8be <__stack+0x5f>
				{
					switch(PinLoc)
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	28 2f       	mov	r18, r24
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	3c 8b       	std	Y+20, r19	; 0x14
     800:	2b 8b       	std	Y+19, r18	; 0x13
     802:	8b 89       	ldd	r24, Y+19	; 0x13
     804:	9c 89       	ldd	r25, Y+20	; 0x14
     806:	83 30       	cpi	r24, 0x03	; 3
     808:	91 05       	cpc	r25, r1
     80a:	d9 f1       	breq	.+118    	; 0x882 <__stack+0x23>
     80c:	2b 89       	ldd	r18, Y+19	; 0x13
     80e:	3c 89       	ldd	r19, Y+20	; 0x14
     810:	24 30       	cpi	r18, 0x04	; 4
     812:	31 05       	cpc	r19, r1
     814:	7c f4       	brge	.+30     	; 0x834 <Dio_vidSetPinDir+0xb0>
     816:	8b 89       	ldd	r24, Y+19	; 0x13
     818:	9c 89       	ldd	r25, Y+20	; 0x14
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	91 05       	cpc	r25, r1
     81e:	29 f1       	breq	.+74     	; 0x86a <__stack+0xb>
     820:	2b 89       	ldd	r18, Y+19	; 0x13
     822:	3c 89       	ldd	r19, Y+20	; 0x14
     824:	22 30       	cpi	r18, 0x02	; 2
     826:	31 05       	cpc	r19, r1
     828:	34 f5       	brge	.+76     	; 0x876 <__stack+0x17>
     82a:	8b 89       	ldd	r24, Y+19	; 0x13
     82c:	9c 89       	ldd	r25, Y+20	; 0x14
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	b1 f0       	breq	.+44     	; 0x85e <Dio_vidSetPinDir+0xda>
     832:	05 c3       	rjmp	.+1546   	; 0xe3e <__stack+0x5df>
     834:	2b 89       	ldd	r18, Y+19	; 0x13
     836:	3c 89       	ldd	r19, Y+20	; 0x14
     838:	25 30       	cpi	r18, 0x05	; 5
     83a:	31 05       	cpc	r19, r1
     83c:	71 f1       	breq	.+92     	; 0x89a <__stack+0x3b>
     83e:	8b 89       	ldd	r24, Y+19	; 0x13
     840:	9c 89       	ldd	r25, Y+20	; 0x14
     842:	85 30       	cpi	r24, 0x05	; 5
     844:	91 05       	cpc	r25, r1
     846:	1c f1       	brlt	.+70     	; 0x88e <__stack+0x2f>
     848:	2b 89       	ldd	r18, Y+19	; 0x13
     84a:	3c 89       	ldd	r19, Y+20	; 0x14
     84c:	26 30       	cpi	r18, 0x06	; 6
     84e:	31 05       	cpc	r19, r1
     850:	51 f1       	breq	.+84     	; 0x8a6 <__stack+0x47>
     852:	8b 89       	ldd	r24, Y+19	; 0x13
     854:	9c 89       	ldd	r25, Y+20	; 0x14
     856:	87 30       	cpi	r24, 0x07	; 7
     858:	91 05       	cpc	r25, r1
     85a:	59 f1       	breq	.+86     	; 0x8b2 <__stack+0x53>
     85c:	f0 c2       	rjmp	.+1504   	; 0xe3e <__stack+0x5df>
					{
						case 0:
							DDRA.Bits.Pin0 =1;
     85e:	ea e3       	ldi	r30, 0x3A	; 58
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	81 60       	ori	r24, 0x01	; 1
     866:	80 83       	st	Z, r24
     868:	ea c2       	rjmp	.+1492   	; 0xe3e <__stack+0x5df>
						break;

						case 1:
							DDRA.Bits.Pin1 =1;
     86a:	ea e3       	ldi	r30, 0x3A	; 58
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	82 60       	ori	r24, 0x02	; 2
     872:	80 83       	st	Z, r24
     874:	e4 c2       	rjmp	.+1480   	; 0xe3e <__stack+0x5df>
						break;

						case 2:
							DDRA.Bits.Pin2 =1;
     876:	ea e3       	ldi	r30, 0x3A	; 58
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	84 60       	ori	r24, 0x04	; 4
     87e:	80 83       	st	Z, r24
     880:	de c2       	rjmp	.+1468   	; 0xe3e <__stack+0x5df>
						break;

						case 3:
							DDRA.Bits.Pin3 =1;
     882:	ea e3       	ldi	r30, 0x3A	; 58
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	88 60       	ori	r24, 0x08	; 8
     88a:	80 83       	st	Z, r24
     88c:	d8 c2       	rjmp	.+1456   	; 0xe3e <__stack+0x5df>
						break;

						case 4:
							DDRA.Bits.Pin4 =1;
     88e:	ea e3       	ldi	r30, 0x3A	; 58
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	80 61       	ori	r24, 0x10	; 16
     896:	80 83       	st	Z, r24
     898:	d2 c2       	rjmp	.+1444   	; 0xe3e <__stack+0x5df>
						break;

						case 5:
							DDRA.Bits.Pin5 =1;
     89a:	ea e3       	ldi	r30, 0x3A	; 58
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	80 62       	ori	r24, 0x20	; 32
     8a2:	80 83       	st	Z, r24
     8a4:	cc c2       	rjmp	.+1432   	; 0xe3e <__stack+0x5df>
						break;

						case 6:
							DDRA.Bits.Pin6 =1;
     8a6:	ea e3       	ldi	r30, 0x3A	; 58
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	80 64       	ori	r24, 0x40	; 64
     8ae:	80 83       	st	Z, r24
     8b0:	c6 c2       	rjmp	.+1420   	; 0xe3e <__stack+0x5df>
						break;

						case 7:
							DDRA.Bits.Pin7 =1;
     8b2:	ea e3       	ldi	r30, 0x3A	; 58
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	80 68       	ori	r24, 0x80	; 128
     8ba:	80 83       	st	Z, r24
     8bc:	c0 c2       	rjmp	.+1408   	; 0xe3e <__stack+0x5df>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	28 2f       	mov	r18, r24
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	3a 8b       	std	Y+18, r19	; 0x12
     8c6:	29 8b       	std	Y+17, r18	; 0x11
     8c8:	89 89       	ldd	r24, Y+17	; 0x11
     8ca:	9a 89       	ldd	r25, Y+18	; 0x12
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	91 05       	cpc	r25, r1
     8d0:	d9 f1       	breq	.+118    	; 0x948 <__stack+0xe9>
     8d2:	29 89       	ldd	r18, Y+17	; 0x11
     8d4:	3a 89       	ldd	r19, Y+18	; 0x12
     8d6:	24 30       	cpi	r18, 0x04	; 4
     8d8:	31 05       	cpc	r19, r1
     8da:	7c f4       	brge	.+30     	; 0x8fa <__stack+0x9b>
     8dc:	89 89       	ldd	r24, Y+17	; 0x11
     8de:	9a 89       	ldd	r25, Y+18	; 0x12
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	91 05       	cpc	r25, r1
     8e4:	29 f1       	breq	.+74     	; 0x930 <__stack+0xd1>
     8e6:	29 89       	ldd	r18, Y+17	; 0x11
     8e8:	3a 89       	ldd	r19, Y+18	; 0x12
     8ea:	22 30       	cpi	r18, 0x02	; 2
     8ec:	31 05       	cpc	r19, r1
     8ee:	34 f5       	brge	.+76     	; 0x93c <__stack+0xdd>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	9a 89       	ldd	r25, Y+18	; 0x12
     8f4:	00 97       	sbiw	r24, 0x00	; 0
     8f6:	b1 f0       	breq	.+44     	; 0x924 <__stack+0xc5>
     8f8:	a2 c2       	rjmp	.+1348   	; 0xe3e <__stack+0x5df>
     8fa:	29 89       	ldd	r18, Y+17	; 0x11
     8fc:	3a 89       	ldd	r19, Y+18	; 0x12
     8fe:	25 30       	cpi	r18, 0x05	; 5
     900:	31 05       	cpc	r19, r1
     902:	71 f1       	breq	.+92     	; 0x960 <__stack+0x101>
     904:	89 89       	ldd	r24, Y+17	; 0x11
     906:	9a 89       	ldd	r25, Y+18	; 0x12
     908:	85 30       	cpi	r24, 0x05	; 5
     90a:	91 05       	cpc	r25, r1
     90c:	1c f1       	brlt	.+70     	; 0x954 <__stack+0xf5>
     90e:	29 89       	ldd	r18, Y+17	; 0x11
     910:	3a 89       	ldd	r19, Y+18	; 0x12
     912:	26 30       	cpi	r18, 0x06	; 6
     914:	31 05       	cpc	r19, r1
     916:	51 f1       	breq	.+84     	; 0x96c <__stack+0x10d>
     918:	89 89       	ldd	r24, Y+17	; 0x11
     91a:	9a 89       	ldd	r25, Y+18	; 0x12
     91c:	87 30       	cpi	r24, 0x07	; 7
     91e:	91 05       	cpc	r25, r1
     920:	59 f1       	breq	.+86     	; 0x978 <__stack+0x119>
     922:	8d c2       	rjmp	.+1306   	; 0xe3e <__stack+0x5df>
				{
					case 0:
						DDRA.Bits.Pin0 =0;
     924:	ea e3       	ldi	r30, 0x3A	; 58
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	8e 7f       	andi	r24, 0xFE	; 254
     92c:	80 83       	st	Z, r24
     92e:	87 c2       	rjmp	.+1294   	; 0xe3e <__stack+0x5df>
					break;

					case 1:
						DDRA.Bits.Pin1 =0;
     930:	ea e3       	ldi	r30, 0x3A	; 58
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8d 7f       	andi	r24, 0xFD	; 253
     938:	80 83       	st	Z, r24
     93a:	81 c2       	rjmp	.+1282   	; 0xe3e <__stack+0x5df>
					break;

					case 2:
						DDRA.Bits.Pin2 =0;
     93c:	ea e3       	ldi	r30, 0x3A	; 58
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	8b 7f       	andi	r24, 0xFB	; 251
     944:	80 83       	st	Z, r24
     946:	7b c2       	rjmp	.+1270   	; 0xe3e <__stack+0x5df>
					break;

					case 3:
						DDRA.Bits.Pin3 =0;
     948:	ea e3       	ldi	r30, 0x3A	; 58
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	87 7f       	andi	r24, 0xF7	; 247
     950:	80 83       	st	Z, r24
     952:	75 c2       	rjmp	.+1258   	; 0xe3e <__stack+0x5df>
					break;

					case 4:
						DDRA.Bits.Pin4 =0;
     954:	ea e3       	ldi	r30, 0x3A	; 58
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	8f 7e       	andi	r24, 0xEF	; 239
     95c:	80 83       	st	Z, r24
     95e:	6f c2       	rjmp	.+1246   	; 0xe3e <__stack+0x5df>
					break;

					case 5:
						DDRA.Bits.Pin5 =0;
     960:	ea e3       	ldi	r30, 0x3A	; 58
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	8f 7d       	andi	r24, 0xDF	; 223
     968:	80 83       	st	Z, r24
     96a:	69 c2       	rjmp	.+1234   	; 0xe3e <__stack+0x5df>
					break;

					case 6:
						DDRA.Bits.Pin6 =0;
     96c:	ea e3       	ldi	r30, 0x3A	; 58
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	8f 7b       	andi	r24, 0xBF	; 191
     974:	80 83       	st	Z, r24
     976:	63 c2       	rjmp	.+1222   	; 0xe3e <__stack+0x5df>
					break;

					case 7:
						DDRA.Bits.Pin7 =0;
     978:	ea e3       	ldi	r30, 0x3A	; 58
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	8f 77       	andi	r24, 0x7F	; 127
     980:	80 83       	st	Z, r24
     982:	5d c2       	rjmp	.+1210   	; 0xe3e <__stack+0x5df>
				}
			}
		break;

		case 1:
			if(Dir ==1)
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	09 f0       	breq	.+2      	; 0x98c <__stack+0x12d>
     98a:	63 c0       	rjmp	.+198    	; 0xa52 <__stack+0x1f3>
				{
					switch(PinLoc)
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	28 2f       	mov	r18, r24
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	38 8b       	std	Y+16, r19	; 0x10
     994:	2f 87       	std	Y+15, r18	; 0x0f
     996:	8f 85       	ldd	r24, Y+15	; 0x0f
     998:	98 89       	ldd	r25, Y+16	; 0x10
     99a:	83 30       	cpi	r24, 0x03	; 3
     99c:	91 05       	cpc	r25, r1
     99e:	d9 f1       	breq	.+118    	; 0xa16 <__stack+0x1b7>
     9a0:	2f 85       	ldd	r18, Y+15	; 0x0f
     9a2:	38 89       	ldd	r19, Y+16	; 0x10
     9a4:	24 30       	cpi	r18, 0x04	; 4
     9a6:	31 05       	cpc	r19, r1
     9a8:	7c f4       	brge	.+30     	; 0x9c8 <__stack+0x169>
     9aa:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ac:	98 89       	ldd	r25, Y+16	; 0x10
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	91 05       	cpc	r25, r1
     9b2:	29 f1       	breq	.+74     	; 0x9fe <__stack+0x19f>
     9b4:	2f 85       	ldd	r18, Y+15	; 0x0f
     9b6:	38 89       	ldd	r19, Y+16	; 0x10
     9b8:	22 30       	cpi	r18, 0x02	; 2
     9ba:	31 05       	cpc	r19, r1
     9bc:	34 f5       	brge	.+76     	; 0xa0a <__stack+0x1ab>
     9be:	8f 85       	ldd	r24, Y+15	; 0x0f
     9c0:	98 89       	ldd	r25, Y+16	; 0x10
     9c2:	00 97       	sbiw	r24, 0x00	; 0
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__stack+0x193>
     9c6:	3b c2       	rjmp	.+1142   	; 0xe3e <__stack+0x5df>
     9c8:	2f 85       	ldd	r18, Y+15	; 0x0f
     9ca:	38 89       	ldd	r19, Y+16	; 0x10
     9cc:	25 30       	cpi	r18, 0x05	; 5
     9ce:	31 05       	cpc	r19, r1
     9d0:	71 f1       	breq	.+92     	; 0xa2e <__stack+0x1cf>
     9d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9d4:	98 89       	ldd	r25, Y+16	; 0x10
     9d6:	85 30       	cpi	r24, 0x05	; 5
     9d8:	91 05       	cpc	r25, r1
     9da:	1c f1       	brlt	.+70     	; 0xa22 <__stack+0x1c3>
     9dc:	2f 85       	ldd	r18, Y+15	; 0x0f
     9de:	38 89       	ldd	r19, Y+16	; 0x10
     9e0:	26 30       	cpi	r18, 0x06	; 6
     9e2:	31 05       	cpc	r19, r1
     9e4:	51 f1       	breq	.+84     	; 0xa3a <__stack+0x1db>
     9e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e8:	98 89       	ldd	r25, Y+16	; 0x10
     9ea:	87 30       	cpi	r24, 0x07	; 7
     9ec:	91 05       	cpc	r25, r1
     9ee:	59 f1       	breq	.+86     	; 0xa46 <__stack+0x1e7>
     9f0:	26 c2       	rjmp	.+1100   	; 0xe3e <__stack+0x5df>
					{
						case 0:
							DDRB.Bits.Pin0 =1;
     9f2:	e7 e3       	ldi	r30, 0x37	; 55
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	81 60       	ori	r24, 0x01	; 1
     9fa:	80 83       	st	Z, r24
     9fc:	20 c2       	rjmp	.+1088   	; 0xe3e <__stack+0x5df>
						break;

						case 1:
							DDRB.Bits.Pin1 =1;
     9fe:	e7 e3       	ldi	r30, 0x37	; 55
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	80 83       	st	Z, r24
     a08:	1a c2       	rjmp	.+1076   	; 0xe3e <__stack+0x5df>
						break;

						case 2:
							DDRB.Bits.Pin2 =1;
     a0a:	e7 e3       	ldi	r30, 0x37	; 55
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	84 60       	ori	r24, 0x04	; 4
     a12:	80 83       	st	Z, r24
     a14:	14 c2       	rjmp	.+1064   	; 0xe3e <__stack+0x5df>
						break;

						case 3:
							DDRB.Bits.Pin3 =1;
     a16:	e7 e3       	ldi	r30, 0x37	; 55
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	88 60       	ori	r24, 0x08	; 8
     a1e:	80 83       	st	Z, r24
     a20:	0e c2       	rjmp	.+1052   	; 0xe3e <__stack+0x5df>
						break;

						case 4:
							DDRB.Bits.Pin4 =1;
     a22:	e7 e3       	ldi	r30, 0x37	; 55
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	80 61       	ori	r24, 0x10	; 16
     a2a:	80 83       	st	Z, r24
     a2c:	08 c2       	rjmp	.+1040   	; 0xe3e <__stack+0x5df>
						break;

						case 5:
							DDRB.Bits.Pin5 =1;
     a2e:	e7 e3       	ldi	r30, 0x37	; 55
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	80 62       	ori	r24, 0x20	; 32
     a36:	80 83       	st	Z, r24
     a38:	02 c2       	rjmp	.+1028   	; 0xe3e <__stack+0x5df>
						break;

						case 6:
							DDRB.Bits.Pin6 =1;
     a3a:	e7 e3       	ldi	r30, 0x37	; 55
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	80 64       	ori	r24, 0x40	; 64
     a42:	80 83       	st	Z, r24
     a44:	fc c1       	rjmp	.+1016   	; 0xe3e <__stack+0x5df>
						break;

						case 7:
							DDRB.Bits.Pin7 =1;
     a46:	e7 e3       	ldi	r30, 0x37	; 55
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	80 68       	ori	r24, 0x80	; 128
     a4e:	80 83       	st	Z, r24
     a50:	f6 c1       	rjmp	.+1004   	; 0xe3e <__stack+0x5df>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	28 2f       	mov	r18, r24
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	3e 87       	std	Y+14, r19	; 0x0e
     a5a:	2d 87       	std	Y+13, r18	; 0x0d
     a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	91 05       	cpc	r25, r1
     a64:	d9 f1       	breq	.+118    	; 0xadc <__stack+0x27d>
     a66:	2d 85       	ldd	r18, Y+13	; 0x0d
     a68:	3e 85       	ldd	r19, Y+14	; 0x0e
     a6a:	24 30       	cpi	r18, 0x04	; 4
     a6c:	31 05       	cpc	r19, r1
     a6e:	7c f4       	brge	.+30     	; 0xa8e <__stack+0x22f>
     a70:	8d 85       	ldd	r24, Y+13	; 0x0d
     a72:	9e 85       	ldd	r25, Y+14	; 0x0e
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	91 05       	cpc	r25, r1
     a78:	29 f1       	breq	.+74     	; 0xac4 <__stack+0x265>
     a7a:	2d 85       	ldd	r18, Y+13	; 0x0d
     a7c:	3e 85       	ldd	r19, Y+14	; 0x0e
     a7e:	22 30       	cpi	r18, 0x02	; 2
     a80:	31 05       	cpc	r19, r1
     a82:	34 f5       	brge	.+76     	; 0xad0 <__stack+0x271>
     a84:	8d 85       	ldd	r24, Y+13	; 0x0d
     a86:	9e 85       	ldd	r25, Y+14	; 0x0e
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	b1 f0       	breq	.+44     	; 0xab8 <__stack+0x259>
     a8c:	d8 c1       	rjmp	.+944    	; 0xe3e <__stack+0x5df>
     a8e:	2d 85       	ldd	r18, Y+13	; 0x0d
     a90:	3e 85       	ldd	r19, Y+14	; 0x0e
     a92:	25 30       	cpi	r18, 0x05	; 5
     a94:	31 05       	cpc	r19, r1
     a96:	71 f1       	breq	.+92     	; 0xaf4 <__stack+0x295>
     a98:	8d 85       	ldd	r24, Y+13	; 0x0d
     a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a9c:	85 30       	cpi	r24, 0x05	; 5
     a9e:	91 05       	cpc	r25, r1
     aa0:	1c f1       	brlt	.+70     	; 0xae8 <__stack+0x289>
     aa2:	2d 85       	ldd	r18, Y+13	; 0x0d
     aa4:	3e 85       	ldd	r19, Y+14	; 0x0e
     aa6:	26 30       	cpi	r18, 0x06	; 6
     aa8:	31 05       	cpc	r19, r1
     aaa:	51 f1       	breq	.+84     	; 0xb00 <__stack+0x2a1>
     aac:	8d 85       	ldd	r24, Y+13	; 0x0d
     aae:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab0:	87 30       	cpi	r24, 0x07	; 7
     ab2:	91 05       	cpc	r25, r1
     ab4:	59 f1       	breq	.+86     	; 0xb0c <__stack+0x2ad>
     ab6:	c3 c1       	rjmp	.+902    	; 0xe3e <__stack+0x5df>
				{
					case 0:
						DDRB.Bits.Pin0 =0;
     ab8:	e7 e3       	ldi	r30, 0x37	; 55
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	8e 7f       	andi	r24, 0xFE	; 254
     ac0:	80 83       	st	Z, r24
     ac2:	bd c1       	rjmp	.+890    	; 0xe3e <__stack+0x5df>
					break;

					case 1:
						DDRB.Bits.Pin1 =0;
     ac4:	e7 e3       	ldi	r30, 0x37	; 55
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	8d 7f       	andi	r24, 0xFD	; 253
     acc:	80 83       	st	Z, r24
     ace:	b7 c1       	rjmp	.+878    	; 0xe3e <__stack+0x5df>
					break;

					case 2:
						DDRB.Bits.Pin2 =0;
     ad0:	e7 e3       	ldi	r30, 0x37	; 55
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	8b 7f       	andi	r24, 0xFB	; 251
     ad8:	80 83       	st	Z, r24
     ada:	b1 c1       	rjmp	.+866    	; 0xe3e <__stack+0x5df>
					break;

					case 3:
						DDRB.Bits.Pin3 =0;
     adc:	e7 e3       	ldi	r30, 0x37	; 55
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	87 7f       	andi	r24, 0xF7	; 247
     ae4:	80 83       	st	Z, r24
     ae6:	ab c1       	rjmp	.+854    	; 0xe3e <__stack+0x5df>
					break;

					case 4:
						DDRB.Bits.Pin4 =0;
     ae8:	e7 e3       	ldi	r30, 0x37	; 55
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	8f 7e       	andi	r24, 0xEF	; 239
     af0:	80 83       	st	Z, r24
     af2:	a5 c1       	rjmp	.+842    	; 0xe3e <__stack+0x5df>
					break;

					case 5:
						DDRB.Bits.Pin5 =0;
     af4:	e7 e3       	ldi	r30, 0x37	; 55
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	8f 7d       	andi	r24, 0xDF	; 223
     afc:	80 83       	st	Z, r24
     afe:	9f c1       	rjmp	.+830    	; 0xe3e <__stack+0x5df>
					break;

					case 6:
						DDRB.Bits.Pin6 =0;
     b00:	e7 e3       	ldi	r30, 0x37	; 55
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	8f 7b       	andi	r24, 0xBF	; 191
     b08:	80 83       	st	Z, r24
     b0a:	99 c1       	rjmp	.+818    	; 0xe3e <__stack+0x5df>
					break;

					case 7:
						DDRB.Bits.Pin7 =0;
     b0c:	e7 e3       	ldi	r30, 0x37	; 55
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	8f 77       	andi	r24, 0x7F	; 127
     b14:	80 83       	st	Z, r24
     b16:	93 c1       	rjmp	.+806    	; 0xe3e <__stack+0x5df>
				}
			}
			break;

		case 2:
			if(Dir ==1)
     b18:	8c 81       	ldd	r24, Y+4	; 0x04
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	09 f0       	breq	.+2      	; 0xb20 <__stack+0x2c1>
     b1e:	63 c0       	rjmp	.+198    	; 0xbe6 <__stack+0x387>
				{
					switch(PinLoc)
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	28 2f       	mov	r18, r24
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	3c 87       	std	Y+12, r19	; 0x0c
     b28:	2b 87       	std	Y+11, r18	; 0x0b
     b2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	91 05       	cpc	r25, r1
     b32:	d9 f1       	breq	.+118    	; 0xbaa <__stack+0x34b>
     b34:	2b 85       	ldd	r18, Y+11	; 0x0b
     b36:	3c 85       	ldd	r19, Y+12	; 0x0c
     b38:	24 30       	cpi	r18, 0x04	; 4
     b3a:	31 05       	cpc	r19, r1
     b3c:	7c f4       	brge	.+30     	; 0xb5c <__stack+0x2fd>
     b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     b40:	9c 85       	ldd	r25, Y+12	; 0x0c
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	91 05       	cpc	r25, r1
     b46:	29 f1       	breq	.+74     	; 0xb92 <__stack+0x333>
     b48:	2b 85       	ldd	r18, Y+11	; 0x0b
     b4a:	3c 85       	ldd	r19, Y+12	; 0x0c
     b4c:	22 30       	cpi	r18, 0x02	; 2
     b4e:	31 05       	cpc	r19, r1
     b50:	34 f5       	brge	.+76     	; 0xb9e <__stack+0x33f>
     b52:	8b 85       	ldd	r24, Y+11	; 0x0b
     b54:	9c 85       	ldd	r25, Y+12	; 0x0c
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	b1 f0       	breq	.+44     	; 0xb86 <__stack+0x327>
     b5a:	71 c1       	rjmp	.+738    	; 0xe3e <__stack+0x5df>
     b5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     b5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     b60:	25 30       	cpi	r18, 0x05	; 5
     b62:	31 05       	cpc	r19, r1
     b64:	71 f1       	breq	.+92     	; 0xbc2 <__stack+0x363>
     b66:	8b 85       	ldd	r24, Y+11	; 0x0b
     b68:	9c 85       	ldd	r25, Y+12	; 0x0c
     b6a:	85 30       	cpi	r24, 0x05	; 5
     b6c:	91 05       	cpc	r25, r1
     b6e:	1c f1       	brlt	.+70     	; 0xbb6 <__stack+0x357>
     b70:	2b 85       	ldd	r18, Y+11	; 0x0b
     b72:	3c 85       	ldd	r19, Y+12	; 0x0c
     b74:	26 30       	cpi	r18, 0x06	; 6
     b76:	31 05       	cpc	r19, r1
     b78:	51 f1       	breq	.+84     	; 0xbce <__stack+0x36f>
     b7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b7e:	87 30       	cpi	r24, 0x07	; 7
     b80:	91 05       	cpc	r25, r1
     b82:	59 f1       	breq	.+86     	; 0xbda <__stack+0x37b>
     b84:	5c c1       	rjmp	.+696    	; 0xe3e <__stack+0x5df>
					{
						case 0:
							DDRC.Bits.Pin0 =1;
     b86:	e4 e3       	ldi	r30, 0x34	; 52
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	81 60       	ori	r24, 0x01	; 1
     b8e:	80 83       	st	Z, r24
     b90:	56 c1       	rjmp	.+684    	; 0xe3e <__stack+0x5df>
						break;

						case 1:
							DDRC.Bits.Pin1 =1;
     b92:	e4 e3       	ldi	r30, 0x34	; 52
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	80 83       	st	Z, r24
     b9c:	50 c1       	rjmp	.+672    	; 0xe3e <__stack+0x5df>
						break;

						case 2:
							DDRC.Bits.Pin2 =1;
     b9e:	e4 e3       	ldi	r30, 0x34	; 52
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	84 60       	ori	r24, 0x04	; 4
     ba6:	80 83       	st	Z, r24
     ba8:	4a c1       	rjmp	.+660    	; 0xe3e <__stack+0x5df>
						break;

						case 3:
							DDRC.Bits.Pin3 =1;
     baa:	e4 e3       	ldi	r30, 0x34	; 52
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	88 60       	ori	r24, 0x08	; 8
     bb2:	80 83       	st	Z, r24
     bb4:	44 c1       	rjmp	.+648    	; 0xe3e <__stack+0x5df>
						break;

						case 4:
							DDRC.Bits.Pin4 =1;
     bb6:	e4 e3       	ldi	r30, 0x34	; 52
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 61       	ori	r24, 0x10	; 16
     bbe:	80 83       	st	Z, r24
     bc0:	3e c1       	rjmp	.+636    	; 0xe3e <__stack+0x5df>
						break;

						case 5:
							DDRC.Bits.Pin5 =1;
     bc2:	e4 e3       	ldi	r30, 0x34	; 52
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	80 83       	st	Z, r24
     bcc:	38 c1       	rjmp	.+624    	; 0xe3e <__stack+0x5df>
						break;

						case 6:
							DDRC.Bits.Pin6 =1;
     bce:	e4 e3       	ldi	r30, 0x34	; 52
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	80 83       	st	Z, r24
     bd8:	32 c1       	rjmp	.+612    	; 0xe3e <__stack+0x5df>
						break;

						case 7:
							DDRC.Bits.Pin7 =1;
     bda:	e4 e3       	ldi	r30, 0x34	; 52
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 68       	ori	r24, 0x80	; 128
     be2:	80 83       	st	Z, r24
     be4:	2c c1       	rjmp	.+600    	; 0xe3e <__stack+0x5df>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	3a 87       	std	Y+10, r19	; 0x0a
     bee:	29 87       	std	Y+9, r18	; 0x09
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	83 30       	cpi	r24, 0x03	; 3
     bf6:	91 05       	cpc	r25, r1
     bf8:	d9 f1       	breq	.+118    	; 0xc70 <__stack+0x411>
     bfa:	29 85       	ldd	r18, Y+9	; 0x09
     bfc:	3a 85       	ldd	r19, Y+10	; 0x0a
     bfe:	24 30       	cpi	r18, 0x04	; 4
     c00:	31 05       	cpc	r19, r1
     c02:	7c f4       	brge	.+30     	; 0xc22 <__stack+0x3c3>
     c04:	89 85       	ldd	r24, Y+9	; 0x09
     c06:	9a 85       	ldd	r25, Y+10	; 0x0a
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	91 05       	cpc	r25, r1
     c0c:	29 f1       	breq	.+74     	; 0xc58 <__stack+0x3f9>
     c0e:	29 85       	ldd	r18, Y+9	; 0x09
     c10:	3a 85       	ldd	r19, Y+10	; 0x0a
     c12:	22 30       	cpi	r18, 0x02	; 2
     c14:	31 05       	cpc	r19, r1
     c16:	34 f5       	brge	.+76     	; 0xc64 <__stack+0x405>
     c18:	89 85       	ldd	r24, Y+9	; 0x09
     c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	b1 f0       	breq	.+44     	; 0xc4c <__stack+0x3ed>
     c20:	0e c1       	rjmp	.+540    	; 0xe3e <__stack+0x5df>
     c22:	29 85       	ldd	r18, Y+9	; 0x09
     c24:	3a 85       	ldd	r19, Y+10	; 0x0a
     c26:	25 30       	cpi	r18, 0x05	; 5
     c28:	31 05       	cpc	r19, r1
     c2a:	71 f1       	breq	.+92     	; 0xc88 <__stack+0x429>
     c2c:	89 85       	ldd	r24, Y+9	; 0x09
     c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c30:	85 30       	cpi	r24, 0x05	; 5
     c32:	91 05       	cpc	r25, r1
     c34:	1c f1       	brlt	.+70     	; 0xc7c <__stack+0x41d>
     c36:	29 85       	ldd	r18, Y+9	; 0x09
     c38:	3a 85       	ldd	r19, Y+10	; 0x0a
     c3a:	26 30       	cpi	r18, 0x06	; 6
     c3c:	31 05       	cpc	r19, r1
     c3e:	51 f1       	breq	.+84     	; 0xc94 <__stack+0x435>
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	87 30       	cpi	r24, 0x07	; 7
     c46:	91 05       	cpc	r25, r1
     c48:	59 f1       	breq	.+86     	; 0xca0 <__stack+0x441>
     c4a:	f9 c0       	rjmp	.+498    	; 0xe3e <__stack+0x5df>
				{
					case 0:
						DDRC.Bits.Pin0 =0;
     c4c:	e4 e3       	ldi	r30, 0x34	; 52
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	80 83       	st	Z, r24
     c56:	f3 c0       	rjmp	.+486    	; 0xe3e <__stack+0x5df>
					break;

					case 1:
						DDRC.Bits.Pin1 =0;
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	80 83       	st	Z, r24
     c62:	ed c0       	rjmp	.+474    	; 0xe3e <__stack+0x5df>
					break;

					case 2:
						DDRC.Bits.Pin2 =0;
     c64:	e4 e3       	ldi	r30, 0x34	; 52
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8b 7f       	andi	r24, 0xFB	; 251
     c6c:	80 83       	st	Z, r24
     c6e:	e7 c0       	rjmp	.+462    	; 0xe3e <__stack+0x5df>
					break;

					case 3:
						DDRC.Bits.Pin3 =0;
     c70:	e4 e3       	ldi	r30, 0x34	; 52
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	87 7f       	andi	r24, 0xF7	; 247
     c78:	80 83       	st	Z, r24
     c7a:	e1 c0       	rjmp	.+450    	; 0xe3e <__stack+0x5df>
					break;

					case 4:
						DDRC.Bits.Pin4 =0;
     c7c:	e4 e3       	ldi	r30, 0x34	; 52
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8f 7e       	andi	r24, 0xEF	; 239
     c84:	80 83       	st	Z, r24
     c86:	db c0       	rjmp	.+438    	; 0xe3e <__stack+0x5df>
					break;

					case 5:
						DDRC.Bits.Pin5 =0;
     c88:	e4 e3       	ldi	r30, 0x34	; 52
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8f 7d       	andi	r24, 0xDF	; 223
     c90:	80 83       	st	Z, r24
     c92:	d5 c0       	rjmp	.+426    	; 0xe3e <__stack+0x5df>
					break;

					case 6:
						DDRC.Bits.Pin6 =0;
     c94:	e4 e3       	ldi	r30, 0x34	; 52
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8f 7b       	andi	r24, 0xBF	; 191
     c9c:	80 83       	st	Z, r24
     c9e:	cf c0       	rjmp	.+414    	; 0xe3e <__stack+0x5df>
					break;

					case 7:
						DDRC.Bits.Pin7 =0;
     ca0:	e4 e3       	ldi	r30, 0x34	; 52
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8f 77       	andi	r24, 0x7F	; 127
     ca8:	80 83       	st	Z, r24
     caa:	c9 c0       	rjmp	.+402    	; 0xe3e <__stack+0x5df>
			}
		break;


		case 3:
			if(Dir ==1)
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__stack+0x455>
     cb2:	63 c0       	rjmp	.+198    	; 0xd7a <__stack+0x51b>
				{
					switch(PinLoc)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	38 87       	std	Y+8, r19	; 0x08
     cbc:	2f 83       	std	Y+7, r18	; 0x07
     cbe:	8f 81       	ldd	r24, Y+7	; 0x07
     cc0:	98 85       	ldd	r25, Y+8	; 0x08
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	91 05       	cpc	r25, r1
     cc6:	d9 f1       	breq	.+118    	; 0xd3e <__stack+0x4df>
     cc8:	2f 81       	ldd	r18, Y+7	; 0x07
     cca:	38 85       	ldd	r19, Y+8	; 0x08
     ccc:	24 30       	cpi	r18, 0x04	; 4
     cce:	31 05       	cpc	r19, r1
     cd0:	7c f4       	brge	.+30     	; 0xcf0 <__stack+0x491>
     cd2:	8f 81       	ldd	r24, Y+7	; 0x07
     cd4:	98 85       	ldd	r25, Y+8	; 0x08
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	29 f1       	breq	.+74     	; 0xd26 <__stack+0x4c7>
     cdc:	2f 81       	ldd	r18, Y+7	; 0x07
     cde:	38 85       	ldd	r19, Y+8	; 0x08
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	34 f5       	brge	.+76     	; 0xd32 <__stack+0x4d3>
     ce6:	8f 81       	ldd	r24, Y+7	; 0x07
     ce8:	98 85       	ldd	r25, Y+8	; 0x08
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	b1 f0       	breq	.+44     	; 0xd1a <__stack+0x4bb>
     cee:	a7 c0       	rjmp	.+334    	; 0xe3e <__stack+0x5df>
     cf0:	2f 81       	ldd	r18, Y+7	; 0x07
     cf2:	38 85       	ldd	r19, Y+8	; 0x08
     cf4:	25 30       	cpi	r18, 0x05	; 5
     cf6:	31 05       	cpc	r19, r1
     cf8:	71 f1       	breq	.+92     	; 0xd56 <__stack+0x4f7>
     cfa:	8f 81       	ldd	r24, Y+7	; 0x07
     cfc:	98 85       	ldd	r25, Y+8	; 0x08
     cfe:	85 30       	cpi	r24, 0x05	; 5
     d00:	91 05       	cpc	r25, r1
     d02:	1c f1       	brlt	.+70     	; 0xd4a <__stack+0x4eb>
     d04:	2f 81       	ldd	r18, Y+7	; 0x07
     d06:	38 85       	ldd	r19, Y+8	; 0x08
     d08:	26 30       	cpi	r18, 0x06	; 6
     d0a:	31 05       	cpc	r19, r1
     d0c:	51 f1       	breq	.+84     	; 0xd62 <__stack+0x503>
     d0e:	8f 81       	ldd	r24, Y+7	; 0x07
     d10:	98 85       	ldd	r25, Y+8	; 0x08
     d12:	87 30       	cpi	r24, 0x07	; 7
     d14:	91 05       	cpc	r25, r1
     d16:	59 f1       	breq	.+86     	; 0xd6e <__stack+0x50f>
     d18:	92 c0       	rjmp	.+292    	; 0xe3e <__stack+0x5df>
					{
						case 0:
							DDRD.Bits.Pin0 =1;
     d1a:	e1 e3       	ldi	r30, 0x31	; 49
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	80 83       	st	Z, r24
     d24:	8c c0       	rjmp	.+280    	; 0xe3e <__stack+0x5df>
						break;

						case 1:
							DDRD.Bits.Pin1 =1;
     d26:	e1 e3       	ldi	r30, 0x31	; 49
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	80 83       	st	Z, r24
     d30:	86 c0       	rjmp	.+268    	; 0xe3e <__stack+0x5df>
						break;

						case 2:
							DDRD.Bits.Pin2 =1;
     d32:	e1 e3       	ldi	r30, 0x31	; 49
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	84 60       	ori	r24, 0x04	; 4
     d3a:	80 83       	st	Z, r24
     d3c:	80 c0       	rjmp	.+256    	; 0xe3e <__stack+0x5df>
						break;

						case 3:
							DDRD.Bits.Pin3 =1;
     d3e:	e1 e3       	ldi	r30, 0x31	; 49
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 60       	ori	r24, 0x08	; 8
     d46:	80 83       	st	Z, r24
     d48:	7a c0       	rjmp	.+244    	; 0xe3e <__stack+0x5df>
						break;

						case 4:
							DDRD.Bits.Pin4 =1;
     d4a:	e1 e3       	ldi	r30, 0x31	; 49
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 61       	ori	r24, 0x10	; 16
     d52:	80 83       	st	Z, r24
     d54:	74 c0       	rjmp	.+232    	; 0xe3e <__stack+0x5df>
						break;

						case 5:
							DDRD.Bits.Pin5 =1;
     d56:	e1 e3       	ldi	r30, 0x31	; 49
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 62       	ori	r24, 0x20	; 32
     d5e:	80 83       	st	Z, r24
     d60:	6e c0       	rjmp	.+220    	; 0xe3e <__stack+0x5df>
						break;

						case 6:
							DDRD.Bits.Pin6 =1;
     d62:	e1 e3       	ldi	r30, 0x31	; 49
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 64       	ori	r24, 0x40	; 64
     d6a:	80 83       	st	Z, r24
     d6c:	68 c0       	rjmp	.+208    	; 0xe3e <__stack+0x5df>
						break;

						case 7:
							DDRD.Bits.Pin7 =1;
     d6e:	e1 e3       	ldi	r30, 0x31	; 49
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 68       	ori	r24, 0x80	; 128
     d76:	80 83       	st	Z, r24
     d78:	62 c0       	rjmp	.+196    	; 0xe3e <__stack+0x5df>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	3e 83       	std	Y+6, r19	; 0x06
     d82:	2d 83       	std	Y+5, r18	; 0x05
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	91 05       	cpc	r25, r1
     d8c:	d9 f1       	breq	.+118    	; 0xe04 <__stack+0x5a5>
     d8e:	2d 81       	ldd	r18, Y+5	; 0x05
     d90:	3e 81       	ldd	r19, Y+6	; 0x06
     d92:	24 30       	cpi	r18, 0x04	; 4
     d94:	31 05       	cpc	r19, r1
     d96:	7c f4       	brge	.+30     	; 0xdb6 <__stack+0x557>
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	91 05       	cpc	r25, r1
     da0:	29 f1       	breq	.+74     	; 0xdec <__stack+0x58d>
     da2:	2d 81       	ldd	r18, Y+5	; 0x05
     da4:	3e 81       	ldd	r19, Y+6	; 0x06
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	34 f5       	brge	.+76     	; 0xdf8 <__stack+0x599>
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	b1 f0       	breq	.+44     	; 0xde0 <__stack+0x581>
     db4:	44 c0       	rjmp	.+136    	; 0xe3e <__stack+0x5df>
     db6:	2d 81       	ldd	r18, Y+5	; 0x05
     db8:	3e 81       	ldd	r19, Y+6	; 0x06
     dba:	25 30       	cpi	r18, 0x05	; 5
     dbc:	31 05       	cpc	r19, r1
     dbe:	71 f1       	breq	.+92     	; 0xe1c <__stack+0x5bd>
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	85 30       	cpi	r24, 0x05	; 5
     dc6:	91 05       	cpc	r25, r1
     dc8:	1c f1       	brlt	.+70     	; 0xe10 <__stack+0x5b1>
     dca:	2d 81       	ldd	r18, Y+5	; 0x05
     dcc:	3e 81       	ldd	r19, Y+6	; 0x06
     dce:	26 30       	cpi	r18, 0x06	; 6
     dd0:	31 05       	cpc	r19, r1
     dd2:	51 f1       	breq	.+84     	; 0xe28 <__stack+0x5c9>
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	87 30       	cpi	r24, 0x07	; 7
     dda:	91 05       	cpc	r25, r1
     ddc:	59 f1       	breq	.+86     	; 0xe34 <__stack+0x5d5>
     dde:	2f c0       	rjmp	.+94     	; 0xe3e <__stack+0x5df>
				{
					case 0:
						DDRD.Bits.Pin0 =0;
     de0:	e1 e3       	ldi	r30, 0x31	; 49
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	80 83       	st	Z, r24
     dea:	29 c0       	rjmp	.+82     	; 0xe3e <__stack+0x5df>
					break;

					case 1:
						DDRD.Bits.Pin1 =0;
     dec:	e1 e3       	ldi	r30, 0x31	; 49
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8d 7f       	andi	r24, 0xFD	; 253
     df4:	80 83       	st	Z, r24
     df6:	23 c0       	rjmp	.+70     	; 0xe3e <__stack+0x5df>
					break;

					case 2:
						DDRD.Bits.Pin2 =0;
     df8:	e1 e3       	ldi	r30, 0x31	; 49
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8b 7f       	andi	r24, 0xFB	; 251
     e00:	80 83       	st	Z, r24
     e02:	1d c0       	rjmp	.+58     	; 0xe3e <__stack+0x5df>
					break;

					case 3:
						DDRD.Bits.Pin3 =0;
     e04:	e1 e3       	ldi	r30, 0x31	; 49
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	87 7f       	andi	r24, 0xF7	; 247
     e0c:	80 83       	st	Z, r24
     e0e:	17 c0       	rjmp	.+46     	; 0xe3e <__stack+0x5df>
					break;

					case 4:
						DDRD.Bits.Pin4 =0;
     e10:	e1 e3       	ldi	r30, 0x31	; 49
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8f 7e       	andi	r24, 0xEF	; 239
     e18:	80 83       	st	Z, r24
     e1a:	11 c0       	rjmp	.+34     	; 0xe3e <__stack+0x5df>
					break;

					case 5:
						DDRD.Bits.Pin5 =0;
     e1c:	e1 e3       	ldi	r30, 0x31	; 49
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	8f 7d       	andi	r24, 0xDF	; 223
     e24:	80 83       	st	Z, r24
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <__stack+0x5df>
					break;

					case 6:
						DDRD.Bits.Pin6 =0;
     e28:	e1 e3       	ldi	r30, 0x31	; 49
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 7b       	andi	r24, 0xBF	; 191
     e30:	80 83       	st	Z, r24
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <__stack+0x5df>
					break;

					case 7:
						DDRD.Bits.Pin7 =0;
     e34:	e1 e3       	ldi	r30, 0x31	; 49
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 77       	andi	r24, 0x7F	; 127
     e3c:	80 83       	st	Z, r24
					break;
				}
			}
		break;
	}
}
     e3e:	66 96       	adiw	r28, 0x16	; 22
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin , u8 Val)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	66 97       	sbiw	r28, 0x16	; 22
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	86 95       	lsr	r24
     e6c:	86 95       	lsr	r24
     e6e:	86 95       	lsr	r24
     e70:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	87 70       	andi	r24, 0x07	; 7
     e76:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	3e 8b       	std	Y+22, r19	; 0x16
     e80:	2d 8b       	std	Y+21, r18	; 0x15
     e82:	8d 89       	ldd	r24, Y+21	; 0x15
     e84:	9e 89       	ldd	r25, Y+22	; 0x16
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <Dio_vidSetPinVal+0x3e>
     e8c:	e1 c0       	rjmp	.+450    	; 0x1050 <Dio_vidSetPinVal+0x200>
     e8e:	2d 89       	ldd	r18, Y+21	; 0x15
     e90:	3e 89       	ldd	r19, Y+22	; 0x16
     e92:	22 30       	cpi	r18, 0x02	; 2
     e94:	31 05       	cpc	r19, r1
     e96:	2c f4       	brge	.+10     	; 0xea2 <Dio_vidSetPinVal+0x52>
     e98:	8d 89       	ldd	r24, Y+21	; 0x15
     e9a:	9e 89       	ldd	r25, Y+22	; 0x16
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	71 f0       	breq	.+28     	; 0xebc <Dio_vidSetPinVal+0x6c>
     ea0:	34 c3       	rjmp	.+1640   	; 0x150a <Dio_vidSetPinVal+0x6ba>
     ea2:	2d 89       	ldd	r18, Y+21	; 0x15
     ea4:	3e 89       	ldd	r19, Y+22	; 0x16
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <Dio_vidSetPinVal+0x5e>
     eac:	9b c1       	rjmp	.+822    	; 0x11e4 <Dio_vidSetPinVal+0x394>
     eae:	8d 89       	ldd	r24, Y+21	; 0x15
     eb0:	9e 89       	ldd	r25, Y+22	; 0x16
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	91 05       	cpc	r25, r1
     eb6:	09 f4       	brne	.+2      	; 0xeba <Dio_vidSetPinVal+0x6a>
     eb8:	5f c2       	rjmp	.+1214   	; 0x1378 <Dio_vidSetPinVal+0x528>
     eba:	27 c3       	rjmp	.+1614   	; 0x150a <Dio_vidSetPinVal+0x6ba>
		case 0:
			if(Val ==1)
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	09 f0       	breq	.+2      	; 0xec4 <Dio_vidSetPinVal+0x74>
     ec2:	63 c0       	rjmp	.+198    	; 0xf8a <Dio_vidSetPinVal+0x13a>
				{
					switch(PinLoc)
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3c 8b       	std	Y+20, r19	; 0x14
     ecc:	2b 8b       	std	Y+19, r18	; 0x13
     ece:	8b 89       	ldd	r24, Y+19	; 0x13
     ed0:	9c 89       	ldd	r25, Y+20	; 0x14
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	d9 f1       	breq	.+118    	; 0xf4e <Dio_vidSetPinVal+0xfe>
     ed8:	2b 89       	ldd	r18, Y+19	; 0x13
     eda:	3c 89       	ldd	r19, Y+20	; 0x14
     edc:	24 30       	cpi	r18, 0x04	; 4
     ede:	31 05       	cpc	r19, r1
     ee0:	7c f4       	brge	.+30     	; 0xf00 <Dio_vidSetPinVal+0xb0>
     ee2:	8b 89       	ldd	r24, Y+19	; 0x13
     ee4:	9c 89       	ldd	r25, Y+20	; 0x14
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	29 f1       	breq	.+74     	; 0xf36 <Dio_vidSetPinVal+0xe6>
     eec:	2b 89       	ldd	r18, Y+19	; 0x13
     eee:	3c 89       	ldd	r19, Y+20	; 0x14
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	34 f5       	brge	.+76     	; 0xf42 <Dio_vidSetPinVal+0xf2>
     ef6:	8b 89       	ldd	r24, Y+19	; 0x13
     ef8:	9c 89       	ldd	r25, Y+20	; 0x14
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	b1 f0       	breq	.+44     	; 0xf2a <Dio_vidSetPinVal+0xda>
     efe:	05 c3       	rjmp	.+1546   	; 0x150a <Dio_vidSetPinVal+0x6ba>
     f00:	2b 89       	ldd	r18, Y+19	; 0x13
     f02:	3c 89       	ldd	r19, Y+20	; 0x14
     f04:	25 30       	cpi	r18, 0x05	; 5
     f06:	31 05       	cpc	r19, r1
     f08:	71 f1       	breq	.+92     	; 0xf66 <Dio_vidSetPinVal+0x116>
     f0a:	8b 89       	ldd	r24, Y+19	; 0x13
     f0c:	9c 89       	ldd	r25, Y+20	; 0x14
     f0e:	85 30       	cpi	r24, 0x05	; 5
     f10:	91 05       	cpc	r25, r1
     f12:	1c f1       	brlt	.+70     	; 0xf5a <Dio_vidSetPinVal+0x10a>
     f14:	2b 89       	ldd	r18, Y+19	; 0x13
     f16:	3c 89       	ldd	r19, Y+20	; 0x14
     f18:	26 30       	cpi	r18, 0x06	; 6
     f1a:	31 05       	cpc	r19, r1
     f1c:	51 f1       	breq	.+84     	; 0xf72 <Dio_vidSetPinVal+0x122>
     f1e:	8b 89       	ldd	r24, Y+19	; 0x13
     f20:	9c 89       	ldd	r25, Y+20	; 0x14
     f22:	87 30       	cpi	r24, 0x07	; 7
     f24:	91 05       	cpc	r25, r1
     f26:	59 f1       	breq	.+86     	; 0xf7e <Dio_vidSetPinVal+0x12e>
     f28:	f0 c2       	rjmp	.+1504   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTA.Bits.Pin0 =1;
     f2a:	eb e3       	ldi	r30, 0x3B	; 59
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	80 83       	st	Z, r24
     f34:	ea c2       	rjmp	.+1492   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTA.Bits.Pin1 =1;
     f36:	eb e3       	ldi	r30, 0x3B	; 59
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	82 60       	ori	r24, 0x02	; 2
     f3e:	80 83       	st	Z, r24
     f40:	e4 c2       	rjmp	.+1480   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTA.Bits.Pin2 =1;
     f42:	eb e3       	ldi	r30, 0x3B	; 59
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	84 60       	ori	r24, 0x04	; 4
     f4a:	80 83       	st	Z, r24
     f4c:	de c2       	rjmp	.+1468   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTA.Bits.Pin3 =1;
     f4e:	eb e3       	ldi	r30, 0x3B	; 59
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	80 83       	st	Z, r24
     f58:	d8 c2       	rjmp	.+1456   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTA.Bits.Pin4 =1;
     f5a:	eb e3       	ldi	r30, 0x3B	; 59
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 61       	ori	r24, 0x10	; 16
     f62:	80 83       	st	Z, r24
     f64:	d2 c2       	rjmp	.+1444   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTA.Bits.Pin5 =1;
     f66:	eb e3       	ldi	r30, 0x3B	; 59
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 62       	ori	r24, 0x20	; 32
     f6e:	80 83       	st	Z, r24
     f70:	cc c2       	rjmp	.+1432   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTA.Bits.Pin6 =1;
     f72:	eb e3       	ldi	r30, 0x3B	; 59
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 64       	ori	r24, 0x40	; 64
     f7a:	80 83       	st	Z, r24
     f7c:	c6 c2       	rjmp	.+1420   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTA.Bits.Pin7 =1;
     f7e:	eb e3       	ldi	r30, 0x3B	; 59
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 68       	ori	r24, 0x80	; 128
     f86:	80 83       	st	Z, r24
     f88:	c0 c2       	rjmp	.+1408   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3a 8b       	std	Y+18, r19	; 0x12
     f92:	29 8b       	std	Y+17, r18	; 0x11
     f94:	89 89       	ldd	r24, Y+17	; 0x11
     f96:	9a 89       	ldd	r25, Y+18	; 0x12
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	d9 f1       	breq	.+118    	; 0x1014 <Dio_vidSetPinVal+0x1c4>
     f9e:	29 89       	ldd	r18, Y+17	; 0x11
     fa0:	3a 89       	ldd	r19, Y+18	; 0x12
     fa2:	24 30       	cpi	r18, 0x04	; 4
     fa4:	31 05       	cpc	r19, r1
     fa6:	7c f4       	brge	.+30     	; 0xfc6 <Dio_vidSetPinVal+0x176>
     fa8:	89 89       	ldd	r24, Y+17	; 0x11
     faa:	9a 89       	ldd	r25, Y+18	; 0x12
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	91 05       	cpc	r25, r1
     fb0:	29 f1       	breq	.+74     	; 0xffc <Dio_vidSetPinVal+0x1ac>
     fb2:	29 89       	ldd	r18, Y+17	; 0x11
     fb4:	3a 89       	ldd	r19, Y+18	; 0x12
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	31 05       	cpc	r19, r1
     fba:	34 f5       	brge	.+76     	; 0x1008 <Dio_vidSetPinVal+0x1b8>
     fbc:	89 89       	ldd	r24, Y+17	; 0x11
     fbe:	9a 89       	ldd	r25, Y+18	; 0x12
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	b1 f0       	breq	.+44     	; 0xff0 <Dio_vidSetPinVal+0x1a0>
     fc4:	a2 c2       	rjmp	.+1348   	; 0x150a <Dio_vidSetPinVal+0x6ba>
     fc6:	29 89       	ldd	r18, Y+17	; 0x11
     fc8:	3a 89       	ldd	r19, Y+18	; 0x12
     fca:	25 30       	cpi	r18, 0x05	; 5
     fcc:	31 05       	cpc	r19, r1
     fce:	71 f1       	breq	.+92     	; 0x102c <Dio_vidSetPinVal+0x1dc>
     fd0:	89 89       	ldd	r24, Y+17	; 0x11
     fd2:	9a 89       	ldd	r25, Y+18	; 0x12
     fd4:	85 30       	cpi	r24, 0x05	; 5
     fd6:	91 05       	cpc	r25, r1
     fd8:	1c f1       	brlt	.+70     	; 0x1020 <Dio_vidSetPinVal+0x1d0>
     fda:	29 89       	ldd	r18, Y+17	; 0x11
     fdc:	3a 89       	ldd	r19, Y+18	; 0x12
     fde:	26 30       	cpi	r18, 0x06	; 6
     fe0:	31 05       	cpc	r19, r1
     fe2:	51 f1       	breq	.+84     	; 0x1038 <Dio_vidSetPinVal+0x1e8>
     fe4:	89 89       	ldd	r24, Y+17	; 0x11
     fe6:	9a 89       	ldd	r25, Y+18	; 0x12
     fe8:	87 30       	cpi	r24, 0x07	; 7
     fea:	91 05       	cpc	r25, r1
     fec:	59 f1       	breq	.+86     	; 0x1044 <Dio_vidSetPinVal+0x1f4>
     fee:	8d c2       	rjmp	.+1306   	; 0x150a <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTA.Bits.Pin0 =0;
     ff0:	eb e3       	ldi	r30, 0x3B	; 59
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	80 83       	st	Z, r24
     ffa:	87 c2       	rjmp	.+1294   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTA.Bits.Pin1 =0;
     ffc:	eb e3       	ldi	r30, 0x3B	; 59
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8d 7f       	andi	r24, 0xFD	; 253
    1004:	80 83       	st	Z, r24
    1006:	81 c2       	rjmp	.+1282   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTA.Bits.Pin2 =0;
    1008:	eb e3       	ldi	r30, 0x3B	; 59
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8b 7f       	andi	r24, 0xFB	; 251
    1010:	80 83       	st	Z, r24
    1012:	7b c2       	rjmp	.+1270   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTA.Bits.Pin3 =0;
    1014:	eb e3       	ldi	r30, 0x3B	; 59
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	87 7f       	andi	r24, 0xF7	; 247
    101c:	80 83       	st	Z, r24
    101e:	75 c2       	rjmp	.+1258   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTA.Bits.Pin4 =0;
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8f 7e       	andi	r24, 0xEF	; 239
    1028:	80 83       	st	Z, r24
    102a:	6f c2       	rjmp	.+1246   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTA.Bits.Pin5 =0;
    102c:	eb e3       	ldi	r30, 0x3B	; 59
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	80 83       	st	Z, r24
    1036:	69 c2       	rjmp	.+1234   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTA.Bits.Pin6 =0;
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8f 7b       	andi	r24, 0xBF	; 191
    1040:	80 83       	st	Z, r24
    1042:	63 c2       	rjmp	.+1222   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTA.Bits.Pin7 =0;
    1044:	eb e3       	ldi	r30, 0x3B	; 59
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8f 77       	andi	r24, 0x7F	; 127
    104c:	80 83       	st	Z, r24
    104e:	5d c2       	rjmp	.+1210   	; 0x150a <Dio_vidSetPinVal+0x6ba>
				}
			}
		break;

		case 1:
			if(Val ==1)
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	09 f0       	breq	.+2      	; 0x1058 <Dio_vidSetPinVal+0x208>
    1056:	63 c0       	rjmp	.+198    	; 0x111e <Dio_vidSetPinVal+0x2ce>
				{
					switch(PinLoc)
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	38 8b       	std	Y+16, r19	; 0x10
    1060:	2f 87       	std	Y+15, r18	; 0x0f
    1062:	8f 85       	ldd	r24, Y+15	; 0x0f
    1064:	98 89       	ldd	r25, Y+16	; 0x10
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	91 05       	cpc	r25, r1
    106a:	d9 f1       	breq	.+118    	; 0x10e2 <Dio_vidSetPinVal+0x292>
    106c:	2f 85       	ldd	r18, Y+15	; 0x0f
    106e:	38 89       	ldd	r19, Y+16	; 0x10
    1070:	24 30       	cpi	r18, 0x04	; 4
    1072:	31 05       	cpc	r19, r1
    1074:	7c f4       	brge	.+30     	; 0x1094 <Dio_vidSetPinVal+0x244>
    1076:	8f 85       	ldd	r24, Y+15	; 0x0f
    1078:	98 89       	ldd	r25, Y+16	; 0x10
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	91 05       	cpc	r25, r1
    107e:	29 f1       	breq	.+74     	; 0x10ca <Dio_vidSetPinVal+0x27a>
    1080:	2f 85       	ldd	r18, Y+15	; 0x0f
    1082:	38 89       	ldd	r19, Y+16	; 0x10
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	34 f5       	brge	.+76     	; 0x10d6 <Dio_vidSetPinVal+0x286>
    108a:	8f 85       	ldd	r24, Y+15	; 0x0f
    108c:	98 89       	ldd	r25, Y+16	; 0x10
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	b1 f0       	breq	.+44     	; 0x10be <Dio_vidSetPinVal+0x26e>
    1092:	3b c2       	rjmp	.+1142   	; 0x150a <Dio_vidSetPinVal+0x6ba>
    1094:	2f 85       	ldd	r18, Y+15	; 0x0f
    1096:	38 89       	ldd	r19, Y+16	; 0x10
    1098:	25 30       	cpi	r18, 0x05	; 5
    109a:	31 05       	cpc	r19, r1
    109c:	71 f1       	breq	.+92     	; 0x10fa <Dio_vidSetPinVal+0x2aa>
    109e:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a0:	98 89       	ldd	r25, Y+16	; 0x10
    10a2:	85 30       	cpi	r24, 0x05	; 5
    10a4:	91 05       	cpc	r25, r1
    10a6:	1c f1       	brlt	.+70     	; 0x10ee <Dio_vidSetPinVal+0x29e>
    10a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    10aa:	38 89       	ldd	r19, Y+16	; 0x10
    10ac:	26 30       	cpi	r18, 0x06	; 6
    10ae:	31 05       	cpc	r19, r1
    10b0:	51 f1       	breq	.+84     	; 0x1106 <Dio_vidSetPinVal+0x2b6>
    10b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b4:	98 89       	ldd	r25, Y+16	; 0x10
    10b6:	87 30       	cpi	r24, 0x07	; 7
    10b8:	91 05       	cpc	r25, r1
    10ba:	59 f1       	breq	.+86     	; 0x1112 <Dio_vidSetPinVal+0x2c2>
    10bc:	26 c2       	rjmp	.+1100   	; 0x150a <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTB.Bits.Pin0 =1;
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	80 83       	st	Z, r24
    10c8:	20 c2       	rjmp	.+1088   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTB.Bits.Pin1 =1;
    10ca:	e8 e3       	ldi	r30, 0x38	; 56
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	80 83       	st	Z, r24
    10d4:	1a c2       	rjmp	.+1076   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTB.Bits.Pin2 =1;
    10d6:	e8 e3       	ldi	r30, 0x38	; 56
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	84 60       	ori	r24, 0x04	; 4
    10de:	80 83       	st	Z, r24
    10e0:	14 c2       	rjmp	.+1064   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTB.Bits.Pin3 =1;
    10e2:	e8 e3       	ldi	r30, 0x38	; 56
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 60       	ori	r24, 0x08	; 8
    10ea:	80 83       	st	Z, r24
    10ec:	0e c2       	rjmp	.+1052   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTB.Bits.Pin4 =1;
    10ee:	e8 e3       	ldi	r30, 0x38	; 56
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 61       	ori	r24, 0x10	; 16
    10f6:	80 83       	st	Z, r24
    10f8:	08 c2       	rjmp	.+1040   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTB.Bits.Pin5 =1;
    10fa:	e8 e3       	ldi	r30, 0x38	; 56
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	80 62       	ori	r24, 0x20	; 32
    1102:	80 83       	st	Z, r24
    1104:	02 c2       	rjmp	.+1028   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTB.Bits.Pin6 =1;
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 64       	ori	r24, 0x40	; 64
    110e:	80 83       	st	Z, r24
    1110:	fc c1       	rjmp	.+1016   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTB.Bits.Pin7 =1;
    1112:	e8 e3       	ldi	r30, 0x38	; 56
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	80 83       	st	Z, r24
    111c:	f6 c1       	rjmp	.+1004   	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	3e 87       	std	Y+14, r19	; 0x0e
    1126:	2d 87       	std	Y+13, r18	; 0x0d
    1128:	8d 85       	ldd	r24, Y+13	; 0x0d
    112a:	9e 85       	ldd	r25, Y+14	; 0x0e
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	91 05       	cpc	r25, r1
    1130:	d9 f1       	breq	.+118    	; 0x11a8 <Dio_vidSetPinVal+0x358>
    1132:	2d 85       	ldd	r18, Y+13	; 0x0d
    1134:	3e 85       	ldd	r19, Y+14	; 0x0e
    1136:	24 30       	cpi	r18, 0x04	; 4
    1138:	31 05       	cpc	r19, r1
    113a:	7c f4       	brge	.+30     	; 0x115a <Dio_vidSetPinVal+0x30a>
    113c:	8d 85       	ldd	r24, Y+13	; 0x0d
    113e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	29 f1       	breq	.+74     	; 0x1190 <Dio_vidSetPinVal+0x340>
    1146:	2d 85       	ldd	r18, Y+13	; 0x0d
    1148:	3e 85       	ldd	r19, Y+14	; 0x0e
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	34 f5       	brge	.+76     	; 0x119c <Dio_vidSetPinVal+0x34c>
    1150:	8d 85       	ldd	r24, Y+13	; 0x0d
    1152:	9e 85       	ldd	r25, Y+14	; 0x0e
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	b1 f0       	breq	.+44     	; 0x1184 <Dio_vidSetPinVal+0x334>
    1158:	d8 c1       	rjmp	.+944    	; 0x150a <Dio_vidSetPinVal+0x6ba>
    115a:	2d 85       	ldd	r18, Y+13	; 0x0d
    115c:	3e 85       	ldd	r19, Y+14	; 0x0e
    115e:	25 30       	cpi	r18, 0x05	; 5
    1160:	31 05       	cpc	r19, r1
    1162:	71 f1       	breq	.+92     	; 0x11c0 <Dio_vidSetPinVal+0x370>
    1164:	8d 85       	ldd	r24, Y+13	; 0x0d
    1166:	9e 85       	ldd	r25, Y+14	; 0x0e
    1168:	85 30       	cpi	r24, 0x05	; 5
    116a:	91 05       	cpc	r25, r1
    116c:	1c f1       	brlt	.+70     	; 0x11b4 <Dio_vidSetPinVal+0x364>
    116e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1170:	3e 85       	ldd	r19, Y+14	; 0x0e
    1172:	26 30       	cpi	r18, 0x06	; 6
    1174:	31 05       	cpc	r19, r1
    1176:	51 f1       	breq	.+84     	; 0x11cc <Dio_vidSetPinVal+0x37c>
    1178:	8d 85       	ldd	r24, Y+13	; 0x0d
    117a:	9e 85       	ldd	r25, Y+14	; 0x0e
    117c:	87 30       	cpi	r24, 0x07	; 7
    117e:	91 05       	cpc	r25, r1
    1180:	59 f1       	breq	.+86     	; 0x11d8 <Dio_vidSetPinVal+0x388>
    1182:	c3 c1       	rjmp	.+902    	; 0x150a <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTB.Bits.Pin0 =0;
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8e 7f       	andi	r24, 0xFE	; 254
    118c:	80 83       	st	Z, r24
    118e:	bd c1       	rjmp	.+890    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTB.Bits.Pin1 =0;
    1190:	e8 e3       	ldi	r30, 0x38	; 56
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8d 7f       	andi	r24, 0xFD	; 253
    1198:	80 83       	st	Z, r24
    119a:	b7 c1       	rjmp	.+878    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTB.Bits.Pin2 =0;
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	80 83       	st	Z, r24
    11a6:	b1 c1       	rjmp	.+866    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTB.Bits.Pin3 =0;
    11a8:	e8 e3       	ldi	r30, 0x38	; 56
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	87 7f       	andi	r24, 0xF7	; 247
    11b0:	80 83       	st	Z, r24
    11b2:	ab c1       	rjmp	.+854    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTB.Bits.Pin4 =0;
    11b4:	e8 e3       	ldi	r30, 0x38	; 56
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 7e       	andi	r24, 0xEF	; 239
    11bc:	80 83       	st	Z, r24
    11be:	a5 c1       	rjmp	.+842    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTB.Bits.Pin5 =0;
    11c0:	e8 e3       	ldi	r30, 0x38	; 56
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8f 7d       	andi	r24, 0xDF	; 223
    11c8:	80 83       	st	Z, r24
    11ca:	9f c1       	rjmp	.+830    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTB.Bits.Pin6 =0;
    11cc:	e8 e3       	ldi	r30, 0x38	; 56
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	80 83       	st	Z, r24
    11d6:	99 c1       	rjmp	.+818    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTB.Bits.Pin7 =0;
    11d8:	e8 e3       	ldi	r30, 0x38	; 56
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 77       	andi	r24, 0x7F	; 127
    11e0:	80 83       	st	Z, r24
    11e2:	93 c1       	rjmp	.+806    	; 0x150a <Dio_vidSetPinVal+0x6ba>
				}
			}
			break;

		case 2:
			if(Val ==1)
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	09 f0       	breq	.+2      	; 0x11ec <Dio_vidSetPinVal+0x39c>
    11ea:	63 c0       	rjmp	.+198    	; 0x12b2 <Dio_vidSetPinVal+0x462>
				{
					switch(PinLoc)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3c 87       	std	Y+12, r19	; 0x0c
    11f4:	2b 87       	std	Y+11, r18	; 0x0b
    11f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	d9 f1       	breq	.+118    	; 0x1276 <Dio_vidSetPinVal+0x426>
    1200:	2b 85       	ldd	r18, Y+11	; 0x0b
    1202:	3c 85       	ldd	r19, Y+12	; 0x0c
    1204:	24 30       	cpi	r18, 0x04	; 4
    1206:	31 05       	cpc	r19, r1
    1208:	7c f4       	brge	.+30     	; 0x1228 <Dio_vidSetPinVal+0x3d8>
    120a:	8b 85       	ldd	r24, Y+11	; 0x0b
    120c:	9c 85       	ldd	r25, Y+12	; 0x0c
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	29 f1       	breq	.+74     	; 0x125e <Dio_vidSetPinVal+0x40e>
    1214:	2b 85       	ldd	r18, Y+11	; 0x0b
    1216:	3c 85       	ldd	r19, Y+12	; 0x0c
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	34 f5       	brge	.+76     	; 0x126a <Dio_vidSetPinVal+0x41a>
    121e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1220:	9c 85       	ldd	r25, Y+12	; 0x0c
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	b1 f0       	breq	.+44     	; 0x1252 <Dio_vidSetPinVal+0x402>
    1226:	71 c1       	rjmp	.+738    	; 0x150a <Dio_vidSetPinVal+0x6ba>
    1228:	2b 85       	ldd	r18, Y+11	; 0x0b
    122a:	3c 85       	ldd	r19, Y+12	; 0x0c
    122c:	25 30       	cpi	r18, 0x05	; 5
    122e:	31 05       	cpc	r19, r1
    1230:	71 f1       	breq	.+92     	; 0x128e <Dio_vidSetPinVal+0x43e>
    1232:	8b 85       	ldd	r24, Y+11	; 0x0b
    1234:	9c 85       	ldd	r25, Y+12	; 0x0c
    1236:	85 30       	cpi	r24, 0x05	; 5
    1238:	91 05       	cpc	r25, r1
    123a:	1c f1       	brlt	.+70     	; 0x1282 <Dio_vidSetPinVal+0x432>
    123c:	2b 85       	ldd	r18, Y+11	; 0x0b
    123e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1240:	26 30       	cpi	r18, 0x06	; 6
    1242:	31 05       	cpc	r19, r1
    1244:	51 f1       	breq	.+84     	; 0x129a <Dio_vidSetPinVal+0x44a>
    1246:	8b 85       	ldd	r24, Y+11	; 0x0b
    1248:	9c 85       	ldd	r25, Y+12	; 0x0c
    124a:	87 30       	cpi	r24, 0x07	; 7
    124c:	91 05       	cpc	r25, r1
    124e:	59 f1       	breq	.+86     	; 0x12a6 <Dio_vidSetPinVal+0x456>
    1250:	5c c1       	rjmp	.+696    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTC.Bits.Pin0 =1;
    1252:	e5 e3       	ldi	r30, 0x35	; 53
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24
    125c:	56 c1       	rjmp	.+684    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTC.Bits.Pin1 =1;
    125e:	e5 e3       	ldi	r30, 0x35	; 53
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	82 60       	ori	r24, 0x02	; 2
    1266:	80 83       	st	Z, r24
    1268:	50 c1       	rjmp	.+672    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTC.Bits.Pin2 =1;
    126a:	e5 e3       	ldi	r30, 0x35	; 53
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	84 60       	ori	r24, 0x04	; 4
    1272:	80 83       	st	Z, r24
    1274:	4a c1       	rjmp	.+660    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTC.Bits.Pin3 =1;
    1276:	e5 e3       	ldi	r30, 0x35	; 53
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	80 83       	st	Z, r24
    1280:	44 c1       	rjmp	.+648    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTC.Bits.Pin4 =1;
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 61       	ori	r24, 0x10	; 16
    128a:	80 83       	st	Z, r24
    128c:	3e c1       	rjmp	.+636    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTC.Bits.Pin5 =1;
    128e:	e5 e3       	ldi	r30, 0x35	; 53
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	80 83       	st	Z, r24
    1298:	38 c1       	rjmp	.+624    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTC.Bits.Pin6 =1;
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 64       	ori	r24, 0x40	; 64
    12a2:	80 83       	st	Z, r24
    12a4:	32 c1       	rjmp	.+612    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTC.Bits.Pin7 =1;
    12a6:	e5 e3       	ldi	r30, 0x35	; 53
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 68       	ori	r24, 0x80	; 128
    12ae:	80 83       	st	Z, r24
    12b0:	2c c1       	rjmp	.+600    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3a 87       	std	Y+10, r19	; 0x0a
    12ba:	29 87       	std	Y+9, r18	; 0x09
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	91 05       	cpc	r25, r1
    12c4:	d9 f1       	breq	.+118    	; 0x133c <Dio_vidSetPinVal+0x4ec>
    12c6:	29 85       	ldd	r18, Y+9	; 0x09
    12c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ca:	24 30       	cpi	r18, 0x04	; 4
    12cc:	31 05       	cpc	r19, r1
    12ce:	7c f4       	brge	.+30     	; 0x12ee <Dio_vidSetPinVal+0x49e>
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	91 05       	cpc	r25, r1
    12d8:	29 f1       	breq	.+74     	; 0x1324 <Dio_vidSetPinVal+0x4d4>
    12da:	29 85       	ldd	r18, Y+9	; 0x09
    12dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	34 f5       	brge	.+76     	; 0x1330 <Dio_vidSetPinVal+0x4e0>
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	b1 f0       	breq	.+44     	; 0x1318 <Dio_vidSetPinVal+0x4c8>
    12ec:	0e c1       	rjmp	.+540    	; 0x150a <Dio_vidSetPinVal+0x6ba>
    12ee:	29 85       	ldd	r18, Y+9	; 0x09
    12f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12f2:	25 30       	cpi	r18, 0x05	; 5
    12f4:	31 05       	cpc	r19, r1
    12f6:	71 f1       	breq	.+92     	; 0x1354 <Dio_vidSetPinVal+0x504>
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	85 30       	cpi	r24, 0x05	; 5
    12fe:	91 05       	cpc	r25, r1
    1300:	1c f1       	brlt	.+70     	; 0x1348 <Dio_vidSetPinVal+0x4f8>
    1302:	29 85       	ldd	r18, Y+9	; 0x09
    1304:	3a 85       	ldd	r19, Y+10	; 0x0a
    1306:	26 30       	cpi	r18, 0x06	; 6
    1308:	31 05       	cpc	r19, r1
    130a:	51 f1       	breq	.+84     	; 0x1360 <Dio_vidSetPinVal+0x510>
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1310:	87 30       	cpi	r24, 0x07	; 7
    1312:	91 05       	cpc	r25, r1
    1314:	59 f1       	breq	.+86     	; 0x136c <Dio_vidSetPinVal+0x51c>
    1316:	f9 c0       	rjmp	.+498    	; 0x150a <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTC.Bits.Pin0 =0;
    1318:	e5 e3       	ldi	r30, 0x35	; 53
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	80 83       	st	Z, r24
    1322:	f3 c0       	rjmp	.+486    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTC.Bits.Pin1 =0;
    1324:	e5 e3       	ldi	r30, 0x35	; 53
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8d 7f       	andi	r24, 0xFD	; 253
    132c:	80 83       	st	Z, r24
    132e:	ed c0       	rjmp	.+474    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTC.Bits.Pin2 =0;
    1330:	e5 e3       	ldi	r30, 0x35	; 53
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8b 7f       	andi	r24, 0xFB	; 251
    1338:	80 83       	st	Z, r24
    133a:	e7 c0       	rjmp	.+462    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTC.Bits.Pin3 =0;
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	87 7f       	andi	r24, 0xF7	; 247
    1344:	80 83       	st	Z, r24
    1346:	e1 c0       	rjmp	.+450    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTC.Bits.Pin4 =0;
    1348:	e5 e3       	ldi	r30, 0x35	; 53
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8f 7e       	andi	r24, 0xEF	; 239
    1350:	80 83       	st	Z, r24
    1352:	db c0       	rjmp	.+438    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTC.Bits.Pin5 =0;
    1354:	e5 e3       	ldi	r30, 0x35	; 53
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 7d       	andi	r24, 0xDF	; 223
    135c:	80 83       	st	Z, r24
    135e:	d5 c0       	rjmp	.+426    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTC.Bits.Pin6 =0;
    1360:	e5 e3       	ldi	r30, 0x35	; 53
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8f 7b       	andi	r24, 0xBF	; 191
    1368:	80 83       	st	Z, r24
    136a:	cf c0       	rjmp	.+414    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTC.Bits.Pin7 =0;
    136c:	e5 e3       	ldi	r30, 0x35	; 53
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 77       	andi	r24, 0x7F	; 127
    1374:	80 83       	st	Z, r24
    1376:	c9 c0       	rjmp	.+402    	; 0x150a <Dio_vidSetPinVal+0x6ba>
			}
		break;


		case 3:
			if(Val ==1)
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	09 f0       	breq	.+2      	; 0x1380 <Dio_vidSetPinVal+0x530>
    137e:	63 c0       	rjmp	.+198    	; 0x1446 <Dio_vidSetPinVal+0x5f6>
				{
					switch(PinLoc)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	38 87       	std	Y+8, r19	; 0x08
    1388:	2f 83       	std	Y+7, r18	; 0x07
    138a:	8f 81       	ldd	r24, Y+7	; 0x07
    138c:	98 85       	ldd	r25, Y+8	; 0x08
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	d9 f1       	breq	.+118    	; 0x140a <Dio_vidSetPinVal+0x5ba>
    1394:	2f 81       	ldd	r18, Y+7	; 0x07
    1396:	38 85       	ldd	r19, Y+8	; 0x08
    1398:	24 30       	cpi	r18, 0x04	; 4
    139a:	31 05       	cpc	r19, r1
    139c:	7c f4       	brge	.+30     	; 0x13bc <Dio_vidSetPinVal+0x56c>
    139e:	8f 81       	ldd	r24, Y+7	; 0x07
    13a0:	98 85       	ldd	r25, Y+8	; 0x08
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	91 05       	cpc	r25, r1
    13a6:	29 f1       	breq	.+74     	; 0x13f2 <Dio_vidSetPinVal+0x5a2>
    13a8:	2f 81       	ldd	r18, Y+7	; 0x07
    13aa:	38 85       	ldd	r19, Y+8	; 0x08
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	34 f5       	brge	.+76     	; 0x13fe <Dio_vidSetPinVal+0x5ae>
    13b2:	8f 81       	ldd	r24, Y+7	; 0x07
    13b4:	98 85       	ldd	r25, Y+8	; 0x08
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	b1 f0       	breq	.+44     	; 0x13e6 <Dio_vidSetPinVal+0x596>
    13ba:	a7 c0       	rjmp	.+334    	; 0x150a <Dio_vidSetPinVal+0x6ba>
    13bc:	2f 81       	ldd	r18, Y+7	; 0x07
    13be:	38 85       	ldd	r19, Y+8	; 0x08
    13c0:	25 30       	cpi	r18, 0x05	; 5
    13c2:	31 05       	cpc	r19, r1
    13c4:	71 f1       	breq	.+92     	; 0x1422 <Dio_vidSetPinVal+0x5d2>
    13c6:	8f 81       	ldd	r24, Y+7	; 0x07
    13c8:	98 85       	ldd	r25, Y+8	; 0x08
    13ca:	85 30       	cpi	r24, 0x05	; 5
    13cc:	91 05       	cpc	r25, r1
    13ce:	1c f1       	brlt	.+70     	; 0x1416 <Dio_vidSetPinVal+0x5c6>
    13d0:	2f 81       	ldd	r18, Y+7	; 0x07
    13d2:	38 85       	ldd	r19, Y+8	; 0x08
    13d4:	26 30       	cpi	r18, 0x06	; 6
    13d6:	31 05       	cpc	r19, r1
    13d8:	51 f1       	breq	.+84     	; 0x142e <Dio_vidSetPinVal+0x5de>
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	98 85       	ldd	r25, Y+8	; 0x08
    13de:	87 30       	cpi	r24, 0x07	; 7
    13e0:	91 05       	cpc	r25, r1
    13e2:	59 f1       	breq	.+86     	; 0x143a <Dio_vidSetPinVal+0x5ea>
    13e4:	92 c0       	rjmp	.+292    	; 0x150a <Dio_vidSetPinVal+0x6ba>
					{
						case 0:
							PORTD.Bits.Pin0 =1;
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	81 60       	ori	r24, 0x01	; 1
    13ee:	80 83       	st	Z, r24
    13f0:	8c c0       	rjmp	.+280    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 1:
							PORTD.Bits.Pin1 =1;
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	80 83       	st	Z, r24
    13fc:	86 c0       	rjmp	.+268    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 2:
							PORTD.Bits.Pin2 =1;
    13fe:	e2 e3       	ldi	r30, 0x32	; 50
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	84 60       	ori	r24, 0x04	; 4
    1406:	80 83       	st	Z, r24
    1408:	80 c0       	rjmp	.+256    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 3:
							PORTD.Bits.Pin3 =1;
    140a:	e2 e3       	ldi	r30, 0x32	; 50
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	80 83       	st	Z, r24
    1414:	7a c0       	rjmp	.+244    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 4:
							PORTD.Bits.Pin4 =1;
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 61       	ori	r24, 0x10	; 16
    141e:	80 83       	st	Z, r24
    1420:	74 c0       	rjmp	.+232    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 5:
							PORTD.Bits.Pin5 =1;
    1422:	e2 e3       	ldi	r30, 0x32	; 50
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 62       	ori	r24, 0x20	; 32
    142a:	80 83       	st	Z, r24
    142c:	6e c0       	rjmp	.+220    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 6:
							PORTD.Bits.Pin6 =1;
    142e:	e2 e3       	ldi	r30, 0x32	; 50
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 64       	ori	r24, 0x40	; 64
    1436:	80 83       	st	Z, r24
    1438:	68 c0       	rjmp	.+208    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;

						case 7:
							PORTD.Bits.Pin7 =1;
    143a:	e2 e3       	ldi	r30, 0x32	; 50
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	80 68       	ori	r24, 0x80	; 128
    1442:	80 83       	st	Z, r24
    1444:	62 c0       	rjmp	.+196    	; 0x150a <Dio_vidSetPinVal+0x6ba>
						break;
					}
				}
			else
			{
				switch(PinLoc)
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3e 83       	std	Y+6, r19	; 0x06
    144e:	2d 83       	std	Y+5, r18	; 0x05
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	91 05       	cpc	r25, r1
    1458:	d9 f1       	breq	.+118    	; 0x14d0 <Dio_vidSetPinVal+0x680>
    145a:	2d 81       	ldd	r18, Y+5	; 0x05
    145c:	3e 81       	ldd	r19, Y+6	; 0x06
    145e:	24 30       	cpi	r18, 0x04	; 4
    1460:	31 05       	cpc	r19, r1
    1462:	7c f4       	brge	.+30     	; 0x1482 <Dio_vidSetPinVal+0x632>
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	91 05       	cpc	r25, r1
    146c:	29 f1       	breq	.+74     	; 0x14b8 <Dio_vidSetPinVal+0x668>
    146e:	2d 81       	ldd	r18, Y+5	; 0x05
    1470:	3e 81       	ldd	r19, Y+6	; 0x06
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	34 f5       	brge	.+76     	; 0x14c4 <Dio_vidSetPinVal+0x674>
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	b1 f0       	breq	.+44     	; 0x14ac <Dio_vidSetPinVal+0x65c>
    1480:	44 c0       	rjmp	.+136    	; 0x150a <Dio_vidSetPinVal+0x6ba>
    1482:	2d 81       	ldd	r18, Y+5	; 0x05
    1484:	3e 81       	ldd	r19, Y+6	; 0x06
    1486:	25 30       	cpi	r18, 0x05	; 5
    1488:	31 05       	cpc	r19, r1
    148a:	71 f1       	breq	.+92     	; 0x14e8 <Dio_vidSetPinVal+0x698>
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	85 30       	cpi	r24, 0x05	; 5
    1492:	91 05       	cpc	r25, r1
    1494:	1c f1       	brlt	.+70     	; 0x14dc <Dio_vidSetPinVal+0x68c>
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	3e 81       	ldd	r19, Y+6	; 0x06
    149a:	26 30       	cpi	r18, 0x06	; 6
    149c:	31 05       	cpc	r19, r1
    149e:	51 f1       	breq	.+84     	; 0x14f4 <Dio_vidSetPinVal+0x6a4>
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	87 30       	cpi	r24, 0x07	; 7
    14a6:	91 05       	cpc	r25, r1
    14a8:	59 f1       	breq	.+86     	; 0x1500 <Dio_vidSetPinVal+0x6b0>
    14aa:	2f c0       	rjmp	.+94     	; 0x150a <Dio_vidSetPinVal+0x6ba>
				{
					case 0:
						PORTD.Bits.Pin0 =0;
    14ac:	e2 e3       	ldi	r30, 0x32	; 50
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	80 83       	st	Z, r24
    14b6:	29 c0       	rjmp	.+82     	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 1:
						PORTD.Bits.Pin1 =0;
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8d 7f       	andi	r24, 0xFD	; 253
    14c0:	80 83       	st	Z, r24
    14c2:	23 c0       	rjmp	.+70     	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 2:
						PORTD.Bits.Pin2 =0;
    14c4:	e2 e3       	ldi	r30, 0x32	; 50
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8b 7f       	andi	r24, 0xFB	; 251
    14cc:	80 83       	st	Z, r24
    14ce:	1d c0       	rjmp	.+58     	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 3:
						PORTD.Bits.Pin3 =0;
    14d0:	e2 e3       	ldi	r30, 0x32	; 50
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	87 7f       	andi	r24, 0xF7	; 247
    14d8:	80 83       	st	Z, r24
    14da:	17 c0       	rjmp	.+46     	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 4:
						PORTD.Bits.Pin4 =0;
    14dc:	e2 e3       	ldi	r30, 0x32	; 50
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7e       	andi	r24, 0xEF	; 239
    14e4:	80 83       	st	Z, r24
    14e6:	11 c0       	rjmp	.+34     	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 5:
						PORTD.Bits.Pin5 =0;
    14e8:	e2 e3       	ldi	r30, 0x32	; 50
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7d       	andi	r24, 0xDF	; 223
    14f0:	80 83       	st	Z, r24
    14f2:	0b c0       	rjmp	.+22     	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 6:
						PORTD.Bits.Pin6 =0;
    14f4:	e2 e3       	ldi	r30, 0x32	; 50
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 7b       	andi	r24, 0xBF	; 191
    14fc:	80 83       	st	Z, r24
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <Dio_vidSetPinVal+0x6ba>
					break;

					case 7:
						PORTD.Bits.Pin7 =0;
    1500:	e2 e3       	ldi	r30, 0x32	; 50
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8f 77       	andi	r24, 0x7F	; 127
    1508:	80 83       	st	Z, r24
					break;
				}
			}
		break;
	}
}
    150a:	66 96       	adiw	r28, 0x16	; 22
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <Led_vidInit>:
#include "Dio_int.h"
#include "Led_int.h"
#include "Led_cfg.h"

void Led_vidInit(u8 LedId)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <Led_vidInit+0x6>
    1522:	0f 92       	push	r0
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3b 83       	std	Y+3, r19	; 0x03
    1532:	2a 83       	std	Y+2, r18	; 0x02
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	91 05       	cpc	r25, r1
    153c:	c9 f1       	breq	.+114    	; 0x15b0 <Led_vidInit+0x94>
    153e:	2a 81       	ldd	r18, Y+2	; 0x02
    1540:	3b 81       	ldd	r19, Y+3	; 0x03
    1542:	25 30       	cpi	r18, 0x05	; 5
    1544:	31 05       	cpc	r19, r1
    1546:	84 f4       	brge	.+32     	; 0x1568 <Led_vidInit+0x4c>
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	9b 81       	ldd	r25, Y+3	; 0x03
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	91 05       	cpc	r25, r1
    1550:	29 f1       	breq	.+74     	; 0x159c <Led_vidInit+0x80>
    1552:	2a 81       	ldd	r18, Y+2	; 0x02
    1554:	3b 81       	ldd	r19, Y+3	; 0x03
    1556:	23 30       	cpi	r18, 0x03	; 3
    1558:	31 05       	cpc	r19, r1
    155a:	2c f5       	brge	.+74     	; 0x15a6 <Led_vidInit+0x8a>
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	b1 f0       	breq	.+44     	; 0x1592 <Led_vidInit+0x76>
    1566:	3c c0       	rjmp	.+120    	; 0x15e0 <Led_vidInit+0xc4>
    1568:	2a 81       	ldd	r18, Y+2	; 0x02
    156a:	3b 81       	ldd	r19, Y+3	; 0x03
    156c:	26 30       	cpi	r18, 0x06	; 6
    156e:	31 05       	cpc	r19, r1
    1570:	49 f1       	breq	.+82     	; 0x15c4 <Led_vidInit+0xa8>
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	86 30       	cpi	r24, 0x06	; 6
    1578:	91 05       	cpc	r25, r1
    157a:	fc f0       	brlt	.+62     	; 0x15ba <Led_vidInit+0x9e>
    157c:	2a 81       	ldd	r18, Y+2	; 0x02
    157e:	3b 81       	ldd	r19, Y+3	; 0x03
    1580:	27 30       	cpi	r18, 0x07	; 7
    1582:	31 05       	cpc	r19, r1
    1584:	21 f1       	breq	.+72     	; 0x15ce <Led_vidInit+0xb2>
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	9b 81       	ldd	r25, Y+3	; 0x03
    158a:	88 30       	cpi	r24, 0x08	; 8
    158c:	91 05       	cpc	r25, r1
    158e:	21 f1       	breq	.+72     	; 0x15d8 <Led_vidInit+0xbc>
    1590:	27 c0       	rjmp	.+78     	; 0x15e0 <Led_vidInit+0xc4>
	{
		case 1: Dio_vidSetPinDir(LED_8ID_1 , DIO_u8OUTPUT); break;
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_vidSetPinDir>
    159a:	22 c0       	rjmp	.+68     	; 0x15e0 <Led_vidInit+0xc4>
		case 2: Dio_vidSetPinDir(LED_8ID_2 , DIO_u8OUTPUT); break;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_vidSetPinDir>
    15a4:	1d c0       	rjmp	.+58     	; 0x15e0 <Led_vidInit+0xc4>
		case 3: Dio_vidSetPinDir(LED_8ID_3 , DIO_u8OUTPUT); break;
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	61 e0       	ldi	r22, 0x01	; 1
    15aa:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_vidSetPinDir>
    15ae:	18 c0       	rjmp	.+48     	; 0x15e0 <Led_vidInit+0xc4>
		case 4: Dio_vidSetPinDir(LED_8ID_4 , DIO_u8OUTPUT); break;
    15b0:	83 e1       	ldi	r24, 0x13	; 19
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_vidSetPinDir>
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <Led_vidInit+0xc4>
		case 5: Dio_vidSetPinDir(LED_8ID_5 , DIO_u8OUTPUT); break;
    15ba:	84 e1       	ldi	r24, 0x14	; 20
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_vidSetPinDir>
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <Led_vidInit+0xc4>
		case 6: Dio_vidSetPinDir(LED_8ID_6 , DIO_u8OUTPUT); break;
    15c4:	85 e1       	ldi	r24, 0x15	; 21
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_vidSetPinDir>
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <Led_vidInit+0xc4>
		case 7: Dio_vidSetPinDir(LED_8ID_7 , DIO_u8OUTPUT); break;
    15ce:	86 e1       	ldi	r24, 0x16	; 22
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_vidSetPinDir>
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <Led_vidInit+0xc4>
		case 8: Dio_vidSetPinDir(LED_8ID_8 , DIO_u8OUTPUT); break;
    15d8:	87 e1       	ldi	r24, 0x17	; 23
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_vidSetPinDir>
	}

}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <Led_vidTurnOn>:

void Led_vidTurnOn(u8 LedId)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <Led_vidTurnOn+0x6>
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3b 83       	std	Y+3, r19	; 0x03
    1602:	2a 83       	std	Y+2, r18	; 0x02
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	84 30       	cpi	r24, 0x04	; 4
    160a:	91 05       	cpc	r25, r1
    160c:	c9 f1       	breq	.+114    	; 0x1680 <Led_vidTurnOn+0x94>
    160e:	2a 81       	ldd	r18, Y+2	; 0x02
    1610:	3b 81       	ldd	r19, Y+3	; 0x03
    1612:	25 30       	cpi	r18, 0x05	; 5
    1614:	31 05       	cpc	r19, r1
    1616:	84 f4       	brge	.+32     	; 0x1638 <Led_vidTurnOn+0x4c>
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	91 05       	cpc	r25, r1
    1620:	29 f1       	breq	.+74     	; 0x166c <Led_vidTurnOn+0x80>
    1622:	2a 81       	ldd	r18, Y+2	; 0x02
    1624:	3b 81       	ldd	r19, Y+3	; 0x03
    1626:	23 30       	cpi	r18, 0x03	; 3
    1628:	31 05       	cpc	r19, r1
    162a:	2c f5       	brge	.+74     	; 0x1676 <Led_vidTurnOn+0x8a>
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	9b 81       	ldd	r25, Y+3	; 0x03
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	91 05       	cpc	r25, r1
    1634:	b1 f0       	breq	.+44     	; 0x1662 <Led_vidTurnOn+0x76>
    1636:	3c c0       	rjmp	.+120    	; 0x16b0 <Led_vidTurnOn+0xc4>
    1638:	2a 81       	ldd	r18, Y+2	; 0x02
    163a:	3b 81       	ldd	r19, Y+3	; 0x03
    163c:	26 30       	cpi	r18, 0x06	; 6
    163e:	31 05       	cpc	r19, r1
    1640:	49 f1       	breq	.+82     	; 0x1694 <Led_vidTurnOn+0xa8>
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	86 30       	cpi	r24, 0x06	; 6
    1648:	91 05       	cpc	r25, r1
    164a:	fc f0       	brlt	.+62     	; 0x168a <Led_vidTurnOn+0x9e>
    164c:	2a 81       	ldd	r18, Y+2	; 0x02
    164e:	3b 81       	ldd	r19, Y+3	; 0x03
    1650:	27 30       	cpi	r18, 0x07	; 7
    1652:	31 05       	cpc	r19, r1
    1654:	21 f1       	breq	.+72     	; 0x169e <Led_vidTurnOn+0xb2>
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	88 30       	cpi	r24, 0x08	; 8
    165c:	91 05       	cpc	r25, r1
    165e:	21 f1       	breq	.+72     	; 0x16a8 <Led_vidTurnOn+0xbc>
    1660:	27 c0       	rjmp	.+78     	; 0x16b0 <Led_vidTurnOn+0xc4>
	{
		case 1: Dio_vidSetPinVal(LED_8ID_1 , DIO_u8HIGH); break;
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    166a:	22 c0       	rjmp	.+68     	; 0x16b0 <Led_vidTurnOn+0xc4>
		case 2: Dio_vidSetPinVal(LED_8ID_2 , DIO_u8HIGH); break;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    1674:	1d c0       	rjmp	.+58     	; 0x16b0 <Led_vidTurnOn+0xc4>
		case 3: Dio_vidSetPinVal(LED_8ID_3 , DIO_u8HIGH); break;
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    167e:	18 c0       	rjmp	.+48     	; 0x16b0 <Led_vidTurnOn+0xc4>
		case 4: Dio_vidSetPinVal(LED_8ID_4 , DIO_u8HIGH); break;
    1680:	83 e1       	ldi	r24, 0x13	; 19
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <Led_vidTurnOn+0xc4>
		case 5: Dio_vidSetPinVal(LED_8ID_5 , DIO_u8HIGH); break;
    168a:	84 e1       	ldi	r24, 0x14	; 20
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <Led_vidTurnOn+0xc4>
		case 6: Dio_vidSetPinVal(LED_8ID_6 , DIO_u8HIGH); break;
    1694:	85 e1       	ldi	r24, 0x15	; 21
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    169c:	09 c0       	rjmp	.+18     	; 0x16b0 <Led_vidTurnOn+0xc4>
		case 7: Dio_vidSetPinVal(LED_8ID_7 , DIO_u8HIGH); break;
    169e:	86 e1       	ldi	r24, 0x16	; 22
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <Led_vidTurnOn+0xc4>
		case 8: Dio_vidSetPinVal(LED_8ID_8 , DIO_u8HIGH); break;
    16a8:	87 e1       	ldi	r24, 0x17	; 23
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <Led_vidTurnOff>:

void Led_vidTurnOff(u8 LedId)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <Led_vidTurnOff+0x6>
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3b 83       	std	Y+3, r19	; 0x03
    16d2:	2a 83       	std	Y+2, r18	; 0x02
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	9b 81       	ldd	r25, Y+3	; 0x03
    16d8:	84 30       	cpi	r24, 0x04	; 4
    16da:	91 05       	cpc	r25, r1
    16dc:	c9 f1       	breq	.+114    	; 0x1750 <Led_vidTurnOff+0x94>
    16de:	2a 81       	ldd	r18, Y+2	; 0x02
    16e0:	3b 81       	ldd	r19, Y+3	; 0x03
    16e2:	25 30       	cpi	r18, 0x05	; 5
    16e4:	31 05       	cpc	r19, r1
    16e6:	84 f4       	brge	.+32     	; 0x1708 <Led_vidTurnOff+0x4c>
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	9b 81       	ldd	r25, Y+3	; 0x03
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	91 05       	cpc	r25, r1
    16f0:	29 f1       	breq	.+74     	; 0x173c <Led_vidTurnOff+0x80>
    16f2:	2a 81       	ldd	r18, Y+2	; 0x02
    16f4:	3b 81       	ldd	r19, Y+3	; 0x03
    16f6:	23 30       	cpi	r18, 0x03	; 3
    16f8:	31 05       	cpc	r19, r1
    16fa:	2c f5       	brge	.+74     	; 0x1746 <Led_vidTurnOff+0x8a>
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	b1 f0       	breq	.+44     	; 0x1732 <Led_vidTurnOff+0x76>
    1706:	3c c0       	rjmp	.+120    	; 0x1780 <Led_vidTurnOff+0xc4>
    1708:	2a 81       	ldd	r18, Y+2	; 0x02
    170a:	3b 81       	ldd	r19, Y+3	; 0x03
    170c:	26 30       	cpi	r18, 0x06	; 6
    170e:	31 05       	cpc	r19, r1
    1710:	49 f1       	breq	.+82     	; 0x1764 <Led_vidTurnOff+0xa8>
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	86 30       	cpi	r24, 0x06	; 6
    1718:	91 05       	cpc	r25, r1
    171a:	fc f0       	brlt	.+62     	; 0x175a <Led_vidTurnOff+0x9e>
    171c:	2a 81       	ldd	r18, Y+2	; 0x02
    171e:	3b 81       	ldd	r19, Y+3	; 0x03
    1720:	27 30       	cpi	r18, 0x07	; 7
    1722:	31 05       	cpc	r19, r1
    1724:	21 f1       	breq	.+72     	; 0x176e <Led_vidTurnOff+0xb2>
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	88 30       	cpi	r24, 0x08	; 8
    172c:	91 05       	cpc	r25, r1
    172e:	21 f1       	breq	.+72     	; 0x1778 <Led_vidTurnOff+0xbc>
    1730:	27 c0       	rjmp	.+78     	; 0x1780 <Led_vidTurnOff+0xc4>
	{
		case 1: Dio_vidSetPinVal(LED_8ID_1 , DIO_u8LOW); break;
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    173a:	22 c0       	rjmp	.+68     	; 0x1780 <Led_vidTurnOff+0xc4>
		case 2: Dio_vidSetPinVal(LED_8ID_2 , DIO_u8LOW); break;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    1744:	1d c0       	rjmp	.+58     	; 0x1780 <Led_vidTurnOff+0xc4>
		case 3: Dio_vidSetPinVal(LED_8ID_3 , DIO_u8LOW); break;
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    174e:	18 c0       	rjmp	.+48     	; 0x1780 <Led_vidTurnOff+0xc4>
		case 4: Dio_vidSetPinVal(LED_8ID_4 , DIO_u8LOW); break;
    1750:	83 e1       	ldi	r24, 0x13	; 19
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <Led_vidTurnOff+0xc4>
		case 5: Dio_vidSetPinVal(LED_8ID_5 , DIO_u8LOW); break;
    175a:	84 e1       	ldi	r24, 0x14	; 20
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <Led_vidTurnOff+0xc4>
		case 6: Dio_vidSetPinVal(LED_8ID_6 , DIO_u8LOW); break;
    1764:	85 e1       	ldi	r24, 0x15	; 21
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <Led_vidTurnOff+0xc4>
		case 7: Dio_vidSetPinVal(LED_8ID_7 , DIO_u8LOW); break;
    176e:	86 e1       	ldi	r24, 0x16	; 22
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <Led_vidTurnOff+0xc4>
		case 8: Dio_vidSetPinVal(LED_8ID_8 , DIO_u8LOW); break;
    1778:	87 e1       	ldi	r24, 0x17	; 23
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	0e 94 28 07 	call	0xe50	; 0xe50 <Dio_vidSetPinVal>
	}
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <xEventGroupCreate+0x6>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    1796:	8b e0       	ldi	r24, 0x0B	; 11
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <pvPortMalloc>
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	49 f0       	breq	.+18     	; 0x17bc <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    17aa:	e9 81       	ldd	r30, Y+1	; 0x01
    17ac:	fa 81       	ldd	r31, Y+2	; 0x02
    17ae:	11 82       	std	Z+1, r1	; 0x01
    17b0:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	02 96       	adiw	r24, 0x02	; 2
    17b8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	60 97       	sbiw	r28, 0x10	; 16
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	9a 87       	std	Y+10, r25	; 0x0a
    17e0:	89 87       	std	Y+9, r24	; 0x09
    17e2:	7c 87       	std	Y+12, r23	; 0x0c
    17e4:	6b 87       	std	Y+11, r22	; 0x0b
    17e6:	5e 87       	std	Y+14, r21	; 0x0e
    17e8:	4d 87       	std	Y+13, r20	; 0x0d
    17ea:	38 8b       	std	Y+16, r19	; 0x10
    17ec:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	9c 83       	std	Y+4, r25	; 0x04
    17f4:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    17f6:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    17f8:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    17fc:	eb 81       	ldd	r30, Y+3	; 0x03
    17fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	98 87       	std	Y+8, r25	; 0x08
    1806:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	2b 85       	ldd	r18, Y+11	; 0x0b
    180e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1810:	b9 01       	movw	r22, r18
    1812:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1816:	2f 81       	ldd	r18, Y+7	; 0x07
    1818:	38 85       	ldd	r19, Y+8	; 0x08
    181a:	8b 85       	ldd	r24, Y+11	; 0x0b
    181c:	9c 85       	ldd	r25, Y+12	; 0x0c
    181e:	28 2b       	or	r18, r24
    1820:	39 2b       	or	r19, r25
    1822:	8d 85       	ldd	r24, Y+13	; 0x0d
    1824:	9e 85       	ldd	r25, Y+14	; 0x0e
    1826:	28 23       	and	r18, r24
    1828:	39 23       	and	r19, r25
    182a:	8d 85       	ldd	r24, Y+13	; 0x0d
    182c:	9e 85       	ldd	r25, Y+14	; 0x0e
    182e:	28 17       	cp	r18, r24
    1830:	39 07       	cpc	r19, r25
    1832:	c9 f4       	brne	.+50     	; 0x1866 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    1834:	2f 81       	ldd	r18, Y+7	; 0x07
    1836:	38 85       	ldd	r19, Y+8	; 0x08
    1838:	8b 85       	ldd	r24, Y+11	; 0x0b
    183a:	9c 85       	ldd	r25, Y+12	; 0x0c
    183c:	82 2b       	or	r24, r18
    183e:	93 2b       	or	r25, r19
    1840:	9e 83       	std	Y+6, r25	; 0x06
    1842:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1844:	eb 81       	ldd	r30, Y+3	; 0x03
    1846:	fc 81       	ldd	r31, Y+4	; 0x04
    1848:	20 81       	ld	r18, Z
    184a:	31 81       	ldd	r19, Z+1	; 0x01
    184c:	8d 85       	ldd	r24, Y+13	; 0x0d
    184e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1850:	80 95       	com	r24
    1852:	90 95       	com	r25
    1854:	82 23       	and	r24, r18
    1856:	93 23       	and	r25, r19
    1858:	eb 81       	ldd	r30, Y+3	; 0x03
    185a:	fc 81       	ldd	r31, Y+4	; 0x04
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	80 83       	st	Z, r24

			xTicksToWait = 0;
    1860:	18 8a       	std	Y+16, r1	; 0x10
    1862:	1f 86       	std	Y+15, r1	; 0x0f
    1864:	1e c0       	rjmp	.+60     	; 0x18a2 <xEventGroupSync+0xd8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    1866:	8f 85       	ldd	r24, Y+15	; 0x0f
    1868:	98 89       	ldd	r25, Y+16	; 0x10
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	91 f0       	breq	.+36     	; 0x1892 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	bc 01       	movw	r22, r24
    1874:	6e 5f       	subi	r22, 0xFE	; 254
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	8d 85       	ldd	r24, Y+13	; 0x0d
    187a:	9e 85       	ldd	r25, Y+14	; 0x0e
    187c:	9c 01       	movw	r18, r24
    187e:	35 60       	ori	r19, 0x05	; 5
    1880:	4f 85       	ldd	r20, Y+15	; 0x0f
    1882:	58 89       	ldd	r21, Y+16	; 0x10
    1884:	cb 01       	movw	r24, r22
    1886:	b9 01       	movw	r22, r18
    1888:	0e 94 9f 29 	call	0x533e	; 0x533e <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    188c:	1e 82       	std	Y+6, r1	; 0x06
    188e:	1d 82       	std	Y+5, r1	; 0x05
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <xEventGroupSync+0xd8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    1892:	eb 81       	ldd	r30, Y+3	; 0x03
    1894:	fc 81       	ldd	r31, Y+4	; 0x04
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
				xTimeoutOccurred = pdTRUE;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    18a2:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    18a6:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    18a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18aa:	98 89       	ldd	r25, Y+16	; 0x10
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <xEventGroupSync+0xe8>
    18b0:	3a c0       	rjmp	.+116    	; 0x1926 <xEventGroupSync+0x15c>
	{
		if( xAlreadyYielded == pdFALSE )
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	88 23       	and	r24, r24
    18b6:	11 f4       	brne	.+4      	; 0x18bc <xEventGroupSync+0xf2>
		{
			portYIELD_WITHIN_API();
    18b8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    18bc:	0e 94 12 2c 	call	0x5824	; 0x5824 <uxTaskResetEventItemValue>
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	80 70       	andi	r24, 0x00	; 0
    18ca:	92 70       	andi	r25, 0x02	; 2
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	31 f5       	brne	.+76     	; 0x191c <xEventGroupSync+0x152>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    18d6:	eb 81       	ldd	r30, Y+3	; 0x03
    18d8:	fc 81       	ldd	r31, Y+4	; 0x04
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    18e2:	2d 81       	ldd	r18, Y+5	; 0x05
    18e4:	3e 81       	ldd	r19, Y+6	; 0x06
    18e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ea:	28 23       	and	r18, r24
    18ec:	39 23       	and	r19, r25
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	28 17       	cp	r18, r24
    18f4:	39 07       	cpc	r19, r25
    18f6:	71 f4       	brne	.+28     	; 0x1914 <xEventGroupSync+0x14a>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    18f8:	eb 81       	ldd	r30, Y+3	; 0x03
    18fa:	fc 81       	ldd	r31, Y+4	; 0x04
    18fc:	20 81       	ld	r18, Z
    18fe:	31 81       	ldd	r19, Z+1	; 0x01
    1900:	8d 85       	ldd	r24, Y+13	; 0x0d
    1902:	9e 85       	ldd	r25, Y+14	; 0x0e
    1904:	80 95       	com	r24
    1906:	90 95       	com	r25
    1908:	82 23       	and	r24, r18
    190a:	93 23       	and	r25, r19
    190c:	eb 81       	ldd	r30, Y+3	; 0x03
    190e:	fc 81       	ldd	r31, Y+4	; 0x04
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	90 70       	andi	r25, 0x00	; 0
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
}
    192a:	60 96       	adiw	r28, 0x10	; 16
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	63 97       	sbiw	r28, 0x13	; 19
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	9d 87       	std	Y+13, r25	; 0x0d
    1956:	8c 87       	std	Y+12, r24	; 0x0c
    1958:	7f 87       	std	Y+15, r23	; 0x0f
    195a:	6e 87       	std	Y+14, r22	; 0x0e
    195c:	48 8b       	std	Y+16, r20	; 0x10
    195e:	29 8b       	std	Y+17, r18	; 0x11
    1960:	1b 8b       	std	Y+19, r17	; 0x13
    1962:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = xEventGroup;
    1964:	8c 85       	ldd	r24, Y+12	; 0x0c
    1966:	9d 85       	ldd	r25, Y+13	; 0x0d
    1968:	9b 87       	std	Y+11, r25	; 0x0b
    196a:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    196c:	1f 82       	std	Y+7, r1	; 0x07
    196e:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    1970:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1972:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    1976:	ea 85       	ldd	r30, Y+10	; 0x0a
    1978:	fb 85       	ldd	r31, Y+11	; 0x0b
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	2e 85       	ldd	r18, Y+14	; 0x0e
    1988:	3f 85       	ldd	r19, Y+15	; 0x0f
    198a:	b9 01       	movw	r22, r18
    198c:	49 89       	ldd	r20, Y+17	; 0x11
    198e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <prvTestWaitCondition>
    1992:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	88 23       	and	r24, r24
    1998:	c1 f0       	breq	.+48     	; 0x19ca <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	99 87       	std	Y+9, r25	; 0x09
    19a0:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    19a2:	1b 8a       	std	Y+19, r1	; 0x13
    19a4:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    19a6:	88 89       	ldd	r24, Y+16	; 0x10
    19a8:	88 23       	and	r24, r24
    19aa:	e9 f1       	breq	.+122    	; 0x1a26 <xEventGroupWaitBits+0xea>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    19ac:	ea 85       	ldd	r30, Y+10	; 0x0a
    19ae:	fb 85       	ldd	r31, Y+11	; 0x0b
    19b0:	20 81       	ld	r18, Z
    19b2:	31 81       	ldd	r19, Z+1	; 0x01
    19b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    19b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    19b8:	80 95       	com	r24
    19ba:	90 95       	com	r25
    19bc:	82 23       	and	r24, r18
    19be:	93 23       	and	r25, r19
    19c0:	ea 85       	ldd	r30, Y+10	; 0x0a
    19c2:	fb 85       	ldd	r31, Y+11	; 0x0b
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	2e c0       	rjmp	.+92     	; 0x1a26 <xEventGroupWaitBits+0xea>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    19ca:	8a 89       	ldd	r24, Y+18	; 0x12
    19cc:	9b 89       	ldd	r25, Y+19	; 0x13
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	99 87       	std	Y+9, r25	; 0x09
    19d8:	88 87       	std	Y+8, r24	; 0x08
			xTimeoutOccurred = pdTRUE;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	23 c0       	rjmp	.+70     	; 0x1a26 <xEventGroupWaitBits+0xea>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    19e0:	88 89       	ldd	r24, Y+16	; 0x10
    19e2:	88 23       	and	r24, r24
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    19e6:	8e 81       	ldd	r24, Y+6	; 0x06
    19e8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ea:	91 60       	ori	r25, 0x01	; 1
    19ec:	9f 83       	std	Y+7, r25	; 0x07
    19ee:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    19f0:	89 89       	ldd	r24, Y+17	; 0x11
    19f2:	88 23       	and	r24, r24
    19f4:	29 f0       	breq	.+10     	; 0x1a00 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    19f6:	8e 81       	ldd	r24, Y+6	; 0x06
    19f8:	9f 81       	ldd	r25, Y+7	; 0x07
    19fa:	94 60       	ori	r25, 0x04	; 4
    19fc:	9f 83       	std	Y+7, r25	; 0x07
    19fe:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a04:	bc 01       	movw	r22, r24
    1a06:	6e 5f       	subi	r22, 0xFE	; 254
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a0c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a10:	9f 81       	ldd	r25, Y+7	; 0x07
    1a12:	28 2b       	or	r18, r24
    1a14:	39 2b       	or	r19, r25
    1a16:	4a 89       	ldd	r20, Y+18	; 0x12
    1a18:	5b 89       	ldd	r21, Y+19	; 0x13
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	0e 94 9f 29 	call	0x533e	; 0x533e <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    1a22:	19 86       	std	Y+9, r1	; 0x09
    1a24:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    1a26:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    1a2a:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    1a2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a2e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <xEventGroupWaitBits+0xfa>
    1a34:	3c c0       	rjmp	.+120    	; 0x1aae <xEventGroupWaitBits+0x172>
	{
		if( xAlreadyYielded == pdFALSE )
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	88 23       	and	r24, r24
    1a3a:	11 f4       	brne	.+4      	; 0x1a40 <xEventGroupWaitBits+0x104>
		{
			portYIELD_WITHIN_API();
    1a3c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1a40:	0e 94 12 2c 	call	0x5824	; 0x5824 <uxTaskResetEventItemValue>
    1a44:	99 87       	std	Y+9, r25	; 0x09
    1a46:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1a48:	88 85       	ldd	r24, Y+8	; 0x08
    1a4a:	99 85       	ldd	r25, Y+9	; 0x09
    1a4c:	80 70       	andi	r24, 0x00	; 0
    1a4e:	92 70       	andi	r25, 0x02	; 2
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	41 f5       	brne	.+80     	; 0x1aa4 <xEventGroupWaitBits+0x168>
		{
			taskENTER_CRITICAL();
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    1a5a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a5c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	99 87       	std	Y+9, r25	; 0x09
    1a64:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    1a66:	88 85       	ldd	r24, Y+8	; 0x08
    1a68:	99 85       	ldd	r25, Y+9	; 0x09
    1a6a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a6c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a6e:	b9 01       	movw	r22, r18
    1a70:	49 89       	ldd	r20, Y+17	; 0x11
    1a72:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <prvTestWaitCondition>
    1a76:	88 23       	and	r24, r24
    1a78:	89 f0       	breq	.+34     	; 0x1a9c <xEventGroupWaitBits+0x160>
				{
					if( xClearOnExit != pdFALSE )
    1a7a:	88 89       	ldd	r24, Y+16	; 0x10
    1a7c:	88 23       	and	r24, r24
    1a7e:	71 f0       	breq	.+28     	; 0x1a9c <xEventGroupWaitBits+0x160>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1a80:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a82:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a84:	20 81       	ld	r18, Z
    1a86:	31 81       	ldd	r19, Z+1	; 0x01
    1a88:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a8c:	80 95       	com	r24
    1a8e:	90 95       	com	r25
    1a90:	82 23       	and	r24, r18
    1a92:	93 23       	and	r25, r19
    1a94:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a96:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
			}
			taskEXIT_CRITICAL();
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1aa4:	88 85       	ldd	r24, Y+8	; 0x08
    1aa6:	99 85       	ldd	r25, Y+9	; 0x09
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	99 87       	std	Y+9, r25	; 0x09
    1aac:	88 87       	std	Y+8, r24	; 0x08
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    1aae:	88 85       	ldd	r24, Y+8	; 0x08
    1ab0:	99 85       	ldd	r25, Y+9	; 0x09
}
    1ab2:	63 96       	adiw	r28, 0x13	; 19
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	08 95       	ret

00001ac8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	28 97       	sbiw	r28, 0x08	; 8
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	78 87       	std	Y+8, r23	; 0x08
    1ae2:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = xEventGroup;
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1af2:	eb 81       	ldd	r30, Y+3	; 0x03
    1af4:	fc 81       	ldd	r31, Y+4	; 0x04
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1afe:	eb 81       	ldd	r30, Y+3	; 0x03
    1b00:	fc 81       	ldd	r31, Y+4	; 0x04
    1b02:	20 81       	ld	r18, Z
    1b04:	31 81       	ldd	r19, Z+1	; 0x01
    1b06:	8f 81       	ldd	r24, Y+7	; 0x07
    1b08:	98 85       	ldd	r25, Y+8	; 0x08
    1b0a:	80 95       	com	r24
    1b0c:	90 95       	com	r25
    1b0e:	82 23       	and	r24, r18
    1b10:	93 23       	and	r25, r19
    1b12:	eb 81       	ldd	r30, Y+3	; 0x03
    1b14:	fc 81       	ldd	r31, Y+4	; 0x04
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b22:	28 96       	adiw	r28, 0x08	; 8
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	27 97       	sbiw	r28, 0x07	; 7
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	9f 83       	std	Y+7, r25	; 0x07
    1b4a:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
    1b4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b50:	9c 83       	std	Y+4, r25	; 0x04
    1b52:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1b54:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    1b56:	eb 81       	ldd	r30, Y+3	; 0x03
    1b58:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    1b66:	27 96       	adiw	r28, 0x07	; 7
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	65 97       	sbiw	r28, 0x15	; 21
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	9b 8b       	std	Y+19, r25	; 0x13
    1b8e:	8a 8b       	std	Y+18, r24	; 0x12
    1b90:	7d 8b       	std	Y+21, r23	; 0x15
    1b92:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    1b94:	19 86       	std	Y+9, r1	; 0x09
    1b96:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = xEventGroup;
    1b98:	8a 89       	ldd	r24, Y+18	; 0x12
    1b9a:	9b 89       	ldd	r25, Y+19	; 0x13
    1b9c:	9b 83       	std	Y+3, r25	; 0x03
    1b9e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	02 96       	adiw	r24, 0x02	; 2
    1ba8:	9b 87       	std	Y+11, r25	; 0x0b
    1baa:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1bac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb0:	03 96       	adiw	r24, 0x03	; 3
    1bb2:	9d 87       	std	Y+13, r25	; 0x0d
    1bb4:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    1bb6:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    1bba:	ea 85       	ldd	r30, Y+10	; 0x0a
    1bbc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1bbe:	85 81       	ldd	r24, Z+5	; 0x05
    1bc0:	96 81       	ldd	r25, Z+6	; 0x06
    1bc2:	99 8b       	std	Y+17, r25	; 0x11
    1bc4:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    1bc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bca:	20 81       	ld	r18, Z
    1bcc:	31 81       	ldd	r19, Z+1	; 0x01
    1bce:	8c 89       	ldd	r24, Y+20	; 0x14
    1bd0:	9d 89       	ldd	r25, Y+21	; 0x15
    1bd2:	82 2b       	or	r24, r18
    1bd4:	93 2b       	or	r25, r19
    1bd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1bd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	59 c0       	rjmp	.+178    	; 0x1c92 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    1be0:	e8 89       	ldd	r30, Y+16	; 0x10
    1be2:	f9 89       	ldd	r31, Y+17	; 0x11
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	9f 87       	std	Y+15, r25	; 0x0f
    1bea:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1bec:	e8 89       	ldd	r30, Y+16	; 0x10
    1bee:	f9 89       	ldd	r31, Y+17	; 0x11
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	9f 83       	std	Y+7, r25	; 0x07
    1bf6:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    1bf8:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    1bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfe:	80 70       	andi	r24, 0x00	; 0
    1c00:	9d 83       	std	Y+5, r25	; 0x05
    1c02:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1c04:	8e 81       	ldd	r24, Y+6	; 0x06
    1c06:	9f 81       	ldd	r25, Y+7	; 0x07
    1c08:	90 70       	andi	r25, 0x00	; 0
    1c0a:	9f 83       	std	Y+7, r25	; 0x07
    1c0c:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	9d 81       	ldd	r25, Y+5	; 0x05
    1c12:	80 70       	andi	r24, 0x00	; 0
    1c14:	94 70       	andi	r25, 0x04	; 4
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f4       	brne	.+26     	; 0x1c34 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    1c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1e:	20 81       	ld	r18, Z
    1c20:	31 81       	ldd	r19, Z+1	; 0x01
    1c22:	8e 81       	ldd	r24, Y+6	; 0x06
    1c24:	9f 81       	ldd	r25, Y+7	; 0x07
    1c26:	82 23       	and	r24, r18
    1c28:	93 23       	and	r25, r19
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	91 f0       	breq	.+36     	; 0x1c52 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1c34:	ea 81       	ldd	r30, Y+2	; 0x02
    1c36:	fb 81       	ldd	r31, Y+3	; 0x03
    1c38:	20 81       	ld	r18, Z
    1c3a:	31 81       	ldd	r19, Z+1	; 0x01
    1c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c40:	28 23       	and	r18, r24
    1c42:	39 23       	and	r19, r25
    1c44:	8e 81       	ldd	r24, Y+6	; 0x06
    1c46:	9f 81       	ldd	r25, Y+7	; 0x07
    1c48:	28 17       	cp	r18, r24
    1c4a:	39 07       	cpc	r19, r25
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	88 23       	and	r24, r24
    1c56:	c9 f0       	breq	.+50     	; 0x1c8a <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5c:	80 70       	andi	r24, 0x00	; 0
    1c5e:	91 70       	andi	r25, 0x01	; 1
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	41 f0       	breq	.+16     	; 0x1c74 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    1c64:	88 85       	ldd	r24, Y+8	; 0x08
    1c66:	99 85       	ldd	r25, Y+9	; 0x09
    1c68:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6c:	82 2b       	or	r24, r18
    1c6e:	93 2b       	or	r25, r19
    1c70:	99 87       	std	Y+9, r25	; 0x09
    1c72:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1c74:	ea 81       	ldd	r30, Y+2	; 0x02
    1c76:	fb 81       	ldd	r31, Y+3	; 0x03
    1c78:	80 81       	ld	r24, Z
    1c7a:	91 81       	ldd	r25, Z+1	; 0x01
    1c7c:	9c 01       	movw	r18, r24
    1c7e:	32 60       	ori	r19, 0x02	; 2
    1c80:	88 89       	ldd	r24, Y+16	; 0x10
    1c82:	99 89       	ldd	r25, Y+17	; 0x11
    1c84:	b9 01       	movw	r22, r18
    1c86:	0e 94 3a 2a 	call	0x5474	; 0x5474 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    1c8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c8e:	99 8b       	std	Y+17, r25	; 0x11
    1c90:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    1c92:	28 89       	ldd	r18, Y+16	; 0x10
    1c94:	39 89       	ldd	r19, Y+17	; 0x11
    1c96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c98:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c9a:	28 17       	cp	r18, r24
    1c9c:	39 07       	cpc	r19, r25
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <xEventGroupSetBits+0x12a>
    1ca0:	9f cf       	rjmp	.-194    	; 0x1be0 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1ca2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca6:	20 81       	ld	r18, Z
    1ca8:	31 81       	ldd	r19, Z+1	; 0x01
    1caa:	88 85       	ldd	r24, Y+8	; 0x08
    1cac:	99 85       	ldd	r25, Y+9	; 0x09
    1cae:	80 95       	com	r24
    1cb0:	90 95       	com	r25
    1cb2:	82 23       	and	r24, r18
    1cb4:	93 23       	and	r25, r19
    1cb6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    1cbe:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    1cc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cca:	65 96       	adiw	r28, 0x15	; 21
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <vEventGroupDelete+0x6>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <vEventGroupDelete+0x8>
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <vEventGroupDelete+0xa>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = xEventGroup;
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	02 96       	adiw	r24, 0x02	; 2
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1d00:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
    1d04:	08 c0       	rjmp	.+16     	; 0x1d16 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	85 81       	ldd	r24, Z+5	; 0x05
    1d0c:	96 81       	ldd	r25, Z+6	; 0x06
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	72 e0       	ldi	r23, 0x02	; 2
    1d12:	0e 94 3a 2a 	call	0x5474	; 0x5474 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	80 81       	ld	r24, Z
    1d1c:	88 23       	and	r24, r24
    1d1e:	99 f7       	brne	.-26     	; 0x1d06 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    1d28:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
}
    1d2c:	26 96       	adiw	r28, 0x06	; 6
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <vEventGroupSetBitsCallback+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <vEventGroupSetBitsCallback+0x8>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <vEventGroupSetBitsCallback+0xa>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	4b 83       	std	Y+3, r20	; 0x03
    1d52:	5c 83       	std	Y+4, r21	; 0x04
    1d54:	6d 83       	std	Y+5, r22	; 0x05
    1d56:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d60:	b9 01       	movw	r22, r18
    1d62:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <xEventGroupSetBits>
}
    1d66:	26 96       	adiw	r28, 0x06	; 6
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <vEventGroupClearBitsCallback+0x6>
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <vEventGroupClearBitsCallback+0x8>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <vEventGroupClearBitsCallback+0xa>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	4b 83       	std	Y+3, r20	; 0x03
    1d8c:	5c 83       	std	Y+4, r21	; 0x04
    1d8e:	6d 83       	std	Y+5, r22	; 0x05
    1d90:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9a:	b9 01       	movw	r22, r18
    1d9c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <xEventGroupClearBits>
}
    1da0:	26 96       	adiw	r28, 0x06	; 6
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <prvTestWaitCondition+0x6>
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <prvTestWaitCondition+0x8>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <prvTestWaitCondition+0xa>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	9b 83       	std	Y+3, r25	; 0x03
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
    1dc4:	7d 83       	std	Y+5, r23	; 0x05
    1dc6:	6c 83       	std	Y+4, r22	; 0x04
    1dc8:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    1dca:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    1dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dce:	88 23       	and	r24, r24
    1dd0:	59 f4       	brne	.+22     	; 0x1de8 <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	82 23       	and	r24, r18
    1ddc:	93 23       	and	r25, r19
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	81 f0       	breq	.+32     	; 0x1e02 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	0d c0       	rjmp	.+26     	; 0x1e02 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1de8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dea:	3b 81       	ldd	r19, Y+3	; 0x03
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	28 23       	and	r18, r24
    1df2:	39 23       	and	r19, r25
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	28 17       	cp	r18, r24
    1dfa:	39 07       	cpc	r19, r25
    1dfc:	11 f4       	brne	.+4      	; 0x1e02 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e04:	26 96       	adiw	r28, 0x06	; 6
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <pvPortMalloc+0x6>
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <pvPortMalloc+0x8>
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1e26:	1a 82       	std	Y+2, r1	; 0x02
    1e28:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1e2a:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1e2e:	80 91 76 00 	lds	r24, 0x0076
    1e32:	90 91 77 00 	lds	r25, 0x0077
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	31 f4       	brne	.+12     	; 0x1e46 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1e3a:	89 e7       	ldi	r24, 0x79	; 121
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	90 93 77 00 	sts	0x0077, r25
    1e42:	80 93 76 00 	sts	0x0076, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1e46:	80 91 74 00 	lds	r24, 0x0074
    1e4a:	90 91 75 00 	lds	r25, 0x0075
    1e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e50:	3c 81       	ldd	r19, Y+4	; 0x04
    1e52:	82 0f       	add	r24, r18
    1e54:	93 1f       	adc	r25, r19
    1e56:	25 e0       	ldi	r18, 0x05	; 5
    1e58:	8b 3d       	cpi	r24, 0xDB	; 219
    1e5a:	92 07       	cpc	r25, r18
    1e5c:	38 f5       	brcc	.+78     	; 0x1eac <pvPortMalloc+0x96>
    1e5e:	20 91 74 00 	lds	r18, 0x0074
    1e62:	30 91 75 00 	lds	r19, 0x0075
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	28 0f       	add	r18, r24
    1e6c:	39 1f       	adc	r19, r25
    1e6e:	80 91 74 00 	lds	r24, 0x0074
    1e72:	90 91 75 00 	lds	r25, 0x0075
    1e76:	82 17       	cp	r24, r18
    1e78:	93 07       	cpc	r25, r19
    1e7a:	c0 f4       	brcc	.+48     	; 0x1eac <pvPortMalloc+0x96>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1e7c:	20 91 76 00 	lds	r18, 0x0076
    1e80:	30 91 77 00 	lds	r19, 0x0077
    1e84:	80 91 74 00 	lds	r24, 0x0074
    1e88:	90 91 75 00 	lds	r25, 0x0075
    1e8c:	82 0f       	add	r24, r18
    1e8e:	93 1f       	adc	r25, r19
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1e94:	20 91 74 00 	lds	r18, 0x0074
    1e98:	30 91 75 00 	lds	r19, 0x0075
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	82 0f       	add	r24, r18
    1ea2:	93 1f       	adc	r25, r19
    1ea4:	90 93 75 00 	sts	0x0075, r25
    1ea8:	80 93 74 00 	sts	0x0074, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1eac:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <vPortFree+0x6>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    1ee2:	10 92 75 00 	sts	0x0075, r1
    1ee6:	10 92 74 00 	sts	0x0074, r1
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    1ef8:	20 91 74 00 	lds	r18, 0x0074
    1efc:	30 91 75 00 	lds	r19, 0x0075
    1f00:	8b ed       	ldi	r24, 0xDB	; 219
    1f02:	95 e0       	ldi	r25, 0x05	; 5
    1f04:	82 1b       	sub	r24, r18
    1f06:	93 0b       	sbc	r25, r19
}
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <vListInitialise+0x6>
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	03 96       	adiw	r24, 0x03	; 3
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	92 83       	std	Z+2, r25	; 0x02
    1f28:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	9f ef       	ldi	r25, 0xFF	; 255
    1f32:	94 83       	std	Z+4, r25	; 0x04
    1f34:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	03 96       	adiw	r24, 0x03	; 3
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	96 83       	std	Z+6, r25	; 0x06
    1f42:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	9a 81       	ldd	r25, Y+2	; 0x02
    1f48:	03 96       	adiw	r24, 0x03	; 3
    1f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4e:	90 87       	std	Z+8, r25	; 0x08
    1f50:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1f52:	e9 81       	ldd	r30, Y+1	; 0x01
    1f54:	fa 81       	ldd	r31, Y+2	; 0x02
    1f56:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <vListInitialiseItem+0x6>
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	11 86       	std	Z+9, r1	; 0x09
    1f76:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <vListInsertEnd+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <vListInsertEnd+0x8>
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <vListInsertEnd+0xa>
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	7e 83       	std	Y+6, r23	; 0x06
    1f96:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1f98:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f9c:	81 81       	ldd	r24, Z+1	; 0x01
    1f9e:	92 81       	ldd	r25, Z+2	; 0x02
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1fa4:	ed 81       	ldd	r30, Y+5	; 0x05
    1fa6:	fe 81       	ldd	r31, Y+6	; 0x06
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	93 83       	std	Z+3, r25	; 0x03
    1fae:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	84 81       	ldd	r24, Z+4	; 0x04
    1fb6:	95 81       	ldd	r25, Z+5	; 0x05
    1fb8:	ed 81       	ldd	r30, Y+5	; 0x05
    1fba:	fe 81       	ldd	r31, Y+6	; 0x06
    1fbc:	95 83       	std	Z+5, r25	; 0x05
    1fbe:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc4:	04 80       	ldd	r0, Z+4	; 0x04
    1fc6:	f5 81       	ldd	r31, Z+5	; 0x05
    1fc8:	e0 2d       	mov	r30, r0
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	93 83       	std	Z+3, r25	; 0x03
    1fd0:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	95 83       	std	Z+5, r25	; 0x05
    1fdc:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    1fde:	ed 81       	ldd	r30, Y+5	; 0x05
    1fe0:	fe 81       	ldd	r31, Y+6	; 0x06
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	91 87       	std	Z+9, r25	; 0x09
    1fe8:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1fea:	eb 81       	ldd	r30, Y+3	; 0x03
    1fec:	fc 81       	ldd	r31, Y+4	; 0x04
    1fee:	80 81       	ld	r24, Z
    1ff0:	8f 5f       	subi	r24, 0xFF	; 255
    1ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff6:	80 83       	st	Z, r24
}
    1ff8:	26 96       	adiw	r28, 0x06	; 6
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	28 97       	sbiw	r28, 0x08	; 8
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	8d 83       	std	Y+5, r24	; 0x05
    2022:	78 87       	std	Y+8, r23	; 0x08
    2024:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2026:	ef 81       	ldd	r30, Y+7	; 0x07
    2028:	f8 85       	ldd	r31, Y+8	; 0x08
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	9a 83       	std	Y+2, r25	; 0x02
    2030:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	9a 81       	ldd	r25, Y+2	; 0x02
    2036:	2f ef       	ldi	r18, 0xFF	; 255
    2038:	8f 3f       	cpi	r24, 0xFF	; 255
    203a:	92 07       	cpc	r25, r18
    203c:	39 f4       	brne	.+14     	; 0x204c <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    203e:	ed 81       	ldd	r30, Y+5	; 0x05
    2040:	fe 81       	ldd	r31, Y+6	; 0x06
    2042:	87 81       	ldd	r24, Z+7	; 0x07
    2044:	90 85       	ldd	r25, Z+8	; 0x08
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	18 c0       	rjmp	.+48     	; 0x207c <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	03 96       	adiw	r24, 0x03	; 3
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <vListInsert+0x5a>
    2058:	eb 81       	ldd	r30, Y+3	; 0x03
    205a:	fc 81       	ldd	r31, Y+4	; 0x04
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    2064:	eb 81       	ldd	r30, Y+3	; 0x03
    2066:	fc 81       	ldd	r31, Y+4	; 0x04
    2068:	02 80       	ldd	r0, Z+2	; 0x02
    206a:	f3 81       	ldd	r31, Z+3	; 0x03
    206c:	e0 2d       	mov	r30, r0
    206e:	20 81       	ld	r18, Z
    2070:	31 81       	ldd	r19, Z+1	; 0x01
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	82 17       	cp	r24, r18
    2078:	93 07       	cpc	r25, r19
    207a:	70 f7       	brcc	.-36     	; 0x2058 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    207c:	eb 81       	ldd	r30, Y+3	; 0x03
    207e:	fc 81       	ldd	r31, Y+4	; 0x04
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	ef 81       	ldd	r30, Y+7	; 0x07
    2086:	f8 85       	ldd	r31, Y+8	; 0x08
    2088:	93 83       	std	Z+3, r25	; 0x03
    208a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    208c:	ef 81       	ldd	r30, Y+7	; 0x07
    208e:	f8 85       	ldd	r31, Y+8	; 0x08
    2090:	02 80       	ldd	r0, Z+2	; 0x02
    2092:	f3 81       	ldd	r31, Z+3	; 0x03
    2094:	e0 2d       	mov	r30, r0
    2096:	8f 81       	ldd	r24, Y+7	; 0x07
    2098:	98 85       	ldd	r25, Y+8	; 0x08
    209a:	95 83       	std	Z+5, r25	; 0x05
    209c:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    209e:	ef 81       	ldd	r30, Y+7	; 0x07
    20a0:	f8 85       	ldd	r31, Y+8	; 0x08
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	95 83       	std	Z+5, r25	; 0x05
    20a8:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    20aa:	eb 81       	ldd	r30, Y+3	; 0x03
    20ac:	fc 81       	ldd	r31, Y+4	; 0x04
    20ae:	8f 81       	ldd	r24, Y+7	; 0x07
    20b0:	98 85       	ldd	r25, Y+8	; 0x08
    20b2:	93 83       	std	Z+3, r25	; 0x03
    20b4:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    20b6:	ef 81       	ldd	r30, Y+7	; 0x07
    20b8:	f8 85       	ldd	r31, Y+8	; 0x08
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	91 87       	std	Z+9, r25	; 0x09
    20c0:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    20c2:	ed 81       	ldd	r30, Y+5	; 0x05
    20c4:	fe 81       	ldd	r31, Y+6	; 0x06
    20c6:	80 81       	ld	r24, Z
    20c8:	8f 5f       	subi	r24, 0xFF	; 255
    20ca:	ed 81       	ldd	r30, Y+5	; 0x05
    20cc:	fe 81       	ldd	r31, Y+6	; 0x06
    20ce:	80 83       	st	Z, r24
}
    20d0:	28 96       	adiw	r28, 0x08	; 8
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <uxListRemove+0x6>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <uxListRemove+0x8>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    20f2:	eb 81       	ldd	r30, Y+3	; 0x03
    20f4:	fc 81       	ldd	r31, Y+4	; 0x04
    20f6:	80 85       	ldd	r24, Z+8	; 0x08
    20f8:	91 85       	ldd	r25, Z+9	; 0x09
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    20fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2100:	fc 81       	ldd	r31, Y+4	; 0x04
    2102:	a2 81       	ldd	r26, Z+2	; 0x02
    2104:	b3 81       	ldd	r27, Z+3	; 0x03
    2106:	eb 81       	ldd	r30, Y+3	; 0x03
    2108:	fc 81       	ldd	r31, Y+4	; 0x04
    210a:	84 81       	ldd	r24, Z+4	; 0x04
    210c:	95 81       	ldd	r25, Z+5	; 0x05
    210e:	15 96       	adiw	r26, 0x05	; 5
    2110:	9c 93       	st	X, r25
    2112:	8e 93       	st	-X, r24
    2114:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2116:	eb 81       	ldd	r30, Y+3	; 0x03
    2118:	fc 81       	ldd	r31, Y+4	; 0x04
    211a:	a4 81       	ldd	r26, Z+4	; 0x04
    211c:	b5 81       	ldd	r27, Z+5	; 0x05
    211e:	eb 81       	ldd	r30, Y+3	; 0x03
    2120:	fc 81       	ldd	r31, Y+4	; 0x04
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	13 96       	adiw	r26, 0x03	; 3
    2128:	9c 93       	st	X, r25
    212a:	8e 93       	st	-X, r24
    212c:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	21 81       	ldd	r18, Z+1	; 0x01
    2134:	32 81       	ldd	r19, Z+2	; 0x02
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	28 17       	cp	r18, r24
    213c:	39 07       	cpc	r19, r25
    213e:	41 f4       	brne	.+16     	; 0x2150 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2140:	eb 81       	ldd	r30, Y+3	; 0x03
    2142:	fc 81       	ldd	r31, Y+4	; 0x04
    2144:	84 81       	ldd	r24, Z+4	; 0x04
    2146:	95 81       	ldd	r25, Z+5	; 0x05
    2148:	e9 81       	ldd	r30, Y+1	; 0x01
    214a:	fa 81       	ldd	r31, Y+2	; 0x02
    214c:	92 83       	std	Z+2, r25	; 0x02
    214e:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    2150:	eb 81       	ldd	r30, Y+3	; 0x03
    2152:	fc 81       	ldd	r31, Y+4	; 0x04
    2154:	11 86       	std	Z+9, r1	; 0x09
    2156:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    2158:	e9 81       	ldd	r30, Y+1	; 0x01
    215a:	fa 81       	ldd	r31, Y+2	; 0x02
    215c:	80 81       	ld	r24, Z
    215e:	81 50       	subi	r24, 0x01	; 1
    2160:	e9 81       	ldd	r30, Y+1	; 0x01
    2162:	fa 81       	ldd	r31, Y+2	; 0x02
    2164:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    2166:	e9 81       	ldd	r30, Y+1	; 0x01
    2168:	fa 81       	ldd	r31, Y+2	; 0x02
    216a:	80 81       	ld	r24, Z
}
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <main>:

void Task_1_Func( void *pvParameter );
void Task_2_Func( void *pvParameter );

int main(void)
{
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	Led_vidInit(LED_1);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	0e 94 8e 0a 	call	0x151c	; 0x151c <Led_vidInit>
	Led_vidInit(LED_2);
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	0e 94 8e 0a 	call	0x151c	; 0x151c <Led_vidInit>

	/* Create Tasks */
	xTaskCreate(Task_1_Func , "TASK_1" , 200 , NULL , 2 , NULL );
    2194:	80 ef       	ldi	r24, 0xF0	; 240
    2196:	90 e1       	ldi	r25, 0x10	; 16
    2198:	20 e6       	ldi	r18, 0x60	; 96
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	b9 01       	movw	r22, r18
    219e:	48 ec       	ldi	r20, 0xC8	; 200
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	02 e0       	ldi	r16, 0x02	; 2
    21a8:	ee 24       	eor	r14, r14
    21aa:	ff 24       	eor	r15, r15
    21ac:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <xTaskCreate>
	xTaskCreate(Task_2_Func , "TASK_2" , 200 , NULL , 1 , NULL );
    21b0:	8c e0       	ldi	r24, 0x0C	; 12
    21b2:	91 e1       	ldi	r25, 0x11	; 17
    21b4:	27 e6       	ldi	r18, 0x67	; 103
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	b9 01       	movw	r22, r18
    21ba:	48 ec       	ldi	r20, 0xC8	; 200
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	01 e0       	ldi	r16, 0x01	; 1
    21c4:	ee 24       	eor	r14, r14
    21c6:	ff 24       	eor	r15, r15
    21c8:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <xTaskCreate>

	/* Start Scheduler */
	vTaskStartScheduler();
    21cc:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <vTaskStartScheduler>

	return 0;
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
}
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	0f 91       	pop	r16
    21da:	ff 90       	pop	r15
    21dc:	ef 90       	pop	r14
    21de:	08 95       	ret

000021e0 <Task_1_Func>:

void Task_1_Func( void *pvParameter )
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <Task_1_Func+0x6>
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	89 83       	std	Y+1, r24	; 0x01
	/* To remain in stack */
	while(1)
	{
		static u8 Flag = 0;

		if(Flag == 0)
    21ee:	80 91 54 06 	lds	r24, 0x0654
    21f2:	88 23       	and	r24, r24
    21f4:	39 f4       	brne	.+14     	; 0x2204 <Task_1_Func+0x24>
		{
			Led_vidTurnOn(LED_1);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Led_vidTurnOn>
			Flag = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	80 93 54 06 	sts	0x0654, r24
    2202:	05 c0       	rjmp	.+10     	; 0x220e <Task_1_Func+0x2e>
		}
		else
		{
			Led_vidTurnOff(LED_1);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Led_vidTurnOff>
			Flag = 0;
    220a:	10 92 54 06 	sts	0x0654, r1
		}

		vTaskDelay(500);
    220e:	84 ef       	ldi	r24, 0xF4	; 244
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <vTaskDelay>
    2216:	eb cf       	rjmp	.-42     	; 0x21ee <Task_1_Func+0xe>

00002218 <Task_2_Func>:
	}

}

void Task_2_Func( void *pvParameter )
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	00 d0       	rcall	.+0      	; 0x221e <Task_2_Func+0x6>
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	9a 83       	std	Y+2, r25	; 0x02
    2224:	89 83       	std	Y+1, r24	; 0x01
	/* To remain in stack */
	while(1)
	{
		static u8 Flag = 0;

		if(Flag == 0)
    2226:	80 91 55 06 	lds	r24, 0x0655
    222a:	88 23       	and	r24, r24
    222c:	39 f4       	brne	.+14     	; 0x223c <Task_2_Func+0x24>
		{
			Led_vidTurnOn(LED_2);
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Led_vidTurnOn>
			Flag = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	80 93 55 06 	sts	0x0655, r24
    223a:	05 c0       	rjmp	.+10     	; 0x2246 <Task_2_Func+0x2e>
		}
		else
		{
			Led_vidTurnOff(LED_2);
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Led_vidTurnOff>
			Flag = 0;
    2242:	10 92 55 06 	sts	0x0655, r1
		}

		vTaskDelay(500);
    2246:	84 ef       	ldi	r24, 0xF4	; 244
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <vTaskDelay>
    224e:	eb cf       	rjmp	.-42     	; 0x2226 <Task_2_Func+0xe>

00002250 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	28 97       	sbiw	r28, 0x08	; 8
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	8b 83       	std	Y+3, r24	; 0x03
    2268:	7e 83       	std	Y+6, r23	; 0x06
    226a:	6d 83       	std	Y+5, r22	; 0x05
    226c:	58 87       	std	Y+8, r21	; 0x08
    226e:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2270:	eb 81       	ldd	r30, Y+3	; 0x03
    2272:	fc 81       	ldd	r31, Y+4	; 0x04
    2274:	81 e1       	ldi	r24, 0x11	; 17
    2276:	80 83       	st	Z, r24
	pxTopOfStack--;
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2282:	eb 81       	ldd	r30, Y+3	; 0x03
    2284:	fc 81       	ldd	r31, Y+4	; 0x04
    2286:	82 e2       	ldi	r24, 0x22	; 34
    2288:	80 83       	st	Z, r24
	pxTopOfStack--;
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9c 83       	std	Y+4, r25	; 0x04
    2292:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2294:	eb 81       	ldd	r30, Y+3	; 0x03
    2296:	fc 81       	ldd	r31, Y+4	; 0x04
    2298:	83 e3       	ldi	r24, 0x33	; 51
    229a:	80 83       	st	Z, r24
	pxTopOfStack--;
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	eb 81       	ldd	r30, Y+3	; 0x03
    22b2:	fc 81       	ldd	r31, Y+4	; 0x04
    22b4:	80 83       	st	Z, r24
	pxTopOfStack--;
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	89 2f       	mov	r24, r25
    22c6:	99 27       	eor	r25, r25
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	eb 81       	ldd	r30, Y+3	; 0x03
    22d0:	fc 81       	ldd	r31, Y+4	; 0x04
    22d2:	80 83       	st	Z, r24
	pxTopOfStack--;
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    22de:	eb 81       	ldd	r30, Y+3	; 0x03
    22e0:	fc 81       	ldd	r31, Y+4	; 0x04
    22e2:	10 82       	st	Z, r1
	pxTopOfStack--;
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	9c 83       	std	Y+4, r25	; 0x04
    22ec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    22ee:	eb 81       	ldd	r30, Y+3	; 0x03
    22f0:	fc 81       	ldd	r31, Y+4	; 0x04
    22f2:	80 e8       	ldi	r24, 0x80	; 128
    22f4:	80 83       	st	Z, r24
	pxTopOfStack--;
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	9c 83       	std	Y+4, r25	; 0x04
    22fe:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    2300:	eb 81       	ldd	r30, Y+3	; 0x03
    2302:	fc 81       	ldd	r31, Y+4	; 0x04
    2304:	10 82       	st	Z, r1
	pxTopOfStack--;
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    2310:	eb 81       	ldd	r30, Y+3	; 0x03
    2312:	fc 81       	ldd	r31, Y+4	; 0x04
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	80 83       	st	Z, r24
	pxTopOfStack--;
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    2322:	eb 81       	ldd	r30, Y+3	; 0x03
    2324:	fc 81       	ldd	r31, Y+4	; 0x04
    2326:	83 e0       	ldi	r24, 0x03	; 3
    2328:	80 83       	st	Z, r24
	pxTopOfStack--;
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	84 e0       	ldi	r24, 0x04	; 4
    233a:	80 83       	st	Z, r24
	pxTopOfStack--;
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    2346:	eb 81       	ldd	r30, Y+3	; 0x03
    2348:	fc 81       	ldd	r31, Y+4	; 0x04
    234a:	85 e0       	ldi	r24, 0x05	; 5
    234c:	80 83       	st	Z, r24
	pxTopOfStack--;
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9c 83       	std	Y+4, r25	; 0x04
    2356:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    2358:	eb 81       	ldd	r30, Y+3	; 0x03
    235a:	fc 81       	ldd	r31, Y+4	; 0x04
    235c:	86 e0       	ldi	r24, 0x06	; 6
    235e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    236a:	eb 81       	ldd	r30, Y+3	; 0x03
    236c:	fc 81       	ldd	r31, Y+4	; 0x04
    236e:	87 e0       	ldi	r24, 0x07	; 7
    2370:	80 83       	st	Z, r24
	pxTopOfStack--;
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	9c 83       	std	Y+4, r25	; 0x04
    237a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    237c:	eb 81       	ldd	r30, Y+3	; 0x03
    237e:	fc 81       	ldd	r31, Y+4	; 0x04
    2380:	88 e0       	ldi	r24, 0x08	; 8
    2382:	80 83       	st	Z, r24
	pxTopOfStack--;
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    238e:	eb 81       	ldd	r30, Y+3	; 0x03
    2390:	fc 81       	ldd	r31, Y+4	; 0x04
    2392:	89 e0       	ldi	r24, 0x09	; 9
    2394:	80 83       	st	Z, r24
	pxTopOfStack--;
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    23a0:	eb 81       	ldd	r30, Y+3	; 0x03
    23a2:	fc 81       	ldd	r31, Y+4	; 0x04
    23a4:	80 e1       	ldi	r24, 0x10	; 16
    23a6:	80 83       	st	Z, r24
	pxTopOfStack--;
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    23b2:	eb 81       	ldd	r30, Y+3	; 0x03
    23b4:	fc 81       	ldd	r31, Y+4	; 0x04
    23b6:	81 e1       	ldi	r24, 0x11	; 17
    23b8:	80 83       	st	Z, r24
	pxTopOfStack--;
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9c 83       	std	Y+4, r25	; 0x04
    23c2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    23c4:	eb 81       	ldd	r30, Y+3	; 0x03
    23c6:	fc 81       	ldd	r31, Y+4	; 0x04
    23c8:	82 e1       	ldi	r24, 0x12	; 18
    23ca:	80 83       	st	Z, r24
	pxTopOfStack--;
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9c 83       	std	Y+4, r25	; 0x04
    23d4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    23d6:	eb 81       	ldd	r30, Y+3	; 0x03
    23d8:	fc 81       	ldd	r31, Y+4	; 0x04
    23da:	83 e1       	ldi	r24, 0x13	; 19
    23dc:	80 83       	st	Z, r24
	pxTopOfStack--;
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    23e8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ea:	fc 81       	ldd	r31, Y+4	; 0x04
    23ec:	84 e1       	ldi	r24, 0x14	; 20
    23ee:	80 83       	st	Z, r24
	pxTopOfStack--;
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    23fa:	eb 81       	ldd	r30, Y+3	; 0x03
    23fc:	fc 81       	ldd	r31, Y+4	; 0x04
    23fe:	85 e1       	ldi	r24, 0x15	; 21
    2400:	80 83       	st	Z, r24
	pxTopOfStack--;
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    240c:	eb 81       	ldd	r30, Y+3	; 0x03
    240e:	fc 81       	ldd	r31, Y+4	; 0x04
    2410:	86 e1       	ldi	r24, 0x16	; 22
    2412:	80 83       	st	Z, r24
	pxTopOfStack--;
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	9c 83       	std	Y+4, r25	; 0x04
    241c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    241e:	eb 81       	ldd	r30, Y+3	; 0x03
    2420:	fc 81       	ldd	r31, Y+4	; 0x04
    2422:	87 e1       	ldi	r24, 0x17	; 23
    2424:	80 83       	st	Z, r24
	pxTopOfStack--;
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	9c 81       	ldd	r25, Y+4	; 0x04
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9c 83       	std	Y+4, r25	; 0x04
    242e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    2430:	eb 81       	ldd	r30, Y+3	; 0x03
    2432:	fc 81       	ldd	r31, Y+4	; 0x04
    2434:	88 e1       	ldi	r24, 0x18	; 24
    2436:	80 83       	st	Z, r24
	pxTopOfStack--;
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2442:	eb 81       	ldd	r30, Y+3	; 0x03
    2444:	fc 81       	ldd	r31, Y+4	; 0x04
    2446:	89 e1       	ldi	r24, 0x19	; 25
    2448:	80 83       	st	Z, r24
	pxTopOfStack--;
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	9c 83       	std	Y+4, r25	; 0x04
    2452:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2454:	eb 81       	ldd	r30, Y+3	; 0x03
    2456:	fc 81       	ldd	r31, Y+4	; 0x04
    2458:	80 e2       	ldi	r24, 0x20	; 32
    245a:	80 83       	st	Z, r24
	pxTopOfStack--;
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2466:	eb 81       	ldd	r30, Y+3	; 0x03
    2468:	fc 81       	ldd	r31, Y+4	; 0x04
    246a:	81 e2       	ldi	r24, 0x21	; 33
    246c:	80 83       	st	Z, r24
	pxTopOfStack--;
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    2478:	eb 81       	ldd	r30, Y+3	; 0x03
    247a:	fc 81       	ldd	r31, Y+4	; 0x04
    247c:	82 e2       	ldi	r24, 0x22	; 34
    247e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	9c 81       	ldd	r25, Y+4	; 0x04
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	9c 83       	std	Y+4, r25	; 0x04
    2488:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    248a:	eb 81       	ldd	r30, Y+3	; 0x03
    248c:	fc 81       	ldd	r31, Y+4	; 0x04
    248e:	83 e2       	ldi	r24, 0x23	; 35
    2490:	80 83       	st	Z, r24
	pxTopOfStack--;
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    249c:	8f 81       	ldd	r24, Y+7	; 0x07
    249e:	98 85       	ldd	r25, Y+8	; 0x08
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	eb 81       	ldd	r30, Y+3	; 0x03
    24a8:	fc 81       	ldd	r31, Y+4	; 0x04
    24aa:	80 83       	st	Z, r24
	pxTopOfStack--;
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	9c 83       	std	Y+4, r25	; 0x04
    24b4:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	89 2f       	mov	r24, r25
    24bc:	99 27       	eor	r25, r25
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	eb 81       	ldd	r30, Y+3	; 0x03
    24c6:	fc 81       	ldd	r31, Y+4	; 0x04
    24c8:	80 83       	st	Z, r24
	pxTopOfStack--;
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    24d4:	eb 81       	ldd	r30, Y+3	; 0x03
    24d6:	fc 81       	ldd	r31, Y+4	; 0x04
    24d8:	86 e2       	ldi	r24, 0x26	; 38
    24da:	80 83       	st	Z, r24
	pxTopOfStack--;
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	87 e2       	ldi	r24, 0x27	; 39
    24ec:	80 83       	st	Z, r24
	pxTopOfStack--;
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	9c 83       	std	Y+4, r25	; 0x04
    24f6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    24f8:	eb 81       	ldd	r30, Y+3	; 0x03
    24fa:	fc 81       	ldd	r31, Y+4	; 0x04
    24fc:	88 e2       	ldi	r24, 0x28	; 40
    24fe:	80 83       	st	Z, r24
	pxTopOfStack--;
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    250a:	eb 81       	ldd	r30, Y+3	; 0x03
    250c:	fc 81       	ldd	r31, Y+4	; 0x04
    250e:	89 e2       	ldi	r24, 0x29	; 41
    2510:	80 83       	st	Z, r24
	pxTopOfStack--;
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    251c:	eb 81       	ldd	r30, Y+3	; 0x03
    251e:	fc 81       	ldd	r31, Y+4	; 0x04
    2520:	80 e3       	ldi	r24, 0x30	; 48
    2522:	80 83       	st	Z, r24
	pxTopOfStack--;
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9c 83       	std	Y+4, r25	; 0x04
    252c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    252e:	eb 81       	ldd	r30, Y+3	; 0x03
    2530:	fc 81       	ldd	r31, Y+4	; 0x04
    2532:	81 e3       	ldi	r24, 0x31	; 49
    2534:	80 83       	st	Z, r24
	pxTopOfStack--;
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2544:	28 96       	adiw	r28, 0x08	; 8
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    255e:	0e 94 9d 13 	call	0x273a	; 0x273a <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2562:	a0 91 56 06 	lds	r26, 0x0656
    2566:	b0 91 57 06 	lds	r27, 0x0657
    256a:	cd 91       	ld	r28, X+
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	dd 91       	ld	r29, X+
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	ff 91       	pop	r31
    2574:	ef 91       	pop	r30
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	bf 91       	pop	r27
    257c:	af 91       	pop	r26
    257e:	9f 91       	pop	r25
    2580:	8f 91       	pop	r24
    2582:	7f 91       	pop	r23
    2584:	6f 91       	pop	r22
    2586:	5f 91       	pop	r21
    2588:	4f 91       	pop	r20
    258a:	3f 91       	pop	r19
    258c:	2f 91       	pop	r18
    258e:	1f 91       	pop	r17
    2590:	0f 91       	pop	r16
    2592:	ff 90       	pop	r15
    2594:	ef 90       	pop	r14
    2596:	df 90       	pop	r13
    2598:	cf 90       	pop	r12
    259a:	bf 90       	pop	r11
    259c:	af 90       	pop	r10
    259e:	9f 90       	pop	r9
    25a0:	8f 90       	pop	r8
    25a2:	7f 90       	pop	r7
    25a4:	6f 90       	pop	r6
    25a6:	5f 90       	pop	r5
    25a8:	4f 90       	pop	r4
    25aa:	3f 90       	pop	r3
    25ac:	2f 90       	pop	r2
    25ae:	1f 90       	pop	r1
    25b0:	0f 90       	pop	r0
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    25b6:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
}
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    25ce:	0f 92       	push	r0
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	0f 92       	push	r0
    25d6:	1f 92       	push	r1
    25d8:	11 24       	eor	r1, r1
    25da:	2f 92       	push	r2
    25dc:	3f 92       	push	r3
    25de:	4f 92       	push	r4
    25e0:	5f 92       	push	r5
    25e2:	6f 92       	push	r6
    25e4:	7f 92       	push	r7
    25e6:	8f 92       	push	r8
    25e8:	9f 92       	push	r9
    25ea:	af 92       	push	r10
    25ec:	bf 92       	push	r11
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	2f 93       	push	r18
    25fc:	3f 93       	push	r19
    25fe:	4f 93       	push	r20
    2600:	5f 93       	push	r21
    2602:	6f 93       	push	r22
    2604:	7f 93       	push	r23
    2606:	8f 93       	push	r24
    2608:	9f 93       	push	r25
    260a:	af 93       	push	r26
    260c:	bf 93       	push	r27
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	ef 93       	push	r30
    2614:	ff 93       	push	r31
    2616:	a0 91 56 06 	lds	r26, 0x0656
    261a:	b0 91 57 06 	lds	r27, 0x0657
    261e:	0d b6       	in	r0, 0x3d	; 61
    2620:	0d 92       	st	X+, r0
    2622:	0e b6       	in	r0, 0x3e	; 62
    2624:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2626:	0e 94 10 29 	call	0x5220	; 0x5220 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    262a:	a0 91 56 06 	lds	r26, 0x0656
    262e:	b0 91 57 06 	lds	r27, 0x0657
    2632:	cd 91       	ld	r28, X+
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	dd 91       	ld	r29, X+
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	ff 91       	pop	r31
    263c:	ef 91       	pop	r30
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	bf 91       	pop	r27
    2644:	af 91       	pop	r26
    2646:	9f 91       	pop	r25
    2648:	8f 91       	pop	r24
    264a:	7f 91       	pop	r23
    264c:	6f 91       	pop	r22
    264e:	5f 91       	pop	r21
    2650:	4f 91       	pop	r20
    2652:	3f 91       	pop	r19
    2654:	2f 91       	pop	r18
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	bf 90       	pop	r11
    2664:	af 90       	pop	r10
    2666:	9f 90       	pop	r9
    2668:	8f 90       	pop	r8
    266a:	7f 90       	pop	r7
    266c:	6f 90       	pop	r6
    266e:	5f 90       	pop	r5
    2670:	4f 90       	pop	r4
    2672:	3f 90       	pop	r3
    2674:	2f 90       	pop	r2
    2676:	1f 90       	pop	r1
    2678:	0f 90       	pop	r0
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    267e:	08 95       	ret

00002680 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2680:	0f 92       	push	r0
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	0f 92       	push	r0
    2688:	1f 92       	push	r1
    268a:	11 24       	eor	r1, r1
    268c:	2f 92       	push	r2
    268e:	3f 92       	push	r3
    2690:	4f 92       	push	r4
    2692:	5f 92       	push	r5
    2694:	6f 92       	push	r6
    2696:	7f 92       	push	r7
    2698:	8f 92       	push	r8
    269a:	9f 92       	push	r9
    269c:	af 92       	push	r10
    269e:	bf 92       	push	r11
    26a0:	cf 92       	push	r12
    26a2:	df 92       	push	r13
    26a4:	ef 92       	push	r14
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	2f 93       	push	r18
    26ae:	3f 93       	push	r19
    26b0:	4f 93       	push	r20
    26b2:	5f 93       	push	r21
    26b4:	6f 93       	push	r22
    26b6:	7f 93       	push	r23
    26b8:	8f 93       	push	r24
    26ba:	9f 93       	push	r25
    26bc:	af 93       	push	r26
    26be:	bf 93       	push	r27
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	ef 93       	push	r30
    26c6:	ff 93       	push	r31
    26c8:	a0 91 56 06 	lds	r26, 0x0656
    26cc:	b0 91 57 06 	lds	r27, 0x0657
    26d0:	0d b6       	in	r0, 0x3d	; 61
    26d2:	0d 92       	st	X+, r0
    26d4:	0e b6       	in	r0, 0x3e	; 62
    26d6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    26d8:	0e 94 2b 28 	call	0x5056	; 0x5056 <xTaskIncrementTick>
    26dc:	88 23       	and	r24, r24
    26de:	11 f0       	breq	.+4      	; 0x26e4 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    26e0:	0e 94 10 29 	call	0x5220	; 0x5220 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    26e4:	a0 91 56 06 	lds	r26, 0x0656
    26e8:	b0 91 57 06 	lds	r27, 0x0657
    26ec:	cd 91       	ld	r28, X+
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	dd 91       	ld	r29, X+
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	ff 91       	pop	r31
    26f6:	ef 91       	pop	r30
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	bf 91       	pop	r27
    26fe:	af 91       	pop	r26
    2700:	9f 91       	pop	r25
    2702:	8f 91       	pop	r24
    2704:	7f 91       	pop	r23
    2706:	6f 91       	pop	r22
    2708:	5f 91       	pop	r21
    270a:	4f 91       	pop	r20
    270c:	3f 91       	pop	r19
    270e:	2f 91       	pop	r18
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	bf 90       	pop	r11
    271e:	af 90       	pop	r10
    2720:	9f 90       	pop	r9
    2722:	8f 90       	pop	r8
    2724:	7f 90       	pop	r7
    2726:	6f 90       	pop	r6
    2728:	5f 90       	pop	r5
    272a:	4f 90       	pop	r4
    272c:	3f 90       	pop	r3
    272e:	2f 90       	pop	r2
    2730:	1f 90       	pop	r1
    2732:	0f 90       	pop	r0
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2738:	08 95       	ret

0000273a <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <prvSetupTimerInterrupt+0x6>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <prvSetupTimerInterrupt+0x8>
    2742:	00 d0       	rcall	.+0      	; 0x2744 <prvSetupTimerInterrupt+0xa>
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2748:	80 e4       	ldi	r24, 0x40	; 64
    274a:	9f e1       	ldi	r25, 0x1F	; 31
    274c:	a0 e0       	ldi	r26, 0x00	; 0
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	8b 83       	std	Y+3, r24	; 0x03
    2752:	9c 83       	std	Y+4, r25	; 0x04
    2754:	ad 83       	std	Y+5, r26	; 0x05
    2756:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	ad 81       	ldd	r26, Y+5	; 0x05
    275e:	be 81       	ldd	r27, Y+6	; 0x06
    2760:	68 94       	set
    2762:	15 f8       	bld	r1, 5
    2764:	b6 95       	lsr	r27
    2766:	a7 95       	ror	r26
    2768:	97 95       	ror	r25
    276a:	87 95       	ror	r24
    276c:	16 94       	lsr	r1
    276e:	d1 f7       	brne	.-12     	; 0x2764 <prvSetupTimerInterrupt+0x2a>
    2770:	8b 83       	std	Y+3, r24	; 0x03
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	ad 83       	std	Y+5, r26	; 0x05
    2776:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	ad 81       	ldd	r26, Y+5	; 0x05
    277e:	be 81       	ldd	r27, Y+6	; 0x06
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	a1 09       	sbc	r26, r1
    2784:	b1 09       	sbc	r27, r1
    2786:	8b 83       	std	Y+3, r24	; 0x03
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	ad 83       	std	Y+5, r26	; 0x05
    278c:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	ad 81       	ldd	r26, Y+5	; 0x05
    2798:	be 81       	ldd	r27, Y+6	; 0x06
    279a:	89 2f       	mov	r24, r25
    279c:	9a 2f       	mov	r25, r26
    279e:	ab 2f       	mov	r26, r27
    27a0:	bb 27       	eor	r27, r27
    27a2:	8b 83       	std	Y+3, r24	; 0x03
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	ad 83       	std	Y+5, r26	; 0x05
    27a8:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    27ae:	eb e4       	ldi	r30, 0x4B	; 75
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    27b6:	ea e4       	ldi	r30, 0x4A	; 74
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    27be:	8b e0       	ldi	r24, 0x0B	; 11
    27c0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    27c2:	ee e4       	ldi	r30, 0x4E	; 78
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    27ca:	e9 e5       	ldi	r30, 0x59	; 89
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	80 61       	ori	r24, 0x10	; 16
    27d6:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    27d8:	e9 e5       	ldi	r30, 0x59	; 89
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	80 83       	st	Z, r24
}
    27e0:	26 96       	adiw	r28, 0x06	; 6
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    27f2:	0e 94 40 13 	call	0x2680	; 0x2680 <vPortYieldFromTick>
		asm volatile ( "reti" );
    27f6:	18 95       	reti

000027f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <xQueueGenericReset+0x6>
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <xQueueGenericReset+0x8>
    2800:	0f 92       	push	r0
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
    280a:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = xQueue;
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	0f 92       	push	r0
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    281a:	e9 81       	ldd	r30, Y+1	; 0x01
    281c:	fa 81       	ldd	r31, Y+2	; 0x02
    281e:	40 81       	ld	r20, Z
    2820:	51 81       	ldd	r21, Z+1	; 0x01
    2822:	e9 81       	ldd	r30, Y+1	; 0x01
    2824:	fa 81       	ldd	r31, Y+2	; 0x02
    2826:	83 8d       	ldd	r24, Z+27	; 0x1b
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	e9 81       	ldd	r30, Y+1	; 0x01
    282e:	fa 81       	ldd	r31, Y+2	; 0x02
    2830:	84 8d       	ldd	r24, Z+28	; 0x1c
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	bc 01       	movw	r22, r24
    2838:	26 9f       	mul	r18, r22
    283a:	c0 01       	movw	r24, r0
    283c:	27 9f       	mul	r18, r23
    283e:	90 0d       	add	r25, r0
    2840:	36 9f       	mul	r19, r22
    2842:	90 0d       	add	r25, r0
    2844:	11 24       	eor	r1, r1
    2846:	84 0f       	add	r24, r20
    2848:	95 1f       	adc	r25, r21
    284a:	e9 81       	ldd	r30, Y+1	; 0x01
    284c:	fa 81       	ldd	r31, Y+2	; 0x02
    284e:	95 83       	std	Z+5, r25	; 0x05
    2850:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2852:	e9 81       	ldd	r30, Y+1	; 0x01
    2854:	fa 81       	ldd	r31, Y+2	; 0x02
    2856:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2858:	e9 81       	ldd	r30, Y+1	; 0x01
    285a:	fa 81       	ldd	r31, Y+2	; 0x02
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	e9 81       	ldd	r30, Y+1	; 0x01
    2862:	fa 81       	ldd	r31, Y+2	; 0x02
    2864:	93 83       	std	Z+3, r25	; 0x03
    2866:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2868:	e9 81       	ldd	r30, Y+1	; 0x01
    286a:	fa 81       	ldd	r31, Y+2	; 0x02
    286c:	40 81       	ld	r20, Z
    286e:	51 81       	ldd	r21, Z+1	; 0x01
    2870:	e9 81       	ldd	r30, Y+1	; 0x01
    2872:	fa 81       	ldd	r31, Y+2	; 0x02
    2874:	83 8d       	ldd	r24, Z+27	; 0x1b
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	9c 01       	movw	r18, r24
    287c:	21 50       	subi	r18, 0x01	; 1
    287e:	30 40       	sbci	r19, 0x00	; 0
    2880:	e9 81       	ldd	r30, Y+1	; 0x01
    2882:	fa 81       	ldd	r31, Y+2	; 0x02
    2884:	84 8d       	ldd	r24, Z+28	; 0x1c
    2886:	88 2f       	mov	r24, r24
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	bc 01       	movw	r22, r24
    288c:	26 9f       	mul	r18, r22
    288e:	c0 01       	movw	r24, r0
    2890:	27 9f       	mul	r18, r23
    2892:	90 0d       	add	r25, r0
    2894:	36 9f       	mul	r19, r22
    2896:	90 0d       	add	r25, r0
    2898:	11 24       	eor	r1, r1
    289a:	84 0f       	add	r24, r20
    289c:	95 1f       	adc	r25, r21
    289e:	e9 81       	ldd	r30, Y+1	; 0x01
    28a0:	fa 81       	ldd	r31, Y+2	; 0x02
    28a2:	97 83       	std	Z+7, r25	; 0x07
    28a4:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    28a6:	e9 81       	ldd	r30, Y+1	; 0x01
    28a8:	fa 81       	ldd	r31, Y+2	; 0x02
    28aa:	8f ef       	ldi	r24, 0xFF	; 255
    28ac:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	8f ef       	ldi	r24, 0xFF	; 255
    28b4:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	88 23       	and	r24, r24
    28ba:	79 f4       	brne	.+30     	; 0x28da <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    28bc:	e9 81       	ldd	r30, Y+1	; 0x01
    28be:	fa 81       	ldd	r31, Y+2	; 0x02
    28c0:	80 85       	ldd	r24, Z+8	; 0x08
    28c2:	88 23       	and	r24, r24
    28c4:	a1 f0       	breq	.+40     	; 0x28ee <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	08 96       	adiw	r24, 0x08	; 8
    28cc:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    28d0:	88 23       	and	r24, r24
    28d2:	69 f0       	breq	.+26     	; 0x28ee <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    28d4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
    28d8:	0a c0       	rjmp	.+20     	; 0x28ee <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
    28de:	08 96       	adiw	r24, 0x08	; 8
    28e0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	41 96       	adiw	r24, 0x11	; 17
    28ea:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    28ee:	0f 90       	pop	r0
    28f0:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	29 97       	sbiw	r28, 0x09	; 9
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	8f 83       	std	Y+7, r24	; 0x07
    291e:	68 87       	std	Y+8, r22	; 0x08
    2920:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    2922:	88 85       	ldd	r24, Y+8	; 0x08
    2924:	88 23       	and	r24, r24
    2926:	19 f4       	brne	.+6      	; 0x292e <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    2928:	1c 82       	std	Y+4, r1	; 0x04
    292a:	1b 82       	std	Y+3, r1	; 0x03
    292c:	10 c0       	rjmp	.+32     	; 0x294e <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    292e:	8f 81       	ldd	r24, Y+7	; 0x07
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	88 85       	ldd	r24, Y+8	; 0x08
    2936:	88 2f       	mov	r24, r24
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	ac 01       	movw	r20, r24
    293c:	24 9f       	mul	r18, r20
    293e:	c0 01       	movw	r24, r0
    2940:	25 9f       	mul	r18, r21
    2942:	90 0d       	add	r25, r0
    2944:	34 9f       	mul	r19, r20
    2946:	90 0d       	add	r25, r0
    2948:	11 24       	eor	r1, r1
    294a:	9c 83       	std	Y+4, r25	; 0x04
    294c:	8b 83       	std	Y+3, r24	; 0x03
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	4f 96       	adiw	r24, 0x1f	; 31
    2954:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <pvPortMalloc>
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	9e 81       	ldd	r25, Y+6	; 0x06
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	a1 f0       	breq	.+40     	; 0x298c <xQueueGenericCreate+0x88>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	9a 83       	std	Y+2, r25	; 0x02
    296a:	89 83       	std	Y+1, r24	; 0x01
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	4f 96       	adiw	r24, 0x1f	; 31
    2972:	9a 83       	std	Y+2, r25	; 0x02
    2974:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    2976:	29 81       	ldd	r18, Y+1	; 0x01
    2978:	3a 81       	ldd	r19, Y+2	; 0x02
    297a:	ed 81       	ldd	r30, Y+5	; 0x05
    297c:	fe 81       	ldd	r31, Y+6	; 0x06
    297e:	8f 81       	ldd	r24, Y+7	; 0x07
    2980:	68 85       	ldd	r22, Y+8	; 0x08
    2982:	a9 01       	movw	r20, r18
    2984:	29 85       	ldd	r18, Y+9	; 0x09
    2986:	8f 01       	movw	r16, r30
    2988:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    2990:	29 96       	adiw	r28, 0x09	; 9
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	08 95       	ret

000029a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	27 97       	sbiw	r28, 0x07	; 7
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	6a 83       	std	Y+2, r22	; 0x02
    29c2:	5c 83       	std	Y+4, r21	; 0x04
    29c4:	4b 83       	std	Y+3, r20	; 0x03
    29c6:	2d 83       	std	Y+5, r18	; 0x05
    29c8:	1f 83       	std	Y+7, r17	; 0x07
    29ca:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	88 23       	and	r24, r24
    29d0:	39 f4       	brne	.+14     	; 0x29e0 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    29d2:	8e 81       	ldd	r24, Y+6	; 0x06
    29d4:	9f 81       	ldd	r25, Y+7	; 0x07
    29d6:	ee 81       	ldd	r30, Y+6	; 0x06
    29d8:	ff 81       	ldd	r31, Y+7	; 0x07
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
    29de:	06 c0       	rjmp	.+12     	; 0x29ec <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	ee 81       	ldd	r30, Y+6	; 0x06
    29e6:	ff 81       	ldd	r31, Y+7	; 0x07
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    29ec:	ee 81       	ldd	r30, Y+6	; 0x06
    29ee:	ff 81       	ldd	r31, Y+7	; 0x07
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    29f4:	ee 81       	ldd	r30, Y+6	; 0x06
    29f6:	ff 81       	ldd	r31, Y+7	; 0x07
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    29fc:	8e 81       	ldd	r24, Y+6	; 0x06
    29fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2a00:	61 e0       	ldi	r22, 0x01	; 1
    2a02:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    2a06:	27 96       	adiw	r28, 0x07	; 7
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	08 95       	ret

00002a1c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <xQueueCreateCountingSemaphore+0x6>
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <xQueueCreateCountingSemaphore+0x8>
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	8b 83       	std	Y+3, r24	; 0x03
    2a2a:	6c 83       	std	Y+4, r22	; 0x04
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	42 e0       	ldi	r20, 0x02	; 2
    2a32:	0e 94 82 14 	call	0x2904	; 0x2904 <xQueueGenericCreate>
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01

		if( xHandle != NULL )
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	21 f0       	breq	.+8      	; 0x2a4a <xQueueCreateCountingSemaphore+0x2e>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    2a42:	e9 81       	ldd	r30, Y+1	; 0x01
    2a44:	fa 81       	ldd	r31, Y+2	; 0x02
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	82 8f       	std	Z+26, r24	; 0x1a
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	2f 97       	sbiw	r28, 0x0f	; 15
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	99 87       	std	Y+9, r25	; 0x09
    2a72:	88 87       	std	Y+8, r24	; 0x08
    2a74:	7b 87       	std	Y+11, r23	; 0x0b
    2a76:	6a 87       	std	Y+10, r22	; 0x0a
    2a78:	5d 87       	std	Y+13, r21	; 0x0d
    2a7a:	4c 87       	std	Y+12, r20	; 0x0c
    2a7c:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2a7e:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    2a80:	88 85       	ldd	r24, Y+8	; 0x08
    2a82:	99 85       	ldd	r25, Y+9	; 0x09
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a90:	fa 81       	ldd	r31, Y+2	; 0x02
    2a92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a94:	e9 81       	ldd	r30, Y+1	; 0x01
    2a96:	fa 81       	ldd	r31, Y+2	; 0x02
    2a98:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a9a:	98 17       	cp	r25, r24
    2a9c:	18 f0       	brcs	.+6      	; 0x2aa4 <xQueueGenericSend+0x48>
    2a9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2aa0:	82 30       	cpi	r24, 0x02	; 2
    2aa2:	11 f5       	brne	.+68     	; 0x2ae8 <xQueueGenericSend+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	2a 85       	ldd	r18, Y+10	; 0x0a
    2aaa:	3b 85       	ldd	r19, Y+11	; 0x0b
    2aac:	b9 01       	movw	r22, r18
    2aae:	4e 85       	ldd	r20, Y+14	; 0x0e
    2ab0:	0e 94 80 19 	call	0x3300	; 0x3300 <prvCopyDataToQueue>
    2ab4:	8b 83       	std	Y+3, r24	; 0x03

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aba:	81 89       	ldd	r24, Z+17	; 0x11
    2abc:	88 23       	and	r24, r24
    2abe:	51 f0       	breq	.+20     	; 0x2ad4 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	41 96       	adiw	r24, 0x11	; 17
    2ac6:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    2aca:	88 23       	and	r24, r24
    2acc:	41 f0       	breq	.+16     	; 0x2ade <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    2ace:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
    2ad2:	05 c0       	rjmp	.+10     	; 0x2ade <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	88 23       	and	r24, r24
    2ad8:	11 f0       	breq	.+4      	; 0x2ade <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    2ada:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    2ade:	0f 90       	pop	r0
    2ae0:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	8f 87       	std	Y+15, r24	; 0x0f
    2ae6:	5c c0       	rjmp	.+184    	; 0x2ba0 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2ae8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aea:	9d 85       	ldd	r25, Y+13	; 0x0d
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	21 f4       	brne	.+8      	; 0x2af8 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2af0:	0f 90       	pop	r0
    2af2:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2af4:	1f 86       	std	Y+15, r1	; 0x0f
    2af6:	54 c0       	rjmp	.+168    	; 0x2ba0 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	88 23       	and	r24, r24
    2afc:	31 f4       	brne	.+12     	; 0x2b0a <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    2afe:	ce 01       	movw	r24, r28
    2b00:	05 96       	adiw	r24, 0x05	; 5
    2b02:	0e 94 b5 2a 	call	0x556a	; 0x556a <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2b0e:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	0f 92       	push	r0
    2b18:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b20:	19 f4       	brne	.+6      	; 0x2b28 <xQueueGenericSend+0xcc>
    2b22:	e9 81       	ldd	r30, Y+1	; 0x01
    2b24:	fa 81       	ldd	r31, Y+2	; 0x02
    2b26:	15 8e       	std	Z+29, r1	; 0x1d
    2b28:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b30:	19 f4       	brne	.+6      	; 0x2b38 <xQueueGenericSend+0xdc>
    2b32:	e9 81       	ldd	r30, Y+1	; 0x01
    2b34:	fa 81       	ldd	r31, Y+2	; 0x02
    2b36:	16 8e       	std	Z+30, r1	; 0x1e
    2b38:	0f 90       	pop	r0
    2b3a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	05 96       	adiw	r24, 0x05	; 5
    2b40:	9e 01       	movw	r18, r28
    2b42:	24 5f       	subi	r18, 0xF4	; 244
    2b44:	3f 4f       	sbci	r19, 0xFF	; 255
    2b46:	b9 01       	movw	r22, r18
    2b48:	0e 94 ce 2a 	call	0x559c	; 0x559c <xTaskCheckForTimeOut>
    2b4c:	88 23       	and	r24, r24
    2b4e:	09 f5       	brne	.+66     	; 0x2b92 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
    2b54:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <prvIsQueueFull>
    2b58:	88 23       	and	r24, r24
    2b5a:	a1 f0       	breq	.+40     	; 0x2b84 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b60:	08 96       	adiw	r24, 0x08	; 8
    2b62:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b64:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b66:	b9 01       	movw	r22, r18
    2b68:	0e 94 7d 29 	call	0x52fa	; 0x52fa <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b70:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2b74:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    2b78:	88 23       	and	r24, r24
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <xQueueGenericSend+0x122>
    2b7c:	85 cf       	rjmp	.-246    	; 0x2a88 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    2b7e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
    2b82:	82 cf       	rjmp	.-252    	; 0x2a88 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2b8c:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    2b90:	7b cf       	rjmp	.-266    	; 0x2a88 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2b9a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2b9e:	1f 86       	std	Y+15, r1	; 0x0f
    2ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	} /*lint -restore */
}
    2ba2:	2f 96       	adiw	r28, 0x0f	; 15
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	2c 97       	sbiw	r28, 0x0c	; 12
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	9f 83       	std	Y+7, r25	; 0x07
    2bca:	8e 83       	std	Y+6, r24	; 0x06
    2bcc:	79 87       	std	Y+9, r23	; 0x09
    2bce:	68 87       	std	Y+8, r22	; 0x08
    2bd0:	5b 87       	std	Y+11, r21	; 0x0b
    2bd2:	4a 87       	std	Y+10, r20	; 0x0a
    2bd4:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    2bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bda:	9b 83       	std	Y+3, r25	; 0x03
    2bdc:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2bde:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2be0:	ea 81       	ldd	r30, Y+2	; 0x02
    2be2:	fb 81       	ldd	r31, Y+3	; 0x03
    2be4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be6:	ea 81       	ldd	r30, Y+2	; 0x02
    2be8:	fb 81       	ldd	r31, Y+3	; 0x03
    2bea:	83 8d       	ldd	r24, Z+27	; 0x1b
    2bec:	98 17       	cp	r25, r24
    2bee:	18 f0       	brcs	.+6      	; 0x2bf6 <xQueueGenericSendFromISR+0x42>
    2bf0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bf2:	82 30       	cpi	r24, 0x02	; 2
    2bf4:	61 f5       	brne	.+88     	; 0x2c4e <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2bf6:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf8:	fb 81       	ldd	r31, Y+3	; 0x03
    2bfa:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bfc:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	28 85       	ldd	r18, Y+8	; 0x08
    2c04:	39 85       	ldd	r19, Y+9	; 0x09
    2c06:	b9 01       	movw	r22, r18
    2c08:	4c 85       	ldd	r20, Y+12	; 0x0c
    2c0a:	0e 94 80 19 	call	0x3300	; 0x3300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	8f 3f       	cpi	r24, 0xFF	; 255
    2c12:	a9 f4       	brne	.+42     	; 0x2c3e <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2c14:	ea 81       	ldd	r30, Y+2	; 0x02
    2c16:	fb 81       	ldd	r31, Y+3	; 0x03
    2c18:	81 89       	ldd	r24, Z+17	; 0x11
    2c1a:	88 23       	and	r24, r24
    2c1c:	a9 f0       	breq	.+42     	; 0x2c48 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	9b 81       	ldd	r25, Y+3	; 0x03
    2c22:	41 96       	adiw	r24, 0x11	; 17
    2c24:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    2c28:	88 23       	and	r24, r24
    2c2a:	71 f0       	breq	.+28     	; 0x2c48 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	51 f0       	breq	.+20     	; 0x2c48 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2c34:	ea 85       	ldd	r30, Y+10	; 0x0a
    2c36:	fb 85       	ldd	r31, Y+11	; 0x0b
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	80 83       	st	Z, r24
    2c3c:	05 c0       	rjmp	.+10     	; 0x2c48 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	ea 81       	ldd	r30, Y+2	; 0x02
    2c44:	fb 81       	ldd	r31, Y+3	; 0x03
    2c46:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	01 c0       	rjmp	.+2      	; 0x2c50 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2c4e:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2c50:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c52:	2c 96       	adiw	r28, 0x0c	; 12
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	2a 97       	sbiw	r28, 0x0a	; 10
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	98 87       	std	Y+8, r25	; 0x08
    2c7a:	8f 83       	std	Y+7, r24	; 0x07
    2c7c:	7a 87       	std	Y+10, r23	; 0x0a
    2c7e:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    2c80:	8f 81       	ldd	r24, Y+7	; 0x07
    2c82:	98 85       	ldd	r25, Y+8	; 0x08
    2c84:	9c 83       	std	Y+4, r25	; 0x04
    2c86:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2c88:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c90:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    2c92:	eb 81       	ldd	r30, Y+3	; 0x03
    2c94:	fc 81       	ldd	r31, Y+4	; 0x04
    2c96:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	89 17       	cp	r24, r25
    2c9c:	48 f5       	brcc	.+82     	; 0x2cf0 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca2:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ca4:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	8f 5f       	subi	r24, 0xFF	; 255
    2caa:	eb 81       	ldd	r30, Y+3	; 0x03
    2cac:	fc 81       	ldd	r31, Y+4	; 0x04
    2cae:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb4:	a9 f4       	brne	.+42     	; 0x2ce0 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2cb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cba:	81 89       	ldd	r24, Z+17	; 0x11
    2cbc:	88 23       	and	r24, r24
    2cbe:	a9 f0       	breq	.+42     	; 0x2cea <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	41 96       	adiw	r24, 0x11	; 17
    2cc6:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    2cca:	88 23       	and	r24, r24
    2ccc:	71 f0       	breq	.+28     	; 0x2cea <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2cce:	89 85       	ldd	r24, Y+9	; 0x09
    2cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	51 f0       	breq	.+20     	; 0x2cea <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2cd6:	e9 85       	ldd	r30, Y+9	; 0x09
    2cd8:	fa 85       	ldd	r31, Y+10	; 0x0a
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	80 83       	st	Z, r24
    2cde:	05 c0       	rjmp	.+10     	; 0x2cea <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	8f 5f       	subi	r24, 0xFF	; 255
    2ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce8:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	8e 83       	std	Y+6, r24	; 0x06
    2cee:	01 c0       	rjmp	.+2      	; 0x2cf2 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2cf0:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2cf2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2cf4:	2a 96       	adiw	r28, 0x0a	; 10
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	2e 97       	sbiw	r28, 0x0e	; 14
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	99 87       	std	Y+9, r25	; 0x09
    2d1c:	88 87       	std	Y+8, r24	; 0x08
    2d1e:	7b 87       	std	Y+11, r23	; 0x0b
    2d20:	6a 87       	std	Y+10, r22	; 0x0a
    2d22:	5d 87       	std	Y+13, r21	; 0x0d
    2d24:	4c 87       	std	Y+12, r20	; 0x0c
BaseType_t xEntryTimeSet = pdFALSE;
    2d26:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    2d28:	88 85       	ldd	r24, Y+8	; 0x08
    2d2a:	99 85       	ldd	r25, Y+9	; 0x09
    2d2c:	9b 83       	std	Y+3, r25	; 0x03
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2d36:	ea 81       	ldd	r30, Y+2	; 0x02
    2d38:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d3c:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	88 23       	and	r24, r24
    2d42:	f9 f0       	breq	.+62     	; 0x2d82 <xQueueReceive+0x7c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	9b 81       	ldd	r25, Y+3	; 0x03
    2d48:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d4a:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d4c:	b9 01       	movw	r22, r18
    2d4e:	0e 94 26 1a 	call	0x344c	; 0x344c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	81 50       	subi	r24, 0x01	; 1
    2d56:	ea 81       	ldd	r30, Y+2	; 0x02
    2d58:	fb 81       	ldd	r31, Y+3	; 0x03
    2d5a:	82 8f       	std	Z+26, r24	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2d5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d60:	80 85       	ldd	r24, Z+8	; 0x08
    2d62:	88 23       	and	r24, r24
    2d64:	49 f0       	breq	.+18     	; 0x2d78 <xQueueReceive+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6a:	08 96       	adiw	r24, 0x08	; 8
    2d6c:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    2d70:	88 23       	and	r24, r24
    2d72:	11 f0       	breq	.+4      	; 0x2d78 <xQueueReceive+0x72>
					{
						queueYIELD_IF_USING_PREEMPTION();
    2d74:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    2d78:	0f 90       	pop	r0
    2d7a:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	8e 87       	std	Y+14, r24	; 0x0e
    2d80:	63 c0       	rjmp	.+198    	; 0x2e48 <xQueueReceive+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2d82:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d84:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	21 f4       	brne	.+8      	; 0x2d92 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2d8a:	0f 90       	pop	r0
    2d8c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2d8e:	1e 86       	std	Y+14, r1	; 0x0e
    2d90:	5b c0       	rjmp	.+182    	; 0x2e48 <xQueueReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
    2d94:	88 23       	and	r24, r24
    2d96:	31 f4       	brne	.+12     	; 0x2da4 <xQueueReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    2d98:	ce 01       	movw	r24, r28
    2d9a:	05 96       	adiw	r24, 0x05	; 5
    2d9c:	0e 94 b5 2a 	call	0x556a	; 0x556a <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2da4:	0f 90       	pop	r0
    2da6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2da8:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	0f 92       	push	r0
    2db2:	ea 81       	ldd	r30, Y+2	; 0x02
    2db4:	fb 81       	ldd	r31, Y+3	; 0x03
    2db6:	85 8d       	ldd	r24, Z+29	; 0x1d
    2db8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dba:	19 f4       	brne	.+6      	; 0x2dc2 <xQueueReceive+0xbc>
    2dbc:	ea 81       	ldd	r30, Y+2	; 0x02
    2dbe:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc0:	15 8e       	std	Z+29, r1	; 0x1d
    2dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    2dc8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dca:	19 f4       	brne	.+6      	; 0x2dd2 <xQueueReceive+0xcc>
    2dcc:	ea 81       	ldd	r30, Y+2	; 0x02
    2dce:	fb 81       	ldd	r31, Y+3	; 0x03
    2dd0:	16 8e       	std	Z+30, r1	; 0x1e
    2dd2:	0f 90       	pop	r0
    2dd4:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	05 96       	adiw	r24, 0x05	; 5
    2dda:	9e 01       	movw	r18, r28
    2ddc:	24 5f       	subi	r18, 0xF4	; 244
    2dde:	3f 4f       	sbci	r19, 0xFF	; 255
    2de0:	b9 01       	movw	r22, r18
    2de2:	0e 94 ce 2a 	call	0x559c	; 0x559c <xTaskCheckForTimeOut>
    2de6:	88 23       	and	r24, r24
    2de8:	09 f5       	brne	.+66     	; 0x2e2c <xQueueReceive+0x126>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvIsQueueEmpty>
    2df2:	88 23       	and	r24, r24
    2df4:	a1 f0       	breq	.+40     	; 0x2e1e <xQueueReceive+0x118>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfa:	41 96       	adiw	r24, 0x11	; 17
    2dfc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dfe:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e00:	b9 01       	movw	r22, r18
    2e02:	0e 94 7d 29 	call	0x52fa	; 0x52fa <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0a:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2e0e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    2e12:	88 23       	and	r24, r24
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <xQueueReceive+0x112>
    2e16:	8c cf       	rjmp	.-232    	; 0x2d30 <xQueueReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    2e18:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
    2e1c:	89 cf       	rjmp	.-238    	; 0x2d30 <xQueueReceive+0x2a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	9b 81       	ldd	r25, Y+3	; 0x03
    2e22:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2e26:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    2e2a:	82 cf       	rjmp	.-252    	; 0x2d30 <xQueueReceive+0x2a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e30:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2e34:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3c:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvIsQueueEmpty>
    2e40:	88 23       	and	r24, r24
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <xQueueReceive+0x140>
    2e44:	75 cf       	rjmp	.-278    	; 0x2d30 <xQueueReceive+0x2a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2e46:	1e 86       	std	Y+14, r1	; 0x0e
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    2e48:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    2e4a:	2e 96       	adiw	r28, 0x0e	; 14
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	2c 97       	sbiw	r28, 0x0c	; 12
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	99 87       	std	Y+9, r25	; 0x09
    2e72:	88 87       	std	Y+8, r24	; 0x08
    2e74:	7b 87       	std	Y+11, r23	; 0x0b
    2e76:	6a 87       	std	Y+10, r22	; 0x0a
BaseType_t xEntryTimeSet = pdFALSE;
    2e78:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    2e7a:	88 85       	ldd	r24, Y+8	; 0x08
    2e7c:	99 85       	ldd	r25, Y+9	; 0x09
    2e7e:	9b 83       	std	Y+3, r25	; 0x03
    2e80:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    2e88:	ea 81       	ldd	r30, Y+2	; 0x02
    2e8a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e8e:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	88 23       	and	r24, r24
    2e94:	c1 f0       	breq	.+48     	; 0x2ec6 <xQueueSemaphoreTake+0x6a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	81 50       	subi	r24, 0x01	; 1
    2e9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e9e:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2ea0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ea2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ea4:	80 85       	ldd	r24, Z+8	; 0x08
    2ea6:	88 23       	and	r24, r24
    2ea8:	49 f0       	breq	.+18     	; 0x2ebc <xQueueSemaphoreTake+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	9b 81       	ldd	r25, Y+3	; 0x03
    2eae:	08 96       	adiw	r24, 0x08	; 8
    2eb0:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    2eb4:	88 23       	and	r24, r24
    2eb6:	11 f0       	breq	.+4      	; 0x2ebc <xQueueSemaphoreTake+0x60>
					{
						queueYIELD_IF_USING_PREEMPTION();
    2eb8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    2ebc:	0f 90       	pop	r0
    2ebe:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	8c 87       	std	Y+12, r24	; 0x0c
    2ec4:	63 c0       	rjmp	.+198    	; 0x2f8c <xQueueSemaphoreTake+0x130>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ec8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	21 f4       	brne	.+8      	; 0x2ed6 <xQueueSemaphoreTake+0x7a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    2ece:	0f 90       	pop	r0
    2ed0:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2ed2:	1c 86       	std	Y+12, r1	; 0x0c
    2ed4:	5b c0       	rjmp	.+182    	; 0x2f8c <xQueueSemaphoreTake+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
    2ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed8:	88 23       	and	r24, r24
    2eda:	31 f4       	brne	.+12     	; 0x2ee8 <xQueueSemaphoreTake+0x8c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    2edc:	ce 01       	movw	r24, r28
    2ede:	05 96       	adiw	r24, 0x05	; 5
    2ee0:	0e 94 b5 2a 	call	0x556a	; 0x556a <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2ee8:	0f 90       	pop	r0
    2eea:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    2eec:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	0f 92       	push	r0
    2ef6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef8:	fb 81       	ldd	r31, Y+3	; 0x03
    2efa:	85 8d       	ldd	r24, Z+29	; 0x1d
    2efc:	8f 3f       	cpi	r24, 0xFF	; 255
    2efe:	19 f4       	brne	.+6      	; 0x2f06 <xQueueSemaphoreTake+0xaa>
    2f00:	ea 81       	ldd	r30, Y+2	; 0x02
    2f02:	fb 81       	ldd	r31, Y+3	; 0x03
    2f04:	15 8e       	std	Z+29, r1	; 0x1d
    2f06:	ea 81       	ldd	r30, Y+2	; 0x02
    2f08:	fb 81       	ldd	r31, Y+3	; 0x03
    2f0a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0e:	19 f4       	brne	.+6      	; 0x2f16 <xQueueSemaphoreTake+0xba>
    2f10:	ea 81       	ldd	r30, Y+2	; 0x02
    2f12:	fb 81       	ldd	r31, Y+3	; 0x03
    2f14:	16 8e       	std	Z+30, r1	; 0x1e
    2f16:	0f 90       	pop	r0
    2f18:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	05 96       	adiw	r24, 0x05	; 5
    2f1e:	9e 01       	movw	r18, r28
    2f20:	26 5f       	subi	r18, 0xF6	; 246
    2f22:	3f 4f       	sbci	r19, 0xFF	; 255
    2f24:	b9 01       	movw	r22, r18
    2f26:	0e 94 ce 2a 	call	0x559c	; 0x559c <xTaskCheckForTimeOut>
    2f2a:	88 23       	and	r24, r24
    2f2c:	09 f5       	brne	.+66     	; 0x2f70 <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvIsQueueEmpty>
    2f36:	88 23       	and	r24, r24
    2f38:	a1 f0       	breq	.+40     	; 0x2f62 <xQueueSemaphoreTake+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3e:	41 96       	adiw	r24, 0x11	; 17
    2f40:	2a 85       	ldd	r18, Y+10	; 0x0a
    2f42:	3b 85       	ldd	r19, Y+11	; 0x0b
    2f44:	b9 01       	movw	r22, r18
    2f46:	0e 94 7d 29 	call	0x52fa	; 0x52fa <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4e:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2f52:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    2f56:	88 23       	and	r24, r24
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <xQueueSemaphoreTake+0x100>
    2f5a:	93 cf       	rjmp	.-218    	; 0x2e82 <xQueueSemaphoreTake+0x26>
				{
					portYIELD_WITHIN_API();
    2f5c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
    2f60:	90 cf       	rjmp	.-224    	; 0x2e82 <xQueueSemaphoreTake+0x26>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	9b 81       	ldd	r25, Y+3	; 0x03
    2f66:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2f6a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    2f6e:	89 cf       	rjmp	.-238    	; 0x2e82 <xQueueSemaphoreTake+0x26>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	9b 81       	ldd	r25, Y+3	; 0x03
    2f74:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2f78:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f80:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvIsQueueEmpty>
    2f84:	88 23       	and	r24, r24
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <xQueueSemaphoreTake+0x12e>
    2f88:	7c cf       	rjmp	.-264    	; 0x2e82 <xQueueSemaphoreTake+0x26>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2f8a:	1c 86       	std	Y+12, r1	; 0x0c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    2f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2f8e:	2c 96       	adiw	r28, 0x0c	; 12
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	08 95       	ret

00002fa0 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    2fa0:	df 93       	push	r29
    2fa2:	cf 93       	push	r28
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	60 97       	sbiw	r28, 0x10	; 16
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	9b 87       	std	Y+11, r25	; 0x0b
    2fb6:	8a 87       	std	Y+10, r24	; 0x0a
    2fb8:	7d 87       	std	Y+13, r23	; 0x0d
    2fba:	6c 87       	std	Y+12, r22	; 0x0c
    2fbc:	5f 87       	std	Y+15, r21	; 0x0f
    2fbe:	4e 87       	std	Y+14, r20	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE;
    2fc0:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    2fc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fc6:	9b 83       	std	Y+3, r25	; 0x03
    2fc8:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2fd0:	ea 81       	ldd	r30, Y+2	; 0x02
    2fd2:	fb 81       	ldd	r31, Y+3	; 0x03
    2fd4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fd6:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	88 23       	and	r24, r24
    2fdc:	31 f1       	breq	.+76     	; 0x302a <xQueuePeek+0x8a>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    2fde:	ea 81       	ldd	r30, Y+2	; 0x02
    2fe0:	fb 81       	ldd	r31, Y+3	; 0x03
    2fe2:	86 81       	ldd	r24, Z+6	; 0x06
    2fe4:	97 81       	ldd	r25, Z+7	; 0x07
    2fe6:	9d 83       	std	Y+5, r25	; 0x05
    2fe8:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	9b 81       	ldd	r25, Y+3	; 0x03
    2fee:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ff0:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ff2:	b9 01       	movw	r22, r18
    2ff4:	0e 94 26 1a 	call	0x344c	; 0x344c <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    2ff8:	ea 81       	ldd	r30, Y+2	; 0x02
    2ffa:	fb 81       	ldd	r31, Y+3	; 0x03
    2ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    3000:	97 83       	std	Z+7, r25	; 0x07
    3002:	86 83       	std	Z+6, r24	; 0x06

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3004:	ea 81       	ldd	r30, Y+2	; 0x02
    3006:	fb 81       	ldd	r31, Y+3	; 0x03
    3008:	81 89       	ldd	r24, Z+17	; 0x11
    300a:	88 23       	and	r24, r24
    300c:	49 f0       	breq	.+18     	; 0x3020 <xQueuePeek+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	9b 81       	ldd	r25, Y+3	; 0x03
    3012:	41 96       	adiw	r24, 0x11	; 17
    3014:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    3018:	88 23       	and	r24, r24
    301a:	11 f0       	breq	.+4      	; 0x3020 <xQueuePeek+0x80>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    301c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    3020:	0f 90       	pop	r0
    3022:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	88 8b       	std	Y+16, r24	; 0x10
    3028:	63 c0       	rjmp	.+198    	; 0x30f0 <xQueuePeek+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    302a:	8e 85       	ldd	r24, Y+14	; 0x0e
    302c:	9f 85       	ldd	r25, Y+15	; 0x0f
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	21 f4       	brne	.+8      	; 0x303a <xQueuePeek+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3032:	0f 90       	pop	r0
    3034:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3036:	18 8a       	std	Y+16, r1	; 0x10
    3038:	5b c0       	rjmp	.+182    	; 0x30f0 <xQueuePeek+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    303a:	8e 81       	ldd	r24, Y+6	; 0x06
    303c:	88 23       	and	r24, r24
    303e:	31 f4       	brne	.+12     	; 0x304c <xQueuePeek+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    3040:	ce 01       	movw	r24, r28
    3042:	07 96       	adiw	r24, 0x07	; 7
    3044:	0e 94 b5 2a 	call	0x556a	; 0x556a <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    304c:	0f 90       	pop	r0
    304e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3050:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	0f 92       	push	r0
    305a:	ea 81       	ldd	r30, Y+2	; 0x02
    305c:	fb 81       	ldd	r31, Y+3	; 0x03
    305e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3060:	8f 3f       	cpi	r24, 0xFF	; 255
    3062:	19 f4       	brne	.+6      	; 0x306a <xQueuePeek+0xca>
    3064:	ea 81       	ldd	r30, Y+2	; 0x02
    3066:	fb 81       	ldd	r31, Y+3	; 0x03
    3068:	15 8e       	std	Z+29, r1	; 0x1d
    306a:	ea 81       	ldd	r30, Y+2	; 0x02
    306c:	fb 81       	ldd	r31, Y+3	; 0x03
    306e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3070:	8f 3f       	cpi	r24, 0xFF	; 255
    3072:	19 f4       	brne	.+6      	; 0x307a <xQueuePeek+0xda>
    3074:	ea 81       	ldd	r30, Y+2	; 0x02
    3076:	fb 81       	ldd	r31, Y+3	; 0x03
    3078:	16 8e       	std	Z+30, r1	; 0x1e
    307a:	0f 90       	pop	r0
    307c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    307e:	ce 01       	movw	r24, r28
    3080:	07 96       	adiw	r24, 0x07	; 7
    3082:	9e 01       	movw	r18, r28
    3084:	22 5f       	subi	r18, 0xF2	; 242
    3086:	3f 4f       	sbci	r19, 0xFF	; 255
    3088:	b9 01       	movw	r22, r18
    308a:	0e 94 ce 2a 	call	0x559c	; 0x559c <xTaskCheckForTimeOut>
    308e:	88 23       	and	r24, r24
    3090:	09 f5       	brne	.+66     	; 0x30d4 <xQueuePeek+0x134>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	9b 81       	ldd	r25, Y+3	; 0x03
    3096:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvIsQueueEmpty>
    309a:	88 23       	and	r24, r24
    309c:	a1 f0       	breq	.+40     	; 0x30c6 <xQueuePeek+0x126>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    309e:	8a 81       	ldd	r24, Y+2	; 0x02
    30a0:	9b 81       	ldd	r25, Y+3	; 0x03
    30a2:	41 96       	adiw	r24, 0x11	; 17
    30a4:	2e 85       	ldd	r18, Y+14	; 0x0e
    30a6:	3f 85       	ldd	r19, Y+15	; 0x0f
    30a8:	b9 01       	movw	r22, r18
    30aa:	0e 94 7d 29 	call	0x52fa	; 0x52fa <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	9b 81       	ldd	r25, Y+3	; 0x03
    30b2:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    30b6:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    30ba:	88 23       	and	r24, r24
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <xQueuePeek+0x120>
    30be:	85 cf       	rjmp	.-246    	; 0x2fca <xQueuePeek+0x2a>
				{
					portYIELD_WITHIN_API();
    30c0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
    30c4:	82 cf       	rjmp	.-252    	; 0x2fca <xQueuePeek+0x2a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
				( void ) xTaskResumeAll();
    30ce:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    30d2:	7b cf       	rjmp	.-266    	; 0x2fca <xQueuePeek+0x2a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	9b 81       	ldd	r25, Y+3	; 0x03
    30d8:	0e 94 6d 1a 	call	0x34da	; 0x34da <prvUnlockQueue>
			( void ) xTaskResumeAll();
    30dc:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	9b 81       	ldd	r25, Y+3	; 0x03
    30e4:	0e 94 c0 1a 	call	0x3580	; 0x3580 <prvIsQueueEmpty>
    30e8:	88 23       	and	r24, r24
    30ea:	09 f4       	brne	.+2      	; 0x30ee <xQueuePeek+0x14e>
    30ec:	6e cf       	rjmp	.-292    	; 0x2fca <xQueuePeek+0x2a>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    30ee:	18 8a       	std	Y+16, r1	; 0x10
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    30f0:	88 89       	ldd	r24, Y+16	; 0x10
}
    30f2:	60 96       	adiw	r28, 0x10	; 16
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	2c 97       	sbiw	r28, 0x0c	; 12
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	98 87       	std	Y+8, r25	; 0x08
    311a:	8f 83       	std	Y+7, r24	; 0x07
    311c:	7a 87       	std	Y+10, r23	; 0x0a
    311e:	69 87       	std	Y+9, r22	; 0x09
    3120:	5c 87       	std	Y+12, r21	; 0x0c
    3122:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    3124:	8f 81       	ldd	r24, Y+7	; 0x07
    3126:	98 85       	ldd	r25, Y+8	; 0x08
    3128:	9c 83       	std	Y+4, r25	; 0x04
    312a:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    312c:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    312e:	eb 81       	ldd	r30, Y+3	; 0x03
    3130:	fc 81       	ldd	r31, Y+4	; 0x04
    3132:	82 8d       	ldd	r24, Z+26	; 0x1a
    3134:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	88 23       	and	r24, r24
    313a:	81 f1       	breq	.+96     	; 0x319c <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    313c:	eb 81       	ldd	r30, Y+3	; 0x03
    313e:	fc 81       	ldd	r31, Y+4	; 0x04
    3140:	85 8d       	ldd	r24, Z+29	; 0x1d
    3142:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3144:	8b 81       	ldd	r24, Y+3	; 0x03
    3146:	9c 81       	ldd	r25, Y+4	; 0x04
    3148:	29 85       	ldd	r18, Y+9	; 0x09
    314a:	3a 85       	ldd	r19, Y+10	; 0x0a
    314c:	b9 01       	movw	r22, r18
    314e:	0e 94 26 1a 	call	0x344c	; 0x344c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	81 50       	subi	r24, 0x01	; 1
    3156:	eb 81       	ldd	r30, Y+3	; 0x03
    3158:	fc 81       	ldd	r31, Y+4	; 0x04
    315a:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	8f 3f       	cpi	r24, 0xFF	; 255
    3160:	a9 f4       	brne	.+42     	; 0x318c <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3162:	eb 81       	ldd	r30, Y+3	; 0x03
    3164:	fc 81       	ldd	r31, Y+4	; 0x04
    3166:	80 85       	ldd	r24, Z+8	; 0x08
    3168:	88 23       	and	r24, r24
    316a:	a9 f0       	breq	.+42     	; 0x3196 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	08 96       	adiw	r24, 0x08	; 8
    3172:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    3176:	88 23       	and	r24, r24
    3178:	71 f0       	breq	.+28     	; 0x3196 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    317a:	8b 85       	ldd	r24, Y+11	; 0x0b
    317c:	9c 85       	ldd	r25, Y+12	; 0x0c
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	51 f0       	breq	.+20     	; 0x3196 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    3182:	eb 85       	ldd	r30, Y+11	; 0x0b
    3184:	fc 85       	ldd	r31, Y+12	; 0x0c
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	80 83       	st	Z, r24
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	8f 5f       	subi	r24, 0xFF	; 255
    3190:	eb 81       	ldd	r30, Y+3	; 0x03
    3192:	fc 81       	ldd	r31, Y+4	; 0x04
    3194:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	8e 83       	std	Y+6, r24	; 0x06
    319a:	01 c0       	rjmp	.+2      	; 0x319e <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    319c:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    319e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    31a0:	2c 96       	adiw	r28, 0x0c	; 12
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	08 95       	ret

000031b2 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	2a 97       	sbiw	r28, 0x0a	; 10
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	98 87       	std	Y+8, r25	; 0x08
    31c8:	8f 83       	std	Y+7, r24	; 0x07
    31ca:	7a 87       	std	Y+10, r23	; 0x0a
    31cc:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    31ce:	8f 81       	ldd	r24, Y+7	; 0x07
    31d0:	98 85       	ldd	r25, Y+8	; 0x08
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    31d6:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    31d8:	e9 81       	ldd	r30, Y+1	; 0x01
    31da:	fa 81       	ldd	r31, Y+2	; 0x02
    31dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    31de:	88 23       	and	r24, r24
    31e0:	b1 f0       	breq	.+44     	; 0x320e <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    31e2:	e9 81       	ldd	r30, Y+1	; 0x01
    31e4:	fa 81       	ldd	r31, Y+2	; 0x02
    31e6:	86 81       	ldd	r24, Z+6	; 0x06
    31e8:	97 81       	ldd	r25, Z+7	; 0x07
    31ea:	9c 83       	std	Y+4, r25	; 0x04
    31ec:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	29 85       	ldd	r18, Y+9	; 0x09
    31f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    31f6:	b9 01       	movw	r22, r18
    31f8:	0e 94 26 1a 	call	0x344c	; 0x344c <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    31fc:	e9 81       	ldd	r30, Y+1	; 0x01
    31fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	9c 81       	ldd	r25, Y+4	; 0x04
    3204:	97 83       	std	Z+7, r25	; 0x07
    3206:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	8e 83       	std	Y+6, r24	; 0x06
    320c:	01 c0       	rjmp	.+2      	; 0x3210 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    320e:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3210:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3212:	2a 96       	adiw	r28, 0x0a	; 10
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	00 d0       	rcall	.+0      	; 0x322a <uxQueueMessagesWaiting+0x6>
    322a:	0f 92       	push	r0
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	9b 83       	std	Y+3, r25	; 0x03
    3232:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    323a:	ea 81       	ldd	r30, Y+2	; 0x02
    323c:	fb 81       	ldd	r31, Y+3	; 0x03
    323e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3240:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3242:	0f 90       	pop	r0
    3244:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3246:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	cf 91       	pop	r28
    3250:	df 91       	pop	r29
    3252:	08 95       	ret

00003254 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    3254:	df 93       	push	r29
    3256:	cf 93       	push	r28
    3258:	00 d0       	rcall	.+0      	; 0x325a <uxQueueSpacesAvailable+0x6>
    325a:	00 d0       	rcall	.+0      	; 0x325c <uxQueueSpacesAvailable+0x8>
    325c:	0f 92       	push	r0
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	9d 83       	std	Y+5, r25	; 0x05
    3264:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    3266:	8c 81       	ldd	r24, Y+4	; 0x04
    3268:	9d 81       	ldd	r25, Y+5	; 0x05
    326a:	9a 83       	std	Y+2, r25	; 0x02
    326c:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    3274:	e9 81       	ldd	r30, Y+1	; 0x01
    3276:	fa 81       	ldd	r31, Y+2	; 0x02
    3278:	93 8d       	ldd	r25, Z+27	; 0x1b
    327a:	e9 81       	ldd	r30, Y+1	; 0x01
    327c:	fa 81       	ldd	r31, Y+2	; 0x02
    327e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3280:	29 2f       	mov	r18, r25
    3282:	28 1b       	sub	r18, r24
    3284:	82 2f       	mov	r24, r18
    3286:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    3288:	0f 90       	pop	r0
    328a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	08 95       	ret

0000329e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <uxQueueMessagesWaitingFromISR+0x6>
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <uxQueueMessagesWaitingFromISR+0x8>
    32a6:	0f 92       	push	r0
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	9d 83       	std	Y+5, r25	; 0x05
    32ae:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    32b0:	8c 81       	ldd	r24, Y+4	; 0x04
    32b2:	9d 81       	ldd	r25, Y+5	; 0x05
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
    32b8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ba:	fa 81       	ldd	r31, Y+2	; 0x02
    32bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    32be:	8b 83       	std	Y+3, r24	; 0x03

	return uxReturn;
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	08 95       	ret

000032d2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <vQueueDelete+0x6>
    32d8:	00 d0       	rcall	.+0      	; 0x32da <vQueueDelete+0x8>
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	9c 83       	std	Y+4, r25	; 0x04
    32e0:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = xQueue;
    32e2:	8b 81       	ldd	r24, Y+3	; 0x03
    32e4:	9c 81       	ldd	r25, Y+4	; 0x04
    32e6:	9a 83       	std	Y+2, r25	; 0x02
    32e8:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	9a 81       	ldd	r25, Y+2	; 0x02
    32ee:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	27 97       	sbiw	r28, 0x07	; 7
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	9c 83       	std	Y+4, r25	; 0x04
    3316:	8b 83       	std	Y+3, r24	; 0x03
    3318:	7e 83       	std	Y+6, r23	; 0x06
    331a:	6d 83       	std	Y+5, r22	; 0x05
    331c:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    331e:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3320:	eb 81       	ldd	r30, Y+3	; 0x03
    3322:	fc 81       	ldd	r31, Y+4	; 0x04
    3324:	82 8d       	ldd	r24, Z+26	; 0x1a
    3326:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3328:	eb 81       	ldd	r30, Y+3	; 0x03
    332a:	fc 81       	ldd	r31, Y+4	; 0x04
    332c:	84 8d       	ldd	r24, Z+28	; 0x1c
    332e:	88 23       	and	r24, r24
    3330:	09 f4       	brne	.+2      	; 0x3334 <prvCopyDataToQueue+0x34>
    3332:	7d c0       	rjmp	.+250    	; 0x342e <prvCopyDataToQueue+0x12e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    3334:	8f 81       	ldd	r24, Y+7	; 0x07
    3336:	88 23       	and	r24, r24
    3338:	99 f5       	brne	.+102    	; 0x33a0 <prvCopyDataToQueue+0xa0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    333a:	eb 81       	ldd	r30, Y+3	; 0x03
    333c:	fc 81       	ldd	r31, Y+4	; 0x04
    333e:	62 81       	ldd	r22, Z+2	; 0x02
    3340:	73 81       	ldd	r23, Z+3	; 0x03
    3342:	eb 81       	ldd	r30, Y+3	; 0x03
    3344:	fc 81       	ldd	r31, Y+4	; 0x04
    3346:	84 8d       	ldd	r24, Z+28	; 0x1c
    3348:	48 2f       	mov	r20, r24
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	2d 81       	ldd	r18, Y+5	; 0x05
    334e:	3e 81       	ldd	r19, Y+6	; 0x06
    3350:	cb 01       	movw	r24, r22
    3352:	b9 01       	movw	r22, r18
    3354:	0e 94 5d 30 	call	0x60ba	; 0x60ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    3358:	eb 81       	ldd	r30, Y+3	; 0x03
    335a:	fc 81       	ldd	r31, Y+4	; 0x04
    335c:	22 81       	ldd	r18, Z+2	; 0x02
    335e:	33 81       	ldd	r19, Z+3	; 0x03
    3360:	eb 81       	ldd	r30, Y+3	; 0x03
    3362:	fc 81       	ldd	r31, Y+4	; 0x04
    3364:	84 8d       	ldd	r24, Z+28	; 0x1c
    3366:	88 2f       	mov	r24, r24
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	82 0f       	add	r24, r18
    336c:	93 1f       	adc	r25, r19
    336e:	eb 81       	ldd	r30, Y+3	; 0x03
    3370:	fc 81       	ldd	r31, Y+4	; 0x04
    3372:	93 83       	std	Z+3, r25	; 0x03
    3374:	82 83       	std	Z+2, r24	; 0x02
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3376:	eb 81       	ldd	r30, Y+3	; 0x03
    3378:	fc 81       	ldd	r31, Y+4	; 0x04
    337a:	22 81       	ldd	r18, Z+2	; 0x02
    337c:	33 81       	ldd	r19, Z+3	; 0x03
    337e:	eb 81       	ldd	r30, Y+3	; 0x03
    3380:	fc 81       	ldd	r31, Y+4	; 0x04
    3382:	84 81       	ldd	r24, Z+4	; 0x04
    3384:	95 81       	ldd	r25, Z+5	; 0x05
    3386:	28 17       	cp	r18, r24
    3388:	39 07       	cpc	r19, r25
    338a:	08 f4       	brcc	.+2      	; 0x338e <prvCopyDataToQueue+0x8e>
    338c:	50 c0       	rjmp	.+160    	; 0x342e <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    338e:	eb 81       	ldd	r30, Y+3	; 0x03
    3390:	fc 81       	ldd	r31, Y+4	; 0x04
    3392:	80 81       	ld	r24, Z
    3394:	91 81       	ldd	r25, Z+1	; 0x01
    3396:	eb 81       	ldd	r30, Y+3	; 0x03
    3398:	fc 81       	ldd	r31, Y+4	; 0x04
    339a:	93 83       	std	Z+3, r25	; 0x03
    339c:	82 83       	std	Z+2, r24	; 0x02
    339e:	47 c0       	rjmp	.+142    	; 0x342e <prvCopyDataToQueue+0x12e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    33a0:	eb 81       	ldd	r30, Y+3	; 0x03
    33a2:	fc 81       	ldd	r31, Y+4	; 0x04
    33a4:	66 81       	ldd	r22, Z+6	; 0x06
    33a6:	77 81       	ldd	r23, Z+7	; 0x07
    33a8:	eb 81       	ldd	r30, Y+3	; 0x03
    33aa:	fc 81       	ldd	r31, Y+4	; 0x04
    33ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    33ae:	48 2f       	mov	r20, r24
    33b0:	50 e0       	ldi	r21, 0x00	; 0
    33b2:	2d 81       	ldd	r18, Y+5	; 0x05
    33b4:	3e 81       	ldd	r19, Y+6	; 0x06
    33b6:	cb 01       	movw	r24, r22
    33b8:	b9 01       	movw	r22, r18
    33ba:	0e 94 5d 30 	call	0x60ba	; 0x60ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    33be:	eb 81       	ldd	r30, Y+3	; 0x03
    33c0:	fc 81       	ldd	r31, Y+4	; 0x04
    33c2:	26 81       	ldd	r18, Z+6	; 0x06
    33c4:	37 81       	ldd	r19, Z+7	; 0x07
    33c6:	eb 81       	ldd	r30, Y+3	; 0x03
    33c8:	fc 81       	ldd	r31, Y+4	; 0x04
    33ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    33cc:	88 2f       	mov	r24, r24
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	90 95       	com	r25
    33d2:	81 95       	neg	r24
    33d4:	9f 4f       	sbci	r25, 0xFF	; 255
    33d6:	82 0f       	add	r24, r18
    33d8:	93 1f       	adc	r25, r19
    33da:	eb 81       	ldd	r30, Y+3	; 0x03
    33dc:	fc 81       	ldd	r31, Y+4	; 0x04
    33de:	97 83       	std	Z+7, r25	; 0x07
    33e0:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    33e2:	eb 81       	ldd	r30, Y+3	; 0x03
    33e4:	fc 81       	ldd	r31, Y+4	; 0x04
    33e6:	26 81       	ldd	r18, Z+6	; 0x06
    33e8:	37 81       	ldd	r19, Z+7	; 0x07
    33ea:	eb 81       	ldd	r30, Y+3	; 0x03
    33ec:	fc 81       	ldd	r31, Y+4	; 0x04
    33ee:	80 81       	ld	r24, Z
    33f0:	91 81       	ldd	r25, Z+1	; 0x01
    33f2:	28 17       	cp	r18, r24
    33f4:	39 07       	cpc	r19, r25
    33f6:	90 f4       	brcc	.+36     	; 0x341c <prvCopyDataToQueue+0x11c>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    33f8:	eb 81       	ldd	r30, Y+3	; 0x03
    33fa:	fc 81       	ldd	r31, Y+4	; 0x04
    33fc:	24 81       	ldd	r18, Z+4	; 0x04
    33fe:	35 81       	ldd	r19, Z+5	; 0x05
    3400:	eb 81       	ldd	r30, Y+3	; 0x03
    3402:	fc 81       	ldd	r31, Y+4	; 0x04
    3404:	84 8d       	ldd	r24, Z+28	; 0x1c
    3406:	88 2f       	mov	r24, r24
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	90 95       	com	r25
    340c:	81 95       	neg	r24
    340e:	9f 4f       	sbci	r25, 0xFF	; 255
    3410:	82 0f       	add	r24, r18
    3412:	93 1f       	adc	r25, r19
    3414:	eb 81       	ldd	r30, Y+3	; 0x03
    3416:	fc 81       	ldd	r31, Y+4	; 0x04
    3418:	97 83       	std	Z+7, r25	; 0x07
    341a:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    341c:	8f 81       	ldd	r24, Y+7	; 0x07
    341e:	82 30       	cpi	r24, 0x02	; 2
    3420:	31 f4       	brne	.+12     	; 0x342e <prvCopyDataToQueue+0x12e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	88 23       	and	r24, r24
    3426:	19 f0       	breq	.+6      	; 0x342e <prvCopyDataToQueue+0x12e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	81 50       	subi	r24, 0x01	; 1
    342c:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	8f 5f       	subi	r24, 0xFF	; 255
    3432:	eb 81       	ldd	r30, Y+3	; 0x03
    3434:	fc 81       	ldd	r31, Y+4	; 0x04
    3436:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
}
    343a:	27 96       	adiw	r28, 0x07	; 7
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	00 d0       	rcall	.+0      	; 0x3452 <prvCopyDataFromQueue+0x6>
    3452:	00 d0       	rcall	.+0      	; 0x3454 <prvCopyDataFromQueue+0x8>
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
    345c:	7c 83       	std	Y+4, r23	; 0x04
    345e:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3460:	e9 81       	ldd	r30, Y+1	; 0x01
    3462:	fa 81       	ldd	r31, Y+2	; 0x02
    3464:	84 8d       	ldd	r24, Z+28	; 0x1c
    3466:	88 23       	and	r24, r24
    3468:	89 f1       	breq	.+98     	; 0x34cc <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    346a:	e9 81       	ldd	r30, Y+1	; 0x01
    346c:	fa 81       	ldd	r31, Y+2	; 0x02
    346e:	26 81       	ldd	r18, Z+6	; 0x06
    3470:	37 81       	ldd	r19, Z+7	; 0x07
    3472:	e9 81       	ldd	r30, Y+1	; 0x01
    3474:	fa 81       	ldd	r31, Y+2	; 0x02
    3476:	84 8d       	ldd	r24, Z+28	; 0x1c
    3478:	88 2f       	mov	r24, r24
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	82 0f       	add	r24, r18
    347e:	93 1f       	adc	r25, r19
    3480:	e9 81       	ldd	r30, Y+1	; 0x01
    3482:	fa 81       	ldd	r31, Y+2	; 0x02
    3484:	97 83       	std	Z+7, r25	; 0x07
    3486:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3488:	e9 81       	ldd	r30, Y+1	; 0x01
    348a:	fa 81       	ldd	r31, Y+2	; 0x02
    348c:	26 81       	ldd	r18, Z+6	; 0x06
    348e:	37 81       	ldd	r19, Z+7	; 0x07
    3490:	e9 81       	ldd	r30, Y+1	; 0x01
    3492:	fa 81       	ldd	r31, Y+2	; 0x02
    3494:	84 81       	ldd	r24, Z+4	; 0x04
    3496:	95 81       	ldd	r25, Z+5	; 0x05
    3498:	28 17       	cp	r18, r24
    349a:	39 07       	cpc	r19, r25
    349c:	40 f0       	brcs	.+16     	; 0x34ae <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    349e:	e9 81       	ldd	r30, Y+1	; 0x01
    34a0:	fa 81       	ldd	r31, Y+2	; 0x02
    34a2:	80 81       	ld	r24, Z
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	e9 81       	ldd	r30, Y+1	; 0x01
    34a8:	fa 81       	ldd	r31, Y+2	; 0x02
    34aa:	97 83       	std	Z+7, r25	; 0x07
    34ac:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    34ae:	e9 81       	ldd	r30, Y+1	; 0x01
    34b0:	fa 81       	ldd	r31, Y+2	; 0x02
    34b2:	46 81       	ldd	r20, Z+6	; 0x06
    34b4:	57 81       	ldd	r21, Z+7	; 0x07
    34b6:	e9 81       	ldd	r30, Y+1	; 0x01
    34b8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	8b 81       	ldd	r24, Y+3	; 0x03
    34c2:	9c 81       	ldd	r25, Y+4	; 0x04
    34c4:	ba 01       	movw	r22, r20
    34c6:	a9 01       	movw	r20, r18
    34c8:	0e 94 5d 30 	call	0x60ba	; 0x60ba <memcpy>
	}
}
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	08 95       	ret

000034da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    34da:	df 93       	push	r29
    34dc:	cf 93       	push	r28
    34de:	00 d0       	rcall	.+0      	; 0x34e0 <prvUnlockQueue+0x6>
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <prvUnlockQueue+0x8>
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	9c 83       	std	Y+4, r25	; 0x04
    34e8:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    34f0:	eb 81       	ldd	r30, Y+3	; 0x03
    34f2:	fc 81       	ldd	r31, Y+4	; 0x04
    34f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    34f6:	8a 83       	std	Y+2, r24	; 0x02
    34f8:	11 c0       	rjmp	.+34     	; 0x351c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    34fa:	eb 81       	ldd	r30, Y+3	; 0x03
    34fc:	fc 81       	ldd	r31, Y+4	; 0x04
    34fe:	81 89       	ldd	r24, Z+17	; 0x11
    3500:	88 23       	and	r24, r24
    3502:	79 f0       	breq	.+30     	; 0x3522 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	9c 81       	ldd	r25, Y+4	; 0x04
    3508:	41 96       	adiw	r24, 0x11	; 17
    350a:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    350e:	88 23       	and	r24, r24
    3510:	11 f0       	breq	.+4      	; 0x3516 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    3512:	0e 94 3b 2b 	call	0x5676	; 0x5676 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	81 50       	subi	r24, 0x01	; 1
    351a:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    351c:	8a 81       	ldd	r24, Y+2	; 0x02
    351e:	18 16       	cp	r1, r24
    3520:	64 f3       	brlt	.-40     	; 0x34fa <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    3522:	eb 81       	ldd	r30, Y+3	; 0x03
    3524:	fc 81       	ldd	r31, Y+4	; 0x04
    3526:	8f ef       	ldi	r24, 0xFF	; 255
    3528:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    352a:	0f 90       	pop	r0
    352c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	f8 94       	cli
    3532:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    3534:	eb 81       	ldd	r30, Y+3	; 0x03
    3536:	fc 81       	ldd	r31, Y+4	; 0x04
    3538:	85 8d       	ldd	r24, Z+29	; 0x1d
    353a:	89 83       	std	Y+1, r24	; 0x01
    353c:	11 c0       	rjmp	.+34     	; 0x3560 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    353e:	eb 81       	ldd	r30, Y+3	; 0x03
    3540:	fc 81       	ldd	r31, Y+4	; 0x04
    3542:	80 85       	ldd	r24, Z+8	; 0x08
    3544:	88 23       	and	r24, r24
    3546:	79 f0       	breq	.+30     	; 0x3566 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3548:	8b 81       	ldd	r24, Y+3	; 0x03
    354a:	9c 81       	ldd	r25, Y+4	; 0x04
    354c:	08 96       	adiw	r24, 0x08	; 8
    354e:	0e 94 cf 29 	call	0x539e	; 0x539e <xTaskRemoveFromEventList>
    3552:	88 23       	and	r24, r24
    3554:	11 f0       	breq	.+4      	; 0x355a <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    3556:	0e 94 3b 2b 	call	0x5676	; 0x5676 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	81 50       	subi	r24, 0x01	; 1
    355e:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    3560:	89 81       	ldd	r24, Y+1	; 0x01
    3562:	18 16       	cp	r1, r24
    3564:	64 f3       	brlt	.-40     	; 0x353e <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    3566:	eb 81       	ldd	r30, Y+3	; 0x03
    3568:	fc 81       	ldd	r31, Y+4	; 0x04
    356a:	8f ef       	ldi	r24, 0xFF	; 255
    356c:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    356e:	0f 90       	pop	r0
    3570:	0f be       	out	0x3f, r0	; 63
}
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <prvIsQueueEmpty+0x6>
    3586:	0f 92       	push	r0
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	9b 83       	std	Y+3, r25	; 0x03
    358e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3596:	ea 81       	ldd	r30, Y+2	; 0x02
    3598:	fb 81       	ldd	r31, Y+3	; 0x03
    359a:	82 8d       	ldd	r24, Z+26	; 0x1a
    359c:	88 23       	and	r24, r24
    359e:	19 f4       	brne	.+6      	; 0x35a6 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	01 c0       	rjmp	.+2      	; 0x35a8 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    35a6:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    35a8:	0f 90       	pop	r0
    35aa:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    35ae:	0f 90       	pop	r0
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	00 d0       	rcall	.+0      	; 0x35c0 <xQueueIsQueueEmptyFromISR+0x6>
    35c0:	00 d0       	rcall	.+0      	; 0x35c2 <xQueueIsQueueEmptyFromISR+0x8>
    35c2:	0f 92       	push	r0
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	9d 83       	std	Y+5, r25	; 0x05
    35ca:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    35cc:	8c 81       	ldd	r24, Y+4	; 0x04
    35ce:	9d 81       	ldd	r25, Y+5	; 0x05
    35d0:	9a 83       	std	Y+2, r25	; 0x02
    35d2:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    35d4:	e9 81       	ldd	r30, Y+1	; 0x01
    35d6:	fa 81       	ldd	r31, Y+2	; 0x02
    35d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    35da:	88 23       	and	r24, r24
    35dc:	19 f4       	brne	.+6      	; 0x35e4 <xQueueIsQueueEmptyFromISR+0x2a>
	{
		xReturn = pdTRUE;
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	8b 83       	std	Y+3, r24	; 0x03
    35e2:	01 c0       	rjmp	.+2      	; 0x35e6 <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    35e4:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	00 d0       	rcall	.+0      	; 0x35fe <prvIsQueueFull+0x6>
    35fe:	0f 92       	push	r0
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	9b 83       	std	Y+3, r25	; 0x03
    3606:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    360e:	ea 81       	ldd	r30, Y+2	; 0x02
    3610:	fb 81       	ldd	r31, Y+3	; 0x03
    3612:	92 8d       	ldd	r25, Z+26	; 0x1a
    3614:	ea 81       	ldd	r30, Y+2	; 0x02
    3616:	fb 81       	ldd	r31, Y+3	; 0x03
    3618:	83 8d       	ldd	r24, Z+27	; 0x1b
    361a:	98 17       	cp	r25, r24
    361c:	19 f4       	brne	.+6      	; 0x3624 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	89 83       	std	Y+1, r24	; 0x01
    3622:	01 c0       	rjmp	.+2      	; 0x3626 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    3624:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3626:	0f 90       	pop	r0
    3628:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    362a:	89 81       	ldd	r24, Y+1	; 0x01
}
    362c:	0f 90       	pop	r0
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	00 d0       	rcall	.+0      	; 0x363e <xQueueIsQueueFullFromISR+0x6>
    363e:	00 d0       	rcall	.+0      	; 0x3640 <xQueueIsQueueFullFromISR+0x8>
    3640:	0f 92       	push	r0
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	9d 83       	std	Y+5, r25	; 0x05
    3648:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    364a:	8c 81       	ldd	r24, Y+4	; 0x04
    364c:	9d 81       	ldd	r25, Y+5	; 0x05
    364e:	9a 83       	std	Y+2, r25	; 0x02
    3650:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3652:	e9 81       	ldd	r30, Y+1	; 0x01
    3654:	fa 81       	ldd	r31, Y+2	; 0x02
    3656:	92 8d       	ldd	r25, Z+26	; 0x1a
    3658:	e9 81       	ldd	r30, Y+1	; 0x01
    365a:	fa 81       	ldd	r31, Y+2	; 0x02
    365c:	83 8d       	ldd	r24, Z+27	; 0x1b
    365e:	98 17       	cp	r25, r24
    3660:	19 f4       	brne	.+6      	; 0x3668 <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	8b 83       	std	Y+3, r24	; 0x03
    3666:	01 c0       	rjmp	.+2      	; 0x366a <xQueueIsQueueFullFromISR+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    3668:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	08 95       	ret

0000367c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
    367c:	0f 93       	push	r16
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	28 97       	sbiw	r28, 0x08	; 8
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	9d 83       	std	Y+5, r25	; 0x05
    3694:	8c 83       	std	Y+4, r24	; 0x04
    3696:	7f 83       	std	Y+7, r23	; 0x07
    3698:	6e 83       	std	Y+6, r22	; 0x06
    369a:	48 87       	std	Y+8, r20	; 0x08

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
    369c:	88 85       	ldd	r24, Y+8	; 0x08
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	19 f4       	brne	.+6      	; 0x36a8 <xStreamBufferGenericCreate+0x2c>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	89 83       	std	Y+1, r24	; 0x01
    36a6:	01 c0       	rjmp	.+2      	; 0x36aa <xStreamBufferGenericCreate+0x2e>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
    36a8:	19 82       	std	Y+1, r1	; 0x01
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
    36aa:	8e 81       	ldd	r24, Y+6	; 0x06
    36ac:	9f 81       	ldd	r25, Y+7	; 0x07
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	21 f4       	brne	.+8      	; 0x36ba <xStreamBufferGenericCreate+0x3e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	9f 83       	std	Y+7, r25	; 0x07
    36b8:	8e 83       	std	Y+6, r24	; 0x06
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
    36ba:	8c 81       	ldd	r24, Y+4	; 0x04
    36bc:	9d 81       	ldd	r25, Y+5	; 0x05
    36be:	01 96       	adiw	r24, 0x01	; 1
    36c0:	9d 83       	std	Y+5, r25	; 0x05
    36c2:	8c 83       	std	Y+4, r24	; 0x04
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
    36c4:	8c 81       	ldd	r24, Y+4	; 0x04
    36c6:	9d 81       	ldd	r25, Y+5	; 0x05
    36c8:	0f 96       	adiw	r24, 0x0f	; 15
    36ca:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <pvPortMalloc>
    36ce:	9b 83       	std	Y+3, r25	; 0x03
    36d0:	8a 83       	std	Y+2, r24	; 0x02

		if( pucAllocatedMemory != NULL )
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	9b 81       	ldd	r25, Y+3	; 0x03
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	89 f0       	breq	.+34     	; 0x36fc <xStreamBufferGenericCreate+0x80>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
    36da:	6a 81       	ldd	r22, Y+2	; 0x02
    36dc:	7b 81       	ldd	r23, Y+3	; 0x03
    36de:	8a 81       	ldd	r24, Y+2	; 0x02
    36e0:	9b 81       	ldd	r25, Y+3	; 0x03
    36e2:	9c 01       	movw	r18, r24
    36e4:	21 5f       	subi	r18, 0xF1	; 241
    36e6:	3f 4f       	sbci	r19, 0xFF	; 255
    36e8:	4c 81       	ldd	r20, Y+4	; 0x04
    36ea:	5d 81       	ldd	r21, Y+5	; 0x05
    36ec:	ee 81       	ldd	r30, Y+6	; 0x06
    36ee:	ff 81       	ldd	r31, Y+7	; 0x07
    36f0:	cb 01       	movw	r24, r22
    36f2:	b9 01       	movw	r22, r18
    36f4:	9f 01       	movw	r18, r30
    36f6:	09 81       	ldd	r16, Y+1	; 0x01
    36f8:	0e 94 96 22 	call	0x452c	; 0x452c <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	9b 81       	ldd	r25, Y+3	; 0x03
	}
    3700:	28 96       	adiw	r28, 0x08	; 8
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	f8 94       	cli
    3706:	de bf       	out	0x3e, r29	; 62
    3708:	0f be       	out	0x3f, r0	; 63
    370a:	cd bf       	out	0x3d, r28	; 61
    370c:	cf 91       	pop	r28
    370e:	df 91       	pop	r29
    3710:	0f 91       	pop	r16
    3712:	08 95       	ret

00003714 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	00 d0       	rcall	.+0      	; 0x371a <vStreamBufferDelete+0x6>
    371a:	00 d0       	rcall	.+0      	; 0x371c <vStreamBufferDelete+0x8>
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	9c 83       	std	Y+4, r25	; 0x04
    3722:	8b 83       	std	Y+3, r24	; 0x03
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	9c 81       	ldd	r25, Y+4	; 0x04
    3728:	9a 83       	std	Y+2, r25	; 0x02
    372a:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    372c:	e9 81       	ldd	r30, Y+1	; 0x01
    372e:	fa 81       	ldd	r31, Y+2	; 0x02
    3730:	86 85       	ldd	r24, Z+14	; 0x0e
    3732:	88 2f       	mov	r24, r24
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	82 70       	andi	r24, 0x02	; 2
    3738:	90 70       	andi	r25, 0x00	; 0
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	29 f4       	brne	.+10     	; 0x3748 <vStreamBufferDelete+0x34>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
    3742:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <vPortFree>
    3746:	08 c0       	rjmp	.+16     	; 0x3758 <vStreamBufferDelete+0x44>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	9a 81       	ldd	r25, Y+2	; 0x02
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	70 e0       	ldi	r23, 0x00	; 0
    3750:	4f e0       	ldi	r20, 0x0F	; 15
    3752:	50 e0       	ldi	r21, 0x00	; 0
    3754:	0e 94 66 30 	call	0x60cc	; 0x60cc <memset>
	}
}
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	0f 90       	pop	r0
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    3766:	0f 93       	push	r16
    3768:	df 93       	push	r29
    376a:	cf 93       	push	r28
    376c:	00 d0       	rcall	.+0      	; 0x376e <xStreamBufferReset+0x8>
    376e:	00 d0       	rcall	.+0      	; 0x3770 <xStreamBufferReset+0xa>
    3770:	0f 92       	push	r0
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	9d 83       	std	Y+5, r25	; 0x05
    3778:	8c 83       	std	Y+4, r24	; 0x04
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    377a:	8c 81       	ldd	r24, Y+4	; 0x04
    377c:	9d 81       	ldd	r25, Y+5	; 0x05
    377e:	9b 83       	std	Y+3, r25	; 0x03
    3780:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn = pdFAIL;
    3782:	19 82       	std	Y+1, r1	; 0x01
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	0f 92       	push	r0
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
    378a:	ea 81       	ldd	r30, Y+2	; 0x02
    378c:	fb 81       	ldd	r31, Y+3	; 0x03
    378e:	80 85       	ldd	r24, Z+8	; 0x08
    3790:	91 85       	ldd	r25, Z+9	; 0x09
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	f1 f4       	brne	.+60     	; 0x37d2 <xStreamBufferReset+0x6c>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
    3796:	ea 81       	ldd	r30, Y+2	; 0x02
    3798:	fb 81       	ldd	r31, Y+3	; 0x03
    379a:	82 85       	ldd	r24, Z+10	; 0x0a
    379c:	93 85       	ldd	r25, Z+11	; 0x0b
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	c1 f4       	brne	.+48     	; 0x37d2 <xStreamBufferReset+0x6c>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
    37a2:	ea 81       	ldd	r30, Y+2	; 0x02
    37a4:	fb 81       	ldd	r31, Y+3	; 0x03
    37a6:	24 85       	ldd	r18, Z+12	; 0x0c
    37a8:	35 85       	ldd	r19, Z+13	; 0x0d
    37aa:	ea 81       	ldd	r30, Y+2	; 0x02
    37ac:	fb 81       	ldd	r31, Y+3	; 0x03
    37ae:	44 81       	ldd	r20, Z+4	; 0x04
    37b0:	55 81       	ldd	r21, Z+5	; 0x05
    37b2:	ea 81       	ldd	r30, Y+2	; 0x02
    37b4:	fb 81       	ldd	r31, Y+3	; 0x03
    37b6:	a6 81       	ldd	r26, Z+6	; 0x06
    37b8:	b7 81       	ldd	r27, Z+7	; 0x07
    37ba:	ea 81       	ldd	r30, Y+2	; 0x02
    37bc:	fb 81       	ldd	r31, Y+3	; 0x03
    37be:	e6 85       	ldd	r30, Z+14	; 0x0e
    37c0:	8a 81       	ldd	r24, Y+2	; 0x02
    37c2:	9b 81       	ldd	r25, Y+3	; 0x03
    37c4:	b9 01       	movw	r22, r18
    37c6:	9d 01       	movw	r18, r26
    37c8:	0e 2f       	mov	r16, r30
    37ca:	0e 94 96 22 	call	0x452c	; 0x452c <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	89 83       	std	Y+1, r24	; 0x01

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
    37d2:	0f 90       	pop	r0
    37d4:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	0f 91       	pop	r16
    37e8:	08 95       	ret

000037ea <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
    37ea:	df 93       	push	r29
    37ec:	cf 93       	push	r28
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	27 97       	sbiw	r28, 0x07	; 7
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	f8 94       	cli
    37f8:	de bf       	out	0x3e, r29	; 62
    37fa:	0f be       	out	0x3f, r0	; 63
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	9d 83       	std	Y+5, r25	; 0x05
    3800:	8c 83       	std	Y+4, r24	; 0x04
    3802:	7f 83       	std	Y+7, r23	; 0x07
    3804:	6e 83       	std	Y+6, r22	; 0x06
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3806:	8c 81       	ldd	r24, Y+4	; 0x04
    3808:	9d 81       	ldd	r25, Y+5	; 0x05
    380a:	9b 83       	std	Y+3, r25	; 0x03
    380c:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
    380e:	8e 81       	ldd	r24, Y+6	; 0x06
    3810:	9f 81       	ldd	r25, Y+7	; 0x07
    3812:	00 97       	sbiw	r24, 0x00	; 0
    3814:	21 f4       	brne	.+8      	; 0x381e <xStreamBufferSetTriggerLevel+0x34>
	{
		xTriggerLevel = ( size_t ) 1;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9f 83       	std	Y+7, r25	; 0x07
    381c:	8e 83       	std	Y+6, r24	; 0x06
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
    381e:	ea 81       	ldd	r30, Y+2	; 0x02
    3820:	fb 81       	ldd	r31, Y+3	; 0x03
    3822:	24 81       	ldd	r18, Z+4	; 0x04
    3824:	35 81       	ldd	r19, Z+5	; 0x05
    3826:	8e 81       	ldd	r24, Y+6	; 0x06
    3828:	9f 81       	ldd	r25, Y+7	; 0x07
    382a:	28 17       	cp	r18, r24
    382c:	39 07       	cpc	r19, r25
    382e:	48 f0       	brcs	.+18     	; 0x3842 <xStreamBufferSetTriggerLevel+0x58>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    3830:	ea 81       	ldd	r30, Y+2	; 0x02
    3832:	fb 81       	ldd	r31, Y+3	; 0x03
    3834:	8e 81       	ldd	r24, Y+6	; 0x06
    3836:	9f 81       	ldd	r25, Y+7	; 0x07
    3838:	97 83       	std	Z+7, r25	; 0x07
    383a:	86 83       	std	Z+6, r24	; 0x06
		xReturn = pdPASS;
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	89 83       	std	Y+1, r24	; 0x01
    3840:	01 c0       	rjmp	.+2      	; 0x3844 <xStreamBufferSetTriggerLevel+0x5a>
	}
	else
	{
		xReturn = pdFALSE;
    3842:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3844:	89 81       	ldd	r24, Y+1	; 0x01
}
    3846:	27 96       	adiw	r28, 0x07	; 7
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	08 95       	ret

00003858 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	00 d0       	rcall	.+0      	; 0x385e <xStreamBufferSpacesAvailable+0x6>
    385e:	00 d0       	rcall	.+0      	; 0x3860 <xStreamBufferSpacesAvailable+0x8>
    3860:	00 d0       	rcall	.+0      	; 0x3862 <xStreamBufferSpacesAvailable+0xa>
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	9e 83       	std	Y+6, r25	; 0x06
    3868:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    386a:	8d 81       	ldd	r24, Y+5	; 0x05
    386c:	9e 81       	ldd	r25, Y+6	; 0x06
    386e:	9c 83       	std	Y+4, r25	; 0x04
    3870:	8b 83       	std	Y+3, r24	; 0x03
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    3872:	eb 81       	ldd	r30, Y+3	; 0x03
    3874:	fc 81       	ldd	r31, Y+4	; 0x04
    3876:	24 81       	ldd	r18, Z+4	; 0x04
    3878:	35 81       	ldd	r19, Z+5	; 0x05
    387a:	eb 81       	ldd	r30, Y+3	; 0x03
    387c:	fc 81       	ldd	r31, Y+4	; 0x04
    387e:	80 81       	ld	r24, Z
    3880:	91 81       	ldd	r25, Z+1	; 0x01
    3882:	82 0f       	add	r24, r18
    3884:	93 1f       	adc	r25, r19
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= pxStreamBuffer->xHead;
    388a:	eb 81       	ldd	r30, Y+3	; 0x03
    388c:	fc 81       	ldd	r31, Y+4	; 0x04
    388e:	22 81       	ldd	r18, Z+2	; 0x02
    3890:	33 81       	ldd	r19, Z+3	; 0x03
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	9a 81       	ldd	r25, Y+2	; 0x02
    3896:	82 1b       	sub	r24, r18
    3898:	93 0b       	sbc	r25, r19
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= ( size_t ) 1;
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	9a 83       	std	Y+2, r25	; 0x02
    38a6:	89 83       	std	Y+1, r24	; 0x01

	if( xSpace >= pxStreamBuffer->xLength )
    38a8:	eb 81       	ldd	r30, Y+3	; 0x03
    38aa:	fc 81       	ldd	r31, Y+4	; 0x04
    38ac:	24 81       	ldd	r18, Z+4	; 0x04
    38ae:	35 81       	ldd	r19, Z+5	; 0x05
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	9a 81       	ldd	r25, Y+2	; 0x02
    38b4:	82 17       	cp	r24, r18
    38b6:	93 07       	cpc	r25, r19
    38b8:	50 f0       	brcs	.+20     	; 0x38ce <xStreamBufferSpacesAvailable+0x76>
	{
		xSpace -= pxStreamBuffer->xLength;
    38ba:	eb 81       	ldd	r30, Y+3	; 0x03
    38bc:	fc 81       	ldd	r31, Y+4	; 0x04
    38be:	24 81       	ldd	r18, Z+4	; 0x04
    38c0:	35 81       	ldd	r19, Z+5	; 0x05
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	9a 81       	ldd	r25, Y+2	; 0x02
    38c6:	82 1b       	sub	r24, r18
    38c8:	93 0b       	sbc	r25, r19
    38ca:	9a 83       	std	Y+2, r25	; 0x02
    38cc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    38d2:	26 96       	adiw	r28, 0x06	; 6
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	f8 94       	cli
    38d8:	de bf       	out	0x3e, r29	; 62
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	cd bf       	out	0x3d, r28	; 61
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	08 95       	ret

000038e4 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    38e4:	df 93       	push	r29
    38e6:	cf 93       	push	r28
    38e8:	00 d0       	rcall	.+0      	; 0x38ea <xStreamBufferBytesAvailable+0x6>
    38ea:	00 d0       	rcall	.+0      	; 0x38ec <xStreamBufferBytesAvailable+0x8>
    38ec:	00 d0       	rcall	.+0      	; 0x38ee <xStreamBufferBytesAvailable+0xa>
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    38f6:	8d 81       	ldd	r24, Y+5	; 0x05
    38f8:	9e 81       	ldd	r25, Y+6	; 0x06
    38fa:	9c 83       	std	Y+4, r25	; 0x04
    38fc:	8b 83       	std	Y+3, r24	; 0x03
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
    38fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3900:	9c 81       	ldd	r25, Y+4	; 0x04
    3902:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <prvBytesInBuffer>
    3906:	9a 83       	std	Y+2, r25	; 0x02
    3908:	89 83       	std	Y+1, r24	; 0x01
	return xReturn;
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    390e:	26 96       	adiw	r28, 0x06	; 6
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	cf 91       	pop	r28
    391c:	df 91       	pop	r29
    391e:	08 95       	ret

00003920 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
    3920:	ef 92       	push	r14
    3922:	ff 92       	push	r15
    3924:	0f 93       	push	r16
    3926:	1f 93       	push	r17
    3928:	df 93       	push	r29
    392a:	cf 93       	push	r28
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
    3930:	63 97       	sbiw	r28, 0x13	; 19
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	f8 94       	cli
    3936:	de bf       	out	0x3e, r29	; 62
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	cd bf       	out	0x3d, r28	; 61
    393c:	9d 87       	std	Y+13, r25	; 0x0d
    393e:	8c 87       	std	Y+12, r24	; 0x0c
    3940:	7f 87       	std	Y+15, r23	; 0x0f
    3942:	6e 87       	std	Y+14, r22	; 0x0e
    3944:	59 8b       	std	Y+17, r21	; 0x11
    3946:	48 8b       	std	Y+16, r20	; 0x10
    3948:	3b 8b       	std	Y+19, r19	; 0x13
    394a:	2a 8b       	std	Y+18, r18	; 0x12
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    394c:	8c 85       	ldd	r24, Y+12	; 0x0c
    394e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3950:	98 87       	std	Y+8, r25	; 0x08
    3952:	8f 83       	std	Y+7, r24	; 0x07
size_t xReturn, xSpace = 0;
    3954:	1c 82       	std	Y+4, r1	; 0x04
    3956:	1b 82       	std	Y+3, r1	; 0x03
size_t xRequiredSpace = xDataLengthBytes;
    3958:	88 89       	ldd	r24, Y+16	; 0x10
    395a:	99 89       	ldd	r25, Y+17	; 0x11
    395c:	9a 83       	std	Y+2, r25	; 0x02
    395e:	89 83       	std	Y+1, r24	; 0x01

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3960:	ef 81       	ldd	r30, Y+7	; 0x07
    3962:	f8 85       	ldd	r31, Y+8	; 0x08
    3964:	86 85       	ldd	r24, Z+14	; 0x0e
    3966:	88 2f       	mov	r24, r24
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	81 70       	andi	r24, 0x01	; 1
    396c:	90 70       	andi	r25, 0x00	; 0
    396e:	88 23       	and	r24, r24
    3970:	29 f0       	breq	.+10     	; 0x397c <xStreamBufferSend+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    3972:	89 81       	ldd	r24, Y+1	; 0x01
    3974:	9a 81       	ldd	r25, Y+2	; 0x02
    3976:	02 96       	adiw	r24, 0x02	; 2
    3978:	9a 83       	std	Y+2, r25	; 0x02
    397a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    397c:	8a 89       	ldd	r24, Y+18	; 0x12
    397e:	9b 89       	ldd	r25, Y+19	; 0x13
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	09 f4       	brne	.+2      	; 0x3986 <xStreamBufferSend+0x66>
    3984:	40 c0       	rjmp	.+128    	; 0x3a06 <xStreamBufferSend+0xe6>
	{
		vTaskSetTimeOutState( &xTimeOut );
    3986:	ce 01       	movw	r24, r28
    3988:	09 96       	adiw	r24, 0x09	; 9
    398a:	0e 94 97 2a 	call	0x552e	; 0x552e <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	0f 92       	push	r0
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    3994:	8f 81       	ldd	r24, Y+7	; 0x07
    3996:	98 85       	ldd	r25, Y+8	; 0x08
    3998:	0e 94 2c 1c 	call	0x3858	; 0x3858 <xStreamBufferSpacesAvailable>
    399c:	9c 83       	std	Y+4, r25	; 0x04
    399e:	8b 83       	std	Y+3, r24	; 0x03

				if( xSpace < xRequiredSpace )
    39a0:	2b 81       	ldd	r18, Y+3	; 0x03
    39a2:	3c 81       	ldd	r19, Y+4	; 0x04
    39a4:	89 81       	ldd	r24, Y+1	; 0x01
    39a6:	9a 81       	ldd	r25, Y+2	; 0x02
    39a8:	28 17       	cp	r18, r24
    39aa:	39 07       	cpc	r19, r25
    39ac:	50 f5       	brcc	.+84     	; 0x3a02 <xStreamBufferSend+0xe2>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    39b6:	0e 94 00 2c 	call	0x5800	; 0x5800 <xTaskGetCurrentTaskHandle>
    39ba:	ef 81       	ldd	r30, Y+7	; 0x07
    39bc:	f8 85       	ldd	r31, Y+8	; 0x08
    39be:	93 87       	std	Z+11, r25	; 0x0b
    39c0:	82 87       	std	Z+10, r24	; 0x0a
				{
					taskEXIT_CRITICAL();
					break;
				}
			}
			taskEXIT_CRITICAL();
    39c2:	0f 90       	pop	r0
    39c4:	0f be       	out	0x3f, r0	; 63

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    39c6:	ea 89       	ldd	r30, Y+18	; 0x12
    39c8:	fb 89       	ldd	r31, Y+19	; 0x13
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e0       	ldi	r20, 0x00	; 0
    39d8:	50 e0       	ldi	r21, 0x00	; 0
    39da:	00 e0       	ldi	r16, 0x00	; 0
    39dc:	10 e0       	ldi	r17, 0x00	; 0
    39de:	7f 01       	movw	r14, r30
    39e0:	0e 94 b0 2c 	call	0x5960	; 0x5960 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
    39e4:	ef 81       	ldd	r30, Y+7	; 0x07
    39e6:	f8 85       	ldd	r31, Y+8	; 0x08
    39e8:	13 86       	std	Z+11, r1	; 0x0b
    39ea:	12 86       	std	Z+10, r1	; 0x0a

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    39ec:	ce 01       	movw	r24, r28
    39ee:	09 96       	adiw	r24, 0x09	; 9
    39f0:	9e 01       	movw	r18, r28
    39f2:	2e 5e       	subi	r18, 0xEE	; 238
    39f4:	3f 4f       	sbci	r19, 0xFF	; 255
    39f6:	b9 01       	movw	r22, r18
    39f8:	0e 94 ce 2a 	call	0x559c	; 0x559c <xTaskCheckForTimeOut>
    39fc:	88 23       	and	r24, r24
    39fe:	39 f2       	breq	.-114    	; 0x398e <xStreamBufferSend+0x6e>
    3a00:	02 c0       	rjmp	.+4      	; 0x3a06 <xStreamBufferSend+0xe6>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
				}
				else
				{
					taskEXIT_CRITICAL();
    3a02:	0f 90       	pop	r0
    3a04:	0f be       	out	0x3f, r0	; 63
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
    3a06:	8b 81       	ldd	r24, Y+3	; 0x03
    3a08:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0a:	00 97       	sbiw	r24, 0x00	; 0
    3a0c:	31 f4       	brne	.+12     	; 0x3a1a <xStreamBufferSend+0xfa>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    3a0e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a10:	98 85       	ldd	r25, Y+8	; 0x08
    3a12:	0e 94 2c 1c 	call	0x3858	; 0x3858 <xStreamBufferSpacesAvailable>
    3a16:	9c 83       	std	Y+4, r25	; 0x04
    3a18:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    3a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a1c:	98 85       	ldd	r25, Y+8	; 0x08
    3a1e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3a20:	3f 85       	ldd	r19, Y+15	; 0x0f
    3a22:	48 89       	ldd	r20, Y+16	; 0x10
    3a24:	59 89       	ldd	r21, Y+17	; 0x11
    3a26:	eb 81       	ldd	r30, Y+3	; 0x03
    3a28:	fc 81       	ldd	r31, Y+4	; 0x04
    3a2a:	a9 81       	ldd	r26, Y+1	; 0x01
    3a2c:	ba 81       	ldd	r27, Y+2	; 0x02
    3a2e:	b9 01       	movw	r22, r18
    3a30:	9f 01       	movw	r18, r30
    3a32:	8d 01       	movw	r16, r26
    3a34:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <prvWriteMessageToBuffer>
    3a38:	9e 83       	std	Y+6, r25	; 0x06
    3a3a:	8d 83       	std	Y+5, r24	; 0x05

	if( xReturn > ( size_t ) 0 )
    3a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	39 f1       	breq	.+78     	; 0x3a92 <xStreamBufferSend+0x172>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    3a44:	8f 81       	ldd	r24, Y+7	; 0x07
    3a46:	98 85       	ldd	r25, Y+8	; 0x08
    3a48:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <prvBytesInBuffer>
    3a4c:	9c 01       	movw	r18, r24
    3a4e:	ef 81       	ldd	r30, Y+7	; 0x07
    3a50:	f8 85       	ldd	r31, Y+8	; 0x08
    3a52:	86 81       	ldd	r24, Z+6	; 0x06
    3a54:	97 81       	ldd	r25, Z+7	; 0x07
    3a56:	28 17       	cp	r18, r24
    3a58:	39 07       	cpc	r19, r25
    3a5a:	d8 f0       	brcs	.+54     	; 0x3a92 <xStreamBufferSend+0x172>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
    3a5c:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
    3a60:	ef 81       	ldd	r30, Y+7	; 0x07
    3a62:	f8 85       	ldd	r31, Y+8	; 0x08
    3a64:	80 85       	ldd	r24, Z+8	; 0x08
    3a66:	91 85       	ldd	r25, Z+9	; 0x09
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	89 f0       	breq	.+34     	; 0x3a8e <xStreamBufferSend+0x16e>
    3a6c:	ef 81       	ldd	r30, Y+7	; 0x07
    3a6e:	f8 85       	ldd	r31, Y+8	; 0x08
    3a70:	80 85       	ldd	r24, Z+8	; 0x08
    3a72:	91 85       	ldd	r25, Z+9	; 0x09
    3a74:	40 e0       	ldi	r20, 0x00	; 0
    3a76:	50 e0       	ldi	r21, 0x00	; 0
    3a78:	60 e0       	ldi	r22, 0x00	; 0
    3a7a:	70 e0       	ldi	r23, 0x00	; 0
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	00 e0       	ldi	r16, 0x00	; 0
    3a80:	10 e0       	ldi	r17, 0x00	; 0
    3a82:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <xTaskGenericNotify>
    3a86:	ef 81       	ldd	r30, Y+7	; 0x07
    3a88:	f8 85       	ldd	r31, Y+8	; 0x08
    3a8a:	11 86       	std	Z+9, r1	; 0x09
    3a8c:	10 86       	std	Z+8, r1	; 0x08
    3a8e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
    3a92:	8d 81       	ldd	r24, Y+5	; 0x05
    3a94:	9e 81       	ldd	r25, Y+6	; 0x06
}
    3a96:	63 96       	adiw	r28, 0x13	; 19
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	cd bf       	out	0x3d, r28	; 61
    3aa2:	cf 91       	pop	r28
    3aa4:	df 91       	pop	r29
    3aa6:	1f 91       	pop	r17
    3aa8:	0f 91       	pop	r16
    3aaa:	ff 90       	pop	r15
    3aac:	ef 90       	pop	r14
    3aae:	08 95       	ret

00003ab0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
    3ab0:	ef 92       	push	r14
    3ab2:	ff 92       	push	r15
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	61 97       	sbiw	r28, 0x11	; 17
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
    3acc:	9b 87       	std	Y+11, r25	; 0x0b
    3ace:	8a 87       	std	Y+10, r24	; 0x0a
    3ad0:	7d 87       	std	Y+13, r23	; 0x0d
    3ad2:	6c 87       	std	Y+12, r22	; 0x0c
    3ad4:	5f 87       	std	Y+15, r21	; 0x0f
    3ad6:	4e 87       	std	Y+14, r20	; 0x0e
    3ad8:	39 8b       	std	Y+17, r19	; 0x11
    3ada:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3adc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ade:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ae0:	99 87       	std	Y+9, r25	; 0x09
    3ae2:	88 87       	std	Y+8, r24	; 0x08
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    3ae4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ae6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ae8:	9b 83       	std	Y+3, r25	; 0x03
    3aea:	8a 83       	std	Y+2, r24	; 0x02

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3aec:	e8 85       	ldd	r30, Y+8	; 0x08
    3aee:	f9 85       	ldd	r31, Y+9	; 0x09
    3af0:	86 85       	ldd	r24, Z+14	; 0x0e
    3af2:	88 2f       	mov	r24, r24
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	81 70       	andi	r24, 0x01	; 1
    3af8:	90 70       	andi	r25, 0x00	; 0
    3afa:	88 23       	and	r24, r24
    3afc:	29 f0       	breq	.+10     	; 0x3b08 <xStreamBufferSendFromISR+0x58>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    3afe:	8a 81       	ldd	r24, Y+2	; 0x02
    3b00:	9b 81       	ldd	r25, Y+3	; 0x03
    3b02:	02 96       	adiw	r24, 0x02	; 2
    3b04:	9b 83       	std	Y+3, r25	; 0x03
    3b06:	8a 83       	std	Y+2, r24	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    3b08:	88 85       	ldd	r24, Y+8	; 0x08
    3b0a:	99 85       	ldd	r25, Y+9	; 0x09
    3b0c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <xStreamBufferSpacesAvailable>
    3b10:	9d 83       	std	Y+5, r25	; 0x05
    3b12:	8c 83       	std	Y+4, r24	; 0x04
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    3b14:	88 85       	ldd	r24, Y+8	; 0x08
    3b16:	99 85       	ldd	r25, Y+9	; 0x09
    3b18:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b1a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b1c:	4e 85       	ldd	r20, Y+14	; 0x0e
    3b1e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3b20:	ec 81       	ldd	r30, Y+4	; 0x04
    3b22:	fd 81       	ldd	r31, Y+5	; 0x05
    3b24:	aa 81       	ldd	r26, Y+2	; 0x02
    3b26:	bb 81       	ldd	r27, Y+3	; 0x03
    3b28:	b9 01       	movw	r22, r18
    3b2a:	9f 01       	movw	r18, r30
    3b2c:	8d 01       	movw	r16, r26
    3b2e:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <prvWriteMessageToBuffer>
    3b32:	9f 83       	std	Y+7, r25	; 0x07
    3b34:	8e 83       	std	Y+6, r24	; 0x06

	if( xReturn > ( size_t ) 0 )
    3b36:	8e 81       	ldd	r24, Y+6	; 0x06
    3b38:	9f 81       	ldd	r25, Y+7	; 0x07
    3b3a:	00 97       	sbiw	r24, 0x00	; 0
    3b3c:	39 f1       	breq	.+78     	; 0x3b8c <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    3b3e:	88 85       	ldd	r24, Y+8	; 0x08
    3b40:	99 85       	ldd	r25, Y+9	; 0x09
    3b42:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <prvBytesInBuffer>
    3b46:	9c 01       	movw	r18, r24
    3b48:	e8 85       	ldd	r30, Y+8	; 0x08
    3b4a:	f9 85       	ldd	r31, Y+9	; 0x09
    3b4c:	86 81       	ldd	r24, Z+6	; 0x06
    3b4e:	97 81       	ldd	r25, Z+7	; 0x07
    3b50:	28 17       	cp	r18, r24
    3b52:	39 07       	cpc	r19, r25
    3b54:	d8 f0       	brcs	.+54     	; 0x3b8c <xStreamBufferSendFromISR+0xdc>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    3b56:	19 82       	std	Y+1, r1	; 0x01
    3b58:	e8 85       	ldd	r30, Y+8	; 0x08
    3b5a:	f9 85       	ldd	r31, Y+9	; 0x09
    3b5c:	80 85       	ldd	r24, Z+8	; 0x08
    3b5e:	91 85       	ldd	r25, Z+9	; 0x09
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	a1 f0       	breq	.+40     	; 0x3b8c <xStreamBufferSendFromISR+0xdc>
    3b64:	e8 85       	ldd	r30, Y+8	; 0x08
    3b66:	f9 85       	ldd	r31, Y+9	; 0x09
    3b68:	80 85       	ldd	r24, Z+8	; 0x08
    3b6a:	91 85       	ldd	r25, Z+9	; 0x09
    3b6c:	e8 89       	ldd	r30, Y+16	; 0x10
    3b6e:	f9 89       	ldd	r31, Y+17	; 0x11
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	70 e0       	ldi	r23, 0x00	; 0
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	00 e0       	ldi	r16, 0x00	; 0
    3b7c:	10 e0       	ldi	r17, 0x00	; 0
    3b7e:	7f 01       	movw	r14, r30
    3b80:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <xTaskGenericNotifyFromISR>
    3b84:	e8 85       	ldd	r30, Y+8	; 0x08
    3b86:	f9 85       	ldd	r31, Y+9	; 0x09
    3b88:	11 86       	std	Z+9, r1	; 0x09
    3b8a:	10 86       	std	Z+8, r1	; 0x08
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
    3b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b8e:	9f 81       	ldd	r25, Y+7	; 0x07
}
    3b90:	61 96       	adiw	r28, 0x11	; 17
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	cf 91       	pop	r28
    3b9e:	df 91       	pop	r29
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	ff 90       	pop	r15
    3ba6:	ef 90       	pop	r14
    3ba8:	08 95       	ret

00003baa <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
    3baa:	0f 93       	push	r16
    3bac:	1f 93       	push	r17
    3bae:	df 93       	push	r29
    3bb0:	cf 93       	push	r28
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    3bb6:	61 97       	sbiw	r28, 0x11	; 17
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	f8 94       	cli
    3bbc:	de bf       	out	0x3e, r29	; 62
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	cd bf       	out	0x3d, r28	; 61
    3bc2:	9d 83       	std	Y+5, r25	; 0x05
    3bc4:	8c 83       	std	Y+4, r24	; 0x04
    3bc6:	7f 83       	std	Y+7, r23	; 0x07
    3bc8:	6e 83       	std	Y+6, r22	; 0x06
    3bca:	59 87       	std	Y+9, r21	; 0x09
    3bcc:	48 87       	std	Y+8, r20	; 0x08
    3bce:	3b 87       	std	Y+11, r19	; 0x0b
    3bd0:	2a 87       	std	Y+10, r18	; 0x0a
    3bd2:	1d 87       	std	Y+13, r17	; 0x0d
    3bd4:	0c 87       	std	Y+12, r16	; 0x0c
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
    3bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	11 f4       	brne	.+4      	; 0x3be2 <prvWriteMessageToBuffer+0x38>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
    3bde:	1b 82       	std	Y+3, r1	; 0x03
    3be0:	38 c0       	rjmp	.+112    	; 0x3c52 <prvWriteMessageToBuffer+0xa8>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
    3be2:	ec 81       	ldd	r30, Y+4	; 0x04
    3be4:	fd 81       	ldd	r31, Y+5	; 0x05
    3be6:	86 85       	ldd	r24, Z+14	; 0x0e
    3be8:	88 2f       	mov	r24, r24
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	81 70       	andi	r24, 0x01	; 1
    3bee:	90 70       	andi	r25, 0x00	; 0
    3bf0:	00 97       	sbiw	r24, 0x00	; 0
    3bf2:	d1 f4       	brne	.+52     	; 0x3c28 <prvWriteMessageToBuffer+0x7e>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    3bf8:	28 85       	ldd	r18, Y+8	; 0x08
    3bfa:	39 85       	ldd	r19, Y+9	; 0x09
    3bfc:	39 8b       	std	Y+17, r19	; 0x11
    3bfe:	28 8b       	std	Y+16, r18	; 0x10
    3c00:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c02:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c04:	9f 87       	std	Y+15, r25	; 0x0f
    3c06:	8e 87       	std	Y+14, r24	; 0x0e
    3c08:	2e 85       	ldd	r18, Y+14	; 0x0e
    3c0a:	3f 85       	ldd	r19, Y+15	; 0x0f
    3c0c:	88 89       	ldd	r24, Y+16	; 0x10
    3c0e:	99 89       	ldd	r25, Y+17	; 0x11
    3c10:	82 17       	cp	r24, r18
    3c12:	93 07       	cpc	r25, r19
    3c14:	20 f4       	brcc	.+8      	; 0x3c1e <prvWriteMessageToBuffer+0x74>
    3c16:	28 89       	ldd	r18, Y+16	; 0x10
    3c18:	39 89       	ldd	r19, Y+17	; 0x11
    3c1a:	3f 87       	std	Y+15, r19	; 0x0f
    3c1c:	2e 87       	std	Y+14, r18	; 0x0e
    3c1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c20:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c22:	99 87       	std	Y+9, r25	; 0x09
    3c24:	88 87       	std	Y+8, r24	; 0x08
    3c26:	15 c0       	rjmp	.+42     	; 0x3c52 <prvWriteMessageToBuffer+0xa8>
	}
	else if( xSpace >= xRequiredSpace )
    3c28:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c2a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3c2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c30:	28 17       	cp	r18, r24
    3c32:	39 07       	cpc	r19, r25
    3c34:	68 f0       	brcs	.+26     	; 0x3c50 <prvWriteMessageToBuffer+0xa6>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	8b 83       	std	Y+3, r24	; 0x03
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
    3c3a:	9e 01       	movw	r18, r28
    3c3c:	28 5f       	subi	r18, 0xF8	; 248
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	8c 81       	ldd	r24, Y+4	; 0x04
    3c42:	9d 81       	ldd	r25, Y+5	; 0x05
    3c44:	b9 01       	movw	r22, r18
    3c46:	42 e0       	ldi	r20, 0x02	; 2
    3c48:	50 e0       	ldi	r21, 0x00	; 0
    3c4a:	0e 94 22 21 	call	0x4244	; 0x4244 <prvWriteBytesToBuffer>
    3c4e:	01 c0       	rjmp	.+2      	; 0x3c52 <prvWriteMessageToBuffer+0xa8>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
    3c50:	1b 82       	std	Y+3, r1	; 0x03
	}

	if( xShouldWrite != pdFALSE )
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
    3c54:	88 23       	and	r24, r24
    3c56:	61 f0       	breq	.+24     	; 0x3c70 <prvWriteMessageToBuffer+0xc6>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
    3c58:	2e 81       	ldd	r18, Y+6	; 0x06
    3c5a:	3f 81       	ldd	r19, Y+7	; 0x07
    3c5c:	48 85       	ldd	r20, Y+8	; 0x08
    3c5e:	59 85       	ldd	r21, Y+9	; 0x09
    3c60:	8c 81       	ldd	r24, Y+4	; 0x04
    3c62:	9d 81       	ldd	r25, Y+5	; 0x05
    3c64:	b9 01       	movw	r22, r18
    3c66:	0e 94 22 21 	call	0x4244	; 0x4244 <prvWriteBytesToBuffer>
    3c6a:	9a 83       	std	Y+2, r25	; 0x02
    3c6c:	89 83       	std	Y+1, r24	; 0x01
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <prvWriteMessageToBuffer+0xca>
	}
	else
	{
		xReturn = 0;
    3c70:	1a 82       	std	Y+2, r1	; 0x02
    3c72:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3c78:	61 96       	adiw	r28, 0x11	; 17
    3c7a:	0f b6       	in	r0, 0x3f	; 63
    3c7c:	f8 94       	cli
    3c7e:	de bf       	out	0x3e, r29	; 62
    3c80:	0f be       	out	0x3f, r0	; 63
    3c82:	cd bf       	out	0x3d, r28	; 61
    3c84:	cf 91       	pop	r28
    3c86:	df 91       	pop	r29
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	08 95       	ret

00003c8e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
    3c8e:	ef 92       	push	r14
    3c90:	ff 92       	push	r15
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	df 93       	push	r29
    3c98:	cf 93       	push	r28
    3c9a:	cd b7       	in	r28, 0x3d	; 61
    3c9c:	de b7       	in	r29, 0x3e	; 62
    3c9e:	60 97       	sbiw	r28, 0x10	; 16
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
    3caa:	9a 87       	std	Y+10, r25	; 0x0a
    3cac:	89 87       	std	Y+9, r24	; 0x09
    3cae:	7c 87       	std	Y+12, r23	; 0x0c
    3cb0:	6b 87       	std	Y+11, r22	; 0x0b
    3cb2:	5e 87       	std	Y+14, r21	; 0x0e
    3cb4:	4d 87       	std	Y+13, r20	; 0x0d
    3cb6:	38 8b       	std	Y+16, r19	; 0x10
    3cb8:	2f 87       	std	Y+15, r18	; 0x0f
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3cba:	89 85       	ldd	r24, Y+9	; 0x09
    3cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbe:	98 87       	std	Y+8, r25	; 0x08
    3cc0:	8f 83       	std	Y+7, r24	; 0x07
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    3cc2:	1e 82       	std	Y+6, r1	; 0x06
    3cc4:	1d 82       	std	Y+5, r1	; 0x05
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3cc6:	ef 81       	ldd	r30, Y+7	; 0x07
    3cc8:	f8 85       	ldd	r31, Y+8	; 0x08
    3cca:	86 85       	ldd	r24, Z+14	; 0x0e
    3ccc:	88 2f       	mov	r24, r24
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	81 70       	andi	r24, 0x01	; 1
    3cd2:	90 70       	andi	r25, 0x00	; 0
    3cd4:	88 23       	and	r24, r24
    3cd6:	29 f0       	breq	.+10     	; 0x3ce2 <xStreamBufferReceive+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    3cd8:	82 e0       	ldi	r24, 0x02	; 2
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	89 83       	std	Y+1, r24	; 0x01
    3ce0:	02 c0       	rjmp	.+4      	; 0x3ce6 <xStreamBufferReceive+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    3ce2:	1a 82       	std	Y+2, r1	; 0x02
    3ce4:	19 82       	std	Y+1, r1	; 0x01
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    3ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ce8:	98 89       	ldd	r25, Y+16	; 0x10
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	09 f4       	brne	.+2      	; 0x3cf0 <xStreamBufferReceive+0x62>
    3cee:	3d c0       	rjmp	.+122    	; 0x3d6a <xStreamBufferReceive+0xdc>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	f8 94       	cli
    3cf4:	0f 92       	push	r0
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    3cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    3cf8:	98 85       	ldd	r25, Y+8	; 0x08
    3cfa:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <prvBytesInBuffer>
    3cfe:	9c 83       	std	Y+4, r25	; 0x04
    3d00:	8b 83       	std	Y+3, r24	; 0x03
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
    3d02:	2b 81       	ldd	r18, Y+3	; 0x03
    3d04:	3c 81       	ldd	r19, Y+4	; 0x04
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0a:	82 17       	cp	r24, r18
    3d0c:	93 07       	cpc	r25, r19
    3d0e:	50 f0       	brcs	.+20     	; 0x3d24 <xStreamBufferReceive+0x96>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    3d18:	0e 94 00 2c 	call	0x5800	; 0x5800 <xTaskGetCurrentTaskHandle>
    3d1c:	ef 81       	ldd	r30, Y+7	; 0x07
    3d1e:	f8 85       	ldd	r31, Y+8	; 0x08
    3d20:	91 87       	std	Z+9, r25	; 0x09
    3d22:	80 87       	std	Z+8, r24	; 0x08
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    3d24:	0f 90       	pop	r0
    3d26:	0f be       	out	0x3f, r0	; 63

		if( xBytesAvailable <= xBytesToStoreMessageLength )
    3d28:	2b 81       	ldd	r18, Y+3	; 0x03
    3d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d30:	82 17       	cp	r24, r18
    3d32:	93 07       	cpc	r25, r19
    3d34:	00 f1       	brcs	.+64     	; 0x3d76 <xStreamBufferReceive+0xe8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    3d36:	ef 85       	ldd	r30, Y+15	; 0x0f
    3d38:	f8 89       	ldd	r31, Y+16	; 0x10
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	70 e0       	ldi	r23, 0x00	; 0
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e0       	ldi	r20, 0x00	; 0
    3d48:	50 e0       	ldi	r21, 0x00	; 0
    3d4a:	00 e0       	ldi	r16, 0x00	; 0
    3d4c:	10 e0       	ldi	r17, 0x00	; 0
    3d4e:	7f 01       	movw	r14, r30
    3d50:	0e 94 b0 2c 	call	0x5960	; 0x5960 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
    3d54:	ef 81       	ldd	r30, Y+7	; 0x07
    3d56:	f8 85       	ldd	r31, Y+8	; 0x08
    3d58:	11 86       	std	Z+9, r1	; 0x09
    3d5a:	10 86       	std	Z+8, r1	; 0x08

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    3d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d5e:	98 85       	ldd	r25, Y+8	; 0x08
    3d60:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <prvBytesInBuffer>
    3d64:	9c 83       	std	Y+4, r25	; 0x04
    3d66:	8b 83       	std	Y+3, r24	; 0x03
    3d68:	06 c0       	rjmp	.+12     	; 0x3d76 <xStreamBufferReceive+0xe8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    3d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3d6c:	98 85       	ldd	r25, Y+8	; 0x08
    3d6e:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <prvBytesInBuffer>
    3d72:	9c 83       	std	Y+4, r25	; 0x04
    3d74:	8b 83       	std	Y+3, r24	; 0x03
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    3d76:	2b 81       	ldd	r18, Y+3	; 0x03
    3d78:	3c 81       	ldd	r19, Y+4	; 0x04
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7e:	82 17       	cp	r24, r18
    3d80:	93 07       	cpc	r25, r19
    3d82:	80 f5       	brcc	.+96     	; 0x3de4 <xStreamBufferReceive+0x156>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    3d84:	8f 81       	ldd	r24, Y+7	; 0x07
    3d86:	98 85       	ldd	r25, Y+8	; 0x08
    3d88:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d8a:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d8c:	4d 85       	ldd	r20, Y+13	; 0x0d
    3d8e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3d90:	eb 81       	ldd	r30, Y+3	; 0x03
    3d92:	fc 81       	ldd	r31, Y+4	; 0x04
    3d94:	a9 81       	ldd	r26, Y+1	; 0x01
    3d96:	ba 81       	ldd	r27, Y+2	; 0x02
    3d98:	b9 01       	movw	r22, r18
    3d9a:	9f 01       	movw	r18, r30
    3d9c:	8d 01       	movw	r16, r26
    3d9e:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <prvReadMessageFromBuffer>
    3da2:	9e 83       	std	Y+6, r25	; 0x06
    3da4:	8d 83       	std	Y+5, r24	; 0x05

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    3da6:	8d 81       	ldd	r24, Y+5	; 0x05
    3da8:	9e 81       	ldd	r25, Y+6	; 0x06
    3daa:	00 97       	sbiw	r24, 0x00	; 0
    3dac:	d9 f0       	breq	.+54     	; 0x3de4 <xStreamBufferReceive+0x156>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
    3dae:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
    3db2:	ef 81       	ldd	r30, Y+7	; 0x07
    3db4:	f8 85       	ldd	r31, Y+8	; 0x08
    3db6:	82 85       	ldd	r24, Z+10	; 0x0a
    3db8:	93 85       	ldd	r25, Z+11	; 0x0b
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	89 f0       	breq	.+34     	; 0x3de0 <xStreamBufferReceive+0x152>
    3dbe:	ef 81       	ldd	r30, Y+7	; 0x07
    3dc0:	f8 85       	ldd	r31, Y+8	; 0x08
    3dc2:	82 85       	ldd	r24, Z+10	; 0x0a
    3dc4:	93 85       	ldd	r25, Z+11	; 0x0b
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	00 e0       	ldi	r16, 0x00	; 0
    3dd2:	10 e0       	ldi	r17, 0x00	; 0
    3dd4:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <xTaskGenericNotify>
    3dd8:	ef 81       	ldd	r30, Y+7	; 0x07
    3dda:	f8 85       	ldd	r31, Y+8	; 0x08
    3ddc:	13 86       	std	Z+11, r1	; 0x0b
    3dde:	12 86       	std	Z+10, r1	; 0x0a
    3de0:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
    3de4:	8d 81       	ldd	r24, Y+5	; 0x05
    3de6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    3de8:	60 96       	adiw	r28, 0x10	; 16
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	cf 91       	pop	r28
    3df6:	df 91       	pop	r29
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	ef 90       	pop	r14
    3e00:	08 95       	ret

00003e02 <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	2c 97       	sbiw	r28, 0x0c	; 12
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	9c 87       	std	Y+12, r25	; 0x0c
    3e18:	8b 87       	std	Y+11, r24	; 0x0b
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3e1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e1e:	98 87       	std	Y+8, r25	; 0x08
    3e20:	8f 83       	std	Y+7, r24	; 0x07
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3e22:	ef 81       	ldd	r30, Y+7	; 0x07
    3e24:	f8 85       	ldd	r31, Y+8	; 0x08
    3e26:	86 85       	ldd	r24, Z+14	; 0x0e
    3e28:	88 2f       	mov	r24, r24
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	81 70       	andi	r24, 0x01	; 1
    3e2e:	90 70       	andi	r25, 0x00	; 0
    3e30:	88 23       	and	r24, r24
    3e32:	61 f1       	breq	.+88     	; 0x3e8c <xStreamBufferNextMessageLengthBytes+0x8a>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    3e34:	8f 81       	ldd	r24, Y+7	; 0x07
    3e36:	98 85       	ldd	r25, Y+8	; 0x08
    3e38:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <prvBytesInBuffer>
    3e3c:	9c 83       	std	Y+4, r25	; 0x04
    3e3e:	8b 83       	std	Y+3, r24	; 0x03
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    3e40:	8b 81       	ldd	r24, Y+3	; 0x03
    3e42:	9c 81       	ldd	r25, Y+4	; 0x04
    3e44:	83 30       	cpi	r24, 0x03	; 3
    3e46:	91 05       	cpc	r25, r1
    3e48:	f0 f0       	brcs	.+60     	; 0x3e86 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
    3e4a:	ef 81       	ldd	r30, Y+7	; 0x07
    3e4c:	f8 85       	ldd	r31, Y+8	; 0x08
    3e4e:	80 81       	ld	r24, Z
    3e50:	91 81       	ldd	r25, Z+1	; 0x01
    3e52:	9a 83       	std	Y+2, r25	; 0x02
    3e54:	89 83       	std	Y+1, r24	; 0x01
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
    3e56:	9e 01       	movw	r18, r28
    3e58:	27 5f       	subi	r18, 0xF7	; 247
    3e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e5e:	98 85       	ldd	r25, Y+8	; 0x08
    3e60:	eb 81       	ldd	r30, Y+3	; 0x03
    3e62:	fc 81       	ldd	r31, Y+4	; 0x04
    3e64:	b9 01       	movw	r22, r18
    3e66:	42 e0       	ldi	r20, 0x02	; 2
    3e68:	50 e0       	ldi	r21, 0x00	; 0
    3e6a:	9f 01       	movw	r18, r30
    3e6c:	0e 94 af 21 	call	0x435e	; 0x435e <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
    3e70:	89 85       	ldd	r24, Y+9	; 0x09
    3e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e74:	9e 83       	std	Y+6, r25	; 0x06
    3e76:	8d 83       	std	Y+5, r24	; 0x05
			pxStreamBuffer->xTail = xOriginalTail;
    3e78:	ef 81       	ldd	r30, Y+7	; 0x07
    3e7a:	f8 85       	ldd	r31, Y+8	; 0x08
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e80:	91 83       	std	Z+1, r25	; 0x01
    3e82:	80 83       	st	Z, r24
    3e84:	05 c0       	rjmp	.+10     	; 0x3e90 <xStreamBufferNextMessageLengthBytes+0x8e>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
    3e86:	1e 82       	std	Y+6, r1	; 0x06
    3e88:	1d 82       	std	Y+5, r1	; 0x05
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <xStreamBufferNextMessageLengthBytes+0x8e>
		}
	}
	else
	{
		xReturn = 0;
    3e8c:	1e 82       	std	Y+6, r1	; 0x06
    3e8e:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    3e90:	8d 81       	ldd	r24, Y+5	; 0x05
    3e92:	9e 81       	ldd	r25, Y+6	; 0x06
}
    3e94:	2c 96       	adiw	r28, 0x0c	; 12
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	f8 94       	cli
    3e9a:	de bf       	out	0x3e, r29	; 62
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	cd bf       	out	0x3d, r28	; 61
    3ea0:	cf 91       	pop	r28
    3ea2:	df 91       	pop	r29
    3ea4:	08 95       	ret

00003ea6 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
    3ea6:	ef 92       	push	r14
    3ea8:	ff 92       	push	r15
    3eaa:	0f 93       	push	r16
    3eac:	1f 93       	push	r17
    3eae:	df 93       	push	r29
    3eb0:	cf 93       	push	r28
    3eb2:	cd b7       	in	r28, 0x3d	; 61
    3eb4:	de b7       	in	r29, 0x3e	; 62
    3eb6:	61 97       	sbiw	r28, 0x11	; 17
    3eb8:	0f b6       	in	r0, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	cd bf       	out	0x3d, r28	; 61
    3ec2:	9b 87       	std	Y+11, r25	; 0x0b
    3ec4:	8a 87       	std	Y+10, r24	; 0x0a
    3ec6:	7d 87       	std	Y+13, r23	; 0x0d
    3ec8:	6c 87       	std	Y+12, r22	; 0x0c
    3eca:	5f 87       	std	Y+15, r21	; 0x0f
    3ecc:	4e 87       	std	Y+14, r20	; 0x0e
    3ece:	39 8b       	std	Y+17, r19	; 0x11
    3ed0:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3ed2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ed4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ed6:	99 87       	std	Y+9, r25	; 0x09
    3ed8:	88 87       	std	Y+8, r24	; 0x08
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    3eda:	1f 82       	std	Y+7, r1	; 0x07
    3edc:	1e 82       	std	Y+6, r1	; 0x06
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3ede:	e8 85       	ldd	r30, Y+8	; 0x08
    3ee0:	f9 85       	ldd	r31, Y+9	; 0x09
    3ee2:	86 85       	ldd	r24, Z+14	; 0x0e
    3ee4:	88 2f       	mov	r24, r24
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	81 70       	andi	r24, 0x01	; 1
    3eea:	90 70       	andi	r25, 0x00	; 0
    3eec:	88 23       	and	r24, r24
    3eee:	29 f0       	breq	.+10     	; 0x3efa <xStreamBufferReceiveFromISR+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    3ef0:	82 e0       	ldi	r24, 0x02	; 2
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	9b 83       	std	Y+3, r25	; 0x03
    3ef6:	8a 83       	std	Y+2, r24	; 0x02
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <xStreamBufferReceiveFromISR+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    3efa:	1b 82       	std	Y+3, r1	; 0x03
    3efc:	1a 82       	std	Y+2, r1	; 0x02
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    3efe:	88 85       	ldd	r24, Y+8	; 0x08
    3f00:	99 85       	ldd	r25, Y+9	; 0x09
    3f02:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <prvBytesInBuffer>
    3f06:	9d 83       	std	Y+5, r25	; 0x05
    3f08:	8c 83       	std	Y+4, r24	; 0x04
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    3f0a:	2c 81       	ldd	r18, Y+4	; 0x04
    3f0c:	3d 81       	ldd	r19, Y+5	; 0x05
    3f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f10:	9b 81       	ldd	r25, Y+3	; 0x03
    3f12:	82 17       	cp	r24, r18
    3f14:	93 07       	cpc	r25, r19
    3f16:	80 f5       	brcc	.+96     	; 0x3f78 <xStreamBufferReceiveFromISR+0xd2>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    3f18:	88 85       	ldd	r24, Y+8	; 0x08
    3f1a:	99 85       	ldd	r25, Y+9	; 0x09
    3f1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f1e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f20:	4e 85       	ldd	r20, Y+14	; 0x0e
    3f22:	5f 85       	ldd	r21, Y+15	; 0x0f
    3f24:	ec 81       	ldd	r30, Y+4	; 0x04
    3f26:	fd 81       	ldd	r31, Y+5	; 0x05
    3f28:	aa 81       	ldd	r26, Y+2	; 0x02
    3f2a:	bb 81       	ldd	r27, Y+3	; 0x03
    3f2c:	b9 01       	movw	r22, r18
    3f2e:	9f 01       	movw	r18, r30
    3f30:	8d 01       	movw	r16, r26
    3f32:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <prvReadMessageFromBuffer>
    3f36:	9f 83       	std	Y+7, r25	; 0x07
    3f38:	8e 83       	std	Y+6, r24	; 0x06

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    3f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	d9 f0       	breq	.+54     	; 0x3f78 <xStreamBufferReceiveFromISR+0xd2>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    3f42:	19 82       	std	Y+1, r1	; 0x01
    3f44:	e8 85       	ldd	r30, Y+8	; 0x08
    3f46:	f9 85       	ldd	r31, Y+9	; 0x09
    3f48:	82 85       	ldd	r24, Z+10	; 0x0a
    3f4a:	93 85       	ldd	r25, Z+11	; 0x0b
    3f4c:	00 97       	sbiw	r24, 0x00	; 0
    3f4e:	a1 f0       	breq	.+40     	; 0x3f78 <xStreamBufferReceiveFromISR+0xd2>
    3f50:	e8 85       	ldd	r30, Y+8	; 0x08
    3f52:	f9 85       	ldd	r31, Y+9	; 0x09
    3f54:	82 85       	ldd	r24, Z+10	; 0x0a
    3f56:	93 85       	ldd	r25, Z+11	; 0x0b
    3f58:	e8 89       	ldd	r30, Y+16	; 0x10
    3f5a:	f9 89       	ldd	r31, Y+17	; 0x11
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	50 e0       	ldi	r21, 0x00	; 0
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	70 e0       	ldi	r23, 0x00	; 0
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	00 e0       	ldi	r16, 0x00	; 0
    3f68:	10 e0       	ldi	r17, 0x00	; 0
    3f6a:	7f 01       	movw	r14, r30
    3f6c:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <xTaskGenericNotifyFromISR>
    3f70:	e8 85       	ldd	r30, Y+8	; 0x08
    3f72:	f9 85       	ldd	r31, Y+9	; 0x09
    3f74:	13 86       	std	Z+11, r1	; 0x0b
    3f76:	12 86       	std	Z+10, r1	; 0x0a
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
    3f78:	8e 81       	ldd	r24, Y+6	; 0x06
    3f7a:	9f 81       	ldd	r25, Y+7	; 0x07
}
    3f7c:	61 96       	adiw	r28, 0x11	; 17
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	f8 94       	cli
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	cd bf       	out	0x3d, r28	; 61
    3f88:	cf 91       	pop	r28
    3f8a:	df 91       	pop	r29
    3f8c:	1f 91       	pop	r17
    3f8e:	0f 91       	pop	r16
    3f90:	ff 90       	pop	r15
    3f92:	ef 90       	pop	r14
    3f94:	08 95       	ret

00003f96 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	df 93       	push	r29
    3f9c:	cf 93       	push	r28
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	62 97       	sbiw	r28, 0x12	; 18
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	9a 87       	std	Y+10, r25	; 0x0a
    3fb0:	89 87       	std	Y+9, r24	; 0x09
    3fb2:	7c 87       	std	Y+12, r23	; 0x0c
    3fb4:	6b 87       	std	Y+11, r22	; 0x0b
    3fb6:	5e 87       	std	Y+14, r21	; 0x0e
    3fb8:	4d 87       	std	Y+13, r20	; 0x0d
    3fba:	38 8b       	std	Y+16, r19	; 0x10
    3fbc:	2f 87       	std	Y+15, r18	; 0x0f
    3fbe:	1a 8b       	std	Y+18, r17	; 0x12
    3fc0:	09 8b       	std	Y+17, r16	; 0x11
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
    3fc2:	89 89       	ldd	r24, Y+17	; 0x11
    3fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc6:	00 97       	sbiw	r24, 0x00	; 0
    3fc8:	91 f1       	breq	.+100    	; 0x402e <prvReadMessageFromBuffer+0x98>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
    3fca:	e9 85       	ldd	r30, Y+9	; 0x09
    3fcc:	fa 85       	ldd	r31, Y+10	; 0x0a
    3fce:	80 81       	ld	r24, Z
    3fd0:	91 81       	ldd	r25, Z+1	; 0x01
    3fd2:	9e 83       	std	Y+6, r25	; 0x06
    3fd4:	8d 83       	std	Y+5, r24	; 0x05
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    3fd6:	ae 01       	movw	r20, r28
    3fd8:	49 5f       	subi	r20, 0xF9	; 249
    3fda:	5f 4f       	sbci	r21, 0xFF	; 255
    3fdc:	89 85       	ldd	r24, Y+9	; 0x09
    3fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe0:	29 89       	ldd	r18, Y+17	; 0x11
    3fe2:	3a 89       	ldd	r19, Y+18	; 0x12
    3fe4:	ef 85       	ldd	r30, Y+15	; 0x0f
    3fe6:	f8 89       	ldd	r31, Y+16	; 0x10
    3fe8:	ba 01       	movw	r22, r20
    3fea:	a9 01       	movw	r20, r18
    3fec:	9f 01       	movw	r18, r30
    3fee:	0e 94 af 21 	call	0x435e	; 0x435e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
    3ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ff4:	98 85       	ldd	r25, Y+8	; 0x08
    3ff6:	9a 83       	std	Y+2, r25	; 0x02
    3ff8:	89 83       	std	Y+1, r24	; 0x01

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
    3ffa:	2f 85       	ldd	r18, Y+15	; 0x0f
    3ffc:	38 89       	ldd	r19, Y+16	; 0x10
    3ffe:	89 89       	ldd	r24, Y+17	; 0x11
    4000:	9a 89       	ldd	r25, Y+18	; 0x12
    4002:	a9 01       	movw	r20, r18
    4004:	48 1b       	sub	r20, r24
    4006:	59 0b       	sbc	r21, r25
    4008:	ca 01       	movw	r24, r20
    400a:	98 8b       	std	Y+16, r25	; 0x10
    400c:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
    400e:	29 81       	ldd	r18, Y+1	; 0x01
    4010:	3a 81       	ldd	r19, Y+2	; 0x02
    4012:	8d 85       	ldd	r24, Y+13	; 0x0d
    4014:	9e 85       	ldd	r25, Y+14	; 0x0e
    4016:	82 17       	cp	r24, r18
    4018:	93 07       	cpc	r25, r19
    401a:	68 f4       	brcc	.+26     	; 0x4036 <prvReadMessageFromBuffer+0xa0>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
    401c:	e9 85       	ldd	r30, Y+9	; 0x09
    401e:	fa 85       	ldd	r31, Y+10	; 0x0a
    4020:	8d 81       	ldd	r24, Y+5	; 0x05
    4022:	9e 81       	ldd	r25, Y+6	; 0x06
    4024:	91 83       	std	Z+1, r25	; 0x01
    4026:	80 83       	st	Z, r24
			xNextMessageLength = 0;
    4028:	1a 82       	std	Y+2, r1	; 0x02
    402a:	19 82       	std	Y+1, r1	; 0x01
    402c:	04 c0       	rjmp	.+8      	; 0x4036 <prvReadMessageFromBuffer+0xa0>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
    402e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4030:	9e 85       	ldd	r25, Y+14	; 0x0e
    4032:	9a 83       	std	Y+2, r25	; 0x02
    4034:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    4036:	4b 85       	ldd	r20, Y+11	; 0x0b
    4038:	5c 85       	ldd	r21, Y+12	; 0x0c
    403a:	89 85       	ldd	r24, Y+9	; 0x09
    403c:	9a 85       	ldd	r25, Y+10	; 0x0a
    403e:	29 81       	ldd	r18, Y+1	; 0x01
    4040:	3a 81       	ldd	r19, Y+2	; 0x02
    4042:	ef 85       	ldd	r30, Y+15	; 0x0f
    4044:	f8 89       	ldd	r31, Y+16	; 0x10
    4046:	ba 01       	movw	r22, r20
    4048:	a9 01       	movw	r20, r18
    404a:	9f 01       	movw	r18, r30
    404c:	0e 94 af 21 	call	0x435e	; 0x435e <prvReadBytesFromBuffer>
    4050:	9c 83       	std	Y+4, r25	; 0x04
    4052:	8b 83       	std	Y+3, r24	; 0x03

	return xReceivedLength;
    4054:	8b 81       	ldd	r24, Y+3	; 0x03
    4056:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4058:	62 96       	adiw	r28, 0x12	; 18
    405a:	0f b6       	in	r0, 0x3f	; 63
    405c:	f8 94       	cli
    405e:	de bf       	out	0x3e, r29	; 62
    4060:	0f be       	out	0x3f, r0	; 63
    4062:	cd bf       	out	0x3d, r28	; 61
    4064:	cf 91       	pop	r28
    4066:	df 91       	pop	r29
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	08 95       	ret

0000406e <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
    406e:	df 93       	push	r29
    4070:	cf 93       	push	r28
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	27 97       	sbiw	r28, 0x07	; 7
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	de bf       	out	0x3e, r29	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	9f 83       	std	Y+7, r25	; 0x07
    4084:	8e 83       	std	Y+6, r24	; 0x06
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4086:	8e 81       	ldd	r24, Y+6	; 0x06
    4088:	9f 81       	ldd	r25, Y+7	; 0x07
    408a:	9d 83       	std	Y+5, r25	; 0x05
    408c:	8c 83       	std	Y+4, r24	; 0x04
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
    408e:	ec 81       	ldd	r30, Y+4	; 0x04
    4090:	fd 81       	ldd	r31, Y+5	; 0x05
    4092:	80 81       	ld	r24, Z
    4094:	91 81       	ldd	r25, Z+1	; 0x01
    4096:	9a 83       	std	Y+2, r25	; 0x02
    4098:	89 83       	std	Y+1, r24	; 0x01
	if( pxStreamBuffer->xHead == xTail )
    409a:	ec 81       	ldd	r30, Y+4	; 0x04
    409c:	fd 81       	ldd	r31, Y+5	; 0x05
    409e:	22 81       	ldd	r18, Z+2	; 0x02
    40a0:	33 81       	ldd	r19, Z+3	; 0x03
    40a2:	89 81       	ldd	r24, Y+1	; 0x01
    40a4:	9a 81       	ldd	r25, Y+2	; 0x02
    40a6:	28 17       	cp	r18, r24
    40a8:	39 07       	cpc	r19, r25
    40aa:	19 f4       	brne	.+6      	; 0x40b2 <xStreamBufferIsEmpty+0x44>
	{
		xReturn = pdTRUE;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	8b 83       	std	Y+3, r24	; 0x03
    40b0:	01 c0       	rjmp	.+2      	; 0x40b4 <xStreamBufferIsEmpty+0x46>
	}
	else
	{
		xReturn = pdFALSE;
    40b2:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    40b4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    40b6:	27 96       	adiw	r28, 0x07	; 7
    40b8:	0f b6       	in	r0, 0x3f	; 63
    40ba:	f8 94       	cli
    40bc:	de bf       	out	0x3e, r29	; 62
    40be:	0f be       	out	0x3f, r0	; 63
    40c0:	cd bf       	out	0x3d, r28	; 61
    40c2:	cf 91       	pop	r28
    40c4:	df 91       	pop	r29
    40c6:	08 95       	ret

000040c8 <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    40c8:	df 93       	push	r29
    40ca:	cf 93       	push	r28
    40cc:	cd b7       	in	r28, 0x3d	; 61
    40ce:	de b7       	in	r29, 0x3e	; 62
    40d0:	27 97       	sbiw	r28, 0x07	; 7
    40d2:	0f b6       	in	r0, 0x3f	; 63
    40d4:	f8 94       	cli
    40d6:	de bf       	out	0x3e, r29	; 62
    40d8:	0f be       	out	0x3f, r0	; 63
    40da:	cd bf       	out	0x3d, r28	; 61
    40dc:	9f 83       	std	Y+7, r25	; 0x07
    40de:	8e 83       	std	Y+6, r24	; 0x06
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    40e0:	8e 81       	ldd	r24, Y+6	; 0x06
    40e2:	9f 81       	ldd	r25, Y+7	; 0x07
    40e4:	9a 83       	std	Y+2, r25	; 0x02
    40e6:	89 83       	std	Y+1, r24	; 0x01

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    40e8:	e9 81       	ldd	r30, Y+1	; 0x01
    40ea:	fa 81       	ldd	r31, Y+2	; 0x02
    40ec:	86 85       	ldd	r24, Z+14	; 0x0e
    40ee:	88 2f       	mov	r24, r24
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	81 70       	andi	r24, 0x01	; 1
    40f4:	90 70       	andi	r25, 0x00	; 0
    40f6:	88 23       	and	r24, r24
    40f8:	29 f0       	breq	.+10     	; 0x4104 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	9c 83       	std	Y+4, r25	; 0x04
    4100:	8b 83       	std	Y+3, r24	; 0x03
    4102:	02 c0       	rjmp	.+4      	; 0x4108 <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    4104:	1c 82       	std	Y+4, r1	; 0x04
    4106:	1b 82       	std	Y+3, r1	; 0x03
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    4108:	8e 81       	ldd	r24, Y+6	; 0x06
    410a:	9f 81       	ldd	r25, Y+7	; 0x07
    410c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <xStreamBufferSpacesAvailable>
    4110:	9c 01       	movw	r18, r24
    4112:	8b 81       	ldd	r24, Y+3	; 0x03
    4114:	9c 81       	ldd	r25, Y+4	; 0x04
    4116:	82 17       	cp	r24, r18
    4118:	93 07       	cpc	r25, r19
    411a:	18 f0       	brcs	.+6      	; 0x4122 <xStreamBufferIsFull+0x5a>
	{
		xReturn = pdTRUE;
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	8d 83       	std	Y+5, r24	; 0x05
    4120:	01 c0       	rjmp	.+2      	; 0x4124 <xStreamBufferIsFull+0x5c>
	}
	else
	{
		xReturn = pdFALSE;
    4122:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    4124:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4126:	27 96       	adiw	r28, 0x07	; 7
    4128:	0f b6       	in	r0, 0x3f	; 63
    412a:	f8 94       	cli
    412c:	de bf       	out	0x3e, r29	; 62
    412e:	0f be       	out	0x3f, r0	; 63
    4130:	cd bf       	out	0x3d, r28	; 61
    4132:	cf 91       	pop	r28
    4134:	df 91       	pop	r29
    4136:	08 95       	ret

00004138 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    4138:	ef 92       	push	r14
    413a:	ff 92       	push	r15
    413c:	0f 93       	push	r16
    413e:	1f 93       	push	r17
    4140:	df 93       	push	r29
    4142:	cf 93       	push	r28
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	28 97       	sbiw	r28, 0x08	; 8
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	9e 83       	std	Y+6, r25	; 0x06
    4156:	8d 83       	std	Y+5, r24	; 0x05
    4158:	78 87       	std	Y+8, r23	; 0x08
    415a:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    415c:	8d 81       	ldd	r24, Y+5	; 0x05
    415e:	9e 81       	ldd	r25, Y+6	; 0x06
    4160:	9c 83       	std	Y+4, r25	; 0x04
    4162:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    4164:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    4166:	eb 81       	ldd	r30, Y+3	; 0x03
    4168:	fc 81       	ldd	r31, Y+4	; 0x04
    416a:	80 85       	ldd	r24, Z+8	; 0x08
    416c:	91 85       	ldd	r25, Z+9	; 0x09
    416e:	00 97       	sbiw	r24, 0x00	; 0
    4170:	b9 f0       	breq	.+46     	; 0x41a0 <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    4172:	eb 81       	ldd	r30, Y+3	; 0x03
    4174:	fc 81       	ldd	r31, Y+4	; 0x04
    4176:	80 85       	ldd	r24, Z+8	; 0x08
    4178:	91 85       	ldd	r25, Z+9	; 0x09
    417a:	ef 81       	ldd	r30, Y+7	; 0x07
    417c:	f8 85       	ldd	r31, Y+8	; 0x08
    417e:	40 e0       	ldi	r20, 0x00	; 0
    4180:	50 e0       	ldi	r21, 0x00	; 0
    4182:	60 e0       	ldi	r22, 0x00	; 0
    4184:	70 e0       	ldi	r23, 0x00	; 0
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	00 e0       	ldi	r16, 0x00	; 0
    418a:	10 e0       	ldi	r17, 0x00	; 0
    418c:	7f 01       	movw	r14, r30
    418e:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    4192:	eb 81       	ldd	r30, Y+3	; 0x03
    4194:	fc 81       	ldd	r31, Y+4	; 0x04
    4196:	11 86       	std	Z+9, r1	; 0x09
    4198:	10 86       	std	Z+8, r1	; 0x08
			xReturn = pdTRUE;
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	8a 83       	std	Y+2, r24	; 0x02
    419e:	01 c0       	rjmp	.+2      	; 0x41a2 <xStreamBufferSendCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    41a0:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    41a2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    41a4:	28 96       	adiw	r28, 0x08	; 8
    41a6:	0f b6       	in	r0, 0x3f	; 63
    41a8:	f8 94       	cli
    41aa:	de bf       	out	0x3e, r29	; 62
    41ac:	0f be       	out	0x3f, r0	; 63
    41ae:	cd bf       	out	0x3d, r28	; 61
    41b0:	cf 91       	pop	r28
    41b2:	df 91       	pop	r29
    41b4:	1f 91       	pop	r17
    41b6:	0f 91       	pop	r16
    41b8:	ff 90       	pop	r15
    41ba:	ef 90       	pop	r14
    41bc:	08 95       	ret

000041be <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    41be:	ef 92       	push	r14
    41c0:	ff 92       	push	r15
    41c2:	0f 93       	push	r16
    41c4:	1f 93       	push	r17
    41c6:	df 93       	push	r29
    41c8:	cf 93       	push	r28
    41ca:	cd b7       	in	r28, 0x3d	; 61
    41cc:	de b7       	in	r29, 0x3e	; 62
    41ce:	28 97       	sbiw	r28, 0x08	; 8
    41d0:	0f b6       	in	r0, 0x3f	; 63
    41d2:	f8 94       	cli
    41d4:	de bf       	out	0x3e, r29	; 62
    41d6:	0f be       	out	0x3f, r0	; 63
    41d8:	cd bf       	out	0x3d, r28	; 61
    41da:	9e 83       	std	Y+6, r25	; 0x06
    41dc:	8d 83       	std	Y+5, r24	; 0x05
    41de:	78 87       	std	Y+8, r23	; 0x08
    41e0:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    41e2:	8d 81       	ldd	r24, Y+5	; 0x05
    41e4:	9e 81       	ldd	r25, Y+6	; 0x06
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    41ea:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    41ec:	eb 81       	ldd	r30, Y+3	; 0x03
    41ee:	fc 81       	ldd	r31, Y+4	; 0x04
    41f0:	82 85       	ldd	r24, Z+10	; 0x0a
    41f2:	93 85       	ldd	r25, Z+11	; 0x0b
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	b9 f0       	breq	.+46     	; 0x4226 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    41f8:	eb 81       	ldd	r30, Y+3	; 0x03
    41fa:	fc 81       	ldd	r31, Y+4	; 0x04
    41fc:	82 85       	ldd	r24, Z+10	; 0x0a
    41fe:	93 85       	ldd	r25, Z+11	; 0x0b
    4200:	ef 81       	ldd	r30, Y+7	; 0x07
    4202:	f8 85       	ldd	r31, Y+8	; 0x08
    4204:	40 e0       	ldi	r20, 0x00	; 0
    4206:	50 e0       	ldi	r21, 0x00	; 0
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	20 e0       	ldi	r18, 0x00	; 0
    420e:	00 e0       	ldi	r16, 0x00	; 0
    4210:	10 e0       	ldi	r17, 0x00	; 0
    4212:	7f 01       	movw	r14, r30
    4214:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    4218:	eb 81       	ldd	r30, Y+3	; 0x03
    421a:	fc 81       	ldd	r31, Y+4	; 0x04
    421c:	13 86       	std	Z+11, r1	; 0x0b
    421e:	12 86       	std	Z+10, r1	; 0x0a
			xReturn = pdTRUE;
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	8a 83       	std	Y+2, r24	; 0x02
    4224:	01 c0       	rjmp	.+2      	; 0x4228 <xStreamBufferReceiveCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    4226:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4228:	8a 81       	ldd	r24, Y+2	; 0x02
}
    422a:	28 96       	adiw	r28, 0x08	; 8
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	f8 94       	cli
    4230:	de bf       	out	0x3e, r29	; 62
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	cd bf       	out	0x3d, r28	; 61
    4236:	cf 91       	pop	r28
    4238:	df 91       	pop	r29
    423a:	1f 91       	pop	r17
    423c:	0f 91       	pop	r16
    423e:	ff 90       	pop	r15
    4240:	ef 90       	pop	r14
    4242:	08 95       	ret

00004244 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    4244:	df 93       	push	r29
    4246:	cf 93       	push	r28
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
    424c:	2e 97       	sbiw	r28, 0x0e	; 14
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	f8 94       	cli
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	cd bf       	out	0x3d, r28	; 61
    4258:	9e 83       	std	Y+6, r25	; 0x06
    425a:	8d 83       	std	Y+5, r24	; 0x05
    425c:	78 87       	std	Y+8, r23	; 0x08
    425e:	6f 83       	std	Y+7, r22	; 0x07
    4260:	5a 87       	std	Y+10, r21	; 0x0a
    4262:	49 87       	std	Y+9, r20	; 0x09
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
    4264:	ed 81       	ldd	r30, Y+5	; 0x05
    4266:	fe 81       	ldd	r31, Y+6	; 0x06
    4268:	82 81       	ldd	r24, Z+2	; 0x02
    426a:	93 81       	ldd	r25, Z+3	; 0x03
    426c:	9c 83       	std	Y+4, r25	; 0x04
    426e:	8b 83       	std	Y+3, r24	; 0x03

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    4270:	ed 81       	ldd	r30, Y+5	; 0x05
    4272:	fe 81       	ldd	r31, Y+6	; 0x06
    4274:	24 81       	ldd	r18, Z+4	; 0x04
    4276:	35 81       	ldd	r19, Z+5	; 0x05
    4278:	8b 81       	ldd	r24, Y+3	; 0x03
    427a:	9c 81       	ldd	r25, Y+4	; 0x04
    427c:	a9 01       	movw	r20, r18
    427e:	48 1b       	sub	r20, r24
    4280:	59 0b       	sbc	r21, r25
    4282:	ca 01       	movw	r24, r20
    4284:	29 85       	ldd	r18, Y+9	; 0x09
    4286:	3a 85       	ldd	r19, Y+10	; 0x0a
    4288:	3e 87       	std	Y+14, r19	; 0x0e
    428a:	2d 87       	std	Y+13, r18	; 0x0d
    428c:	9c 87       	std	Y+12, r25	; 0x0c
    428e:	8b 87       	std	Y+11, r24	; 0x0b
    4290:	4b 85       	ldd	r20, Y+11	; 0x0b
    4292:	5c 85       	ldd	r21, Y+12	; 0x0c
    4294:	8d 85       	ldd	r24, Y+13	; 0x0d
    4296:	9e 85       	ldd	r25, Y+14	; 0x0e
    4298:	84 17       	cp	r24, r20
    429a:	95 07       	cpc	r25, r21
    429c:	20 f4       	brcc	.+8      	; 0x42a6 <prvWriteBytesToBuffer+0x62>
    429e:	2d 85       	ldd	r18, Y+13	; 0x0d
    42a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    42a2:	3c 87       	std	Y+12, r19	; 0x0c
    42a4:	2b 87       	std	Y+11, r18	; 0x0b
    42a6:	4b 85       	ldd	r20, Y+11	; 0x0b
    42a8:	5c 85       	ldd	r21, Y+12	; 0x0c
    42aa:	5a 83       	std	Y+2, r21	; 0x02
    42ac:	49 83       	std	Y+1, r20	; 0x01

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    42ae:	ed 81       	ldd	r30, Y+5	; 0x05
    42b0:	fe 81       	ldd	r31, Y+6	; 0x06
    42b2:	24 85       	ldd	r18, Z+12	; 0x0c
    42b4:	35 85       	ldd	r19, Z+13	; 0x0d
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ba:	82 0f       	add	r24, r18
    42bc:	93 1f       	adc	r25, r19
    42be:	2f 81       	ldd	r18, Y+7	; 0x07
    42c0:	38 85       	ldd	r19, Y+8	; 0x08
    42c2:	49 81       	ldd	r20, Y+1	; 0x01
    42c4:	5a 81       	ldd	r21, Y+2	; 0x02
    42c6:	b9 01       	movw	r22, r18
    42c8:	0e 94 5d 30 	call	0x60ba	; 0x60ba <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
    42cc:	29 85       	ldd	r18, Y+9	; 0x09
    42ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	82 17       	cp	r24, r18
    42d6:	93 07       	cpc	r25, r19
    42d8:	b0 f4       	brcc	.+44     	; 0x4306 <prvWriteBytesToBuffer+0xc2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    42da:	ed 81       	ldd	r30, Y+5	; 0x05
    42dc:	fe 81       	ldd	r31, Y+6	; 0x06
    42de:	64 85       	ldd	r22, Z+12	; 0x0c
    42e0:	75 85       	ldd	r23, Z+13	; 0x0d
    42e2:	2f 81       	ldd	r18, Y+7	; 0x07
    42e4:	38 85       	ldd	r19, Y+8	; 0x08
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ea:	a9 01       	movw	r20, r18
    42ec:	48 0f       	add	r20, r24
    42ee:	59 1f       	adc	r21, r25
    42f0:	29 85       	ldd	r18, Y+9	; 0x09
    42f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	9a 81       	ldd	r25, Y+2	; 0x02
    42f8:	28 1b       	sub	r18, r24
    42fa:	39 0b       	sbc	r19, r25
    42fc:	cb 01       	movw	r24, r22
    42fe:	ba 01       	movw	r22, r20
    4300:	a9 01       	movw	r20, r18
    4302:	0e 94 5d 30 	call	0x60ba	; 0x60ba <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
    4306:	2b 81       	ldd	r18, Y+3	; 0x03
    4308:	3c 81       	ldd	r19, Y+4	; 0x04
    430a:	89 85       	ldd	r24, Y+9	; 0x09
    430c:	9a 85       	ldd	r25, Y+10	; 0x0a
    430e:	82 0f       	add	r24, r18
    4310:	93 1f       	adc	r25, r19
    4312:	9c 83       	std	Y+4, r25	; 0x04
    4314:	8b 83       	std	Y+3, r24	; 0x03
	if( xNextHead >= pxStreamBuffer->xLength )
    4316:	ed 81       	ldd	r30, Y+5	; 0x05
    4318:	fe 81       	ldd	r31, Y+6	; 0x06
    431a:	24 81       	ldd	r18, Z+4	; 0x04
    431c:	35 81       	ldd	r19, Z+5	; 0x05
    431e:	8b 81       	ldd	r24, Y+3	; 0x03
    4320:	9c 81       	ldd	r25, Y+4	; 0x04
    4322:	82 17       	cp	r24, r18
    4324:	93 07       	cpc	r25, r19
    4326:	50 f0       	brcs	.+20     	; 0x433c <prvWriteBytesToBuffer+0xf8>
	{
		xNextHead -= pxStreamBuffer->xLength;
    4328:	ed 81       	ldd	r30, Y+5	; 0x05
    432a:	fe 81       	ldd	r31, Y+6	; 0x06
    432c:	24 81       	ldd	r18, Z+4	; 0x04
    432e:	35 81       	ldd	r19, Z+5	; 0x05
    4330:	8b 81       	ldd	r24, Y+3	; 0x03
    4332:	9c 81       	ldd	r25, Y+4	; 0x04
    4334:	82 1b       	sub	r24, r18
    4336:	93 0b       	sbc	r25, r19
    4338:	9c 83       	std	Y+4, r25	; 0x04
    433a:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
    433c:	ed 81       	ldd	r30, Y+5	; 0x05
    433e:	fe 81       	ldd	r31, Y+6	; 0x06
    4340:	8b 81       	ldd	r24, Y+3	; 0x03
    4342:	9c 81       	ldd	r25, Y+4	; 0x04
    4344:	93 83       	std	Z+3, r25	; 0x03
    4346:	82 83       	std	Z+2, r24	; 0x02

	return xCount;
    4348:	89 85       	ldd	r24, Y+9	; 0x09
    434a:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    434c:	2e 96       	adiw	r28, 0x0e	; 14
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	f8 94       	cli
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	0f be       	out	0x3f, r0	; 63
    4356:	cd bf       	out	0x3d, r28	; 61
    4358:	cf 91       	pop	r28
    435a:	df 91       	pop	r29
    435c:	08 95       	ret

0000435e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
    4366:	66 97       	sbiw	r28, 0x16	; 22
    4368:	0f b6       	in	r0, 0x3f	; 63
    436a:	f8 94       	cli
    436c:	de bf       	out	0x3e, r29	; 62
    436e:	0f be       	out	0x3f, r0	; 63
    4370:	cd bf       	out	0x3d, r28	; 61
    4372:	98 87       	std	Y+8, r25	; 0x08
    4374:	8f 83       	std	Y+7, r24	; 0x07
    4376:	7a 87       	std	Y+10, r23	; 0x0a
    4378:	69 87       	std	Y+9, r22	; 0x09
    437a:	5c 87       	std	Y+12, r21	; 0x0c
    437c:	4b 87       	std	Y+11, r20	; 0x0b
    437e:	3e 87       	std	Y+14, r19	; 0x0e
    4380:	2d 87       	std	Y+13, r18	; 0x0d
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
    4382:	2d 85       	ldd	r18, Y+13	; 0x0d
    4384:	3e 85       	ldd	r19, Y+14	; 0x0e
    4386:	3a 8b       	std	Y+18, r19	; 0x12
    4388:	29 8b       	std	Y+17, r18	; 0x11
    438a:	4b 85       	ldd	r20, Y+11	; 0x0b
    438c:	5c 85       	ldd	r21, Y+12	; 0x0c
    438e:	58 8b       	std	Y+16, r21	; 0x10
    4390:	4f 87       	std	Y+15, r20	; 0x0f
    4392:	8f 85       	ldd	r24, Y+15	; 0x0f
    4394:	98 89       	ldd	r25, Y+16	; 0x10
    4396:	29 89       	ldd	r18, Y+17	; 0x11
    4398:	3a 89       	ldd	r19, Y+18	; 0x12
    439a:	28 17       	cp	r18, r24
    439c:	39 07       	cpc	r19, r25
    439e:	20 f4       	brcc	.+8      	; 0x43a8 <prvReadBytesFromBuffer+0x4a>
    43a0:	49 89       	ldd	r20, Y+17	; 0x11
    43a2:	5a 89       	ldd	r21, Y+18	; 0x12
    43a4:	58 8b       	std	Y+16, r21	; 0x10
    43a6:	4f 87       	std	Y+15, r20	; 0x0f
    43a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43aa:	98 89       	ldd	r25, Y+16	; 0x10
    43ac:	9e 83       	std	Y+6, r25	; 0x06
    43ae:	8d 83       	std	Y+5, r24	; 0x05

	if( xCount > ( size_t ) 0 )
    43b0:	8d 81       	ldd	r24, Y+5	; 0x05
    43b2:	9e 81       	ldd	r25, Y+6	; 0x06
    43b4:	00 97       	sbiw	r24, 0x00	; 0
    43b6:	09 f4       	brne	.+2      	; 0x43ba <prvReadBytesFromBuffer+0x5c>
    43b8:	74 c0       	rjmp	.+232    	; 0x44a2 <prvReadBytesFromBuffer+0x144>
	{
		xNextTail = pxStreamBuffer->xTail;
    43ba:	ef 81       	ldd	r30, Y+7	; 0x07
    43bc:	f8 85       	ldd	r31, Y+8	; 0x08
    43be:	80 81       	ld	r24, Z
    43c0:	91 81       	ldd	r25, Z+1	; 0x01
    43c2:	9a 83       	std	Y+2, r25	; 0x02
    43c4:	89 83       	std	Y+1, r24	; 0x01

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    43c6:	ef 81       	ldd	r30, Y+7	; 0x07
    43c8:	f8 85       	ldd	r31, Y+8	; 0x08
    43ca:	24 81       	ldd	r18, Z+4	; 0x04
    43cc:	35 81       	ldd	r19, Z+5	; 0x05
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
    43d0:	9a 81       	ldd	r25, Y+2	; 0x02
    43d2:	a9 01       	movw	r20, r18
    43d4:	48 1b       	sub	r20, r24
    43d6:	59 0b       	sbc	r21, r25
    43d8:	ca 01       	movw	r24, r20
    43da:	2d 81       	ldd	r18, Y+5	; 0x05
    43dc:	3e 81       	ldd	r19, Y+6	; 0x06
    43de:	3e 8b       	std	Y+22, r19	; 0x16
    43e0:	2d 8b       	std	Y+21, r18	; 0x15
    43e2:	9c 8b       	std	Y+20, r25	; 0x14
    43e4:	8b 8b       	std	Y+19, r24	; 0x13
    43e6:	4b 89       	ldd	r20, Y+19	; 0x13
    43e8:	5c 89       	ldd	r21, Y+20	; 0x14
    43ea:	8d 89       	ldd	r24, Y+21	; 0x15
    43ec:	9e 89       	ldd	r25, Y+22	; 0x16
    43ee:	84 17       	cp	r24, r20
    43f0:	95 07       	cpc	r25, r21
    43f2:	20 f4       	brcc	.+8      	; 0x43fc <prvReadBytesFromBuffer+0x9e>
    43f4:	2d 89       	ldd	r18, Y+21	; 0x15
    43f6:	3e 89       	ldd	r19, Y+22	; 0x16
    43f8:	3c 8b       	std	Y+20, r19	; 0x14
    43fa:	2b 8b       	std	Y+19, r18	; 0x13
    43fc:	4b 89       	ldd	r20, Y+19	; 0x13
    43fe:	5c 89       	ldd	r21, Y+20	; 0x14
    4400:	5c 83       	std	Y+4, r21	; 0x04
    4402:	4b 83       	std	Y+3, r20	; 0x03

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4404:	ef 81       	ldd	r30, Y+7	; 0x07
    4406:	f8 85       	ldd	r31, Y+8	; 0x08
    4408:	24 85       	ldd	r18, Z+12	; 0x0c
    440a:	35 85       	ldd	r19, Z+13	; 0x0d
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	9a 81       	ldd	r25, Y+2	; 0x02
    4410:	a9 01       	movw	r20, r18
    4412:	48 0f       	add	r20, r24
    4414:	59 1f       	adc	r21, r25
    4416:	89 85       	ldd	r24, Y+9	; 0x09
    4418:	9a 85       	ldd	r25, Y+10	; 0x0a
    441a:	2b 81       	ldd	r18, Y+3	; 0x03
    441c:	3c 81       	ldd	r19, Y+4	; 0x04
    441e:	ba 01       	movw	r22, r20
    4420:	a9 01       	movw	r20, r18
    4422:	0e 94 5d 30 	call	0x60ba	; 0x60ba <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
    4426:	2d 81       	ldd	r18, Y+5	; 0x05
    4428:	3e 81       	ldd	r19, Y+6	; 0x06
    442a:	8b 81       	ldd	r24, Y+3	; 0x03
    442c:	9c 81       	ldd	r25, Y+4	; 0x04
    442e:	82 17       	cp	r24, r18
    4430:	93 07       	cpc	r25, r19
    4432:	b0 f4       	brcc	.+44     	; 0x4460 <prvReadBytesFromBuffer+0x102>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4434:	29 85       	ldd	r18, Y+9	; 0x09
    4436:	3a 85       	ldd	r19, Y+10	; 0x0a
    4438:	8b 81       	ldd	r24, Y+3	; 0x03
    443a:	9c 81       	ldd	r25, Y+4	; 0x04
    443c:	b9 01       	movw	r22, r18
    443e:	68 0f       	add	r22, r24
    4440:	79 1f       	adc	r23, r25
    4442:	ef 81       	ldd	r30, Y+7	; 0x07
    4444:	f8 85       	ldd	r31, Y+8	; 0x08
    4446:	44 85       	ldd	r20, Z+12	; 0x0c
    4448:	55 85       	ldd	r21, Z+13	; 0x0d
    444a:	2d 81       	ldd	r18, Y+5	; 0x05
    444c:	3e 81       	ldd	r19, Y+6	; 0x06
    444e:	8b 81       	ldd	r24, Y+3	; 0x03
    4450:	9c 81       	ldd	r25, Y+4	; 0x04
    4452:	28 1b       	sub	r18, r24
    4454:	39 0b       	sbc	r19, r25
    4456:	cb 01       	movw	r24, r22
    4458:	ba 01       	movw	r22, r20
    445a:	a9 01       	movw	r20, r18
    445c:	0e 94 5d 30 	call	0x60ba	; 0x60ba <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
    4460:	29 81       	ldd	r18, Y+1	; 0x01
    4462:	3a 81       	ldd	r19, Y+2	; 0x02
    4464:	8d 81       	ldd	r24, Y+5	; 0x05
    4466:	9e 81       	ldd	r25, Y+6	; 0x06
    4468:	82 0f       	add	r24, r18
    446a:	93 1f       	adc	r25, r19
    446c:	9a 83       	std	Y+2, r25	; 0x02
    446e:	89 83       	std	Y+1, r24	; 0x01

		if( xNextTail >= pxStreamBuffer->xLength )
    4470:	ef 81       	ldd	r30, Y+7	; 0x07
    4472:	f8 85       	ldd	r31, Y+8	; 0x08
    4474:	24 81       	ldd	r18, Z+4	; 0x04
    4476:	35 81       	ldd	r19, Z+5	; 0x05
    4478:	89 81       	ldd	r24, Y+1	; 0x01
    447a:	9a 81       	ldd	r25, Y+2	; 0x02
    447c:	82 17       	cp	r24, r18
    447e:	93 07       	cpc	r25, r19
    4480:	50 f0       	brcs	.+20     	; 0x4496 <prvReadBytesFromBuffer+0x138>
		{
			xNextTail -= pxStreamBuffer->xLength;
    4482:	ef 81       	ldd	r30, Y+7	; 0x07
    4484:	f8 85       	ldd	r31, Y+8	; 0x08
    4486:	24 81       	ldd	r18, Z+4	; 0x04
    4488:	35 81       	ldd	r19, Z+5	; 0x05
    448a:	89 81       	ldd	r24, Y+1	; 0x01
    448c:	9a 81       	ldd	r25, Y+2	; 0x02
    448e:	82 1b       	sub	r24, r18
    4490:	93 0b       	sbc	r25, r19
    4492:	9a 83       	std	Y+2, r25	; 0x02
    4494:	89 83       	std	Y+1, r24	; 0x01
		}

		pxStreamBuffer->xTail = xNextTail;
    4496:	ef 81       	ldd	r30, Y+7	; 0x07
    4498:	f8 85       	ldd	r31, Y+8	; 0x08
    449a:	89 81       	ldd	r24, Y+1	; 0x01
    449c:	9a 81       	ldd	r25, Y+2	; 0x02
    449e:	91 83       	std	Z+1, r25	; 0x01
    44a0:	80 83       	st	Z, r24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    44a2:	8d 81       	ldd	r24, Y+5	; 0x05
    44a4:	9e 81       	ldd	r25, Y+6	; 0x06
}
    44a6:	66 96       	adiw	r28, 0x16	; 22
    44a8:	0f b6       	in	r0, 0x3f	; 63
    44aa:	f8 94       	cli
    44ac:	de bf       	out	0x3e, r29	; 62
    44ae:	0f be       	out	0x3f, r0	; 63
    44b0:	cd bf       	out	0x3d, r28	; 61
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	00 d0       	rcall	.+0      	; 0x44be <prvBytesInBuffer+0x6>
    44be:	00 d0       	rcall	.+0      	; 0x44c0 <prvBytesInBuffer+0x8>
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	9c 83       	std	Y+4, r25	; 0x04
    44c6:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    44c8:	eb 81       	ldd	r30, Y+3	; 0x03
    44ca:	fc 81       	ldd	r31, Y+4	; 0x04
    44cc:	24 81       	ldd	r18, Z+4	; 0x04
    44ce:	35 81       	ldd	r19, Z+5	; 0x05
    44d0:	eb 81       	ldd	r30, Y+3	; 0x03
    44d2:	fc 81       	ldd	r31, Y+4	; 0x04
    44d4:	82 81       	ldd	r24, Z+2	; 0x02
    44d6:	93 81       	ldd	r25, Z+3	; 0x03
    44d8:	82 0f       	add	r24, r18
    44da:	93 1f       	adc	r25, r19
    44dc:	9a 83       	std	Y+2, r25	; 0x02
    44de:	89 83       	std	Y+1, r24	; 0x01
	xCount -= pxStreamBuffer->xTail;
    44e0:	eb 81       	ldd	r30, Y+3	; 0x03
    44e2:	fc 81       	ldd	r31, Y+4	; 0x04
    44e4:	20 81       	ld	r18, Z
    44e6:	31 81       	ldd	r19, Z+1	; 0x01
    44e8:	89 81       	ldd	r24, Y+1	; 0x01
    44ea:	9a 81       	ldd	r25, Y+2	; 0x02
    44ec:	82 1b       	sub	r24, r18
    44ee:	93 0b       	sbc	r25, r19
    44f0:	9a 83       	std	Y+2, r25	; 0x02
    44f2:	89 83       	std	Y+1, r24	; 0x01
	if ( xCount >= pxStreamBuffer->xLength )
    44f4:	eb 81       	ldd	r30, Y+3	; 0x03
    44f6:	fc 81       	ldd	r31, Y+4	; 0x04
    44f8:	24 81       	ldd	r18, Z+4	; 0x04
    44fa:	35 81       	ldd	r19, Z+5	; 0x05
    44fc:	89 81       	ldd	r24, Y+1	; 0x01
    44fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4500:	82 17       	cp	r24, r18
    4502:	93 07       	cpc	r25, r19
    4504:	50 f0       	brcs	.+20     	; 0x451a <prvBytesInBuffer+0x62>
	{
		xCount -= pxStreamBuffer->xLength;
    4506:	eb 81       	ldd	r30, Y+3	; 0x03
    4508:	fc 81       	ldd	r31, Y+4	; 0x04
    450a:	24 81       	ldd	r18, Z+4	; 0x04
    450c:	35 81       	ldd	r19, Z+5	; 0x05
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	9a 81       	ldd	r25, Y+2	; 0x02
    4512:	82 1b       	sub	r24, r18
    4514:	93 0b       	sbc	r25, r19
    4516:	9a 83       	std	Y+2, r25	; 0x02
    4518:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    451a:	89 81       	ldd	r24, Y+1	; 0x01
    451c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	cf 91       	pop	r28
    4528:	df 91       	pop	r29
    452a:	08 95       	ret

0000452c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
    452c:	0f 93       	push	r16
    452e:	df 93       	push	r29
    4530:	cf 93       	push	r28
    4532:	cd b7       	in	r28, 0x3d	; 61
    4534:	de b7       	in	r29, 0x3e	; 62
    4536:	29 97       	sbiw	r28, 0x09	; 9
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	f8 94       	cli
    453c:	de bf       	out	0x3e, r29	; 62
    453e:	0f be       	out	0x3f, r0	; 63
    4540:	cd bf       	out	0x3d, r28	; 61
    4542:	9a 83       	std	Y+2, r25	; 0x02
    4544:	89 83       	std	Y+1, r24	; 0x01
    4546:	7c 83       	std	Y+4, r23	; 0x04
    4548:	6b 83       	std	Y+3, r22	; 0x03
    454a:	5e 83       	std	Y+6, r21	; 0x06
    454c:	4d 83       	std	Y+5, r20	; 0x05
    454e:	38 87       	std	Y+8, r19	; 0x08
    4550:	2f 83       	std	Y+7, r18	; 0x07
    4552:	09 87       	std	Y+9, r16	; 0x09
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	9a 81       	ldd	r25, Y+2	; 0x02
    4558:	60 e0       	ldi	r22, 0x00	; 0
    455a:	70 e0       	ldi	r23, 0x00	; 0
    455c:	4f e0       	ldi	r20, 0x0F	; 15
    455e:	50 e0       	ldi	r21, 0x00	; 0
    4560:	0e 94 66 30 	call	0x60cc	; 0x60cc <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    4564:	e9 81       	ldd	r30, Y+1	; 0x01
    4566:	fa 81       	ldd	r31, Y+2	; 0x02
    4568:	8b 81       	ldd	r24, Y+3	; 0x03
    456a:	9c 81       	ldd	r25, Y+4	; 0x04
    456c:	95 87       	std	Z+13, r25	; 0x0d
    456e:	84 87       	std	Z+12, r24	; 0x0c
	pxStreamBuffer->xLength = xBufferSizeBytes;
    4570:	e9 81       	ldd	r30, Y+1	; 0x01
    4572:	fa 81       	ldd	r31, Y+2	; 0x02
    4574:	8d 81       	ldd	r24, Y+5	; 0x05
    4576:	9e 81       	ldd	r25, Y+6	; 0x06
    4578:	95 83       	std	Z+5, r25	; 0x05
    457a:	84 83       	std	Z+4, r24	; 0x04
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    457c:	e9 81       	ldd	r30, Y+1	; 0x01
    457e:	fa 81       	ldd	r31, Y+2	; 0x02
    4580:	8f 81       	ldd	r24, Y+7	; 0x07
    4582:	98 85       	ldd	r25, Y+8	; 0x08
    4584:	97 83       	std	Z+7, r25	; 0x07
    4586:	86 83       	std	Z+6, r24	; 0x06
	pxStreamBuffer->ucFlags = ucFlags;
    4588:	e9 81       	ldd	r30, Y+1	; 0x01
    458a:	fa 81       	ldd	r31, Y+2	; 0x02
    458c:	89 85       	ldd	r24, Y+9	; 0x09
    458e:	86 87       	std	Z+14, r24	; 0x0e
}
    4590:	29 96       	adiw	r28, 0x09	; 9
    4592:	0f b6       	in	r0, 0x3f	; 63
    4594:	f8 94       	cli
    4596:	de bf       	out	0x3e, r29	; 62
    4598:	0f be       	out	0x3f, r0	; 63
    459a:	cd bf       	out	0x3d, r28	; 61
    459c:	cf 91       	pop	r28
    459e:	df 91       	pop	r29
    45a0:	0f 91       	pop	r16
    45a2:	08 95       	ret

000045a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    45a4:	8f 92       	push	r8
    45a6:	9f 92       	push	r9
    45a8:	af 92       	push	r10
    45aa:	bf 92       	push	r11
    45ac:	cf 92       	push	r12
    45ae:	df 92       	push	r13
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	df 93       	push	r29
    45ba:	cf 93       	push	r28
    45bc:	cd b7       	in	r28, 0x3d	; 61
    45be:	de b7       	in	r29, 0x3e	; 62
    45c0:	60 97       	sbiw	r28, 0x10	; 16
    45c2:	0f b6       	in	r0, 0x3f	; 63
    45c4:	f8 94       	cli
    45c6:	de bf       	out	0x3e, r29	; 62
    45c8:	0f be       	out	0x3f, r0	; 63
    45ca:	cd bf       	out	0x3d, r28	; 61
    45cc:	9f 83       	std	Y+7, r25	; 0x07
    45ce:	8e 83       	std	Y+6, r24	; 0x06
    45d0:	79 87       	std	Y+9, r23	; 0x09
    45d2:	68 87       	std	Y+8, r22	; 0x08
    45d4:	5b 87       	std	Y+11, r21	; 0x0b
    45d6:	4a 87       	std	Y+10, r20	; 0x0a
    45d8:	3d 87       	std	Y+13, r19	; 0x0d
    45da:	2c 87       	std	Y+12, r18	; 0x0c
    45dc:	0e 87       	std	Y+14, r16	; 0x0e
    45de:	f8 8a       	std	Y+16, r15	; 0x10
    45e0:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    45e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    45e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    45e6:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <pvPortMalloc>
    45ea:	9a 83       	std	Y+2, r25	; 0x02
    45ec:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    45ee:	89 81       	ldd	r24, Y+1	; 0x01
    45f0:	9a 81       	ldd	r25, Y+2	; 0x02
    45f2:	00 97       	sbiw	r24, 0x00	; 0
    45f4:	b1 f0       	breq	.+44     	; 0x4622 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    45f6:	86 e2       	ldi	r24, 0x26	; 38
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <pvPortMalloc>
    45fe:	9d 83       	std	Y+5, r25	; 0x05
    4600:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    4602:	8c 81       	ldd	r24, Y+4	; 0x04
    4604:	9d 81       	ldd	r25, Y+5	; 0x05
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	39 f0       	breq	.+14     	; 0x4618 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    460a:	ec 81       	ldd	r30, Y+4	; 0x04
    460c:	fd 81       	ldd	r31, Y+5	; 0x05
    460e:	89 81       	ldd	r24, Y+1	; 0x01
    4610:	9a 81       	ldd	r25, Y+2	; 0x02
    4612:	90 8f       	std	Z+24, r25	; 0x18
    4614:	87 8b       	std	Z+23, r24	; 0x17
    4616:	07 c0       	rjmp	.+14     	; 0x4626 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    4618:	89 81       	ldd	r24, Y+1	; 0x01
    461a:	9a 81       	ldd	r25, Y+2	; 0x02
    461c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <vPortFree>
    4620:	02 c0       	rjmp	.+4      	; 0x4626 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    4622:	1d 82       	std	Y+5, r1	; 0x05
    4624:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    4626:	8c 81       	ldd	r24, Y+4	; 0x04
    4628:	9d 81       	ldd	r25, Y+5	; 0x05
    462a:	00 97       	sbiw	r24, 0x00	; 0
    462c:	e9 f0       	breq	.+58     	; 0x4668 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    462e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4630:	9b 85       	ldd	r25, Y+11	; 0x0b
    4632:	9c 01       	movw	r18, r24
    4634:	40 e0       	ldi	r20, 0x00	; 0
    4636:	50 e0       	ldi	r21, 0x00	; 0
    4638:	8e 81       	ldd	r24, Y+6	; 0x06
    463a:	9f 81       	ldd	r25, Y+7	; 0x07
    463c:	68 85       	ldd	r22, Y+8	; 0x08
    463e:	79 85       	ldd	r23, Y+9	; 0x09
    4640:	ec 85       	ldd	r30, Y+12	; 0x0c
    4642:	fd 85       	ldd	r31, Y+13	; 0x0d
    4644:	af 85       	ldd	r26, Y+15	; 0x0f
    4646:	b8 89       	ldd	r27, Y+16	; 0x10
    4648:	ac 80       	ldd	r10, Y+4	; 0x04
    464a:	bd 80       	ldd	r11, Y+5	; 0x05
    464c:	8f 01       	movw	r16, r30
    464e:	ee 84       	ldd	r14, Y+14	; 0x0e
    4650:	6d 01       	movw	r12, r26
    4652:	88 24       	eor	r8, r8
    4654:	99 24       	eor	r9, r9
    4656:	0e 94 4a 23 	call	0x4694	; 0x4694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    465a:	8c 81       	ldd	r24, Y+4	; 0x04
    465c:	9d 81       	ldd	r25, Y+5	; 0x05
    465e:	0e 94 06 24 	call	0x480c	; 0x480c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	8b 83       	std	Y+3, r24	; 0x03
    4666:	02 c0       	rjmp	.+4      	; 0x466c <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4668:	8f ef       	ldi	r24, 0xFF	; 255
    466a:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    466c:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    466e:	60 96       	adiw	r28, 0x10	; 16
    4670:	0f b6       	in	r0, 0x3f	; 63
    4672:	f8 94       	cli
    4674:	de bf       	out	0x3e, r29	; 62
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	cd bf       	out	0x3d, r28	; 61
    467a:	cf 91       	pop	r28
    467c:	df 91       	pop	r29
    467e:	1f 91       	pop	r17
    4680:	0f 91       	pop	r16
    4682:	ff 90       	pop	r15
    4684:	ef 90       	pop	r14
    4686:	df 90       	pop	r13
    4688:	cf 90       	pop	r12
    468a:	bf 90       	pop	r11
    468c:	af 90       	pop	r10
    468e:	9f 90       	pop	r9
    4690:	8f 90       	pop	r8
    4692:	08 95       	ret

00004694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    4694:	8f 92       	push	r8
    4696:	9f 92       	push	r9
    4698:	af 92       	push	r10
    469a:	bf 92       	push	r11
    469c:	cf 92       	push	r12
    469e:	df 92       	push	r13
    46a0:	ef 92       	push	r14
    46a2:	0f 93       	push	r16
    46a4:	1f 93       	push	r17
    46a6:	df 93       	push	r29
    46a8:	cf 93       	push	r28
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
    46ae:	64 97       	sbiw	r28, 0x14	; 20
    46b0:	0f b6       	in	r0, 0x3f	; 63
    46b2:	f8 94       	cli
    46b4:	de bf       	out	0x3e, r29	; 62
    46b6:	0f be       	out	0x3f, r0	; 63
    46b8:	cd bf       	out	0x3d, r28	; 61
    46ba:	9d 83       	std	Y+5, r25	; 0x05
    46bc:	8c 83       	std	Y+4, r24	; 0x04
    46be:	7f 83       	std	Y+7, r23	; 0x07
    46c0:	6e 83       	std	Y+6, r22	; 0x06
    46c2:	28 87       	std	Y+8, r18	; 0x08
    46c4:	39 87       	std	Y+9, r19	; 0x09
    46c6:	4a 87       	std	Y+10, r20	; 0x0a
    46c8:	5b 87       	std	Y+11, r21	; 0x0b
    46ca:	1d 87       	std	Y+13, r17	; 0x0d
    46cc:	0c 87       	std	Y+12, r16	; 0x0c
    46ce:	ee 86       	std	Y+14, r14	; 0x0e
    46d0:	d8 8a       	std	Y+16, r13	; 0x10
    46d2:	cf 86       	std	Y+15, r12	; 0x0f
    46d4:	ba 8a       	std	Y+18, r11	; 0x12
    46d6:	a9 8a       	std	Y+17, r10	; 0x11
    46d8:	9c 8a       	std	Y+20, r9	; 0x14
    46da:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    46dc:	e9 89       	ldd	r30, Y+17	; 0x11
    46de:	fa 89       	ldd	r31, Y+18	; 0x12
    46e0:	27 89       	ldd	r18, Z+23	; 0x17
    46e2:	30 8d       	ldd	r19, Z+24	; 0x18
    46e4:	88 85       	ldd	r24, Y+8	; 0x08
    46e6:	99 85       	ldd	r25, Y+9	; 0x09
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	82 0f       	add	r24, r18
    46ec:	93 1f       	adc	r25, r19
    46ee:	9b 83       	std	Y+3, r25	; 0x03
    46f0:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    46f2:	8e 81       	ldd	r24, Y+6	; 0x06
    46f4:	9f 81       	ldd	r25, Y+7	; 0x07
    46f6:	00 97       	sbiw	r24, 0x00	; 0
    46f8:	51 f1       	breq	.+84     	; 0x474e <prvInitialiseNewTask+0xba>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    46fa:	19 82       	std	Y+1, r1	; 0x01
    46fc:	21 c0       	rjmp	.+66     	; 0x4740 <prvInitialiseNewTask+0xac>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    46fe:	89 81       	ldd	r24, Y+1	; 0x01
    4700:	48 2f       	mov	r20, r24
    4702:	50 e0       	ldi	r21, 0x00	; 0
    4704:	89 81       	ldd	r24, Y+1	; 0x01
    4706:	28 2f       	mov	r18, r24
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	8e 81       	ldd	r24, Y+6	; 0x06
    470c:	9f 81       	ldd	r25, Y+7	; 0x07
    470e:	fc 01       	movw	r30, r24
    4710:	e2 0f       	add	r30, r18
    4712:	f3 1f       	adc	r31, r19
    4714:	20 81       	ld	r18, Z
    4716:	89 89       	ldd	r24, Y+17	; 0x11
    4718:	9a 89       	ldd	r25, Y+18	; 0x12
    471a:	84 0f       	add	r24, r20
    471c:	95 1f       	adc	r25, r21
    471e:	fc 01       	movw	r30, r24
    4720:	79 96       	adiw	r30, 0x19	; 25
    4722:	20 83       	st	Z, r18

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    4724:	89 81       	ldd	r24, Y+1	; 0x01
    4726:	28 2f       	mov	r18, r24
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	8e 81       	ldd	r24, Y+6	; 0x06
    472c:	9f 81       	ldd	r25, Y+7	; 0x07
    472e:	fc 01       	movw	r30, r24
    4730:	e2 0f       	add	r30, r18
    4732:	f3 1f       	adc	r31, r19
    4734:	80 81       	ld	r24, Z
    4736:	88 23       	and	r24, r24
    4738:	31 f0       	breq	.+12     	; 0x4746 <prvInitialiseNewTask+0xb2>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    473a:	89 81       	ldd	r24, Y+1	; 0x01
    473c:	8f 5f       	subi	r24, 0xFF	; 255
    473e:	89 83       	std	Y+1, r24	; 0x01
    4740:	89 81       	ldd	r24, Y+1	; 0x01
    4742:	88 30       	cpi	r24, 0x08	; 8
    4744:	e0 f2       	brcs	.-72     	; 0x46fe <prvInitialiseNewTask+0x6a>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    4746:	e9 89       	ldd	r30, Y+17	; 0x11
    4748:	fa 89       	ldd	r31, Y+18	; 0x12
    474a:	10 a2       	std	Z+32, r1	; 0x20
    474c:	03 c0       	rjmp	.+6      	; 0x4754 <prvInitialiseNewTask+0xc0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    474e:	e9 89       	ldd	r30, Y+17	; 0x11
    4750:	fa 89       	ldd	r31, Y+18	; 0x12
    4752:	11 8e       	std	Z+25, r1	; 0x19
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    4754:	8e 85       	ldd	r24, Y+14	; 0x0e
    4756:	84 30       	cpi	r24, 0x04	; 4
    4758:	10 f0       	brcs	.+4      	; 0x475e <prvInitialiseNewTask+0xca>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    475a:	83 e0       	ldi	r24, 0x03	; 3
    475c:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    475e:	e9 89       	ldd	r30, Y+17	; 0x11
    4760:	fa 89       	ldd	r31, Y+18	; 0x12
    4762:	8e 85       	ldd	r24, Y+14	; 0x0e
    4764:	86 8b       	std	Z+22, r24	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    4766:	89 89       	ldd	r24, Y+17	; 0x11
    4768:	9a 89       	ldd	r25, Y+18	; 0x12
    476a:	02 96       	adiw	r24, 0x02	; 2
    476c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    4770:	89 89       	ldd	r24, Y+17	; 0x11
    4772:	9a 89       	ldd	r25, Y+18	; 0x12
    4774:	0c 96       	adiw	r24, 0x0c	; 12
    4776:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    477a:	e9 89       	ldd	r30, Y+17	; 0x11
    477c:	fa 89       	ldd	r31, Y+18	; 0x12
    477e:	89 89       	ldd	r24, Y+17	; 0x11
    4780:	9a 89       	ldd	r25, Y+18	; 0x12
    4782:	91 87       	std	Z+9, r25	; 0x09
    4784:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4786:	8e 85       	ldd	r24, Y+14	; 0x0e
    4788:	28 2f       	mov	r18, r24
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	84 e0       	ldi	r24, 0x04	; 4
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	82 1b       	sub	r24, r18
    4792:	93 0b       	sbc	r25, r19
    4794:	e9 89       	ldd	r30, Y+17	; 0x11
    4796:	fa 89       	ldd	r31, Y+18	; 0x12
    4798:	95 87       	std	Z+13, r25	; 0x0d
    479a:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    479c:	e9 89       	ldd	r30, Y+17	; 0x11
    479e:	fa 89       	ldd	r31, Y+18	; 0x12
    47a0:	89 89       	ldd	r24, Y+17	; 0x11
    47a2:	9a 89       	ldd	r25, Y+18	; 0x12
    47a4:	93 8b       	std	Z+19, r25	; 0x13
    47a6:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    47a8:	e9 89       	ldd	r30, Y+17	; 0x11
    47aa:	fa 89       	ldd	r31, Y+18	; 0x12
    47ac:	11 a2       	std	Z+33, r1	; 0x21
    47ae:	12 a2       	std	Z+34, r1	; 0x22
    47b0:	13 a2       	std	Z+35, r1	; 0x23
    47b2:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    47b4:	e9 89       	ldd	r30, Y+17	; 0x11
    47b6:	fa 89       	ldd	r31, Y+18	; 0x12
    47b8:	15 a2       	std	Z+37, r1	; 0x25
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    47ba:	8a 81       	ldd	r24, Y+2	; 0x02
    47bc:	9b 81       	ldd	r25, Y+3	; 0x03
    47be:	2c 81       	ldd	r18, Y+4	; 0x04
    47c0:	3d 81       	ldd	r19, Y+5	; 0x05
    47c2:	4c 85       	ldd	r20, Y+12	; 0x0c
    47c4:	5d 85       	ldd	r21, Y+13	; 0x0d
    47c6:	b9 01       	movw	r22, r18
    47c8:	0e 94 28 11 	call	0x2250	; 0x2250 <pxPortInitialiseStack>
    47cc:	e9 89       	ldd	r30, Y+17	; 0x11
    47ce:	fa 89       	ldd	r31, Y+18	; 0x12
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	80 83       	st	Z, r24
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    47d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    47d6:	98 89       	ldd	r25, Y+16	; 0x10
    47d8:	00 97       	sbiw	r24, 0x00	; 0
    47da:	31 f0       	breq	.+12     	; 0x47e8 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    47dc:	ef 85       	ldd	r30, Y+15	; 0x0f
    47de:	f8 89       	ldd	r31, Y+16	; 0x10
    47e0:	89 89       	ldd	r24, Y+17	; 0x11
    47e2:	9a 89       	ldd	r25, Y+18	; 0x12
    47e4:	91 83       	std	Z+1, r25	; 0x01
    47e6:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    47e8:	64 96       	adiw	r28, 0x14	; 20
    47ea:	0f b6       	in	r0, 0x3f	; 63
    47ec:	f8 94       	cli
    47ee:	de bf       	out	0x3e, r29	; 62
    47f0:	0f be       	out	0x3f, r0	; 63
    47f2:	cd bf       	out	0x3d, r28	; 61
    47f4:	cf 91       	pop	r28
    47f6:	df 91       	pop	r29
    47f8:	1f 91       	pop	r17
    47fa:	0f 91       	pop	r16
    47fc:	ef 90       	pop	r14
    47fe:	df 90       	pop	r13
    4800:	cf 90       	pop	r12
    4802:	bf 90       	pop	r11
    4804:	af 90       	pop	r10
    4806:	9f 90       	pop	r9
    4808:	8f 90       	pop	r8
    480a:	08 95       	ret

0000480c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    480c:	df 93       	push	r29
    480e:	cf 93       	push	r28
    4810:	00 d0       	rcall	.+0      	; 0x4812 <prvAddNewTaskToReadyList+0x6>
    4812:	cd b7       	in	r28, 0x3d	; 61
    4814:	de b7       	in	r29, 0x3e	; 62
    4816:	9a 83       	std	Y+2, r25	; 0x02
    4818:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    481a:	0f b6       	in	r0, 0x3f	; 63
    481c:	f8 94       	cli
    481e:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    4820:	80 91 59 06 	lds	r24, 0x0659
    4824:	8f 5f       	subi	r24, 0xFF	; 255
    4826:	80 93 59 06 	sts	0x0659, r24
		if( pxCurrentTCB == NULL )
    482a:	80 91 56 06 	lds	r24, 0x0656
    482e:	90 91 57 06 	lds	r25, 0x0657
    4832:	00 97       	sbiw	r24, 0x00	; 0
    4834:	69 f4       	brne	.+26     	; 0x4850 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    4836:	89 81       	ldd	r24, Y+1	; 0x01
    4838:	9a 81       	ldd	r25, Y+2	; 0x02
    483a:	90 93 57 06 	sts	0x0657, r25
    483e:	80 93 56 06 	sts	0x0656, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    4842:	80 91 59 06 	lds	r24, 0x0659
    4846:	81 30       	cpi	r24, 0x01	; 1
    4848:	b9 f4       	brne	.+46     	; 0x4878 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    484a:	0e 94 4f 2b 	call	0x569e	; 0x569e <prvInitialiseTaskLists>
    484e:	14 c0       	rjmp	.+40     	; 0x4878 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    4850:	80 91 5d 06 	lds	r24, 0x065D
    4854:	88 23       	and	r24, r24
    4856:	81 f4       	brne	.+32     	; 0x4878 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    4858:	e0 91 56 06 	lds	r30, 0x0656
    485c:	f0 91 57 06 	lds	r31, 0x0657
    4860:	96 89       	ldd	r25, Z+22	; 0x16
    4862:	e9 81       	ldd	r30, Y+1	; 0x01
    4864:	fa 81       	ldd	r31, Y+2	; 0x02
    4866:	86 89       	ldd	r24, Z+22	; 0x16
    4868:	89 17       	cp	r24, r25
    486a:	30 f0       	brcs	.+12     	; 0x4878 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	9a 81       	ldd	r25, Y+2	; 0x02
    4870:	90 93 57 06 	sts	0x0657, r25
    4874:	80 93 56 06 	sts	0x0656, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    4878:	80 91 61 06 	lds	r24, 0x0661
    487c:	8f 5f       	subi	r24, 0xFF	; 255
    487e:	80 93 61 06 	sts	0x0661, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    4882:	e9 81       	ldd	r30, Y+1	; 0x01
    4884:	fa 81       	ldd	r31, Y+2	; 0x02
    4886:	96 89       	ldd	r25, Z+22	; 0x16
    4888:	80 91 5c 06 	lds	r24, 0x065C
    488c:	89 17       	cp	r24, r25
    488e:	28 f4       	brcc	.+10     	; 0x489a <prvAddNewTaskToReadyList+0x8e>
    4890:	e9 81       	ldd	r30, Y+1	; 0x01
    4892:	fa 81       	ldd	r31, Y+2	; 0x02
    4894:	86 89       	ldd	r24, Z+22	; 0x16
    4896:	80 93 5c 06 	sts	0x065C, r24
    489a:	e9 81       	ldd	r30, Y+1	; 0x01
    489c:	fa 81       	ldd	r31, Y+2	; 0x02
    489e:	86 89       	ldd	r24, Z+22	; 0x16
    48a0:	28 2f       	mov	r18, r24
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	c9 01       	movw	r24, r18
    48a6:	88 0f       	add	r24, r24
    48a8:	99 1f       	adc	r25, r25
    48aa:	88 0f       	add	r24, r24
    48ac:	99 1f       	adc	r25, r25
    48ae:	88 0f       	add	r24, r24
    48b0:	99 1f       	adc	r25, r25
    48b2:	82 0f       	add	r24, r18
    48b4:	93 1f       	adc	r25, r19
    48b6:	ac 01       	movw	r20, r24
    48b8:	49 59       	subi	r20, 0x99	; 153
    48ba:	59 4f       	sbci	r21, 0xF9	; 249
    48bc:	89 81       	ldd	r24, Y+1	; 0x01
    48be:	9a 81       	ldd	r25, Y+2	; 0x02
    48c0:	9c 01       	movw	r18, r24
    48c2:	2e 5f       	subi	r18, 0xFE	; 254
    48c4:	3f 4f       	sbci	r19, 0xFF	; 255
    48c6:	ca 01       	movw	r24, r20
    48c8:	b9 01       	movw	r22, r18
    48ca:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    48ce:	0f 90       	pop	r0
    48d0:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    48d2:	80 91 5d 06 	lds	r24, 0x065D
    48d6:	88 23       	and	r24, r24
    48d8:	61 f0       	breq	.+24     	; 0x48f2 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    48da:	e0 91 56 06 	lds	r30, 0x0656
    48de:	f0 91 57 06 	lds	r31, 0x0657
    48e2:	96 89       	ldd	r25, Z+22	; 0x16
    48e4:	e9 81       	ldd	r30, Y+1	; 0x01
    48e6:	fa 81       	ldd	r31, Y+2	; 0x02
    48e8:	86 89       	ldd	r24, Z+22	; 0x16
    48ea:	98 17       	cp	r25, r24
    48ec:	10 f4       	brcc	.+4      	; 0x48f2 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    48ee:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    48f2:	0f 90       	pop	r0
    48f4:	0f 90       	pop	r0
    48f6:	cf 91       	pop	r28
    48f8:	df 91       	pop	r29
    48fa:	08 95       	ret

000048fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    48fc:	df 93       	push	r29
    48fe:	cf 93       	push	r28
    4900:	00 d0       	rcall	.+0      	; 0x4902 <vTaskDelete+0x6>
    4902:	00 d0       	rcall	.+0      	; 0x4904 <vTaskDelete+0x8>
    4904:	00 d0       	rcall	.+0      	; 0x4906 <vTaskDelete+0xa>
    4906:	cd b7       	in	r28, 0x3d	; 61
    4908:	de b7       	in	r29, 0x3e	; 62
    490a:	9c 83       	std	Y+4, r25	; 0x04
    490c:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    490e:	0f b6       	in	r0, 0x3f	; 63
    4910:	f8 94       	cli
    4912:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    4914:	8b 81       	ldd	r24, Y+3	; 0x03
    4916:	9c 81       	ldd	r25, Y+4	; 0x04
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	39 f4       	brne	.+14     	; 0x492a <vTaskDelete+0x2e>
    491c:	80 91 56 06 	lds	r24, 0x0656
    4920:	90 91 57 06 	lds	r25, 0x0657
    4924:	9e 83       	std	Y+6, r25	; 0x06
    4926:	8d 83       	std	Y+5, r24	; 0x05
    4928:	04 c0       	rjmp	.+8      	; 0x4932 <vTaskDelete+0x36>
    492a:	8b 81       	ldd	r24, Y+3	; 0x03
    492c:	9c 81       	ldd	r25, Y+4	; 0x04
    492e:	9e 83       	std	Y+6, r25	; 0x06
    4930:	8d 83       	std	Y+5, r24	; 0x05
    4932:	8d 81       	ldd	r24, Y+5	; 0x05
    4934:	9e 81       	ldd	r25, Y+6	; 0x06
    4936:	9a 83       	std	Y+2, r25	; 0x02
    4938:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    493a:	89 81       	ldd	r24, Y+1	; 0x01
    493c:	9a 81       	ldd	r25, Y+2	; 0x02
    493e:	02 96       	adiw	r24, 0x02	; 2
    4940:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4944:	e9 81       	ldd	r30, Y+1	; 0x01
    4946:	fa 81       	ldd	r31, Y+2	; 0x02
    4948:	84 89       	ldd	r24, Z+20	; 0x14
    494a:	95 89       	ldd	r25, Z+21	; 0x15
    494c:	00 97       	sbiw	r24, 0x00	; 0
    494e:	29 f0       	breq	.+10     	; 0x495a <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4950:	89 81       	ldd	r24, Y+1	; 0x01
    4952:	9a 81       	ldd	r25, Y+2	; 0x02
    4954:	0c 96       	adiw	r24, 0x0c	; 12
    4956:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    495a:	80 91 61 06 	lds	r24, 0x0661
    495e:	8f 5f       	subi	r24, 0xFF	; 255
    4960:	80 93 61 06 	sts	0x0661, r24

			if( pxTCB == pxCurrentTCB )
    4964:	20 91 56 06 	lds	r18, 0x0656
    4968:	30 91 57 06 	lds	r19, 0x0657
    496c:	89 81       	ldd	r24, Y+1	; 0x01
    496e:	9a 81       	ldd	r25, Y+2	; 0x02
    4970:	82 17       	cp	r24, r18
    4972:	93 07       	cpc	r25, r19
    4974:	81 f4       	brne	.+32     	; 0x4996 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    4976:	89 81       	ldd	r24, Y+1	; 0x01
    4978:	9a 81       	ldd	r25, Y+2	; 0x02
    497a:	9c 01       	movw	r18, r24
    497c:	2e 5f       	subi	r18, 0xFE	; 254
    497e:	3f 4f       	sbci	r19, 0xFF	; 255
    4980:	8a ea       	ldi	r24, 0xAA	; 170
    4982:	96 e0       	ldi	r25, 0x06	; 6
    4984:	b9 01       	movw	r22, r18
    4986:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    498a:	80 91 58 06 	lds	r24, 0x0658
    498e:	8f 5f       	subi	r24, 0xFF	; 255
    4990:	80 93 58 06 	sts	0x0658, r24
    4994:	0b c0       	rjmp	.+22     	; 0x49ac <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    4996:	80 91 59 06 	lds	r24, 0x0659
    499a:	81 50       	subi	r24, 0x01	; 1
    499c:	80 93 59 06 	sts	0x0659, r24
				prvDeleteTCB( pxTCB );
    49a0:	89 81       	ldd	r24, Y+1	; 0x01
    49a2:	9a 81       	ldd	r25, Y+2	; 0x02
    49a4:	0e 94 bf 2b 	call	0x577e	; 0x577e <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    49a8:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    49ac:	0f 90       	pop	r0
    49ae:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    49b0:	80 91 5d 06 	lds	r24, 0x065D
    49b4:	88 23       	and	r24, r24
    49b6:	59 f0       	breq	.+22     	; 0x49ce <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    49b8:	20 91 56 06 	lds	r18, 0x0656
    49bc:	30 91 57 06 	lds	r19, 0x0657
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	9a 81       	ldd	r25, Y+2	; 0x02
    49c4:	82 17       	cp	r24, r18
    49c6:	93 07       	cpc	r25, r19
    49c8:	11 f4       	brne	.+4      	; 0x49ce <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    49ca:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    49ce:	26 96       	adiw	r28, 0x06	; 6
    49d0:	0f b6       	in	r0, 0x3f	; 63
    49d2:	f8 94       	cli
    49d4:	de bf       	out	0x3e, r29	; 62
    49d6:	0f be       	out	0x3f, r0	; 63
    49d8:	cd bf       	out	0x3d, r28	; 61
    49da:	cf 91       	pop	r28
    49dc:	df 91       	pop	r29
    49de:	08 95       	ret

000049e0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    49e0:	df 93       	push	r29
    49e2:	cf 93       	push	r28
    49e4:	cd b7       	in	r28, 0x3d	; 61
    49e6:	de b7       	in	r29, 0x3e	; 62
    49e8:	2a 97       	sbiw	r28, 0x0a	; 10
    49ea:	0f b6       	in	r0, 0x3f	; 63
    49ec:	f8 94       	cli
    49ee:	de bf       	out	0x3e, r29	; 62
    49f0:	0f be       	out	0x3f, r0	; 63
    49f2:	cd bf       	out	0x3d, r28	; 61
    49f4:	98 87       	std	Y+8, r25	; 0x08
    49f6:	8f 83       	std	Y+7, r24	; 0x07
    49f8:	7a 87       	std	Y+10, r23	; 0x0a
    49fa:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    49fc:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    49fe:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    4a02:	80 91 5a 06 	lds	r24, 0x065A
    4a06:	90 91 5b 06 	lds	r25, 0x065B
    4a0a:	9a 83       	std	Y+2, r25	; 0x02
    4a0c:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4a0e:	ef 81       	ldd	r30, Y+7	; 0x07
    4a10:	f8 85       	ldd	r31, Y+8	; 0x08
    4a12:	20 81       	ld	r18, Z
    4a14:	31 81       	ldd	r19, Z+1	; 0x01
    4a16:	89 85       	ldd	r24, Y+9	; 0x09
    4a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a1a:	82 0f       	add	r24, r18
    4a1c:	93 1f       	adc	r25, r19
    4a1e:	9e 83       	std	Y+6, r25	; 0x06
    4a20:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    4a22:	ef 81       	ldd	r30, Y+7	; 0x07
    4a24:	f8 85       	ldd	r31, Y+8	; 0x08
    4a26:	20 81       	ld	r18, Z
    4a28:	31 81       	ldd	r19, Z+1	; 0x01
    4a2a:	89 81       	ldd	r24, Y+1	; 0x01
    4a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a2e:	82 17       	cp	r24, r18
    4a30:	93 07       	cpc	r25, r19
    4a32:	98 f4       	brcc	.+38     	; 0x4a5a <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    4a34:	ef 81       	ldd	r30, Y+7	; 0x07
    4a36:	f8 85       	ldd	r31, Y+8	; 0x08
    4a38:	20 81       	ld	r18, Z
    4a3a:	31 81       	ldd	r19, Z+1	; 0x01
    4a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a40:	82 17       	cp	r24, r18
    4a42:	93 07       	cpc	r25, r19
    4a44:	e0 f4       	brcc	.+56     	; 0x4a7e <vTaskDelayUntil+0x9e>
    4a46:	2d 81       	ldd	r18, Y+5	; 0x05
    4a48:	3e 81       	ldd	r19, Y+6	; 0x06
    4a4a:	89 81       	ldd	r24, Y+1	; 0x01
    4a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a4e:	82 17       	cp	r24, r18
    4a50:	93 07       	cpc	r25, r19
    4a52:	a8 f4       	brcc	.+42     	; 0x4a7e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    4a54:	81 e0       	ldi	r24, 0x01	; 1
    4a56:	8b 83       	std	Y+3, r24	; 0x03
    4a58:	12 c0       	rjmp	.+36     	; 0x4a7e <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    4a5a:	ef 81       	ldd	r30, Y+7	; 0x07
    4a5c:	f8 85       	ldd	r31, Y+8	; 0x08
    4a5e:	20 81       	ld	r18, Z
    4a60:	31 81       	ldd	r19, Z+1	; 0x01
    4a62:	8d 81       	ldd	r24, Y+5	; 0x05
    4a64:	9e 81       	ldd	r25, Y+6	; 0x06
    4a66:	82 17       	cp	r24, r18
    4a68:	93 07       	cpc	r25, r19
    4a6a:	38 f0       	brcs	.+14     	; 0x4a7a <vTaskDelayUntil+0x9a>
    4a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    4a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    4a70:	89 81       	ldd	r24, Y+1	; 0x01
    4a72:	9a 81       	ldd	r25, Y+2	; 0x02
    4a74:	82 17       	cp	r24, r18
    4a76:	93 07       	cpc	r25, r19
    4a78:	10 f4       	brcc	.+4      	; 0x4a7e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    4a7a:	81 e0       	ldi	r24, 0x01	; 1
    4a7c:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4a7e:	ef 81       	ldd	r30, Y+7	; 0x07
    4a80:	f8 85       	ldd	r31, Y+8	; 0x08
    4a82:	8d 81       	ldd	r24, Y+5	; 0x05
    4a84:	9e 81       	ldd	r25, Y+6	; 0x06
    4a86:	91 83       	std	Z+1, r25	; 0x01
    4a88:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    4a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8c:	88 23       	and	r24, r24
    4a8e:	49 f0       	breq	.+18     	; 0x4aa2 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    4a90:	8d 81       	ldd	r24, Y+5	; 0x05
    4a92:	9e 81       	ldd	r25, Y+6	; 0x06
    4a94:	29 81       	ldd	r18, Y+1	; 0x01
    4a96:	3a 81       	ldd	r19, Y+2	; 0x02
    4a98:	82 1b       	sub	r24, r18
    4a9a:	93 0b       	sbc	r25, r19
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4aa2:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    4aa6:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    4aaa:	88 23       	and	r24, r24
    4aac:	11 f4       	brne	.+4      	; 0x4ab2 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    4aae:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4ab2:	2a 96       	adiw	r28, 0x0a	; 10
    4ab4:	0f b6       	in	r0, 0x3f	; 63
    4ab6:	f8 94       	cli
    4ab8:	de bf       	out	0x3e, r29	; 62
    4aba:	0f be       	out	0x3f, r0	; 63
    4abc:	cd bf       	out	0x3d, r28	; 61
    4abe:	cf 91       	pop	r28
    4ac0:	df 91       	pop	r29
    4ac2:	08 95       	ret

00004ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    4ac4:	df 93       	push	r29
    4ac6:	cf 93       	push	r28
    4ac8:	00 d0       	rcall	.+0      	; 0x4aca <vTaskDelay+0x6>
    4aca:	0f 92       	push	r0
    4acc:	cd b7       	in	r28, 0x3d	; 61
    4ace:	de b7       	in	r29, 0x3e	; 62
    4ad0:	9b 83       	std	Y+3, r25	; 0x03
    4ad2:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    4ad4:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    4ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    4ada:	00 97       	sbiw	r24, 0x00	; 0
    4adc:	51 f0       	breq	.+20     	; 0x4af2 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    4ade:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    4ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ae6:	60 e0       	ldi	r22, 0x00	; 0
    4ae8:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4aec:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <xTaskResumeAll>
    4af0:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4af2:	89 81       	ldd	r24, Y+1	; 0x01
    4af4:	88 23       	and	r24, r24
    4af6:	11 f4       	brne	.+4      	; 0x4afc <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    4af8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4afc:	0f 90       	pop	r0
    4afe:	0f 90       	pop	r0
    4b00:	0f 90       	pop	r0
    4b02:	cf 91       	pop	r28
    4b04:	df 91       	pop	r29
    4b06:	08 95       	ret

00004b08 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    4b08:	df 93       	push	r29
    4b0a:	cf 93       	push	r28
    4b0c:	00 d0       	rcall	.+0      	; 0x4b0e <vTaskSuspend+0x6>
    4b0e:	00 d0       	rcall	.+0      	; 0x4b10 <vTaskSuspend+0x8>
    4b10:	00 d0       	rcall	.+0      	; 0x4b12 <vTaskSuspend+0xa>
    4b12:	cd b7       	in	r28, 0x3d	; 61
    4b14:	de b7       	in	r29, 0x3e	; 62
    4b16:	9c 83       	std	Y+4, r25	; 0x04
    4b18:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4b1a:	0f b6       	in	r0, 0x3f	; 63
    4b1c:	f8 94       	cli
    4b1e:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4b20:	8b 81       	ldd	r24, Y+3	; 0x03
    4b22:	9c 81       	ldd	r25, Y+4	; 0x04
    4b24:	00 97       	sbiw	r24, 0x00	; 0
    4b26:	39 f4       	brne	.+14     	; 0x4b36 <vTaskSuspend+0x2e>
    4b28:	80 91 56 06 	lds	r24, 0x0656
    4b2c:	90 91 57 06 	lds	r25, 0x0657
    4b30:	9e 83       	std	Y+6, r25	; 0x06
    4b32:	8d 83       	std	Y+5, r24	; 0x05
    4b34:	04 c0       	rjmp	.+8      	; 0x4b3e <vTaskSuspend+0x36>
    4b36:	8b 81       	ldd	r24, Y+3	; 0x03
    4b38:	9c 81       	ldd	r25, Y+4	; 0x04
    4b3a:	9e 83       	std	Y+6, r25	; 0x06
    4b3c:	8d 83       	std	Y+5, r24	; 0x05
    4b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b40:	9e 81       	ldd	r25, Y+6	; 0x06
    4b42:	9a 83       	std	Y+2, r25	; 0x02
    4b44:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4b46:	89 81       	ldd	r24, Y+1	; 0x01
    4b48:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4a:	02 96       	adiw	r24, 0x02	; 2
    4b4c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4b50:	e9 81       	ldd	r30, Y+1	; 0x01
    4b52:	fa 81       	ldd	r31, Y+2	; 0x02
    4b54:	84 89       	ldd	r24, Z+20	; 0x14
    4b56:	95 89       	ldd	r25, Z+21	; 0x15
    4b58:	00 97       	sbiw	r24, 0x00	; 0
    4b5a:	29 f0       	breq	.+10     	; 0x4b66 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4b5c:	89 81       	ldd	r24, Y+1	; 0x01
    4b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b60:	0c 96       	adiw	r24, 0x0c	; 12
    4b62:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    4b66:	89 81       	ldd	r24, Y+1	; 0x01
    4b68:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6a:	9c 01       	movw	r18, r24
    4b6c:	2e 5f       	subi	r18, 0xFE	; 254
    4b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b70:	83 eb       	ldi	r24, 0xB3	; 179
    4b72:	96 e0       	ldi	r25, 0x06	; 6
    4b74:	b9 01       	movw	r22, r18
    4b76:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    4b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    4b7e:	85 a1       	ldd	r24, Z+37	; 0x25
    4b80:	81 30       	cpi	r24, 0x01	; 1
    4b82:	19 f4       	brne	.+6      	; 0x4b8a <vTaskSuspend+0x82>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4b84:	e9 81       	ldd	r30, Y+1	; 0x01
    4b86:	fa 81       	ldd	r31, Y+2	; 0x02
    4b88:	15 a2       	std	Z+37, r1	; 0x25
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    4b8a:	0f 90       	pop	r0
    4b8c:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    4b8e:	80 91 5d 06 	lds	r24, 0x065D
    4b92:	88 23       	and	r24, r24
    4b94:	39 f0       	breq	.+14     	; 0x4ba4 <vTaskSuspend+0x9c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    4b96:	0f b6       	in	r0, 0x3f	; 63
    4b98:	f8 94       	cli
    4b9a:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    4b9c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    4ba0:	0f 90       	pop	r0
    4ba2:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    4ba4:	20 91 56 06 	lds	r18, 0x0656
    4ba8:	30 91 57 06 	lds	r19, 0x0657
    4bac:	89 81       	ldd	r24, Y+1	; 0x01
    4bae:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb0:	82 17       	cp	r24, r18
    4bb2:	93 07       	cpc	r25, r19
    4bb4:	a1 f4       	brne	.+40     	; 0x4bde <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
    4bb6:	80 91 5d 06 	lds	r24, 0x065D
    4bba:	88 23       	and	r24, r24
    4bbc:	19 f0       	breq	.+6      	; 0x4bc4 <vTaskSuspend+0xbc>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    4bbe:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
    4bc2:	0d c0       	rjmp	.+26     	; 0x4bde <vTaskSuspend+0xd6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
    4bc4:	90 91 b3 06 	lds	r25, 0x06B3
    4bc8:	80 91 59 06 	lds	r24, 0x0659
    4bcc:	98 17       	cp	r25, r24
    4bce:	29 f4       	brne	.+10     	; 0x4bda <vTaskSuspend+0xd2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4bd0:	10 92 57 06 	sts	0x0657, r1
    4bd4:	10 92 56 06 	sts	0x0656, r1
    4bd8:	02 c0       	rjmp	.+4      	; 0x4bde <vTaskSuspend+0xd6>
				}
				else
				{
					vTaskSwitchContext();
    4bda:	0e 94 10 29 	call	0x5220	; 0x5220 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4bde:	26 96       	adiw	r28, 0x06	; 6
    4be0:	0f b6       	in	r0, 0x3f	; 63
    4be2:	f8 94       	cli
    4be4:	de bf       	out	0x3e, r29	; 62
    4be6:	0f be       	out	0x3f, r0	; 63
    4be8:	cd bf       	out	0x3d, r28	; 61
    4bea:	cf 91       	pop	r28
    4bec:	df 91       	pop	r29
    4bee:	08 95       	ret

00004bf0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    4bf0:	df 93       	push	r29
    4bf2:	cf 93       	push	r28
    4bf4:	00 d0       	rcall	.+0      	; 0x4bf6 <prvTaskIsTaskSuspended+0x6>
    4bf6:	00 d0       	rcall	.+0      	; 0x4bf8 <prvTaskIsTaskSuspended+0x8>
    4bf8:	0f 92       	push	r0
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	9d 83       	std	Y+5, r25	; 0x05
    4c00:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    4c02:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = xTask;
    4c04:	8c 81       	ldd	r24, Y+4	; 0x04
    4c06:	9d 81       	ldd	r25, Y+5	; 0x05
    4c08:	9a 83       	std	Y+2, r25	; 0x02
    4c0a:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    4c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c10:	82 85       	ldd	r24, Z+10	; 0x0a
    4c12:	93 85       	ldd	r25, Z+11	; 0x0b
    4c14:	26 e0       	ldi	r18, 0x06	; 6
    4c16:	83 3b       	cpi	r24, 0xB3	; 179
    4c18:	92 07       	cpc	r25, r18
    4c1a:	81 f4       	brne	.+32     	; 0x4c3c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    4c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c20:	84 89       	ldd	r24, Z+20	; 0x14
    4c22:	95 89       	ldd	r25, Z+21	; 0x15
    4c24:	26 e0       	ldi	r18, 0x06	; 6
    4c26:	81 3a       	cpi	r24, 0xA1	; 161
    4c28:	92 07       	cpc	r25, r18
    4c2a:	41 f0       	breq	.+16     	; 0x4c3c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    4c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    4c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    4c30:	84 89       	ldd	r24, Z+20	; 0x14
    4c32:	95 89       	ldd	r25, Z+21	; 0x15
    4c34:	00 97       	sbiw	r24, 0x00	; 0
    4c36:	11 f4       	brne	.+4      	; 0x4c3c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4c3c:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    4c3e:	0f 90       	pop	r0
    4c40:	0f 90       	pop	r0
    4c42:	0f 90       	pop	r0
    4c44:	0f 90       	pop	r0
    4c46:	0f 90       	pop	r0
    4c48:	cf 91       	pop	r28
    4c4a:	df 91       	pop	r29
    4c4c:	08 95       	ret

00004c4e <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    4c4e:	df 93       	push	r29
    4c50:	cf 93       	push	r28
    4c52:	00 d0       	rcall	.+0      	; 0x4c54 <vTaskResume+0x6>
    4c54:	00 d0       	rcall	.+0      	; 0x4c56 <vTaskResume+0x8>
    4c56:	cd b7       	in	r28, 0x3d	; 61
    4c58:	de b7       	in	r29, 0x3e	; 62
    4c5a:	9c 83       	std	Y+4, r25	; 0x04
    4c5c:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = xTaskToResume;
    4c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c60:	9c 81       	ldd	r25, Y+4	; 0x04
    4c62:	9a 83       	std	Y+2, r25	; 0x02
    4c64:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
    4c66:	20 91 56 06 	lds	r18, 0x0656
    4c6a:	30 91 57 06 	lds	r19, 0x0657
    4c6e:	89 81       	ldd	r24, Y+1	; 0x01
    4c70:	9a 81       	ldd	r25, Y+2	; 0x02
    4c72:	82 17       	cp	r24, r18
    4c74:	93 07       	cpc	r25, r19
    4c76:	09 f4       	brne	.+2      	; 0x4c7a <vTaskResume+0x2c>
    4c78:	47 c0       	rjmp	.+142    	; 0x4d08 <vTaskResume+0xba>
    4c7a:	89 81       	ldd	r24, Y+1	; 0x01
    4c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c7e:	00 97       	sbiw	r24, 0x00	; 0
    4c80:	09 f4       	brne	.+2      	; 0x4c84 <vTaskResume+0x36>
    4c82:	42 c0       	rjmp	.+132    	; 0x4d08 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    4c84:	0f b6       	in	r0, 0x3f	; 63
    4c86:	f8 94       	cli
    4c88:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8e:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <prvTaskIsTaskSuspended>
    4c92:	88 23       	and	r24, r24
    4c94:	b9 f1       	breq	.+110    	; 0x4d04 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
    4c98:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9a:	02 96       	adiw	r24, 0x02	; 2
    4c9c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    4ca4:	96 89       	ldd	r25, Z+22	; 0x16
    4ca6:	80 91 5c 06 	lds	r24, 0x065C
    4caa:	89 17       	cp	r24, r25
    4cac:	28 f4       	brcc	.+10     	; 0x4cb8 <vTaskResume+0x6a>
    4cae:	e9 81       	ldd	r30, Y+1	; 0x01
    4cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    4cb2:	86 89       	ldd	r24, Z+22	; 0x16
    4cb4:	80 93 5c 06 	sts	0x065C, r24
    4cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    4cba:	fa 81       	ldd	r31, Y+2	; 0x02
    4cbc:	86 89       	ldd	r24, Z+22	; 0x16
    4cbe:	28 2f       	mov	r18, r24
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	c9 01       	movw	r24, r18
    4cc4:	88 0f       	add	r24, r24
    4cc6:	99 1f       	adc	r25, r25
    4cc8:	88 0f       	add	r24, r24
    4cca:	99 1f       	adc	r25, r25
    4ccc:	88 0f       	add	r24, r24
    4cce:	99 1f       	adc	r25, r25
    4cd0:	82 0f       	add	r24, r18
    4cd2:	93 1f       	adc	r25, r19
    4cd4:	ac 01       	movw	r20, r24
    4cd6:	49 59       	subi	r20, 0x99	; 153
    4cd8:	59 4f       	sbci	r21, 0xF9	; 249
    4cda:	89 81       	ldd	r24, Y+1	; 0x01
    4cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cde:	9c 01       	movw	r18, r24
    4ce0:	2e 5f       	subi	r18, 0xFE	; 254
    4ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ce4:	ca 01       	movw	r24, r20
    4ce6:	b9 01       	movw	r22, r18
    4ce8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4cec:	e9 81       	ldd	r30, Y+1	; 0x01
    4cee:	fa 81       	ldd	r31, Y+2	; 0x02
    4cf0:	96 89       	ldd	r25, Z+22	; 0x16
    4cf2:	e0 91 56 06 	lds	r30, 0x0656
    4cf6:	f0 91 57 06 	lds	r31, 0x0657
    4cfa:	86 89       	ldd	r24, Z+22	; 0x16
    4cfc:	98 17       	cp	r25, r24
    4cfe:	10 f0       	brcs	.+4      	; 0x4d04 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    4d00:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    4d04:	0f 90       	pop	r0
    4d06:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4d08:	0f 90       	pop	r0
    4d0a:	0f 90       	pop	r0
    4d0c:	0f 90       	pop	r0
    4d0e:	0f 90       	pop	r0
    4d10:	cf 91       	pop	r28
    4d12:	df 91       	pop	r29
    4d14:	08 95       	ret

00004d16 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    4d16:	df 93       	push	r29
    4d18:	cf 93       	push	r28
    4d1a:	00 d0       	rcall	.+0      	; 0x4d1c <xTaskResumeFromISR+0x6>
    4d1c:	00 d0       	rcall	.+0      	; 0x4d1e <xTaskResumeFromISR+0x8>
    4d1e:	00 d0       	rcall	.+0      	; 0x4d20 <xTaskResumeFromISR+0xa>
    4d20:	cd b7       	in	r28, 0x3d	; 61
    4d22:	de b7       	in	r29, 0x3e	; 62
    4d24:	9e 83       	std	Y+6, r25	; 0x06
    4d26:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    4d28:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = xTaskToResume;
    4d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d2e:	9b 83       	std	Y+3, r25	; 0x03
    4d30:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4d32:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    4d34:	8a 81       	ldd	r24, Y+2	; 0x02
    4d36:	9b 81       	ldd	r25, Y+3	; 0x03
    4d38:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <prvTaskIsTaskSuspended>
    4d3c:	88 23       	and	r24, r24
    4d3e:	09 f4       	brne	.+2      	; 0x4d42 <xTaskResumeFromISR+0x2c>
    4d40:	46 c0       	rjmp	.+140    	; 0x4dce <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4d42:	80 91 66 06 	lds	r24, 0x0666
    4d46:	88 23       	and	r24, r24
    4d48:	c1 f5       	brne	.+112    	; 0x4dba <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4d4a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d4c:	fb 81       	ldd	r31, Y+3	; 0x03
    4d4e:	96 89       	ldd	r25, Z+22	; 0x16
    4d50:	e0 91 56 06 	lds	r30, 0x0656
    4d54:	f0 91 57 06 	lds	r31, 0x0657
    4d58:	86 89       	ldd	r24, Z+22	; 0x16
    4d5a:	98 17       	cp	r25, r24
    4d5c:	10 f0       	brcs	.+4      	; 0x4d62 <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    4d5e:	81 e0       	ldi	r24, 0x01	; 1
    4d60:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4d62:	8a 81       	ldd	r24, Y+2	; 0x02
    4d64:	9b 81       	ldd	r25, Y+3	; 0x03
    4d66:	02 96       	adiw	r24, 0x02	; 2
    4d68:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4d6c:	ea 81       	ldd	r30, Y+2	; 0x02
    4d6e:	fb 81       	ldd	r31, Y+3	; 0x03
    4d70:	96 89       	ldd	r25, Z+22	; 0x16
    4d72:	80 91 5c 06 	lds	r24, 0x065C
    4d76:	89 17       	cp	r24, r25
    4d78:	28 f4       	brcc	.+10     	; 0x4d84 <xTaskResumeFromISR+0x6e>
    4d7a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d7c:	fb 81       	ldd	r31, Y+3	; 0x03
    4d7e:	86 89       	ldd	r24, Z+22	; 0x16
    4d80:	80 93 5c 06 	sts	0x065C, r24
    4d84:	ea 81       	ldd	r30, Y+2	; 0x02
    4d86:	fb 81       	ldd	r31, Y+3	; 0x03
    4d88:	86 89       	ldd	r24, Z+22	; 0x16
    4d8a:	28 2f       	mov	r18, r24
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	c9 01       	movw	r24, r18
    4d90:	88 0f       	add	r24, r24
    4d92:	99 1f       	adc	r25, r25
    4d94:	88 0f       	add	r24, r24
    4d96:	99 1f       	adc	r25, r25
    4d98:	88 0f       	add	r24, r24
    4d9a:	99 1f       	adc	r25, r25
    4d9c:	82 0f       	add	r24, r18
    4d9e:	93 1f       	adc	r25, r19
    4da0:	ac 01       	movw	r20, r24
    4da2:	49 59       	subi	r20, 0x99	; 153
    4da4:	59 4f       	sbci	r21, 0xF9	; 249
    4da6:	8a 81       	ldd	r24, Y+2	; 0x02
    4da8:	9b 81       	ldd	r25, Y+3	; 0x03
    4daa:	9c 01       	movw	r18, r24
    4dac:	2e 5f       	subi	r18, 0xFE	; 254
    4dae:	3f 4f       	sbci	r19, 0xFF	; 255
    4db0:	ca 01       	movw	r24, r20
    4db2:	b9 01       	movw	r22, r18
    4db4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
    4db8:	0a c0       	rjmp	.+20     	; 0x4dce <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4dba:	8a 81       	ldd	r24, Y+2	; 0x02
    4dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4dbe:	9c 01       	movw	r18, r24
    4dc0:	24 5f       	subi	r18, 0xF4	; 244
    4dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc4:	81 ea       	ldi	r24, 0xA1	; 161
    4dc6:	96 e0       	ldi	r25, 0x06	; 6
    4dc8:	b9 01       	movw	r22, r18
    4dca:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    4dce:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    4dd0:	26 96       	adiw	r28, 0x06	; 6
    4dd2:	0f b6       	in	r0, 0x3f	; 63
    4dd4:	f8 94       	cli
    4dd6:	de bf       	out	0x3e, r29	; 62
    4dd8:	0f be       	out	0x3f, r0	; 63
    4dda:	cd bf       	out	0x3d, r28	; 61
    4ddc:	cf 91       	pop	r28
    4dde:	df 91       	pop	r29
    4de0:	08 95       	ret

00004de2 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    4de2:	ef 92       	push	r14
    4de4:	ff 92       	push	r15
    4de6:	0f 93       	push	r16
    4de8:	df 93       	push	r29
    4dea:	cf 93       	push	r28
    4dec:	0f 92       	push	r0
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    4df2:	85 e4       	ldi	r24, 0x45	; 69
    4df4:	9b e2       	ldi	r25, 0x2B	; 43
    4df6:	2e e6       	ldi	r18, 0x6E	; 110
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	e4 e6       	ldi	r30, 0x64	; 100
    4dfc:	f6 e0       	ldi	r31, 0x06	; 6
    4dfe:	b9 01       	movw	r22, r18
    4e00:	45 e5       	ldi	r20, 0x55	; 85
    4e02:	50 e0       	ldi	r21, 0x00	; 0
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	00 e0       	ldi	r16, 0x00	; 0
    4e0a:	7f 01       	movw	r14, r30
    4e0c:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <xTaskCreate>
    4e10:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    4e12:	89 81       	ldd	r24, Y+1	; 0x01
    4e14:	81 30       	cpi	r24, 0x01	; 1
    4e16:	81 f4       	brne	.+32     	; 0x4e38 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    4e18:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    4e1a:	8f ef       	ldi	r24, 0xFF	; 255
    4e1c:	9f ef       	ldi	r25, 0xFF	; 255
    4e1e:	90 93 63 06 	sts	0x0663, r25
    4e22:	80 93 62 06 	sts	0x0662, r24
		xSchedulerRunning = pdTRUE;
    4e26:	81 e0       	ldi	r24, 0x01	; 1
    4e28:	80 93 5d 06 	sts	0x065D, r24
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    4e2c:	10 92 5b 06 	sts	0x065B, r1
    4e30:	10 92 5a 06 	sts	0x065A, r1

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4e34:	0e 94 ab 12 	call	0x2556	; 0x2556 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    4e38:	0f 90       	pop	r0
    4e3a:	cf 91       	pop	r28
    4e3c:	df 91       	pop	r29
    4e3e:	0f 91       	pop	r16
    4e40:	ff 90       	pop	r15
    4e42:	ef 90       	pop	r14
    4e44:	08 95       	ret

00004e46 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4e46:	df 93       	push	r29
    4e48:	cf 93       	push	r28
    4e4a:	cd b7       	in	r28, 0x3d	; 61
    4e4c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4e4e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    4e50:	10 92 5d 06 	sts	0x065D, r1
	vPortEndScheduler();
    4e54:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <vPortEndScheduler>
}
    4e58:	cf 91       	pop	r28
    4e5a:	df 91       	pop	r29
    4e5c:	08 95       	ret

00004e5e <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4e5e:	df 93       	push	r29
    4e60:	cf 93       	push	r28
    4e62:	cd b7       	in	r28, 0x3d	; 61
    4e64:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    4e66:	80 91 66 06 	lds	r24, 0x0666
    4e6a:	8f 5f       	subi	r24, 0xFF	; 255
    4e6c:	80 93 66 06 	sts	0x0666, r24
}
    4e70:	cf 91       	pop	r28
    4e72:	df 91       	pop	r29
    4e74:	08 95       	ret

00004e76 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    4e76:	df 93       	push	r29
    4e78:	cf 93       	push	r28
    4e7a:	00 d0       	rcall	.+0      	; 0x4e7c <xTaskResumeAll+0x6>
    4e7c:	00 d0       	rcall	.+0      	; 0x4e7e <xTaskResumeAll+0x8>
    4e7e:	cd b7       	in	r28, 0x3d	; 61
    4e80:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    4e82:	1c 82       	std	Y+4, r1	; 0x04
    4e84:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    4e86:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4e88:	0f b6       	in	r0, 0x3f	; 63
    4e8a:	f8 94       	cli
    4e8c:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    4e8e:	80 91 66 06 	lds	r24, 0x0666
    4e92:	81 50       	subi	r24, 0x01	; 1
    4e94:	80 93 66 06 	sts	0x0666, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4e98:	80 91 66 06 	lds	r24, 0x0666
    4e9c:	88 23       	and	r24, r24
    4e9e:	09 f0       	breq	.+2      	; 0x4ea2 <xTaskResumeAll+0x2c>
    4ea0:	73 c0       	rjmp	.+230    	; 0x4f88 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    4ea2:	80 91 59 06 	lds	r24, 0x0659
    4ea6:	88 23       	and	r24, r24
    4ea8:	09 f4       	brne	.+2      	; 0x4eac <xTaskResumeAll+0x36>
    4eaa:	6e c0       	rjmp	.+220    	; 0x4f88 <xTaskResumeAll+0x112>
    4eac:	45 c0       	rjmp	.+138    	; 0x4f38 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4eae:	e0 91 a6 06 	lds	r30, 0x06A6
    4eb2:	f0 91 a7 06 	lds	r31, 0x06A7
    4eb6:	86 81       	ldd	r24, Z+6	; 0x06
    4eb8:	97 81       	ldd	r25, Z+7	; 0x07
    4eba:	9c 83       	std	Y+4, r25	; 0x04
    4ebc:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ec2:	0c 96       	adiw	r24, 0x0c	; 12
    4ec4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ecc:	02 96       	adiw	r24, 0x02	; 2
    4ece:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4ed2:	eb 81       	ldd	r30, Y+3	; 0x03
    4ed4:	fc 81       	ldd	r31, Y+4	; 0x04
    4ed6:	96 89       	ldd	r25, Z+22	; 0x16
    4ed8:	80 91 5c 06 	lds	r24, 0x065C
    4edc:	89 17       	cp	r24, r25
    4ede:	28 f4       	brcc	.+10     	; 0x4eea <xTaskResumeAll+0x74>
    4ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    4ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    4ee4:	86 89       	ldd	r24, Z+22	; 0x16
    4ee6:	80 93 5c 06 	sts	0x065C, r24
    4eea:	eb 81       	ldd	r30, Y+3	; 0x03
    4eec:	fc 81       	ldd	r31, Y+4	; 0x04
    4eee:	86 89       	ldd	r24, Z+22	; 0x16
    4ef0:	28 2f       	mov	r18, r24
    4ef2:	30 e0       	ldi	r19, 0x00	; 0
    4ef4:	c9 01       	movw	r24, r18
    4ef6:	88 0f       	add	r24, r24
    4ef8:	99 1f       	adc	r25, r25
    4efa:	88 0f       	add	r24, r24
    4efc:	99 1f       	adc	r25, r25
    4efe:	88 0f       	add	r24, r24
    4f00:	99 1f       	adc	r25, r25
    4f02:	82 0f       	add	r24, r18
    4f04:	93 1f       	adc	r25, r19
    4f06:	ac 01       	movw	r20, r24
    4f08:	49 59       	subi	r20, 0x99	; 153
    4f0a:	59 4f       	sbci	r21, 0xF9	; 249
    4f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f10:	9c 01       	movw	r18, r24
    4f12:	2e 5f       	subi	r18, 0xFE	; 254
    4f14:	3f 4f       	sbci	r19, 0xFF	; 255
    4f16:	ca 01       	movw	r24, r20
    4f18:	b9 01       	movw	r22, r18
    4f1a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    4f20:	fc 81       	ldd	r31, Y+4	; 0x04
    4f22:	96 89       	ldd	r25, Z+22	; 0x16
    4f24:	e0 91 56 06 	lds	r30, 0x0656
    4f28:	f0 91 57 06 	lds	r31, 0x0657
    4f2c:	86 89       	ldd	r24, Z+22	; 0x16
    4f2e:	98 17       	cp	r25, r24
    4f30:	18 f0       	brcs	.+6      	; 0x4f38 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	80 93 5f 06 	sts	0x065F, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4f38:	80 91 a1 06 	lds	r24, 0x06A1
    4f3c:	88 23       	and	r24, r24
    4f3e:	09 f0       	breq	.+2      	; 0x4f42 <xTaskResumeAll+0xcc>
    4f40:	b6 cf       	rjmp	.-148    	; 0x4eae <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    4f42:	8b 81       	ldd	r24, Y+3	; 0x03
    4f44:	9c 81       	ldd	r25, Y+4	; 0x04
    4f46:	00 97       	sbiw	r24, 0x00	; 0
    4f48:	11 f0       	breq	.+4      	; 0x4f4e <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    4f4a:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4f4e:	80 91 5e 06 	lds	r24, 0x065E
    4f52:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    4f54:	89 81       	ldd	r24, Y+1	; 0x01
    4f56:	88 23       	and	r24, r24
    4f58:	79 f0       	breq	.+30     	; 0x4f78 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    4f5a:	0e 94 2b 28 	call	0x5056	; 0x5056 <xTaskIncrementTick>
    4f5e:	88 23       	and	r24, r24
    4f60:	19 f0       	breq	.+6      	; 0x4f68 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	80 93 5f 06 	sts	0x065F, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    4f68:	89 81       	ldd	r24, Y+1	; 0x01
    4f6a:	81 50       	subi	r24, 0x01	; 1
    4f6c:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    4f6e:	89 81       	ldd	r24, Y+1	; 0x01
    4f70:	88 23       	and	r24, r24
    4f72:	99 f7       	brne	.-26     	; 0x4f5a <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    4f74:	10 92 5e 06 	sts	0x065E, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    4f78:	80 91 5f 06 	lds	r24, 0x065F
    4f7c:	88 23       	and	r24, r24
    4f7e:	21 f0       	breq	.+8      	; 0x4f88 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    4f80:	81 e0       	ldi	r24, 0x01	; 1
    4f82:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    4f84:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4f88:	0f 90       	pop	r0
    4f8a:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    4f8c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4f8e:	0f 90       	pop	r0
    4f90:	0f 90       	pop	r0
    4f92:	0f 90       	pop	r0
    4f94:	0f 90       	pop	r0
    4f96:	cf 91       	pop	r28
    4f98:	df 91       	pop	r29
    4f9a:	08 95       	ret

00004f9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    4f9c:	df 93       	push	r29
    4f9e:	cf 93       	push	r28
    4fa0:	00 d0       	rcall	.+0      	; 0x4fa2 <xTaskGetTickCount+0x6>
    4fa2:	cd b7       	in	r28, 0x3d	; 61
    4fa4:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    4fa6:	0f b6       	in	r0, 0x3f	; 63
    4fa8:	f8 94       	cli
    4faa:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    4fac:	80 91 5a 06 	lds	r24, 0x065A
    4fb0:	90 91 5b 06 	lds	r25, 0x065B
    4fb4:	9a 83       	std	Y+2, r25	; 0x02
    4fb6:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    4fb8:	0f 90       	pop	r0
    4fba:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    4fbc:	89 81       	ldd	r24, Y+1	; 0x01
    4fbe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4fc0:	0f 90       	pop	r0
    4fc2:	0f 90       	pop	r0
    4fc4:	cf 91       	pop	r28
    4fc6:	df 91       	pop	r29
    4fc8:	08 95       	ret

00004fca <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    4fca:	df 93       	push	r29
    4fcc:	cf 93       	push	r28
    4fce:	00 d0       	rcall	.+0      	; 0x4fd0 <xTaskGetTickCountFromISR+0x6>
    4fd0:	0f 92       	push	r0
    4fd2:	cd b7       	in	r28, 0x3d	; 61
    4fd4:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    4fd6:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    4fd8:	80 91 5a 06 	lds	r24, 0x065A
    4fdc:	90 91 5b 06 	lds	r25, 0x065B
    4fe0:	9b 83       	std	Y+3, r25	; 0x03
    4fe2:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4fe8:	0f 90       	pop	r0
    4fea:	0f 90       	pop	r0
    4fec:	0f 90       	pop	r0
    4fee:	cf 91       	pop	r28
    4ff0:	df 91       	pop	r29
    4ff2:	08 95       	ret

00004ff4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    4ff4:	df 93       	push	r29
    4ff6:	cf 93       	push	r28
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    4ffc:	80 91 59 06 	lds	r24, 0x0659
}
    5000:	cf 91       	pop	r28
    5002:	df 91       	pop	r29
    5004:	08 95       	ret

00005006 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    5006:	df 93       	push	r29
    5008:	cf 93       	push	r28
    500a:	00 d0       	rcall	.+0      	; 0x500c <pcTaskGetName+0x6>
    500c:	00 d0       	rcall	.+0      	; 0x500e <pcTaskGetName+0x8>
    500e:	00 d0       	rcall	.+0      	; 0x5010 <pcTaskGetName+0xa>
    5010:	cd b7       	in	r28, 0x3d	; 61
    5012:	de b7       	in	r29, 0x3e	; 62
    5014:	9c 83       	std	Y+4, r25	; 0x04
    5016:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    5018:	8b 81       	ldd	r24, Y+3	; 0x03
    501a:	9c 81       	ldd	r25, Y+4	; 0x04
    501c:	00 97       	sbiw	r24, 0x00	; 0
    501e:	39 f4       	brne	.+14     	; 0x502e <pcTaskGetName+0x28>
    5020:	80 91 56 06 	lds	r24, 0x0656
    5024:	90 91 57 06 	lds	r25, 0x0657
    5028:	9e 83       	std	Y+6, r25	; 0x06
    502a:	8d 83       	std	Y+5, r24	; 0x05
    502c:	04 c0       	rjmp	.+8      	; 0x5036 <pcTaskGetName+0x30>
    502e:	8b 81       	ldd	r24, Y+3	; 0x03
    5030:	9c 81       	ldd	r25, Y+4	; 0x04
    5032:	9e 83       	std	Y+6, r25	; 0x06
    5034:	8d 83       	std	Y+5, r24	; 0x05
    5036:	8d 81       	ldd	r24, Y+5	; 0x05
    5038:	9e 81       	ldd	r25, Y+6	; 0x06
    503a:	9a 83       	std	Y+2, r25	; 0x02
    503c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	9a 81       	ldd	r25, Y+2	; 0x02
    5042:	49 96       	adiw	r24, 0x19	; 25
}
    5044:	26 96       	adiw	r28, 0x06	; 6
    5046:	0f b6       	in	r0, 0x3f	; 63
    5048:	f8 94       	cli
    504a:	de bf       	out	0x3e, r29	; 62
    504c:	0f be       	out	0x3f, r0	; 63
    504e:	cd bf       	out	0x3d, r28	; 61
    5050:	cf 91       	pop	r28
    5052:	df 91       	pop	r29
    5054:	08 95       	ret

00005056 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    5056:	df 93       	push	r29
    5058:	cf 93       	push	r28
    505a:	cd b7       	in	r28, 0x3d	; 61
    505c:	de b7       	in	r29, 0x3e	; 62
    505e:	29 97       	sbiw	r28, 0x09	; 9
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	de bf       	out	0x3e, r29	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    506a:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    506c:	80 91 66 06 	lds	r24, 0x0666
    5070:	88 23       	and	r24, r24
    5072:	09 f0       	breq	.+2      	; 0x5076 <xTaskIncrementTick+0x20>
    5074:	c0 c0       	rjmp	.+384    	; 0x51f6 <xTaskIncrementTick+0x1a0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    5076:	80 91 5a 06 	lds	r24, 0x065A
    507a:	90 91 5b 06 	lds	r25, 0x065B
    507e:	01 96       	adiw	r24, 0x01	; 1
    5080:	9c 83       	std	Y+4, r25	; 0x04
    5082:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    5084:	8b 81       	ldd	r24, Y+3	; 0x03
    5086:	9c 81       	ldd	r25, Y+4	; 0x04
    5088:	90 93 5b 06 	sts	0x065B, r25
    508c:	80 93 5a 06 	sts	0x065A, r24

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    5090:	8b 81       	ldd	r24, Y+3	; 0x03
    5092:	9c 81       	ldd	r25, Y+4	; 0x04
    5094:	00 97       	sbiw	r24, 0x00	; 0
    5096:	d9 f4       	brne	.+54     	; 0x50ce <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    5098:	80 91 9d 06 	lds	r24, 0x069D
    509c:	90 91 9e 06 	lds	r25, 0x069E
    50a0:	9a 83       	std	Y+2, r25	; 0x02
    50a2:	89 83       	std	Y+1, r24	; 0x01
    50a4:	80 91 9f 06 	lds	r24, 0x069F
    50a8:	90 91 a0 06 	lds	r25, 0x06A0
    50ac:	90 93 9e 06 	sts	0x069E, r25
    50b0:	80 93 9d 06 	sts	0x069D, r24
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	9a 81       	ldd	r25, Y+2	; 0x02
    50b8:	90 93 a0 06 	sts	0x06A0, r25
    50bc:	80 93 9f 06 	sts	0x069F, r24
    50c0:	80 91 60 06 	lds	r24, 0x0660
    50c4:	8f 5f       	subi	r24, 0xFF	; 255
    50c6:	80 93 60 06 	sts	0x0660, r24
    50ca:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    50ce:	20 91 62 06 	lds	r18, 0x0662
    50d2:	30 91 63 06 	lds	r19, 0x0663
    50d6:	8b 81       	ldd	r24, Y+3	; 0x03
    50d8:	9c 81       	ldd	r25, Y+4	; 0x04
    50da:	82 17       	cp	r24, r18
    50dc:	93 07       	cpc	r25, r19
    50de:	08 f4       	brcc	.+2      	; 0x50e2 <xTaskIncrementTick+0x8c>
    50e0:	71 c0       	rjmp	.+226    	; 0x51c4 <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    50e2:	e0 91 9d 06 	lds	r30, 0x069D
    50e6:	f0 91 9e 06 	lds	r31, 0x069E
    50ea:	80 81       	ld	r24, Z
    50ec:	88 23       	and	r24, r24
    50ee:	39 f4       	brne	.+14     	; 0x50fe <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    50f0:	8f ef       	ldi	r24, 0xFF	; 255
    50f2:	9f ef       	ldi	r25, 0xFF	; 255
    50f4:	90 93 63 06 	sts	0x0663, r25
    50f8:	80 93 62 06 	sts	0x0662, r24
    50fc:	63 c0       	rjmp	.+198    	; 0x51c4 <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    50fe:	e0 91 9d 06 	lds	r30, 0x069D
    5102:	f0 91 9e 06 	lds	r31, 0x069E
    5106:	05 80       	ldd	r0, Z+5	; 0x05
    5108:	f6 81       	ldd	r31, Z+6	; 0x06
    510a:	e0 2d       	mov	r30, r0
    510c:	86 81       	ldd	r24, Z+6	; 0x06
    510e:	97 81       	ldd	r25, Z+7	; 0x07
    5110:	99 87       	std	Y+9, r25	; 0x09
    5112:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    5114:	e8 85       	ldd	r30, Y+8	; 0x08
    5116:	f9 85       	ldd	r31, Y+9	; 0x09
    5118:	82 81       	ldd	r24, Z+2	; 0x02
    511a:	93 81       	ldd	r25, Z+3	; 0x03
    511c:	9f 83       	std	Y+7, r25	; 0x07
    511e:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    5120:	2b 81       	ldd	r18, Y+3	; 0x03
    5122:	3c 81       	ldd	r19, Y+4	; 0x04
    5124:	8e 81       	ldd	r24, Y+6	; 0x06
    5126:	9f 81       	ldd	r25, Y+7	; 0x07
    5128:	28 17       	cp	r18, r24
    512a:	39 07       	cpc	r19, r25
    512c:	38 f4       	brcc	.+14     	; 0x513c <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    512e:	8e 81       	ldd	r24, Y+6	; 0x06
    5130:	9f 81       	ldd	r25, Y+7	; 0x07
    5132:	90 93 63 06 	sts	0x0663, r25
    5136:	80 93 62 06 	sts	0x0662, r24
    513a:	44 c0       	rjmp	.+136    	; 0x51c4 <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    513c:	88 85       	ldd	r24, Y+8	; 0x08
    513e:	99 85       	ldd	r25, Y+9	; 0x09
    5140:	02 96       	adiw	r24, 0x02	; 2
    5142:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5146:	e8 85       	ldd	r30, Y+8	; 0x08
    5148:	f9 85       	ldd	r31, Y+9	; 0x09
    514a:	84 89       	ldd	r24, Z+20	; 0x14
    514c:	95 89       	ldd	r25, Z+21	; 0x15
    514e:	00 97       	sbiw	r24, 0x00	; 0
    5150:	29 f0       	breq	.+10     	; 0x515c <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5152:	88 85       	ldd	r24, Y+8	; 0x08
    5154:	99 85       	ldd	r25, Y+9	; 0x09
    5156:	0c 96       	adiw	r24, 0x0c	; 12
    5158:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    515c:	e8 85       	ldd	r30, Y+8	; 0x08
    515e:	f9 85       	ldd	r31, Y+9	; 0x09
    5160:	96 89       	ldd	r25, Z+22	; 0x16
    5162:	80 91 5c 06 	lds	r24, 0x065C
    5166:	89 17       	cp	r24, r25
    5168:	28 f4       	brcc	.+10     	; 0x5174 <xTaskIncrementTick+0x11e>
    516a:	e8 85       	ldd	r30, Y+8	; 0x08
    516c:	f9 85       	ldd	r31, Y+9	; 0x09
    516e:	86 89       	ldd	r24, Z+22	; 0x16
    5170:	80 93 5c 06 	sts	0x065C, r24
    5174:	e8 85       	ldd	r30, Y+8	; 0x08
    5176:	f9 85       	ldd	r31, Y+9	; 0x09
    5178:	86 89       	ldd	r24, Z+22	; 0x16
    517a:	28 2f       	mov	r18, r24
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	c9 01       	movw	r24, r18
    5180:	88 0f       	add	r24, r24
    5182:	99 1f       	adc	r25, r25
    5184:	88 0f       	add	r24, r24
    5186:	99 1f       	adc	r25, r25
    5188:	88 0f       	add	r24, r24
    518a:	99 1f       	adc	r25, r25
    518c:	82 0f       	add	r24, r18
    518e:	93 1f       	adc	r25, r19
    5190:	ac 01       	movw	r20, r24
    5192:	49 59       	subi	r20, 0x99	; 153
    5194:	59 4f       	sbci	r21, 0xF9	; 249
    5196:	88 85       	ldd	r24, Y+8	; 0x08
    5198:	99 85       	ldd	r25, Y+9	; 0x09
    519a:	9c 01       	movw	r18, r24
    519c:	2e 5f       	subi	r18, 0xFE	; 254
    519e:	3f 4f       	sbci	r19, 0xFF	; 255
    51a0:	ca 01       	movw	r24, r20
    51a2:	b9 01       	movw	r22, r18
    51a4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    51a8:	e8 85       	ldd	r30, Y+8	; 0x08
    51aa:	f9 85       	ldd	r31, Y+9	; 0x09
    51ac:	96 89       	ldd	r25, Z+22	; 0x16
    51ae:	e0 91 56 06 	lds	r30, 0x0656
    51b2:	f0 91 57 06 	lds	r31, 0x0657
    51b6:	86 89       	ldd	r24, Z+22	; 0x16
    51b8:	98 17       	cp	r25, r24
    51ba:	08 f4       	brcc	.+2      	; 0x51be <xTaskIncrementTick+0x168>
    51bc:	92 cf       	rjmp	.-220    	; 0x50e2 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	8d 83       	std	Y+5, r24	; 0x05
    51c2:	8f cf       	rjmp	.-226    	; 0x50e2 <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    51c4:	e0 91 56 06 	lds	r30, 0x0656
    51c8:	f0 91 57 06 	lds	r31, 0x0657
    51cc:	86 89       	ldd	r24, Z+22	; 0x16
    51ce:	28 2f       	mov	r18, r24
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	c9 01       	movw	r24, r18
    51d4:	88 0f       	add	r24, r24
    51d6:	99 1f       	adc	r25, r25
    51d8:	88 0f       	add	r24, r24
    51da:	99 1f       	adc	r25, r25
    51dc:	88 0f       	add	r24, r24
    51de:	99 1f       	adc	r25, r25
    51e0:	82 0f       	add	r24, r18
    51e2:	93 1f       	adc	r25, r19
    51e4:	fc 01       	movw	r30, r24
    51e6:	e9 59       	subi	r30, 0x99	; 153
    51e8:	f9 4f       	sbci	r31, 0xF9	; 249
    51ea:	80 81       	ld	r24, Z
    51ec:	82 30       	cpi	r24, 0x02	; 2
    51ee:	40 f0       	brcs	.+16     	; 0x5200 <xTaskIncrementTick+0x1aa>
			{
				xSwitchRequired = pdTRUE;
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	8d 83       	std	Y+5, r24	; 0x05
    51f4:	05 c0       	rjmp	.+10     	; 0x5200 <xTaskIncrementTick+0x1aa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    51f6:	80 91 5e 06 	lds	r24, 0x065E
    51fa:	8f 5f       	subi	r24, 0xFF	; 255
    51fc:	80 93 5e 06 	sts	0x065E, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    5200:	80 91 5f 06 	lds	r24, 0x065F
    5204:	88 23       	and	r24, r24
    5206:	11 f0       	breq	.+4      	; 0x520c <xTaskIncrementTick+0x1b6>
		{
			xSwitchRequired = pdTRUE;
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    520c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    520e:	29 96       	adiw	r28, 0x09	; 9
    5210:	0f b6       	in	r0, 0x3f	; 63
    5212:	f8 94       	cli
    5214:	de bf       	out	0x3e, r29	; 62
    5216:	0f be       	out	0x3f, r0	; 63
    5218:	cd bf       	out	0x3d, r28	; 61
    521a:	cf 91       	pop	r28
    521c:	df 91       	pop	r29
    521e:	08 95       	ret

00005220 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5220:	df 93       	push	r29
    5222:	cf 93       	push	r28
    5224:	00 d0       	rcall	.+0      	; 0x5226 <vTaskSwitchContext+0x6>
    5226:	0f 92       	push	r0
    5228:	cd b7       	in	r28, 0x3d	; 61
    522a:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    522c:	80 91 66 06 	lds	r24, 0x0666
    5230:	88 23       	and	r24, r24
    5232:	21 f0       	breq	.+8      	; 0x523c <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	80 93 5f 06 	sts	0x065F, r24
    523a:	59 c0       	rjmp	.+178    	; 0x52ee <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    523c:	10 92 5f 06 	sts	0x065F, r1
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5240:	80 91 5c 06 	lds	r24, 0x065C
    5244:	8b 83       	std	Y+3, r24	; 0x03
    5246:	03 c0       	rjmp	.+6      	; 0x524e <vTaskSwitchContext+0x2e>
    5248:	8b 81       	ldd	r24, Y+3	; 0x03
    524a:	81 50       	subi	r24, 0x01	; 1
    524c:	8b 83       	std	Y+3, r24	; 0x03
    524e:	8b 81       	ldd	r24, Y+3	; 0x03
    5250:	28 2f       	mov	r18, r24
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	c9 01       	movw	r24, r18
    5256:	88 0f       	add	r24, r24
    5258:	99 1f       	adc	r25, r25
    525a:	88 0f       	add	r24, r24
    525c:	99 1f       	adc	r25, r25
    525e:	88 0f       	add	r24, r24
    5260:	99 1f       	adc	r25, r25
    5262:	82 0f       	add	r24, r18
    5264:	93 1f       	adc	r25, r19
    5266:	fc 01       	movw	r30, r24
    5268:	e9 59       	subi	r30, 0x99	; 153
    526a:	f9 4f       	sbci	r31, 0xF9	; 249
    526c:	80 81       	ld	r24, Z
    526e:	88 23       	and	r24, r24
    5270:	59 f3       	breq	.-42     	; 0x5248 <vTaskSwitchContext+0x28>
    5272:	8b 81       	ldd	r24, Y+3	; 0x03
    5274:	28 2f       	mov	r18, r24
    5276:	30 e0       	ldi	r19, 0x00	; 0
    5278:	c9 01       	movw	r24, r18
    527a:	88 0f       	add	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	88 0f       	add	r24, r24
    5280:	99 1f       	adc	r25, r25
    5282:	88 0f       	add	r24, r24
    5284:	99 1f       	adc	r25, r25
    5286:	82 0f       	add	r24, r18
    5288:	93 1f       	adc	r25, r19
    528a:	89 59       	subi	r24, 0x99	; 153
    528c:	99 4f       	sbci	r25, 0xF9	; 249
    528e:	9a 83       	std	Y+2, r25	; 0x02
    5290:	89 83       	std	Y+1, r24	; 0x01
    5292:	e9 81       	ldd	r30, Y+1	; 0x01
    5294:	fa 81       	ldd	r31, Y+2	; 0x02
    5296:	01 80       	ldd	r0, Z+1	; 0x01
    5298:	f2 81       	ldd	r31, Z+2	; 0x02
    529a:	e0 2d       	mov	r30, r0
    529c:	82 81       	ldd	r24, Z+2	; 0x02
    529e:	93 81       	ldd	r25, Z+3	; 0x03
    52a0:	e9 81       	ldd	r30, Y+1	; 0x01
    52a2:	fa 81       	ldd	r31, Y+2	; 0x02
    52a4:	92 83       	std	Z+2, r25	; 0x02
    52a6:	81 83       	std	Z+1, r24	; 0x01
    52a8:	e9 81       	ldd	r30, Y+1	; 0x01
    52aa:	fa 81       	ldd	r31, Y+2	; 0x02
    52ac:	21 81       	ldd	r18, Z+1	; 0x01
    52ae:	32 81       	ldd	r19, Z+2	; 0x02
    52b0:	89 81       	ldd	r24, Y+1	; 0x01
    52b2:	9a 81       	ldd	r25, Y+2	; 0x02
    52b4:	03 96       	adiw	r24, 0x03	; 3
    52b6:	28 17       	cp	r18, r24
    52b8:	39 07       	cpc	r19, r25
    52ba:	59 f4       	brne	.+22     	; 0x52d2 <vTaskSwitchContext+0xb2>
    52bc:	e9 81       	ldd	r30, Y+1	; 0x01
    52be:	fa 81       	ldd	r31, Y+2	; 0x02
    52c0:	01 80       	ldd	r0, Z+1	; 0x01
    52c2:	f2 81       	ldd	r31, Z+2	; 0x02
    52c4:	e0 2d       	mov	r30, r0
    52c6:	82 81       	ldd	r24, Z+2	; 0x02
    52c8:	93 81       	ldd	r25, Z+3	; 0x03
    52ca:	e9 81       	ldd	r30, Y+1	; 0x01
    52cc:	fa 81       	ldd	r31, Y+2	; 0x02
    52ce:	92 83       	std	Z+2, r25	; 0x02
    52d0:	81 83       	std	Z+1, r24	; 0x01
    52d2:	e9 81       	ldd	r30, Y+1	; 0x01
    52d4:	fa 81       	ldd	r31, Y+2	; 0x02
    52d6:	01 80       	ldd	r0, Z+1	; 0x01
    52d8:	f2 81       	ldd	r31, Z+2	; 0x02
    52da:	e0 2d       	mov	r30, r0
    52dc:	86 81       	ldd	r24, Z+6	; 0x06
    52de:	97 81       	ldd	r25, Z+7	; 0x07
    52e0:	90 93 57 06 	sts	0x0657, r25
    52e4:	80 93 56 06 	sts	0x0656, r24
    52e8:	8b 81       	ldd	r24, Y+3	; 0x03
    52ea:	80 93 5c 06 	sts	0x065C, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    52ee:	0f 90       	pop	r0
    52f0:	0f 90       	pop	r0
    52f2:	0f 90       	pop	r0
    52f4:	cf 91       	pop	r28
    52f6:	df 91       	pop	r29
    52f8:	08 95       	ret

000052fa <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    52fa:	df 93       	push	r29
    52fc:	cf 93       	push	r28
    52fe:	00 d0       	rcall	.+0      	; 0x5300 <vTaskPlaceOnEventList+0x6>
    5300:	00 d0       	rcall	.+0      	; 0x5302 <vTaskPlaceOnEventList+0x8>
    5302:	cd b7       	in	r28, 0x3d	; 61
    5304:	de b7       	in	r29, 0x3e	; 62
    5306:	9a 83       	std	Y+2, r25	; 0x02
    5308:	89 83       	std	Y+1, r24	; 0x01
    530a:	7c 83       	std	Y+4, r23	; 0x04
    530c:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    530e:	80 91 56 06 	lds	r24, 0x0656
    5312:	90 91 57 06 	lds	r25, 0x0657
    5316:	9c 01       	movw	r18, r24
    5318:	24 5f       	subi	r18, 0xF4	; 244
    531a:	3f 4f       	sbci	r19, 0xFF	; 255
    531c:	89 81       	ldd	r24, Y+1	; 0x01
    531e:	9a 81       	ldd	r25, Y+2	; 0x02
    5320:	b9 01       	movw	r22, r18
    5322:	0e 94 05 10 	call	0x200a	; 0x200a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5326:	8b 81       	ldd	r24, Y+3	; 0x03
    5328:	9c 81       	ldd	r25, Y+4	; 0x04
    532a:	61 e0       	ldi	r22, 0x01	; 1
    532c:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <prvAddCurrentTaskToDelayedList>
}
    5330:	0f 90       	pop	r0
    5332:	0f 90       	pop	r0
    5334:	0f 90       	pop	r0
    5336:	0f 90       	pop	r0
    5338:	cf 91       	pop	r28
    533a:	df 91       	pop	r29
    533c:	08 95       	ret

0000533e <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    533e:	df 93       	push	r29
    5340:	cf 93       	push	r28
    5342:	00 d0       	rcall	.+0      	; 0x5344 <vTaskPlaceOnUnorderedEventList+0x6>
    5344:	00 d0       	rcall	.+0      	; 0x5346 <vTaskPlaceOnUnorderedEventList+0x8>
    5346:	00 d0       	rcall	.+0      	; 0x5348 <vTaskPlaceOnUnorderedEventList+0xa>
    5348:	cd b7       	in	r28, 0x3d	; 61
    534a:	de b7       	in	r29, 0x3e	; 62
    534c:	9a 83       	std	Y+2, r25	; 0x02
    534e:	89 83       	std	Y+1, r24	; 0x01
    5350:	7c 83       	std	Y+4, r23	; 0x04
    5352:	6b 83       	std	Y+3, r22	; 0x03
    5354:	5e 83       	std	Y+6, r21	; 0x06
    5356:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    5358:	e0 91 56 06 	lds	r30, 0x0656
    535c:	f0 91 57 06 	lds	r31, 0x0657
    5360:	8b 81       	ldd	r24, Y+3	; 0x03
    5362:	9c 81       	ldd	r25, Y+4	; 0x04
    5364:	90 68       	ori	r25, 0x80	; 128
    5366:	95 87       	std	Z+13, r25	; 0x0d
    5368:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    536a:	80 91 56 06 	lds	r24, 0x0656
    536e:	90 91 57 06 	lds	r25, 0x0657
    5372:	9c 01       	movw	r18, r24
    5374:	24 5f       	subi	r18, 0xF4	; 244
    5376:	3f 4f       	sbci	r19, 0xFF	; 255
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	9a 81       	ldd	r25, Y+2	; 0x02
    537c:	b9 01       	movw	r22, r18
    537e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5382:	8d 81       	ldd	r24, Y+5	; 0x05
    5384:	9e 81       	ldd	r25, Y+6	; 0x06
    5386:	61 e0       	ldi	r22, 0x01	; 1
    5388:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <prvAddCurrentTaskToDelayedList>
}
    538c:	26 96       	adiw	r28, 0x06	; 6
    538e:	0f b6       	in	r0, 0x3f	; 63
    5390:	f8 94       	cli
    5392:	de bf       	out	0x3e, r29	; 62
    5394:	0f be       	out	0x3f, r0	; 63
    5396:	cd bf       	out	0x3d, r28	; 61
    5398:	cf 91       	pop	r28
    539a:	df 91       	pop	r29
    539c:	08 95       	ret

0000539e <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    539e:	df 93       	push	r29
    53a0:	cf 93       	push	r28
    53a2:	00 d0       	rcall	.+0      	; 0x53a4 <xTaskRemoveFromEventList+0x6>
    53a4:	00 d0       	rcall	.+0      	; 0x53a6 <xTaskRemoveFromEventList+0x8>
    53a6:	0f 92       	push	r0
    53a8:	cd b7       	in	r28, 0x3d	; 61
    53aa:	de b7       	in	r29, 0x3e	; 62
    53ac:	9d 83       	std	Y+5, r25	; 0x05
    53ae:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    53b0:	ec 81       	ldd	r30, Y+4	; 0x04
    53b2:	fd 81       	ldd	r31, Y+5	; 0x05
    53b4:	05 80       	ldd	r0, Z+5	; 0x05
    53b6:	f6 81       	ldd	r31, Z+6	; 0x06
    53b8:	e0 2d       	mov	r30, r0
    53ba:	86 81       	ldd	r24, Z+6	; 0x06
    53bc:	97 81       	ldd	r25, Z+7	; 0x07
    53be:	9b 83       	std	Y+3, r25	; 0x03
    53c0:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    53c2:	8a 81       	ldd	r24, Y+2	; 0x02
    53c4:	9b 81       	ldd	r25, Y+3	; 0x03
    53c6:	0c 96       	adiw	r24, 0x0c	; 12
    53c8:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    53cc:	80 91 66 06 	lds	r24, 0x0666
    53d0:	88 23       	and	r24, r24
    53d2:	61 f5       	brne	.+88     	; 0x542c <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    53d4:	8a 81       	ldd	r24, Y+2	; 0x02
    53d6:	9b 81       	ldd	r25, Y+3	; 0x03
    53d8:	02 96       	adiw	r24, 0x02	; 2
    53da:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    53de:	ea 81       	ldd	r30, Y+2	; 0x02
    53e0:	fb 81       	ldd	r31, Y+3	; 0x03
    53e2:	96 89       	ldd	r25, Z+22	; 0x16
    53e4:	80 91 5c 06 	lds	r24, 0x065C
    53e8:	89 17       	cp	r24, r25
    53ea:	28 f4       	brcc	.+10     	; 0x53f6 <xTaskRemoveFromEventList+0x58>
    53ec:	ea 81       	ldd	r30, Y+2	; 0x02
    53ee:	fb 81       	ldd	r31, Y+3	; 0x03
    53f0:	86 89       	ldd	r24, Z+22	; 0x16
    53f2:	80 93 5c 06 	sts	0x065C, r24
    53f6:	ea 81       	ldd	r30, Y+2	; 0x02
    53f8:	fb 81       	ldd	r31, Y+3	; 0x03
    53fa:	86 89       	ldd	r24, Z+22	; 0x16
    53fc:	28 2f       	mov	r18, r24
    53fe:	30 e0       	ldi	r19, 0x00	; 0
    5400:	c9 01       	movw	r24, r18
    5402:	88 0f       	add	r24, r24
    5404:	99 1f       	adc	r25, r25
    5406:	88 0f       	add	r24, r24
    5408:	99 1f       	adc	r25, r25
    540a:	88 0f       	add	r24, r24
    540c:	99 1f       	adc	r25, r25
    540e:	82 0f       	add	r24, r18
    5410:	93 1f       	adc	r25, r19
    5412:	ac 01       	movw	r20, r24
    5414:	49 59       	subi	r20, 0x99	; 153
    5416:	59 4f       	sbci	r21, 0xF9	; 249
    5418:	8a 81       	ldd	r24, Y+2	; 0x02
    541a:	9b 81       	ldd	r25, Y+3	; 0x03
    541c:	9c 01       	movw	r18, r24
    541e:	2e 5f       	subi	r18, 0xFE	; 254
    5420:	3f 4f       	sbci	r19, 0xFF	; 255
    5422:	ca 01       	movw	r24, r20
    5424:	b9 01       	movw	r22, r18
    5426:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
    542a:	0a c0       	rjmp	.+20     	; 0x5440 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    542c:	8a 81       	ldd	r24, Y+2	; 0x02
    542e:	9b 81       	ldd	r25, Y+3	; 0x03
    5430:	9c 01       	movw	r18, r24
    5432:	24 5f       	subi	r18, 0xF4	; 244
    5434:	3f 4f       	sbci	r19, 0xFF	; 255
    5436:	81 ea       	ldi	r24, 0xA1	; 161
    5438:	96 e0       	ldi	r25, 0x06	; 6
    543a:	b9 01       	movw	r22, r18
    543c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5440:	ea 81       	ldd	r30, Y+2	; 0x02
    5442:	fb 81       	ldd	r31, Y+3	; 0x03
    5444:	96 89       	ldd	r25, Z+22	; 0x16
    5446:	e0 91 56 06 	lds	r30, 0x0656
    544a:	f0 91 57 06 	lds	r31, 0x0657
    544e:	86 89       	ldd	r24, Z+22	; 0x16
    5450:	89 17       	cp	r24, r25
    5452:	30 f4       	brcc	.+12     	; 0x5460 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    5454:	81 e0       	ldi	r24, 0x01	; 1
    5456:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	80 93 5f 06 	sts	0x065F, r24
    545e:	01 c0       	rjmp	.+2      	; 0x5462 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    5460:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    5462:	89 81       	ldd	r24, Y+1	; 0x01
}
    5464:	0f 90       	pop	r0
    5466:	0f 90       	pop	r0
    5468:	0f 90       	pop	r0
    546a:	0f 90       	pop	r0
    546c:	0f 90       	pop	r0
    546e:	cf 91       	pop	r28
    5470:	df 91       	pop	r29
    5472:	08 95       	ret

00005474 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    5474:	df 93       	push	r29
    5476:	cf 93       	push	r28
    5478:	00 d0       	rcall	.+0      	; 0x547a <vTaskRemoveFromUnorderedEventList+0x6>
    547a:	00 d0       	rcall	.+0      	; 0x547c <vTaskRemoveFromUnorderedEventList+0x8>
    547c:	00 d0       	rcall	.+0      	; 0x547e <vTaskRemoveFromUnorderedEventList+0xa>
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
    5482:	9c 83       	std	Y+4, r25	; 0x04
    5484:	8b 83       	std	Y+3, r24	; 0x03
    5486:	7e 83       	std	Y+6, r23	; 0x06
    5488:	6d 83       	std	Y+5, r22	; 0x05
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    548a:	8d 81       	ldd	r24, Y+5	; 0x05
    548c:	9e 81       	ldd	r25, Y+6	; 0x06
    548e:	90 68       	ori	r25, 0x80	; 128
    5490:	eb 81       	ldd	r30, Y+3	; 0x03
    5492:	fc 81       	ldd	r31, Y+4	; 0x04
    5494:	91 83       	std	Z+1, r25	; 0x01
    5496:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5498:	eb 81       	ldd	r30, Y+3	; 0x03
    549a:	fc 81       	ldd	r31, Y+4	; 0x04
    549c:	86 81       	ldd	r24, Z+6	; 0x06
    549e:	97 81       	ldd	r25, Z+7	; 0x07
    54a0:	9a 83       	std	Y+2, r25	; 0x02
    54a2:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    54a4:	8b 81       	ldd	r24, Y+3	; 0x03
    54a6:	9c 81       	ldd	r25, Y+4	; 0x04
    54a8:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    54ac:	89 81       	ldd	r24, Y+1	; 0x01
    54ae:	9a 81       	ldd	r25, Y+2	; 0x02
    54b0:	02 96       	adiw	r24, 0x02	; 2
    54b2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    54b6:	e9 81       	ldd	r30, Y+1	; 0x01
    54b8:	fa 81       	ldd	r31, Y+2	; 0x02
    54ba:	96 89       	ldd	r25, Z+22	; 0x16
    54bc:	80 91 5c 06 	lds	r24, 0x065C
    54c0:	89 17       	cp	r24, r25
    54c2:	28 f4       	brcc	.+10     	; 0x54ce <vTaskRemoveFromUnorderedEventList+0x5a>
    54c4:	e9 81       	ldd	r30, Y+1	; 0x01
    54c6:	fa 81       	ldd	r31, Y+2	; 0x02
    54c8:	86 89       	ldd	r24, Z+22	; 0x16
    54ca:	80 93 5c 06 	sts	0x065C, r24
    54ce:	e9 81       	ldd	r30, Y+1	; 0x01
    54d0:	fa 81       	ldd	r31, Y+2	; 0x02
    54d2:	86 89       	ldd	r24, Z+22	; 0x16
    54d4:	28 2f       	mov	r18, r24
    54d6:	30 e0       	ldi	r19, 0x00	; 0
    54d8:	c9 01       	movw	r24, r18
    54da:	88 0f       	add	r24, r24
    54dc:	99 1f       	adc	r25, r25
    54de:	88 0f       	add	r24, r24
    54e0:	99 1f       	adc	r25, r25
    54e2:	88 0f       	add	r24, r24
    54e4:	99 1f       	adc	r25, r25
    54e6:	82 0f       	add	r24, r18
    54e8:	93 1f       	adc	r25, r19
    54ea:	ac 01       	movw	r20, r24
    54ec:	49 59       	subi	r20, 0x99	; 153
    54ee:	59 4f       	sbci	r21, 0xF9	; 249
    54f0:	89 81       	ldd	r24, Y+1	; 0x01
    54f2:	9a 81       	ldd	r25, Y+2	; 0x02
    54f4:	9c 01       	movw	r18, r24
    54f6:	2e 5f       	subi	r18, 0xFE	; 254
    54f8:	3f 4f       	sbci	r19, 0xFF	; 255
    54fa:	ca 01       	movw	r24, r20
    54fc:	b9 01       	movw	r22, r18
    54fe:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5502:	e9 81       	ldd	r30, Y+1	; 0x01
    5504:	fa 81       	ldd	r31, Y+2	; 0x02
    5506:	96 89       	ldd	r25, Z+22	; 0x16
    5508:	e0 91 56 06 	lds	r30, 0x0656
    550c:	f0 91 57 06 	lds	r31, 0x0657
    5510:	86 89       	ldd	r24, Z+22	; 0x16
    5512:	89 17       	cp	r24, r25
    5514:	18 f4       	brcc	.+6      	; 0x551c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	80 93 5f 06 	sts	0x065F, r24
	}
}
    551c:	26 96       	adiw	r28, 0x06	; 6
    551e:	0f b6       	in	r0, 0x3f	; 63
    5520:	f8 94       	cli
    5522:	de bf       	out	0x3e, r29	; 62
    5524:	0f be       	out	0x3f, r0	; 63
    5526:	cd bf       	out	0x3d, r28	; 61
    5528:	cf 91       	pop	r28
    552a:	df 91       	pop	r29
    552c:	08 95       	ret

0000552e <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    552e:	df 93       	push	r29
    5530:	cf 93       	push	r28
    5532:	00 d0       	rcall	.+0      	; 0x5534 <vTaskSetTimeOutState+0x6>
    5534:	cd b7       	in	r28, 0x3d	; 61
    5536:	de b7       	in	r29, 0x3e	; 62
    5538:	9a 83       	std	Y+2, r25	; 0x02
    553a:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    553c:	0f b6       	in	r0, 0x3f	; 63
    553e:	f8 94       	cli
    5540:	0f 92       	push	r0
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    5542:	80 91 60 06 	lds	r24, 0x0660
    5546:	e9 81       	ldd	r30, Y+1	; 0x01
    5548:	fa 81       	ldd	r31, Y+2	; 0x02
    554a:	80 83       	st	Z, r24
		pxTimeOut->xTimeOnEntering = xTickCount;
    554c:	80 91 5a 06 	lds	r24, 0x065A
    5550:	90 91 5b 06 	lds	r25, 0x065B
    5554:	e9 81       	ldd	r30, Y+1	; 0x01
    5556:	fa 81       	ldd	r31, Y+2	; 0x02
    5558:	92 83       	std	Z+2, r25	; 0x02
    555a:	81 83       	std	Z+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    555c:	0f 90       	pop	r0
    555e:	0f be       	out	0x3f, r0	; 63
}
    5560:	0f 90       	pop	r0
    5562:	0f 90       	pop	r0
    5564:	cf 91       	pop	r28
    5566:	df 91       	pop	r29
    5568:	08 95       	ret

0000556a <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    556a:	df 93       	push	r29
    556c:	cf 93       	push	r28
    556e:	00 d0       	rcall	.+0      	; 0x5570 <vTaskInternalSetTimeOutState+0x6>
    5570:	cd b7       	in	r28, 0x3d	; 61
    5572:	de b7       	in	r29, 0x3e	; 62
    5574:	9a 83       	std	Y+2, r25	; 0x02
    5576:	89 83       	std	Y+1, r24	; 0x01
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5578:	80 91 60 06 	lds	r24, 0x0660
    557c:	e9 81       	ldd	r30, Y+1	; 0x01
    557e:	fa 81       	ldd	r31, Y+2	; 0x02
    5580:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    5582:	80 91 5a 06 	lds	r24, 0x065A
    5586:	90 91 5b 06 	lds	r25, 0x065B
    558a:	e9 81       	ldd	r30, Y+1	; 0x01
    558c:	fa 81       	ldd	r31, Y+2	; 0x02
    558e:	92 83       	std	Z+2, r25	; 0x02
    5590:	81 83       	std	Z+1, r24	; 0x01
}
    5592:	0f 90       	pop	r0
    5594:	0f 90       	pop	r0
    5596:	cf 91       	pop	r28
    5598:	df 91       	pop	r29
    559a:	08 95       	ret

0000559c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    559c:	df 93       	push	r29
    559e:	cf 93       	push	r28
    55a0:	cd b7       	in	r28, 0x3d	; 61
    55a2:	de b7       	in	r29, 0x3e	; 62
    55a4:	29 97       	sbiw	r28, 0x09	; 9
    55a6:	0f b6       	in	r0, 0x3f	; 63
    55a8:	f8 94       	cli
    55aa:	de bf       	out	0x3e, r29	; 62
    55ac:	0f be       	out	0x3f, r0	; 63
    55ae:	cd bf       	out	0x3d, r28	; 61
    55b0:	9f 83       	std	Y+7, r25	; 0x07
    55b2:	8e 83       	std	Y+6, r24	; 0x06
    55b4:	79 87       	std	Y+9, r23	; 0x09
    55b6:	68 87       	std	Y+8, r22	; 0x08
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    55b8:	0f b6       	in	r0, 0x3f	; 63
    55ba:	f8 94       	cli
    55bc:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    55be:	80 91 5a 06 	lds	r24, 0x065A
    55c2:	90 91 5b 06 	lds	r25, 0x065B
    55c6:	9c 83       	std	Y+4, r25	; 0x04
    55c8:	8b 83       	std	Y+3, r24	; 0x03
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    55ca:	ee 81       	ldd	r30, Y+6	; 0x06
    55cc:	ff 81       	ldd	r31, Y+7	; 0x07
    55ce:	21 81       	ldd	r18, Z+1	; 0x01
    55d0:	32 81       	ldd	r19, Z+2	; 0x02
    55d2:	8b 81       	ldd	r24, Y+3	; 0x03
    55d4:	9c 81       	ldd	r25, Y+4	; 0x04
    55d6:	82 1b       	sub	r24, r18
    55d8:	93 0b       	sbc	r25, r19
    55da:	9a 83       	std	Y+2, r25	; 0x02
    55dc:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    55de:	e8 85       	ldd	r30, Y+8	; 0x08
    55e0:	f9 85       	ldd	r31, Y+9	; 0x09
    55e2:	80 81       	ld	r24, Z
    55e4:	91 81       	ldd	r25, Z+1	; 0x01
    55e6:	2f ef       	ldi	r18, 0xFF	; 255
    55e8:	8f 3f       	cpi	r24, 0xFF	; 255
    55ea:	92 07       	cpc	r25, r18
    55ec:	11 f4       	brne	.+4      	; 0x55f2 <xTaskCheckForTimeOut+0x56>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    55ee:	1d 82       	std	Y+5, r1	; 0x05
    55f0:	36 c0       	rjmp	.+108    	; 0x565e <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    55f2:	ee 81       	ldd	r30, Y+6	; 0x06
    55f4:	ff 81       	ldd	r31, Y+7	; 0x07
    55f6:	90 81       	ld	r25, Z
    55f8:	80 91 60 06 	lds	r24, 0x0660
    55fc:	98 17       	cp	r25, r24
    55fe:	61 f0       	breq	.+24     	; 0x5618 <xTaskCheckForTimeOut+0x7c>
    5600:	ee 81       	ldd	r30, Y+6	; 0x06
    5602:	ff 81       	ldd	r31, Y+7	; 0x07
    5604:	21 81       	ldd	r18, Z+1	; 0x01
    5606:	32 81       	ldd	r19, Z+2	; 0x02
    5608:	8b 81       	ldd	r24, Y+3	; 0x03
    560a:	9c 81       	ldd	r25, Y+4	; 0x04
    560c:	82 17       	cp	r24, r18
    560e:	93 07       	cpc	r25, r19
    5610:	18 f0       	brcs	.+6      	; 0x5618 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	8d 83       	std	Y+5, r24	; 0x05
    5616:	23 c0       	rjmp	.+70     	; 0x565e <xTaskCheckForTimeOut+0xc2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    5618:	e8 85       	ldd	r30, Y+8	; 0x08
    561a:	f9 85       	ldd	r31, Y+9	; 0x09
    561c:	20 81       	ld	r18, Z
    561e:	31 81       	ldd	r19, Z+1	; 0x01
    5620:	89 81       	ldd	r24, Y+1	; 0x01
    5622:	9a 81       	ldd	r25, Y+2	; 0x02
    5624:	82 17       	cp	r24, r18
    5626:	93 07       	cpc	r25, r19
    5628:	a0 f4       	brcc	.+40     	; 0x5652 <xTaskCheckForTimeOut+0xb6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    562a:	e8 85       	ldd	r30, Y+8	; 0x08
    562c:	f9 85       	ldd	r31, Y+9	; 0x09
    562e:	20 81       	ld	r18, Z
    5630:	31 81       	ldd	r19, Z+1	; 0x01
    5632:	89 81       	ldd	r24, Y+1	; 0x01
    5634:	9a 81       	ldd	r25, Y+2	; 0x02
    5636:	a9 01       	movw	r20, r18
    5638:	48 1b       	sub	r20, r24
    563a:	59 0b       	sbc	r21, r25
    563c:	ca 01       	movw	r24, r20
    563e:	e8 85       	ldd	r30, Y+8	; 0x08
    5640:	f9 85       	ldd	r31, Y+9	; 0x09
    5642:	91 83       	std	Z+1, r25	; 0x01
    5644:	80 83       	st	Z, r24
			vTaskInternalSetTimeOutState( pxTimeOut );
    5646:	8e 81       	ldd	r24, Y+6	; 0x06
    5648:	9f 81       	ldd	r25, Y+7	; 0x07
    564a:	0e 94 b5 2a 	call	0x556a	; 0x556a <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    564e:	1d 82       	std	Y+5, r1	; 0x05
    5650:	06 c0       	rjmp	.+12     	; 0x565e <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			*pxTicksToWait = 0;
    5652:	e8 85       	ldd	r30, Y+8	; 0x08
    5654:	f9 85       	ldd	r31, Y+9	; 0x09
    5656:	11 82       	std	Z+1, r1	; 0x01
    5658:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
	taskEXIT_CRITICAL();
    565e:	0f 90       	pop	r0
    5660:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    5662:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5664:	29 96       	adiw	r28, 0x09	; 9
    5666:	0f b6       	in	r0, 0x3f	; 63
    5668:	f8 94       	cli
    566a:	de bf       	out	0x3e, r29	; 62
    566c:	0f be       	out	0x3f, r0	; 63
    566e:	cd bf       	out	0x3d, r28	; 61
    5670:	cf 91       	pop	r28
    5672:	df 91       	pop	r29
    5674:	08 95       	ret

00005676 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5676:	df 93       	push	r29
    5678:	cf 93       	push	r28
    567a:	cd b7       	in	r28, 0x3d	; 61
    567c:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    567e:	81 e0       	ldi	r24, 0x01	; 1
    5680:	80 93 5f 06 	sts	0x065F, r24
}
    5684:	cf 91       	pop	r28
    5686:	df 91       	pop	r29
    5688:	08 95       	ret

0000568a <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    568a:	df 93       	push	r29
    568c:	cf 93       	push	r28
    568e:	00 d0       	rcall	.+0      	; 0x5690 <prvIdleTask+0x6>
    5690:	cd b7       	in	r28, 0x3d	; 61
    5692:	de b7       	in	r29, 0x3e	; 62
    5694:	9a 83       	std	Y+2, r25	; 0x02
    5696:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    5698:	0e 94 90 2b 	call	0x5720	; 0x5720 <prvCheckTasksWaitingTermination>
    569c:	fd cf       	rjmp	.-6      	; 0x5698 <prvIdleTask+0xe>

0000569e <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    569e:	df 93       	push	r29
    56a0:	cf 93       	push	r28
    56a2:	0f 92       	push	r0
    56a4:	cd b7       	in	r28, 0x3d	; 61
    56a6:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    56a8:	19 82       	std	Y+1, r1	; 0x01
    56aa:	13 c0       	rjmp	.+38     	; 0x56d2 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    56ac:	89 81       	ldd	r24, Y+1	; 0x01
    56ae:	28 2f       	mov	r18, r24
    56b0:	30 e0       	ldi	r19, 0x00	; 0
    56b2:	c9 01       	movw	r24, r18
    56b4:	88 0f       	add	r24, r24
    56b6:	99 1f       	adc	r25, r25
    56b8:	88 0f       	add	r24, r24
    56ba:	99 1f       	adc	r25, r25
    56bc:	88 0f       	add	r24, r24
    56be:	99 1f       	adc	r25, r25
    56c0:	82 0f       	add	r24, r18
    56c2:	93 1f       	adc	r25, r19
    56c4:	89 59       	subi	r24, 0x99	; 153
    56c6:	99 4f       	sbci	r25, 0xF9	; 249
    56c8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    56cc:	89 81       	ldd	r24, Y+1	; 0x01
    56ce:	8f 5f       	subi	r24, 0xFF	; 255
    56d0:	89 83       	std	Y+1, r24	; 0x01
    56d2:	89 81       	ldd	r24, Y+1	; 0x01
    56d4:	84 30       	cpi	r24, 0x04	; 4
    56d6:	50 f3       	brcs	.-44     	; 0x56ac <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    56d8:	8b e8       	ldi	r24, 0x8B	; 139
    56da:	96 e0       	ldi	r25, 0x06	; 6
    56dc:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    56e0:	84 e9       	ldi	r24, 0x94	; 148
    56e2:	96 e0       	ldi	r25, 0x06	; 6
    56e4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
    56e8:	81 ea       	ldi	r24, 0xA1	; 161
    56ea:	96 e0       	ldi	r25, 0x06	; 6
    56ec:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    56f0:	8a ea       	ldi	r24, 0xAA	; 170
    56f2:	96 e0       	ldi	r25, 0x06	; 6
    56f4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    56f8:	83 eb       	ldi	r24, 0xB3	; 179
    56fa:	96 e0       	ldi	r25, 0x06	; 6
    56fc:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5700:	8b e8       	ldi	r24, 0x8B	; 139
    5702:	96 e0       	ldi	r25, 0x06	; 6
    5704:	90 93 9e 06 	sts	0x069E, r25
    5708:	80 93 9d 06 	sts	0x069D, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    570c:	84 e9       	ldi	r24, 0x94	; 148
    570e:	96 e0       	ldi	r25, 0x06	; 6
    5710:	90 93 a0 06 	sts	0x06A0, r25
    5714:	80 93 9f 06 	sts	0x069F, r24
}
    5718:	0f 90       	pop	r0
    571a:	cf 91       	pop	r28
    571c:	df 91       	pop	r29
    571e:	08 95       	ret

00005720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5720:	df 93       	push	r29
    5722:	cf 93       	push	r28
    5724:	00 d0       	rcall	.+0      	; 0x5726 <prvCheckTasksWaitingTermination+0x6>
    5726:	cd b7       	in	r28, 0x3d	; 61
    5728:	de b7       	in	r29, 0x3e	; 62
    572a:	20 c0       	rjmp	.+64     	; 0x576c <prvCheckTasksWaitingTermination+0x4c>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
    572c:	0f b6       	in	r0, 0x3f	; 63
    572e:	f8 94       	cli
    5730:	0f 92       	push	r0
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5732:	e0 91 af 06 	lds	r30, 0x06AF
    5736:	f0 91 b0 06 	lds	r31, 0x06B0
    573a:	86 81       	ldd	r24, Z+6	; 0x06
    573c:	97 81       	ldd	r25, Z+7	; 0x07
    573e:	9a 83       	std	Y+2, r25	; 0x02
    5740:	89 83       	std	Y+1, r24	; 0x01
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5742:	89 81       	ldd	r24, Y+1	; 0x01
    5744:	9a 81       	ldd	r25, Y+2	; 0x02
    5746:	02 96       	adiw	r24, 0x02	; 2
    5748:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
    574c:	80 91 59 06 	lds	r24, 0x0659
    5750:	81 50       	subi	r24, 0x01	; 1
    5752:	80 93 59 06 	sts	0x0659, r24
				--uxDeletedTasksWaitingCleanUp;
    5756:	80 91 58 06 	lds	r24, 0x0658
    575a:	81 50       	subi	r24, 0x01	; 1
    575c:	80 93 58 06 	sts	0x0658, r24
			}
			taskEXIT_CRITICAL();
    5760:	0f 90       	pop	r0
    5762:	0f be       	out	0x3f, r0	; 63

			prvDeleteTCB( pxTCB );
    5764:	89 81       	ldd	r24, Y+1	; 0x01
    5766:	9a 81       	ldd	r25, Y+2	; 0x02
    5768:	0e 94 bf 2b 	call	0x577e	; 0x577e <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    576c:	80 91 58 06 	lds	r24, 0x0658
    5770:	88 23       	and	r24, r24
    5772:	e1 f6       	brne	.-72     	; 0x572c <prvCheckTasksWaitingTermination+0xc>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    5774:	0f 90       	pop	r0
    5776:	0f 90       	pop	r0
    5778:	cf 91       	pop	r28
    577a:	df 91       	pop	r29
    577c:	08 95       	ret

0000577e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    577e:	df 93       	push	r29
    5780:	cf 93       	push	r28
    5782:	00 d0       	rcall	.+0      	; 0x5784 <prvDeleteTCB+0x6>
    5784:	cd b7       	in	r28, 0x3d	; 61
    5786:	de b7       	in	r29, 0x3e	; 62
    5788:	9a 83       	std	Y+2, r25	; 0x02
    578a:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    578c:	e9 81       	ldd	r30, Y+1	; 0x01
    578e:	fa 81       	ldd	r31, Y+2	; 0x02
    5790:	87 89       	ldd	r24, Z+23	; 0x17
    5792:	90 8d       	ldd	r25, Z+24	; 0x18
    5794:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <vPortFree>
			vPortFree( pxTCB );
    5798:	89 81       	ldd	r24, Y+1	; 0x01
    579a:	9a 81       	ldd	r25, Y+2	; 0x02
    579c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    57a0:	0f 90       	pop	r0
    57a2:	0f 90       	pop	r0
    57a4:	cf 91       	pop	r28
    57a6:	df 91       	pop	r29
    57a8:	08 95       	ret

000057aa <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    57aa:	df 93       	push	r29
    57ac:	cf 93       	push	r28
    57ae:	00 d0       	rcall	.+0      	; 0x57b0 <prvResetNextTaskUnblockTime+0x6>
    57b0:	cd b7       	in	r28, 0x3d	; 61
    57b2:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    57b4:	e0 91 9d 06 	lds	r30, 0x069D
    57b8:	f0 91 9e 06 	lds	r31, 0x069E
    57bc:	80 81       	ld	r24, Z
    57be:	88 23       	and	r24, r24
    57c0:	39 f4       	brne	.+14     	; 0x57d0 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    57c2:	8f ef       	ldi	r24, 0xFF	; 255
    57c4:	9f ef       	ldi	r25, 0xFF	; 255
    57c6:	90 93 63 06 	sts	0x0663, r25
    57ca:	80 93 62 06 	sts	0x0662, r24
    57ce:	13 c0       	rjmp	.+38     	; 0x57f6 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    57d0:	e0 91 9d 06 	lds	r30, 0x069D
    57d4:	f0 91 9e 06 	lds	r31, 0x069E
    57d8:	05 80       	ldd	r0, Z+5	; 0x05
    57da:	f6 81       	ldd	r31, Z+6	; 0x06
    57dc:	e0 2d       	mov	r30, r0
    57de:	86 81       	ldd	r24, Z+6	; 0x06
    57e0:	97 81       	ldd	r25, Z+7	; 0x07
    57e2:	9a 83       	std	Y+2, r25	; 0x02
    57e4:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    57e6:	e9 81       	ldd	r30, Y+1	; 0x01
    57e8:	fa 81       	ldd	r31, Y+2	; 0x02
    57ea:	82 81       	ldd	r24, Z+2	; 0x02
    57ec:	93 81       	ldd	r25, Z+3	; 0x03
    57ee:	90 93 63 06 	sts	0x0663, r25
    57f2:	80 93 62 06 	sts	0x0662, r24
	}
}
    57f6:	0f 90       	pop	r0
    57f8:	0f 90       	pop	r0
    57fa:	cf 91       	pop	r28
    57fc:	df 91       	pop	r29
    57fe:	08 95       	ret

00005800 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    5800:	df 93       	push	r29
    5802:	cf 93       	push	r28
    5804:	00 d0       	rcall	.+0      	; 0x5806 <xTaskGetCurrentTaskHandle+0x6>
    5806:	cd b7       	in	r28, 0x3d	; 61
    5808:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    580a:	80 91 56 06 	lds	r24, 0x0656
    580e:	90 91 57 06 	lds	r25, 0x0657
    5812:	9a 83       	std	Y+2, r25	; 0x02
    5814:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    5816:	89 81       	ldd	r24, Y+1	; 0x01
    5818:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    581a:	0f 90       	pop	r0
    581c:	0f 90       	pop	r0
    581e:	cf 91       	pop	r28
    5820:	df 91       	pop	r29
    5822:	08 95       	ret

00005824 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    5824:	df 93       	push	r29
    5826:	cf 93       	push	r28
    5828:	00 d0       	rcall	.+0      	; 0x582a <uxTaskResetEventItemValue+0x6>
    582a:	cd b7       	in	r28, 0x3d	; 61
    582c:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    582e:	e0 91 56 06 	lds	r30, 0x0656
    5832:	f0 91 57 06 	lds	r31, 0x0657
    5836:	84 85       	ldd	r24, Z+12	; 0x0c
    5838:	95 85       	ldd	r25, Z+13	; 0x0d
    583a:	9a 83       	std	Y+2, r25	; 0x02
    583c:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    583e:	a0 91 56 06 	lds	r26, 0x0656
    5842:	b0 91 57 06 	lds	r27, 0x0657
    5846:	e0 91 56 06 	lds	r30, 0x0656
    584a:	f0 91 57 06 	lds	r31, 0x0657
    584e:	86 89       	ldd	r24, Z+22	; 0x16
    5850:	28 2f       	mov	r18, r24
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	84 e0       	ldi	r24, 0x04	; 4
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	82 1b       	sub	r24, r18
    585a:	93 0b       	sbc	r25, r19
    585c:	1d 96       	adiw	r26, 0x0d	; 13
    585e:	9c 93       	st	X, r25
    5860:	8e 93       	st	-X, r24
    5862:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    5864:	89 81       	ldd	r24, Y+1	; 0x01
    5866:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
    586c:	cf 91       	pop	r28
    586e:	df 91       	pop	r29
    5870:	08 95       	ret

00005872 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    5872:	df 93       	push	r29
    5874:	cf 93       	push	r28
    5876:	cd b7       	in	r28, 0x3d	; 61
    5878:	de b7       	in	r29, 0x3e	; 62
    587a:	27 97       	sbiw	r28, 0x07	; 7
    587c:	0f b6       	in	r0, 0x3f	; 63
    587e:	f8 94       	cli
    5880:	de bf       	out	0x3e, r29	; 62
    5882:	0f be       	out	0x3f, r0	; 63
    5884:	cd bf       	out	0x3d, r28	; 61
    5886:	8d 83       	std	Y+5, r24	; 0x05
    5888:	7f 83       	std	Y+7, r23	; 0x07
    588a:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    588c:	0f b6       	in	r0, 0x3f	; 63
    588e:	f8 94       	cli
    5890:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    5892:	e0 91 56 06 	lds	r30, 0x0656
    5896:	f0 91 57 06 	lds	r31, 0x0657
    589a:	81 a1       	ldd	r24, Z+33	; 0x21
    589c:	92 a1       	ldd	r25, Z+34	; 0x22
    589e:	a3 a1       	ldd	r26, Z+35	; 0x23
    58a0:	b4 a1       	ldd	r27, Z+36	; 0x24
    58a2:	00 97       	sbiw	r24, 0x00	; 0
    58a4:	a1 05       	cpc	r26, r1
    58a6:	b1 05       	cpc	r27, r1
    58a8:	89 f4       	brne	.+34     	; 0x58cc <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    58aa:	e0 91 56 06 	lds	r30, 0x0656
    58ae:	f0 91 57 06 	lds	r31, 0x0657
    58b2:	81 e0       	ldi	r24, 0x01	; 1
    58b4:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    58b6:	8e 81       	ldd	r24, Y+6	; 0x06
    58b8:	9f 81       	ldd	r25, Y+7	; 0x07
    58ba:	00 97       	sbiw	r24, 0x00	; 0
    58bc:	39 f0       	breq	.+14     	; 0x58cc <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    58be:	8e 81       	ldd	r24, Y+6	; 0x06
    58c0:	9f 81       	ldd	r25, Y+7	; 0x07
    58c2:	61 e0       	ldi	r22, 0x01	; 1
    58c4:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    58c8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    58cc:	0f 90       	pop	r0
    58ce:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    58d0:	0f b6       	in	r0, 0x3f	; 63
    58d2:	f8 94       	cli
    58d4:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    58d6:	e0 91 56 06 	lds	r30, 0x0656
    58da:	f0 91 57 06 	lds	r31, 0x0657
    58de:	81 a1       	ldd	r24, Z+33	; 0x21
    58e0:	92 a1       	ldd	r25, Z+34	; 0x22
    58e2:	a3 a1       	ldd	r26, Z+35	; 0x23
    58e4:	b4 a1       	ldd	r27, Z+36	; 0x24
    58e6:	89 83       	std	Y+1, r24	; 0x01
    58e8:	9a 83       	std	Y+2, r25	; 0x02
    58ea:	ab 83       	std	Y+3, r26	; 0x03
    58ec:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    58ee:	89 81       	ldd	r24, Y+1	; 0x01
    58f0:	9a 81       	ldd	r25, Y+2	; 0x02
    58f2:	ab 81       	ldd	r26, Y+3	; 0x03
    58f4:	bc 81       	ldd	r27, Y+4	; 0x04
    58f6:	00 97       	sbiw	r24, 0x00	; 0
    58f8:	a1 05       	cpc	r26, r1
    58fa:	b1 05       	cpc	r27, r1
    58fc:	d9 f0       	breq	.+54     	; 0x5934 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    58fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5900:	88 23       	and	r24, r24
    5902:	49 f0       	breq	.+18     	; 0x5916 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    5904:	e0 91 56 06 	lds	r30, 0x0656
    5908:	f0 91 57 06 	lds	r31, 0x0657
    590c:	11 a2       	std	Z+33, r1	; 0x21
    590e:	12 a2       	std	Z+34, r1	; 0x22
    5910:	13 a2       	std	Z+35, r1	; 0x23
    5912:	14 a2       	std	Z+36, r1	; 0x24
    5914:	0f c0       	rjmp	.+30     	; 0x5934 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    5916:	e0 91 56 06 	lds	r30, 0x0656
    591a:	f0 91 57 06 	lds	r31, 0x0657
    591e:	89 81       	ldd	r24, Y+1	; 0x01
    5920:	9a 81       	ldd	r25, Y+2	; 0x02
    5922:	ab 81       	ldd	r26, Y+3	; 0x03
    5924:	bc 81       	ldd	r27, Y+4	; 0x04
    5926:	01 97       	sbiw	r24, 0x01	; 1
    5928:	a1 09       	sbc	r26, r1
    592a:	b1 09       	sbc	r27, r1
    592c:	81 a3       	std	Z+33, r24	; 0x21
    592e:	92 a3       	std	Z+34, r25	; 0x22
    5930:	a3 a3       	std	Z+35, r26	; 0x23
    5932:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5934:	e0 91 56 06 	lds	r30, 0x0656
    5938:	f0 91 57 06 	lds	r31, 0x0657
    593c:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    593e:	0f 90       	pop	r0
    5940:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    5942:	89 81       	ldd	r24, Y+1	; 0x01
    5944:	9a 81       	ldd	r25, Y+2	; 0x02
    5946:	ab 81       	ldd	r26, Y+3	; 0x03
    5948:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    594a:	bc 01       	movw	r22, r24
    594c:	cd 01       	movw	r24, r26
    594e:	27 96       	adiw	r28, 0x07	; 7
    5950:	0f b6       	in	r0, 0x3f	; 63
    5952:	f8 94       	cli
    5954:	de bf       	out	0x3e, r29	; 62
    5956:	0f be       	out	0x3f, r0	; 63
    5958:	cd bf       	out	0x3d, r28	; 61
    595a:	cf 91       	pop	r28
    595c:	df 91       	pop	r29
    595e:	08 95       	ret

00005960 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    5960:	ef 92       	push	r14
    5962:	ff 92       	push	r15
    5964:	0f 93       	push	r16
    5966:	1f 93       	push	r17
    5968:	df 93       	push	r29
    596a:	cf 93       	push	r28
    596c:	cd b7       	in	r28, 0x3d	; 61
    596e:	de b7       	in	r29, 0x3e	; 62
    5970:	2d 97       	sbiw	r28, 0x0d	; 13
    5972:	0f b6       	in	r0, 0x3f	; 63
    5974:	f8 94       	cli
    5976:	de bf       	out	0x3e, r29	; 62
    5978:	0f be       	out	0x3f, r0	; 63
    597a:	cd bf       	out	0x3d, r28	; 61
    597c:	6a 83       	std	Y+2, r22	; 0x02
    597e:	7b 83       	std	Y+3, r23	; 0x03
    5980:	8c 83       	std	Y+4, r24	; 0x04
    5982:	9d 83       	std	Y+5, r25	; 0x05
    5984:	2e 83       	std	Y+6, r18	; 0x06
    5986:	3f 83       	std	Y+7, r19	; 0x07
    5988:	48 87       	std	Y+8, r20	; 0x08
    598a:	59 87       	std	Y+9, r21	; 0x09
    598c:	1b 87       	std	Y+11, r17	; 0x0b
    598e:	0a 87       	std	Y+10, r16	; 0x0a
    5990:	fd 86       	std	Y+13, r15	; 0x0d
    5992:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    5994:	0f b6       	in	r0, 0x3f	; 63
    5996:	f8 94       	cli
    5998:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    599a:	e0 91 56 06 	lds	r30, 0x0656
    599e:	f0 91 57 06 	lds	r31, 0x0657
    59a2:	85 a1       	ldd	r24, Z+37	; 0x25
    59a4:	82 30       	cpi	r24, 0x02	; 2
    59a6:	49 f1       	breq	.+82     	; 0x59fa <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    59a8:	e0 91 56 06 	lds	r30, 0x0656
    59ac:	f0 91 57 06 	lds	r31, 0x0657
    59b0:	21 a1       	ldd	r18, Z+33	; 0x21
    59b2:	32 a1       	ldd	r19, Z+34	; 0x22
    59b4:	43 a1       	ldd	r20, Z+35	; 0x23
    59b6:	54 a1       	ldd	r21, Z+36	; 0x24
    59b8:	8a 81       	ldd	r24, Y+2	; 0x02
    59ba:	9b 81       	ldd	r25, Y+3	; 0x03
    59bc:	ac 81       	ldd	r26, Y+4	; 0x04
    59be:	bd 81       	ldd	r27, Y+5	; 0x05
    59c0:	80 95       	com	r24
    59c2:	90 95       	com	r25
    59c4:	a0 95       	com	r26
    59c6:	b0 95       	com	r27
    59c8:	82 23       	and	r24, r18
    59ca:	93 23       	and	r25, r19
    59cc:	a4 23       	and	r26, r20
    59ce:	b5 23       	and	r27, r21
    59d0:	81 a3       	std	Z+33, r24	; 0x21
    59d2:	92 a3       	std	Z+34, r25	; 0x22
    59d4:	a3 a3       	std	Z+35, r26	; 0x23
    59d6:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    59d8:	e0 91 56 06 	lds	r30, 0x0656
    59dc:	f0 91 57 06 	lds	r31, 0x0657
    59e0:	81 e0       	ldi	r24, 0x01	; 1
    59e2:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    59e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    59e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    59e8:	00 97       	sbiw	r24, 0x00	; 0
    59ea:	39 f0       	breq	.+14     	; 0x59fa <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    59ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    59ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    59f0:	61 e0       	ldi	r22, 0x01	; 1
    59f2:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    59f6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    59fa:	0f 90       	pop	r0
    59fc:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    59fe:	0f b6       	in	r0, 0x3f	; 63
    5a00:	f8 94       	cli
    5a02:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    5a04:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a06:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a08:	00 97       	sbiw	r24, 0x00	; 0
    5a0a:	71 f0       	breq	.+28     	; 0x5a28 <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    5a0c:	e0 91 56 06 	lds	r30, 0x0656
    5a10:	f0 91 57 06 	lds	r31, 0x0657
    5a14:	81 a1       	ldd	r24, Z+33	; 0x21
    5a16:	92 a1       	ldd	r25, Z+34	; 0x22
    5a18:	a3 a1       	ldd	r26, Z+35	; 0x23
    5a1a:	b4 a1       	ldd	r27, Z+36	; 0x24
    5a1c:	ea 85       	ldd	r30, Y+10	; 0x0a
    5a1e:	fb 85       	ldd	r31, Y+11	; 0x0b
    5a20:	80 83       	st	Z, r24
    5a22:	91 83       	std	Z+1, r25	; 0x01
    5a24:	a2 83       	std	Z+2, r26	; 0x02
    5a26:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    5a28:	e0 91 56 06 	lds	r30, 0x0656
    5a2c:	f0 91 57 06 	lds	r31, 0x0657
    5a30:	85 a1       	ldd	r24, Z+37	; 0x25
    5a32:	82 30       	cpi	r24, 0x02	; 2
    5a34:	11 f0       	breq	.+4      	; 0x5a3a <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    5a36:	19 82       	std	Y+1, r1	; 0x01
    5a38:	1a c0       	rjmp	.+52     	; 0x5a6e <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    5a3a:	e0 91 56 06 	lds	r30, 0x0656
    5a3e:	f0 91 57 06 	lds	r31, 0x0657
    5a42:	21 a1       	ldd	r18, Z+33	; 0x21
    5a44:	32 a1       	ldd	r19, Z+34	; 0x22
    5a46:	43 a1       	ldd	r20, Z+35	; 0x23
    5a48:	54 a1       	ldd	r21, Z+36	; 0x24
    5a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    5a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    5a4e:	a8 85       	ldd	r26, Y+8	; 0x08
    5a50:	b9 85       	ldd	r27, Y+9	; 0x09
    5a52:	80 95       	com	r24
    5a54:	90 95       	com	r25
    5a56:	a0 95       	com	r26
    5a58:	b0 95       	com	r27
    5a5a:	82 23       	and	r24, r18
    5a5c:	93 23       	and	r25, r19
    5a5e:	a4 23       	and	r26, r20
    5a60:	b5 23       	and	r27, r21
    5a62:	81 a3       	std	Z+33, r24	; 0x21
    5a64:	92 a3       	std	Z+34, r25	; 0x22
    5a66:	a3 a3       	std	Z+35, r26	; 0x23
    5a68:	b4 a3       	std	Z+36, r27	; 0x24
				xReturn = pdTRUE;
    5a6a:	81 e0       	ldi	r24, 0x01	; 1
    5a6c:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5a6e:	e0 91 56 06 	lds	r30, 0x0656
    5a72:	f0 91 57 06 	lds	r31, 0x0657
    5a76:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    5a78:	0f 90       	pop	r0
    5a7a:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5a7c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5a7e:	2d 96       	adiw	r28, 0x0d	; 13
    5a80:	0f b6       	in	r0, 0x3f	; 63
    5a82:	f8 94       	cli
    5a84:	de bf       	out	0x3e, r29	; 62
    5a86:	0f be       	out	0x3f, r0	; 63
    5a88:	cd bf       	out	0x3d, r28	; 61
    5a8a:	cf 91       	pop	r28
    5a8c:	df 91       	pop	r29
    5a8e:	1f 91       	pop	r17
    5a90:	0f 91       	pop	r16
    5a92:	ff 90       	pop	r15
    5a94:	ef 90       	pop	r14
    5a96:	08 95       	ret

00005a98 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    5a98:	0f 93       	push	r16
    5a9a:	1f 93       	push	r17
    5a9c:	df 93       	push	r29
    5a9e:	cf 93       	push	r28
    5aa0:	cd b7       	in	r28, 0x3d	; 61
    5aa2:	de b7       	in	r29, 0x3e	; 62
    5aa4:	2f 97       	sbiw	r28, 0x0f	; 15
    5aa6:	0f b6       	in	r0, 0x3f	; 63
    5aa8:	f8 94       	cli
    5aaa:	de bf       	out	0x3e, r29	; 62
    5aac:	0f be       	out	0x3f, r0	; 63
    5aae:	cd bf       	out	0x3d, r28	; 61
    5ab0:	9e 83       	std	Y+6, r25	; 0x06
    5ab2:	8d 83       	std	Y+5, r24	; 0x05
    5ab4:	4f 83       	std	Y+7, r20	; 0x07
    5ab6:	58 87       	std	Y+8, r21	; 0x08
    5ab8:	69 87       	std	Y+9, r22	; 0x09
    5aba:	7a 87       	std	Y+10, r23	; 0x0a
    5abc:	2b 87       	std	Y+11, r18	; 0x0b
    5abe:	1d 87       	std	Y+13, r17	; 0x0d
    5ac0:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
    5ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    5aca:	9c 83       	std	Y+4, r25	; 0x04
    5acc:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    5ace:	0f b6       	in	r0, 0x3f	; 63
    5ad0:	f8 94       	cli
    5ad2:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    5ad4:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ad6:	9d 85       	ldd	r25, Y+13	; 0x0d
    5ad8:	00 97       	sbiw	r24, 0x00	; 0
    5ada:	61 f0       	breq	.+24     	; 0x5af4 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5adc:	eb 81       	ldd	r30, Y+3	; 0x03
    5ade:	fc 81       	ldd	r31, Y+4	; 0x04
    5ae0:	81 a1       	ldd	r24, Z+33	; 0x21
    5ae2:	92 a1       	ldd	r25, Z+34	; 0x22
    5ae4:	a3 a1       	ldd	r26, Z+35	; 0x23
    5ae6:	b4 a1       	ldd	r27, Z+36	; 0x24
    5ae8:	ec 85       	ldd	r30, Y+12	; 0x0c
    5aea:	fd 85       	ldd	r31, Y+13	; 0x0d
    5aec:	80 83       	st	Z, r24
    5aee:	91 83       	std	Z+1, r25	; 0x01
    5af0:	a2 83       	std	Z+2, r26	; 0x02
    5af2:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5af4:	eb 81       	ldd	r30, Y+3	; 0x03
    5af6:	fc 81       	ldd	r31, Y+4	; 0x04
    5af8:	85 a1       	ldd	r24, Z+37	; 0x25
    5afa:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5afc:	eb 81       	ldd	r30, Y+3	; 0x03
    5afe:	fc 81       	ldd	r31, Y+4	; 0x04
    5b00:	82 e0       	ldi	r24, 0x02	; 2
    5b02:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    5b04:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b06:	28 2f       	mov	r18, r24
    5b08:	30 e0       	ldi	r19, 0x00	; 0
    5b0a:	3f 87       	std	Y+15, r19	; 0x0f
    5b0c:	2e 87       	std	Y+14, r18	; 0x0e
    5b0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b10:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b12:	82 30       	cpi	r24, 0x02	; 2
    5b14:	91 05       	cpc	r25, r1
    5b16:	59 f1       	breq	.+86     	; 0x5b6e <xTaskGenericNotify+0xd6>
    5b18:	2e 85       	ldd	r18, Y+14	; 0x0e
    5b1a:	3f 85       	ldd	r19, Y+15	; 0x0f
    5b1c:	23 30       	cpi	r18, 0x03	; 3
    5b1e:	31 05       	cpc	r19, r1
    5b20:	34 f4       	brge	.+12     	; 0x5b2e <xTaskGenericNotify+0x96>
    5b22:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b24:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b26:	81 30       	cpi	r24, 0x01	; 1
    5b28:	91 05       	cpc	r25, r1
    5b2a:	61 f0       	breq	.+24     	; 0x5b44 <xTaskGenericNotify+0xac>
    5b2c:	4a c0       	rjmp	.+148    	; 0x5bc2 <xTaskGenericNotify+0x12a>
    5b2e:	2e 85       	ldd	r18, Y+14	; 0x0e
    5b30:	3f 85       	ldd	r19, Y+15	; 0x0f
    5b32:	23 30       	cpi	r18, 0x03	; 3
    5b34:	31 05       	cpc	r19, r1
    5b36:	59 f1       	breq	.+86     	; 0x5b8e <xTaskGenericNotify+0xf6>
    5b38:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b3c:	84 30       	cpi	r24, 0x04	; 4
    5b3e:	91 05       	cpc	r25, r1
    5b40:	89 f1       	breq	.+98     	; 0x5ba4 <xTaskGenericNotify+0x10c>
    5b42:	3f c0       	rjmp	.+126    	; 0x5bc2 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5b44:	eb 81       	ldd	r30, Y+3	; 0x03
    5b46:	fc 81       	ldd	r31, Y+4	; 0x04
    5b48:	21 a1       	ldd	r18, Z+33	; 0x21
    5b4a:	32 a1       	ldd	r19, Z+34	; 0x22
    5b4c:	43 a1       	ldd	r20, Z+35	; 0x23
    5b4e:	54 a1       	ldd	r21, Z+36	; 0x24
    5b50:	8f 81       	ldd	r24, Y+7	; 0x07
    5b52:	98 85       	ldd	r25, Y+8	; 0x08
    5b54:	a9 85       	ldd	r26, Y+9	; 0x09
    5b56:	ba 85       	ldd	r27, Y+10	; 0x0a
    5b58:	82 2b       	or	r24, r18
    5b5a:	93 2b       	or	r25, r19
    5b5c:	a4 2b       	or	r26, r20
    5b5e:	b5 2b       	or	r27, r21
    5b60:	eb 81       	ldd	r30, Y+3	; 0x03
    5b62:	fc 81       	ldd	r31, Y+4	; 0x04
    5b64:	81 a3       	std	Z+33, r24	; 0x21
    5b66:	92 a3       	std	Z+34, r25	; 0x22
    5b68:	a3 a3       	std	Z+35, r26	; 0x23
    5b6a:	b4 a3       	std	Z+36, r27	; 0x24
    5b6c:	2a c0       	rjmp	.+84     	; 0x5bc2 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    5b6e:	eb 81       	ldd	r30, Y+3	; 0x03
    5b70:	fc 81       	ldd	r31, Y+4	; 0x04
    5b72:	81 a1       	ldd	r24, Z+33	; 0x21
    5b74:	92 a1       	ldd	r25, Z+34	; 0x22
    5b76:	a3 a1       	ldd	r26, Z+35	; 0x23
    5b78:	b4 a1       	ldd	r27, Z+36	; 0x24
    5b7a:	01 96       	adiw	r24, 0x01	; 1
    5b7c:	a1 1d       	adc	r26, r1
    5b7e:	b1 1d       	adc	r27, r1
    5b80:	eb 81       	ldd	r30, Y+3	; 0x03
    5b82:	fc 81       	ldd	r31, Y+4	; 0x04
    5b84:	81 a3       	std	Z+33, r24	; 0x21
    5b86:	92 a3       	std	Z+34, r25	; 0x22
    5b88:	a3 a3       	std	Z+35, r26	; 0x23
    5b8a:	b4 a3       	std	Z+36, r27	; 0x24
    5b8c:	1a c0       	rjmp	.+52     	; 0x5bc2 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    5b8e:	eb 81       	ldd	r30, Y+3	; 0x03
    5b90:	fc 81       	ldd	r31, Y+4	; 0x04
    5b92:	8f 81       	ldd	r24, Y+7	; 0x07
    5b94:	98 85       	ldd	r25, Y+8	; 0x08
    5b96:	a9 85       	ldd	r26, Y+9	; 0x09
    5b98:	ba 85       	ldd	r27, Y+10	; 0x0a
    5b9a:	81 a3       	std	Z+33, r24	; 0x21
    5b9c:	92 a3       	std	Z+34, r25	; 0x22
    5b9e:	a3 a3       	std	Z+35, r26	; 0x23
    5ba0:	b4 a3       	std	Z+36, r27	; 0x24
    5ba2:	0f c0       	rjmp	.+30     	; 0x5bc2 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    5ba4:	89 81       	ldd	r24, Y+1	; 0x01
    5ba6:	82 30       	cpi	r24, 0x02	; 2
    5ba8:	59 f0       	breq	.+22     	; 0x5bc0 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    5baa:	eb 81       	ldd	r30, Y+3	; 0x03
    5bac:	fc 81       	ldd	r31, Y+4	; 0x04
    5bae:	8f 81       	ldd	r24, Y+7	; 0x07
    5bb0:	98 85       	ldd	r25, Y+8	; 0x08
    5bb2:	a9 85       	ldd	r26, Y+9	; 0x09
    5bb4:	ba 85       	ldd	r27, Y+10	; 0x0a
    5bb6:	81 a3       	std	Z+33, r24	; 0x21
    5bb8:	92 a3       	std	Z+34, r25	; 0x22
    5bba:	a3 a3       	std	Z+35, r26	; 0x23
    5bbc:	b4 a3       	std	Z+36, r27	; 0x24
    5bbe:	01 c0       	rjmp	.+2      	; 0x5bc2 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    5bc0:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    5bc2:	89 81       	ldd	r24, Y+1	; 0x01
    5bc4:	81 30       	cpi	r24, 0x01	; 1
    5bc6:	b9 f5       	brne	.+110    	; 0x5c36 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    5bca:	9c 81       	ldd	r25, Y+4	; 0x04
    5bcc:	02 96       	adiw	r24, 0x02	; 2
    5bce:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    5bd2:	eb 81       	ldd	r30, Y+3	; 0x03
    5bd4:	fc 81       	ldd	r31, Y+4	; 0x04
    5bd6:	96 89       	ldd	r25, Z+22	; 0x16
    5bd8:	80 91 5c 06 	lds	r24, 0x065C
    5bdc:	89 17       	cp	r24, r25
    5bde:	28 f4       	brcc	.+10     	; 0x5bea <xTaskGenericNotify+0x152>
    5be0:	eb 81       	ldd	r30, Y+3	; 0x03
    5be2:	fc 81       	ldd	r31, Y+4	; 0x04
    5be4:	86 89       	ldd	r24, Z+22	; 0x16
    5be6:	80 93 5c 06 	sts	0x065C, r24
    5bea:	eb 81       	ldd	r30, Y+3	; 0x03
    5bec:	fc 81       	ldd	r31, Y+4	; 0x04
    5bee:	86 89       	ldd	r24, Z+22	; 0x16
    5bf0:	28 2f       	mov	r18, r24
    5bf2:	30 e0       	ldi	r19, 0x00	; 0
    5bf4:	c9 01       	movw	r24, r18
    5bf6:	88 0f       	add	r24, r24
    5bf8:	99 1f       	adc	r25, r25
    5bfa:	88 0f       	add	r24, r24
    5bfc:	99 1f       	adc	r25, r25
    5bfe:	88 0f       	add	r24, r24
    5c00:	99 1f       	adc	r25, r25
    5c02:	82 0f       	add	r24, r18
    5c04:	93 1f       	adc	r25, r19
    5c06:	ac 01       	movw	r20, r24
    5c08:	49 59       	subi	r20, 0x99	; 153
    5c0a:	59 4f       	sbci	r21, 0xF9	; 249
    5c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c10:	9c 01       	movw	r18, r24
    5c12:	2e 5f       	subi	r18, 0xFE	; 254
    5c14:	3f 4f       	sbci	r19, 0xFF	; 255
    5c16:	ca 01       	movw	r24, r20
    5c18:	b9 01       	movw	r22, r18
    5c1a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    5c20:	fc 81       	ldd	r31, Y+4	; 0x04
    5c22:	96 89       	ldd	r25, Z+22	; 0x16
    5c24:	e0 91 56 06 	lds	r30, 0x0656
    5c28:	f0 91 57 06 	lds	r31, 0x0657
    5c2c:	86 89       	ldd	r24, Z+22	; 0x16
    5c2e:	89 17       	cp	r24, r25
    5c30:	10 f4       	brcc	.+4      	; 0x5c36 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    5c32:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    5c36:	0f 90       	pop	r0
    5c38:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5c3a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    5c3c:	2f 96       	adiw	r28, 0x0f	; 15
    5c3e:	0f b6       	in	r0, 0x3f	; 63
    5c40:	f8 94       	cli
    5c42:	de bf       	out	0x3e, r29	; 62
    5c44:	0f be       	out	0x3f, r0	; 63
    5c46:	cd bf       	out	0x3d, r28	; 61
    5c48:	cf 91       	pop	r28
    5c4a:	df 91       	pop	r29
    5c4c:	1f 91       	pop	r17
    5c4e:	0f 91       	pop	r16
    5c50:	08 95       	ret

00005c52 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    5c52:	ef 92       	push	r14
    5c54:	ff 92       	push	r15
    5c56:	0f 93       	push	r16
    5c58:	1f 93       	push	r17
    5c5a:	df 93       	push	r29
    5c5c:	cf 93       	push	r28
    5c5e:	cd b7       	in	r28, 0x3d	; 61
    5c60:	de b7       	in	r29, 0x3e	; 62
    5c62:	62 97       	sbiw	r28, 0x12	; 18
    5c64:	0f b6       	in	r0, 0x3f	; 63
    5c66:	f8 94       	cli
    5c68:	de bf       	out	0x3e, r29	; 62
    5c6a:	0f be       	out	0x3f, r0	; 63
    5c6c:	cd bf       	out	0x3d, r28	; 61
    5c6e:	9f 83       	std	Y+7, r25	; 0x07
    5c70:	8e 83       	std	Y+6, r24	; 0x06
    5c72:	48 87       	std	Y+8, r20	; 0x08
    5c74:	59 87       	std	Y+9, r21	; 0x09
    5c76:	6a 87       	std	Y+10, r22	; 0x0a
    5c78:	7b 87       	std	Y+11, r23	; 0x0b
    5c7a:	2c 87       	std	Y+12, r18	; 0x0c
    5c7c:	1e 87       	std	Y+14, r17	; 0x0e
    5c7e:	0d 87       	std	Y+13, r16	; 0x0d
    5c80:	f8 8a       	std	Y+16, r15	; 0x10
    5c82:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    5c84:	81 e0       	ldi	r24, 0x01	; 1
    5c86:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    5c88:	8e 81       	ldd	r24, Y+6	; 0x06
    5c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    5c8c:	9d 83       	std	Y+5, r25	; 0x05
    5c8e:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5c90:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    5c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c96:	00 97       	sbiw	r24, 0x00	; 0
    5c98:	61 f0       	breq	.+24     	; 0x5cb2 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5c9a:	ec 81       	ldd	r30, Y+4	; 0x04
    5c9c:	fd 81       	ldd	r31, Y+5	; 0x05
    5c9e:	81 a1       	ldd	r24, Z+33	; 0x21
    5ca0:	92 a1       	ldd	r25, Z+34	; 0x22
    5ca2:	a3 a1       	ldd	r26, Z+35	; 0x23
    5ca4:	b4 a1       	ldd	r27, Z+36	; 0x24
    5ca6:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ca8:	fe 85       	ldd	r31, Y+14	; 0x0e
    5caa:	80 83       	st	Z, r24
    5cac:	91 83       	std	Z+1, r25	; 0x01
    5cae:	a2 83       	std	Z+2, r26	; 0x02
    5cb0:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5cb2:	ec 81       	ldd	r30, Y+4	; 0x04
    5cb4:	fd 81       	ldd	r31, Y+5	; 0x05
    5cb6:	85 a1       	ldd	r24, Z+37	; 0x25
    5cb8:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5cba:	ec 81       	ldd	r30, Y+4	; 0x04
    5cbc:	fd 81       	ldd	r31, Y+5	; 0x05
    5cbe:	82 e0       	ldi	r24, 0x02	; 2
    5cc0:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    5cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
    5cc4:	28 2f       	mov	r18, r24
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	3a 8b       	std	Y+18, r19	; 0x12
    5cca:	29 8b       	std	Y+17, r18	; 0x11
    5ccc:	89 89       	ldd	r24, Y+17	; 0x11
    5cce:	9a 89       	ldd	r25, Y+18	; 0x12
    5cd0:	82 30       	cpi	r24, 0x02	; 2
    5cd2:	91 05       	cpc	r25, r1
    5cd4:	59 f1       	breq	.+86     	; 0x5d2c <xTaskGenericNotifyFromISR+0xda>
    5cd6:	29 89       	ldd	r18, Y+17	; 0x11
    5cd8:	3a 89       	ldd	r19, Y+18	; 0x12
    5cda:	23 30       	cpi	r18, 0x03	; 3
    5cdc:	31 05       	cpc	r19, r1
    5cde:	34 f4       	brge	.+12     	; 0x5cec <xTaskGenericNotifyFromISR+0x9a>
    5ce0:	89 89       	ldd	r24, Y+17	; 0x11
    5ce2:	9a 89       	ldd	r25, Y+18	; 0x12
    5ce4:	81 30       	cpi	r24, 0x01	; 1
    5ce6:	91 05       	cpc	r25, r1
    5ce8:	61 f0       	breq	.+24     	; 0x5d02 <xTaskGenericNotifyFromISR+0xb0>
    5cea:	4a c0       	rjmp	.+148    	; 0x5d80 <xTaskGenericNotifyFromISR+0x12e>
    5cec:	29 89       	ldd	r18, Y+17	; 0x11
    5cee:	3a 89       	ldd	r19, Y+18	; 0x12
    5cf0:	23 30       	cpi	r18, 0x03	; 3
    5cf2:	31 05       	cpc	r19, r1
    5cf4:	59 f1       	breq	.+86     	; 0x5d4c <xTaskGenericNotifyFromISR+0xfa>
    5cf6:	89 89       	ldd	r24, Y+17	; 0x11
    5cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    5cfa:	84 30       	cpi	r24, 0x04	; 4
    5cfc:	91 05       	cpc	r25, r1
    5cfe:	89 f1       	breq	.+98     	; 0x5d62 <xTaskGenericNotifyFromISR+0x110>
    5d00:	3f c0       	rjmp	.+126    	; 0x5d80 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5d02:	ec 81       	ldd	r30, Y+4	; 0x04
    5d04:	fd 81       	ldd	r31, Y+5	; 0x05
    5d06:	21 a1       	ldd	r18, Z+33	; 0x21
    5d08:	32 a1       	ldd	r19, Z+34	; 0x22
    5d0a:	43 a1       	ldd	r20, Z+35	; 0x23
    5d0c:	54 a1       	ldd	r21, Z+36	; 0x24
    5d0e:	88 85       	ldd	r24, Y+8	; 0x08
    5d10:	99 85       	ldd	r25, Y+9	; 0x09
    5d12:	aa 85       	ldd	r26, Y+10	; 0x0a
    5d14:	bb 85       	ldd	r27, Y+11	; 0x0b
    5d16:	82 2b       	or	r24, r18
    5d18:	93 2b       	or	r25, r19
    5d1a:	a4 2b       	or	r26, r20
    5d1c:	b5 2b       	or	r27, r21
    5d1e:	ec 81       	ldd	r30, Y+4	; 0x04
    5d20:	fd 81       	ldd	r31, Y+5	; 0x05
    5d22:	81 a3       	std	Z+33, r24	; 0x21
    5d24:	92 a3       	std	Z+34, r25	; 0x22
    5d26:	a3 a3       	std	Z+35, r26	; 0x23
    5d28:	b4 a3       	std	Z+36, r27	; 0x24
    5d2a:	2a c0       	rjmp	.+84     	; 0x5d80 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    5d2c:	ec 81       	ldd	r30, Y+4	; 0x04
    5d2e:	fd 81       	ldd	r31, Y+5	; 0x05
    5d30:	81 a1       	ldd	r24, Z+33	; 0x21
    5d32:	92 a1       	ldd	r25, Z+34	; 0x22
    5d34:	a3 a1       	ldd	r26, Z+35	; 0x23
    5d36:	b4 a1       	ldd	r27, Z+36	; 0x24
    5d38:	01 96       	adiw	r24, 0x01	; 1
    5d3a:	a1 1d       	adc	r26, r1
    5d3c:	b1 1d       	adc	r27, r1
    5d3e:	ec 81       	ldd	r30, Y+4	; 0x04
    5d40:	fd 81       	ldd	r31, Y+5	; 0x05
    5d42:	81 a3       	std	Z+33, r24	; 0x21
    5d44:	92 a3       	std	Z+34, r25	; 0x22
    5d46:	a3 a3       	std	Z+35, r26	; 0x23
    5d48:	b4 a3       	std	Z+36, r27	; 0x24
    5d4a:	1a c0       	rjmp	.+52     	; 0x5d80 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    5d4c:	ec 81       	ldd	r30, Y+4	; 0x04
    5d4e:	fd 81       	ldd	r31, Y+5	; 0x05
    5d50:	88 85       	ldd	r24, Y+8	; 0x08
    5d52:	99 85       	ldd	r25, Y+9	; 0x09
    5d54:	aa 85       	ldd	r26, Y+10	; 0x0a
    5d56:	bb 85       	ldd	r27, Y+11	; 0x0b
    5d58:	81 a3       	std	Z+33, r24	; 0x21
    5d5a:	92 a3       	std	Z+34, r25	; 0x22
    5d5c:	a3 a3       	std	Z+35, r26	; 0x23
    5d5e:	b4 a3       	std	Z+36, r27	; 0x24
    5d60:	0f c0       	rjmp	.+30     	; 0x5d80 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    5d62:	8b 81       	ldd	r24, Y+3	; 0x03
    5d64:	82 30       	cpi	r24, 0x02	; 2
    5d66:	59 f0       	breq	.+22     	; 0x5d7e <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    5d68:	ec 81       	ldd	r30, Y+4	; 0x04
    5d6a:	fd 81       	ldd	r31, Y+5	; 0x05
    5d6c:	88 85       	ldd	r24, Y+8	; 0x08
    5d6e:	99 85       	ldd	r25, Y+9	; 0x09
    5d70:	aa 85       	ldd	r26, Y+10	; 0x0a
    5d72:	bb 85       	ldd	r27, Y+11	; 0x0b
    5d74:	81 a3       	std	Z+33, r24	; 0x21
    5d76:	92 a3       	std	Z+34, r25	; 0x22
    5d78:	a3 a3       	std	Z+35, r26	; 0x23
    5d7a:	b4 a3       	std	Z+36, r27	; 0x24
    5d7c:	01 c0       	rjmp	.+2      	; 0x5d80 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    5d7e:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    5d80:	8b 81       	ldd	r24, Y+3	; 0x03
    5d82:	81 30       	cpi	r24, 0x01	; 1
    5d84:	09 f0       	breq	.+2      	; 0x5d88 <xTaskGenericNotifyFromISR+0x136>
    5d86:	4f c0       	rjmp	.+158    	; 0x5e26 <xTaskGenericNotifyFromISR+0x1d4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5d88:	80 91 66 06 	lds	r24, 0x0666
    5d8c:	88 23       	and	r24, r24
    5d8e:	61 f5       	brne	.+88     	; 0x5de8 <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5d90:	8c 81       	ldd	r24, Y+4	; 0x04
    5d92:	9d 81       	ldd	r25, Y+5	; 0x05
    5d94:	02 96       	adiw	r24, 0x02	; 2
    5d96:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5d9a:	ec 81       	ldd	r30, Y+4	; 0x04
    5d9c:	fd 81       	ldd	r31, Y+5	; 0x05
    5d9e:	96 89       	ldd	r25, Z+22	; 0x16
    5da0:	80 91 5c 06 	lds	r24, 0x065C
    5da4:	89 17       	cp	r24, r25
    5da6:	28 f4       	brcc	.+10     	; 0x5db2 <xTaskGenericNotifyFromISR+0x160>
    5da8:	ec 81       	ldd	r30, Y+4	; 0x04
    5daa:	fd 81       	ldd	r31, Y+5	; 0x05
    5dac:	86 89       	ldd	r24, Z+22	; 0x16
    5dae:	80 93 5c 06 	sts	0x065C, r24
    5db2:	ec 81       	ldd	r30, Y+4	; 0x04
    5db4:	fd 81       	ldd	r31, Y+5	; 0x05
    5db6:	86 89       	ldd	r24, Z+22	; 0x16
    5db8:	28 2f       	mov	r18, r24
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	c9 01       	movw	r24, r18
    5dbe:	88 0f       	add	r24, r24
    5dc0:	99 1f       	adc	r25, r25
    5dc2:	88 0f       	add	r24, r24
    5dc4:	99 1f       	adc	r25, r25
    5dc6:	88 0f       	add	r24, r24
    5dc8:	99 1f       	adc	r25, r25
    5dca:	82 0f       	add	r24, r18
    5dcc:	93 1f       	adc	r25, r19
    5dce:	ac 01       	movw	r20, r24
    5dd0:	49 59       	subi	r20, 0x99	; 153
    5dd2:	59 4f       	sbci	r21, 0xF9	; 249
    5dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    5dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    5dd8:	9c 01       	movw	r18, r24
    5dda:	2e 5f       	subi	r18, 0xFE	; 254
    5ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    5dde:	ca 01       	movw	r24, r20
    5de0:	b9 01       	movw	r22, r18
    5de2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
    5de6:	0a c0       	rjmp	.+20     	; 0x5dfc <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5de8:	8c 81       	ldd	r24, Y+4	; 0x04
    5dea:	9d 81       	ldd	r25, Y+5	; 0x05
    5dec:	9c 01       	movw	r18, r24
    5dee:	24 5f       	subi	r18, 0xF4	; 244
    5df0:	3f 4f       	sbci	r19, 0xFF	; 255
    5df2:	81 ea       	ldi	r24, 0xA1	; 161
    5df4:	96 e0       	ldi	r25, 0x06	; 6
    5df6:	b9 01       	movw	r22, r18
    5df8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5dfc:	ec 81       	ldd	r30, Y+4	; 0x04
    5dfe:	fd 81       	ldd	r31, Y+5	; 0x05
    5e00:	96 89       	ldd	r25, Z+22	; 0x16
    5e02:	e0 91 56 06 	lds	r30, 0x0656
    5e06:	f0 91 57 06 	lds	r31, 0x0657
    5e0a:	86 89       	ldd	r24, Z+22	; 0x16
    5e0c:	89 17       	cp	r24, r25
    5e0e:	58 f4       	brcc	.+22     	; 0x5e26 <xTaskGenericNotifyFromISR+0x1d4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    5e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e12:	98 89       	ldd	r25, Y+16	; 0x10
    5e14:	00 97       	sbiw	r24, 0x00	; 0
    5e16:	21 f0       	breq	.+8      	; 0x5e20 <xTaskGenericNotifyFromISR+0x1ce>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    5e18:	ef 85       	ldd	r30, Y+15	; 0x0f
    5e1a:	f8 89       	ldd	r31, Y+16	; 0x10
    5e1c:	81 e0       	ldi	r24, 0x01	; 1
    5e1e:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    5e20:	81 e0       	ldi	r24, 0x01	; 1
    5e22:	80 93 5f 06 	sts	0x065F, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    5e26:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    5e28:	62 96       	adiw	r28, 0x12	; 18
    5e2a:	0f b6       	in	r0, 0x3f	; 63
    5e2c:	f8 94       	cli
    5e2e:	de bf       	out	0x3e, r29	; 62
    5e30:	0f be       	out	0x3f, r0	; 63
    5e32:	cd bf       	out	0x3d, r28	; 61
    5e34:	cf 91       	pop	r28
    5e36:	df 91       	pop	r29
    5e38:	1f 91       	pop	r17
    5e3a:	0f 91       	pop	r16
    5e3c:	ff 90       	pop	r15
    5e3e:	ef 90       	pop	r14
    5e40:	08 95       	ret

00005e42 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    5e42:	df 93       	push	r29
    5e44:	cf 93       	push	r28
    5e46:	cd b7       	in	r28, 0x3d	; 61
    5e48:	de b7       	in	r29, 0x3e	; 62
    5e4a:	28 97       	sbiw	r28, 0x08	; 8
    5e4c:	0f b6       	in	r0, 0x3f	; 63
    5e4e:	f8 94       	cli
    5e50:	de bf       	out	0x3e, r29	; 62
    5e52:	0f be       	out	0x3f, r0	; 63
    5e54:	cd bf       	out	0x3d, r28	; 61
    5e56:	9e 83       	std	Y+6, r25	; 0x06
    5e58:	8d 83       	std	Y+5, r24	; 0x05
    5e5a:	78 87       	std	Y+8, r23	; 0x08
    5e5c:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    5e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e60:	9e 81       	ldd	r25, Y+6	; 0x06
    5e62:	9c 83       	std	Y+4, r25	; 0x04
    5e64:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5e66:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5e68:	eb 81       	ldd	r30, Y+3	; 0x03
    5e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    5e6c:	85 a1       	ldd	r24, Z+37	; 0x25
    5e6e:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5e70:	eb 81       	ldd	r30, Y+3	; 0x03
    5e72:	fc 81       	ldd	r31, Y+4	; 0x04
    5e74:	82 e0       	ldi	r24, 0x02	; 2
    5e76:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    5e78:	eb 81       	ldd	r30, Y+3	; 0x03
    5e7a:	fc 81       	ldd	r31, Y+4	; 0x04
    5e7c:	81 a1       	ldd	r24, Z+33	; 0x21
    5e7e:	92 a1       	ldd	r25, Z+34	; 0x22
    5e80:	a3 a1       	ldd	r26, Z+35	; 0x23
    5e82:	b4 a1       	ldd	r27, Z+36	; 0x24
    5e84:	01 96       	adiw	r24, 0x01	; 1
    5e86:	a1 1d       	adc	r26, r1
    5e88:	b1 1d       	adc	r27, r1
    5e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    5e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    5e8e:	81 a3       	std	Z+33, r24	; 0x21
    5e90:	92 a3       	std	Z+34, r25	; 0x22
    5e92:	a3 a3       	std	Z+35, r26	; 0x23
    5e94:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    5e96:	8a 81       	ldd	r24, Y+2	; 0x02
    5e98:	81 30       	cpi	r24, 0x01	; 1
    5e9a:	09 f0       	breq	.+2      	; 0x5e9e <vTaskNotifyGiveFromISR+0x5c>
    5e9c:	4f c0       	rjmp	.+158    	; 0x5f3c <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5e9e:	80 91 66 06 	lds	r24, 0x0666
    5ea2:	88 23       	and	r24, r24
    5ea4:	61 f5       	brne	.+88     	; 0x5efe <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    5eaa:	02 96       	adiw	r24, 0x02	; 2
    5eac:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    5eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    5eb4:	96 89       	ldd	r25, Z+22	; 0x16
    5eb6:	80 91 5c 06 	lds	r24, 0x065C
    5eba:	89 17       	cp	r24, r25
    5ebc:	28 f4       	brcc	.+10     	; 0x5ec8 <vTaskNotifyGiveFromISR+0x86>
    5ebe:	eb 81       	ldd	r30, Y+3	; 0x03
    5ec0:	fc 81       	ldd	r31, Y+4	; 0x04
    5ec2:	86 89       	ldd	r24, Z+22	; 0x16
    5ec4:	80 93 5c 06 	sts	0x065C, r24
    5ec8:	eb 81       	ldd	r30, Y+3	; 0x03
    5eca:	fc 81       	ldd	r31, Y+4	; 0x04
    5ecc:	86 89       	ldd	r24, Z+22	; 0x16
    5ece:	28 2f       	mov	r18, r24
    5ed0:	30 e0       	ldi	r19, 0x00	; 0
    5ed2:	c9 01       	movw	r24, r18
    5ed4:	88 0f       	add	r24, r24
    5ed6:	99 1f       	adc	r25, r25
    5ed8:	88 0f       	add	r24, r24
    5eda:	99 1f       	adc	r25, r25
    5edc:	88 0f       	add	r24, r24
    5ede:	99 1f       	adc	r25, r25
    5ee0:	82 0f       	add	r24, r18
    5ee2:	93 1f       	adc	r25, r19
    5ee4:	ac 01       	movw	r20, r24
    5ee6:	49 59       	subi	r20, 0x99	; 153
    5ee8:	59 4f       	sbci	r21, 0xF9	; 249
    5eea:	8b 81       	ldd	r24, Y+3	; 0x03
    5eec:	9c 81       	ldd	r25, Y+4	; 0x04
    5eee:	9c 01       	movw	r18, r24
    5ef0:	2e 5f       	subi	r18, 0xFE	; 254
    5ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef4:	ca 01       	movw	r24, r20
    5ef6:	b9 01       	movw	r22, r18
    5ef8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
    5efc:	0a c0       	rjmp	.+20     	; 0x5f12 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5efe:	8b 81       	ldd	r24, Y+3	; 0x03
    5f00:	9c 81       	ldd	r25, Y+4	; 0x04
    5f02:	9c 01       	movw	r18, r24
    5f04:	24 5f       	subi	r18, 0xF4	; 244
    5f06:	3f 4f       	sbci	r19, 0xFF	; 255
    5f08:	81 ea       	ldi	r24, 0xA1	; 161
    5f0a:	96 e0       	ldi	r25, 0x06	; 6
    5f0c:	b9 01       	movw	r22, r18
    5f0e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5f12:	eb 81       	ldd	r30, Y+3	; 0x03
    5f14:	fc 81       	ldd	r31, Y+4	; 0x04
    5f16:	96 89       	ldd	r25, Z+22	; 0x16
    5f18:	e0 91 56 06 	lds	r30, 0x0656
    5f1c:	f0 91 57 06 	lds	r31, 0x0657
    5f20:	86 89       	ldd	r24, Z+22	; 0x16
    5f22:	89 17       	cp	r24, r25
    5f24:	58 f4       	brcc	.+22     	; 0x5f3c <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    5f26:	8f 81       	ldd	r24, Y+7	; 0x07
    5f28:	98 85       	ldd	r25, Y+8	; 0x08
    5f2a:	00 97       	sbiw	r24, 0x00	; 0
    5f2c:	21 f0       	breq	.+8      	; 0x5f36 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    5f2e:	ef 81       	ldd	r30, Y+7	; 0x07
    5f30:	f8 85       	ldd	r31, Y+8	; 0x08
    5f32:	81 e0       	ldi	r24, 0x01	; 1
    5f34:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    5f36:	81 e0       	ldi	r24, 0x01	; 1
    5f38:	80 93 5f 06 	sts	0x065F, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    5f3c:	28 96       	adiw	r28, 0x08	; 8
    5f3e:	0f b6       	in	r0, 0x3f	; 63
    5f40:	f8 94       	cli
    5f42:	de bf       	out	0x3e, r29	; 62
    5f44:	0f be       	out	0x3f, r0	; 63
    5f46:	cd bf       	out	0x3d, r28	; 61
    5f48:	cf 91       	pop	r28
    5f4a:	df 91       	pop	r29
    5f4c:	08 95       	ret

00005f4e <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    5f4e:	df 93       	push	r29
    5f50:	cf 93       	push	r28
    5f52:	cd b7       	in	r28, 0x3d	; 61
    5f54:	de b7       	in	r29, 0x3e	; 62
    5f56:	27 97       	sbiw	r28, 0x07	; 7
    5f58:	0f b6       	in	r0, 0x3f	; 63
    5f5a:	f8 94       	cli
    5f5c:	de bf       	out	0x3e, r29	; 62
    5f5e:	0f be       	out	0x3f, r0	; 63
    5f60:	cd bf       	out	0x3d, r28	; 61
    5f62:	9d 83       	std	Y+5, r25	; 0x05
    5f64:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    5f66:	8c 81       	ldd	r24, Y+4	; 0x04
    5f68:	9d 81       	ldd	r25, Y+5	; 0x05
    5f6a:	00 97       	sbiw	r24, 0x00	; 0
    5f6c:	39 f4       	brne	.+14     	; 0x5f7c <xTaskNotifyStateClear+0x2e>
    5f6e:	80 91 56 06 	lds	r24, 0x0656
    5f72:	90 91 57 06 	lds	r25, 0x0657
    5f76:	9f 83       	std	Y+7, r25	; 0x07
    5f78:	8e 83       	std	Y+6, r24	; 0x06
    5f7a:	04 c0       	rjmp	.+8      	; 0x5f84 <xTaskNotifyStateClear+0x36>
    5f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    5f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    5f80:	9f 83       	std	Y+7, r25	; 0x07
    5f82:	8e 83       	std	Y+6, r24	; 0x06
    5f84:	8e 81       	ldd	r24, Y+6	; 0x06
    5f86:	9f 81       	ldd	r25, Y+7	; 0x07
    5f88:	9b 83       	std	Y+3, r25	; 0x03
    5f8a:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    5f8c:	0f b6       	in	r0, 0x3f	; 63
    5f8e:	f8 94       	cli
    5f90:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    5f92:	ea 81       	ldd	r30, Y+2	; 0x02
    5f94:	fb 81       	ldd	r31, Y+3	; 0x03
    5f96:	85 a1       	ldd	r24, Z+37	; 0x25
    5f98:	82 30       	cpi	r24, 0x02	; 2
    5f9a:	31 f4       	brne	.+12     	; 0x5fa8 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5f9c:	ea 81       	ldd	r30, Y+2	; 0x02
    5f9e:	fb 81       	ldd	r31, Y+3	; 0x03
    5fa0:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    5fa2:	81 e0       	ldi	r24, 0x01	; 1
    5fa4:	89 83       	std	Y+1, r24	; 0x01
    5fa6:	01 c0       	rjmp	.+2      	; 0x5faa <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    5fa8:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    5faa:	0f 90       	pop	r0
    5fac:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5fae:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5fb0:	27 96       	adiw	r28, 0x07	; 7
    5fb2:	0f b6       	in	r0, 0x3f	; 63
    5fb4:	f8 94       	cli
    5fb6:	de bf       	out	0x3e, r29	; 62
    5fb8:	0f be       	out	0x3f, r0	; 63
    5fba:	cd bf       	out	0x3d, r28	; 61
    5fbc:	cf 91       	pop	r28
    5fbe:	df 91       	pop	r29
    5fc0:	08 95       	ret

00005fc2 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    5fc2:	df 93       	push	r29
    5fc4:	cf 93       	push	r28
    5fc6:	cd b7       	in	r28, 0x3d	; 61
    5fc8:	de b7       	in	r29, 0x3e	; 62
    5fca:	27 97       	sbiw	r28, 0x07	; 7
    5fcc:	0f b6       	in	r0, 0x3f	; 63
    5fce:	f8 94       	cli
    5fd0:	de bf       	out	0x3e, r29	; 62
    5fd2:	0f be       	out	0x3f, r0	; 63
    5fd4:	cd bf       	out	0x3d, r28	; 61
    5fd6:	9e 83       	std	Y+6, r25	; 0x06
    5fd8:	8d 83       	std	Y+5, r24	; 0x05
    5fda:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    5fdc:	80 91 5a 06 	lds	r24, 0x065A
    5fe0:	90 91 5b 06 	lds	r25, 0x065B
    5fe4:	9a 83       	std	Y+2, r25	; 0x02
    5fe6:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5fe8:	80 91 56 06 	lds	r24, 0x0656
    5fec:	90 91 57 06 	lds	r25, 0x0657
    5ff0:	02 96       	adiw	r24, 0x02	; 2
    5ff2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    5ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    5ffa:	2f ef       	ldi	r18, 0xFF	; 255
    5ffc:	8f 3f       	cpi	r24, 0xFF	; 255
    5ffe:	92 07       	cpc	r25, r18
    6000:	81 f4       	brne	.+32     	; 0x6022 <prvAddCurrentTaskToDelayedList+0x60>
    6002:	8f 81       	ldd	r24, Y+7	; 0x07
    6004:	88 23       	and	r24, r24
    6006:	69 f0       	breq	.+26     	; 0x6022 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6008:	80 91 56 06 	lds	r24, 0x0656
    600c:	90 91 57 06 	lds	r25, 0x0657
    6010:	9c 01       	movw	r18, r24
    6012:	2e 5f       	subi	r18, 0xFE	; 254
    6014:	3f 4f       	sbci	r19, 0xFF	; 255
    6016:	83 eb       	ldi	r24, 0xB3	; 179
    6018:	96 e0       	ldi	r25, 0x06	; 6
    601a:	b9 01       	movw	r22, r18
    601c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <vListInsertEnd>
    6020:	43 c0       	rjmp	.+134    	; 0x60a8 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    6022:	29 81       	ldd	r18, Y+1	; 0x01
    6024:	3a 81       	ldd	r19, Y+2	; 0x02
    6026:	8d 81       	ldd	r24, Y+5	; 0x05
    6028:	9e 81       	ldd	r25, Y+6	; 0x06
    602a:	82 0f       	add	r24, r18
    602c:	93 1f       	adc	r25, r19
    602e:	9c 83       	std	Y+4, r25	; 0x04
    6030:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    6032:	e0 91 56 06 	lds	r30, 0x0656
    6036:	f0 91 57 06 	lds	r31, 0x0657
    603a:	8b 81       	ldd	r24, Y+3	; 0x03
    603c:	9c 81       	ldd	r25, Y+4	; 0x04
    603e:	93 83       	std	Z+3, r25	; 0x03
    6040:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    6042:	2b 81       	ldd	r18, Y+3	; 0x03
    6044:	3c 81       	ldd	r19, Y+4	; 0x04
    6046:	89 81       	ldd	r24, Y+1	; 0x01
    6048:	9a 81       	ldd	r25, Y+2	; 0x02
    604a:	28 17       	cp	r18, r24
    604c:	39 07       	cpc	r19, r25
    604e:	70 f4       	brcc	.+28     	; 0x606c <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6050:	80 91 9f 06 	lds	r24, 0x069F
    6054:	90 91 a0 06 	lds	r25, 0x06A0
    6058:	20 91 56 06 	lds	r18, 0x0656
    605c:	30 91 57 06 	lds	r19, 0x0657
    6060:	2e 5f       	subi	r18, 0xFE	; 254
    6062:	3f 4f       	sbci	r19, 0xFF	; 255
    6064:	b9 01       	movw	r22, r18
    6066:	0e 94 05 10 	call	0x200a	; 0x200a <vListInsert>
    606a:	1e c0       	rjmp	.+60     	; 0x60a8 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    606c:	40 91 9d 06 	lds	r20, 0x069D
    6070:	50 91 9e 06 	lds	r21, 0x069E
    6074:	80 91 56 06 	lds	r24, 0x0656
    6078:	90 91 57 06 	lds	r25, 0x0657
    607c:	9c 01       	movw	r18, r24
    607e:	2e 5f       	subi	r18, 0xFE	; 254
    6080:	3f 4f       	sbci	r19, 0xFF	; 255
    6082:	ca 01       	movw	r24, r20
    6084:	b9 01       	movw	r22, r18
    6086:	0e 94 05 10 	call	0x200a	; 0x200a <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    608a:	20 91 62 06 	lds	r18, 0x0662
    608e:	30 91 63 06 	lds	r19, 0x0663
    6092:	8b 81       	ldd	r24, Y+3	; 0x03
    6094:	9c 81       	ldd	r25, Y+4	; 0x04
    6096:	82 17       	cp	r24, r18
    6098:	93 07       	cpc	r25, r19
    609a:	30 f4       	brcc	.+12     	; 0x60a8 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    609c:	8b 81       	ldd	r24, Y+3	; 0x03
    609e:	9c 81       	ldd	r25, Y+4	; 0x04
    60a0:	90 93 63 06 	sts	0x0663, r25
    60a4:	80 93 62 06 	sts	0x0662, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    60a8:	27 96       	adiw	r28, 0x07	; 7
    60aa:	0f b6       	in	r0, 0x3f	; 63
    60ac:	f8 94       	cli
    60ae:	de bf       	out	0x3e, r29	; 62
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	cd bf       	out	0x3d, r28	; 61
    60b4:	cf 91       	pop	r28
    60b6:	df 91       	pop	r29
    60b8:	08 95       	ret

000060ba <memcpy>:
    60ba:	fb 01       	movw	r30, r22
    60bc:	dc 01       	movw	r26, r24
    60be:	02 c0       	rjmp	.+4      	; 0x60c4 <memcpy+0xa>
    60c0:	01 90       	ld	r0, Z+
    60c2:	0d 92       	st	X+, r0
    60c4:	41 50       	subi	r20, 0x01	; 1
    60c6:	50 40       	sbci	r21, 0x00	; 0
    60c8:	d8 f7       	brcc	.-10     	; 0x60c0 <memcpy+0x6>
    60ca:	08 95       	ret

000060cc <memset>:
    60cc:	dc 01       	movw	r26, r24
    60ce:	01 c0       	rjmp	.+2      	; 0x60d2 <memset+0x6>
    60d0:	6d 93       	st	X+, r22
    60d2:	41 50       	subi	r20, 0x01	; 1
    60d4:	50 40       	sbci	r21, 0x00	; 0
    60d6:	e0 f7       	brcc	.-8      	; 0x60d0 <memset+0x4>
    60d8:	08 95       	ret

000060da <_exit>:
    60da:	f8 94       	cli

000060dc <__stop_program>:
    60dc:	ff cf       	rjmp	.-2      	; 0x60dc <__stop_program>
